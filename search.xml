<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自定义注解实现系统启动时后端权限数据生成</title>
      <link href="/posts/c5539480.html"/>
      <url>/posts/c5539480.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-注解介绍">一. 注解介绍</h3><ol><li><p>注解Annotation是一种引用数据类型，编译之后也是生成.class类型的java文件</p><p>语法：修饰符 @interface 注解类型名</p><ul><li>注解可以出现在类上、方法上、属性上、甚至注解上等…</li><li>JDK中内置的注解@Override(复写)、@SuppressWarnings(忽略编译器的警告)等</li></ul></li><li><p>元注解</p><ul><li><p>元注解就是用来修饰注解的，是注解上的注解；常见的元注解有@Target、@Retention、@Documented、@Inherited.</p></li><li><p>@Target：表示当前注解使用在什么位置</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如<span class="number">1</span>：@<span class="keyword">Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">Target</span>内部的值使用枚举ElementType表示，表示的主要位置有：注解、构造方法、属性、局部变量、函数、包、参数和类(默认值)。</span><br><span class="line">例如<span class="number">2</span>：@<span class="keyword">Target</span>(&#123;ElementType.METHOD,ElementType.<span class="keyword">TYPE</span>&#125;)</span><br><span class="line">多个位置使用数组的写法</span><br></pre></td></tr></table></figure></li><li><p>@Retention：定义被它所标记的注解能保留多久</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Retention注解有一个属性value，是RetentionPolicy类型的，Enum RetentionPolicy是一个枚举类型</span><br><span class="line">这个枚举决定了Retention注解应该如何去保持，也可理解为Rentention搭配 RententionPolicy使用</span><br><span class="line">RetentionPolicy有<span class="number">3</span>个值：<span class="keyword">CLASS</span>，<span class="keyword">RUNTIME</span>，<span class="keyword">SOURCE</span></span><br><span class="line"></span><br><span class="line">@Retention(RetentionPolicy.<span class="keyword">SOURCE</span>)：注解只保留在源文件，当Java文件编译成<span class="keyword">class</span>文件的时候，注解被遗弃</span><br><span class="line">@Retention(RetentionPolicy.<span class="keyword">CLASS</span>)：注解被保留到<span class="keyword">class</span>文件，但jvm加载<span class="keyword">class</span>文件时候被遗弃，这是默认的生命周期</span><br><span class="line">@Retention(RetentionPolicy.<span class="keyword">RUNTIME</span>)：注解不仅被保存到<span class="keyword">class</span>文件中，jvm加载<span class="keyword">class</span>文件之后，仍然存在</span><br></pre></td></tr></table></figure></li><li><p>@Documented：加了这个注解的注解，在生成文档的时候，可以在文档中显示出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> A&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Inherited：加了这个注解的注解，能被继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> A&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="二-自定义权限注解，项目启动时扫描注解加权限">二. 自定义权限注解，项目启动时扫描注解加权限</h3><h4 id="1-定义注解">1. 定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><span class="comment">//注解能作用在方法上、类上</span></span><br><span class="line"><span class="comment">//Java中的反射：在运行时，动态获取类的各种信息的一种能力</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//可以通过反射读取注解</span></span><br><span class="line"><span class="meta">@Inherited</span><span class="comment">//可以被继承</span></span><br><span class="line"><span class="meta">@Documented</span><span class="comment">//可以被javadoc工具提取成文档，可以不加</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PreAuthorize &#123;</span><br><span class="line">    <span class="comment">//对应t_permission表中的sn</span></span><br><span class="line">    String <span class="title function_">sn</span><span class="params">()</span>; <span class="comment">//department:patchDel</span></span><br><span class="line"><span class="comment">//对应t_permission表中的name</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>; <span class="comment">//部门批量删除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后在方法或类上加了这个<code>@PreAuthorize</code> 注解，都会去执行一段业务代码【例如：添加权限到<code>t_promission</code>】，但是要先扫描这个注解，然后解析这个注解，再去执行相应的业务代码</p><h4 id="2-例子">2. 例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DepartmentService departmentService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptDTO 部门查询参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PreAuthorize(name = &quot;部门列表&quot;, sn = &quot;department:list&quot;)</span></span><br><span class="line"><span class="meta">@LogAnnotation(module = &quot;部门模块&quot;, operate = &quot;分页查询部门列表&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;查询部门列表&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">(<span class="meta">@RequestBody(required = false)</span> DeptDTO deptDTO)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> departmentService.list(deptDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-扫描注解加权限">3. 扫描注解加权限</h4><p>注解定义之后，需要扫描。就像业务代码中@Service注解，服务启动的时候就会去扫描，生成业务对象。并注入到Controller使用。如果启动的时候业务代码中没有添加@Service注解，启动会报错的。</p><h4 id="4-自定义的注解怎么扫描呢？而且要在服务器启动的时候自动扫描？">4. 自定义的注解怎么扫描呢？而且要在服务器启动的时候自动扫描？</h4><ul><li><p>可以通过Web三大组件：Servlet、过滤器Filter、监听器Listenter</p></li><li><p>在SpringBoot项目中，如果想自定义Servlet、Filter、Listenter，我们只需要完成两个步骤：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 自己写一个类实现父接口或者继承父类：Spring提供的的Servlet、<span class="keyword">Filter</span>、Listenter，并在实现类上打上注解</span><br><span class="line"><span class="number">1.1</span>. 自定义servlet：继承HttpServlet，打注解<span class="variable">@WebServlet</span></span><br><span class="line">  <span class="number">1.2</span>. 自定义<span class="keyword">Filter</span>：实现<span class="keyword">Filter</span>，打注解<span class="variable">@WebFilter</span></span><br><span class="line"><span class="number">1.3</span>. 自定义Listenter：实现ServletContextListener，打注解<span class="variable">@WebListener</span> </span><br><span class="line">注意：SpringBoot项目中没有web.xml，不能通过xml配置实现。但是可以通过注解</span><br><span class="line"><span class="number">2.</span> 交给容器扫描：在启动类上打注解：<span class="variable">@ServletComponentScan</span>扫描Servlet、<span class="keyword">Filter</span>、Listenter的包即可</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-权限注解扫描监听器">5 .权限注解扫描监听器</h4><p>监听器：监听四大作用域的变化和属性的变更<br>application的类型：<code>ServletContext</code> - 这个对象会在服务器启动的时候自动生成，而且是唯一一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.system.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.coderyeah.system.service.PermissionScanService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span><span class="comment">//申明自定义的web监听器，被容器注册和使用</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionScanInitListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IPermissionScanService permissionScanService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//spring容器初始化结束之后被调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        <span class="comment">//这里面的业务随着接口的变多，可能执行时间会非常久，影响性能。影响主线程的启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;<span class="comment">//不用主线程去执行，用一个新的线程去执行</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//可以在这里扫描我们自定义的注解@PreAuthorize，然后将信息存储到t_permission表</span></span><br><span class="line">                <span class="comment">//这样就无需手动录入信息到权限t_permission表了</span></span><br><span class="line">                log.info(<span class="string">&quot;权限初始化开始******************************************&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;权限初始化开始******************************************&quot;</span>);</span><br><span class="line">                permissionScanService.scanPermission();</span><br><span class="line">                System.out.println(<span class="string">&quot;权限初始化结束******************************************&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//容器销毁的时候执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-启动类">6. 启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;io.coderyeah.*.mapper&quot;)</span></span><br><span class="line"><span class="comment">//加载Listener - 本来监听器只要服务器一启动就会执行，但是SpringBoot项目中是通过启动类开启服务的，所以要加这个注解去加载listener，listener才会起作用</span></span><br><span class="line"><span class="meta">@ServletComponentScan(value = &#123;&quot;io.coderyeah.system.listener&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PetHomeApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PetHomeApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试：启动项目就会打印输出信息</span></span><br></pre></td></tr></table></figure><h4 id="7-业务接口">7. 业务接口</h4><p>此业务接口专门用来解析注解<code>@PreAuthorize(name = &quot;部门列表&quot;,sn= &quot;department:list&quot;)</code>和注解上的参数，并获取出来添加到权限表t_permission。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.找包 - 找类 - 找方法 - 找注解</span></span><br><span class="line"><span class="comment">//2.解析这个注解拿到：sn,name</span></span><br><span class="line"><span class="comment">//3.当前方法的url地址</span></span><br><span class="line"><span class="comment">//4.创建一个Permisson对象 - 添加到数据库</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.system.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.basic.annotation.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.basic.util.ClassUtils;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.system.domain.Permission;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.system.mapper.PermissionMapper;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.system.service.PermissionService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coderyeah</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 针对表【t_permission】的数据库操作Service实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2022-09-21 11:00:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;PermissionMapper, Permission&gt; <span class="keyword">implements</span> <span class="title class_">PermissionService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PKG_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;io.coderyeah.&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PKG_SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;.controller&quot;</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionMapper permissionMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scanPermission</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取 io.coderyeah 下面所有的模块目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getResource(<span class="string">&quot;/&quot;</span>).getPath() + <span class="string">&quot;/io/coderyeah/&quot;</span>;</span><br><span class="line">        <span class="comment">// 当前包路径下的文件对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="comment">// 过滤出当前包下所有目录的文件数组</span></span><br><span class="line">        File[] files = file.listFiles(<span class="keyword">new</span> <span class="title class_">FileFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File file)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> file.isDirectory();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取io.coderyeah.*.controller里面所有的类</span></span><br><span class="line">        Set&lt;Class&gt; clazzes = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">assert</span> files != <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (File fileTmp : files) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;===============权限注解解析：获取所有的包==============&quot;</span>);</span><br><span class="line">            System.out.println(fileTmp.getName());</span><br><span class="line">            <span class="comment">// 将所有类对象放进set集合</span></span><br><span class="line">            clazzes.addAll(ClassUtils.getClasses(PKG_PREFIX + fileTmp.getName() + PKG_SUFFIX));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历类对象集合</span></span><br><span class="line">        <span class="keyword">for</span> (Class clazz : clazzes) &#123;</span><br><span class="line">            <span class="comment">// 获取当前类的所有方法</span></span><br><span class="line">            Method[] methods = clazz.getMethods();</span><br><span class="line">            <span class="comment">// 判断是否有方法存在</span></span><br><span class="line">            <span class="keyword">if</span> (methods == <span class="literal">null</span> || methods.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历当前类中所有的方法</span></span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                <span class="comment">// 获取接口执行路径</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> getUri(clazz, method);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">PreAuthorize</span> <span class="variable">preAuthorizeAnno</span> <span class="operator">=</span> method.getAnnotation(PreAuthorize.class);</span><br><span class="line">                    <span class="keyword">if</span> (preAuthorizeAnno == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 跳出当前循环</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> preAuthorizeAnno.name();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">permissionSn</span> <span class="operator">=</span> preAuthorizeAnno.sn();</span><br><span class="line">                    <span class="type">Permission</span> <span class="variable">permissionTmp</span> <span class="operator">=</span> permissionMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Permission&gt;().eq(Permission::getSn, permissionSn));</span><br><span class="line">                    <span class="comment">//如果不存在就添加</span></span><br><span class="line">                    <span class="keyword">if</span> (permissionTmp == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">Permission</span> <span class="variable">permission</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permission</span>();</span><br><span class="line">                        permission.setName(name);       <span class="comment">//t_permission表中的权限名</span></span><br><span class="line">                        permission.setSn(permissionSn); <span class="comment">//t_permission表中的权限编号</span></span><br><span class="line">                        permission.setUrl(uri);           <span class="comment">//t_permission表中的权限路径</span></span><br><span class="line">                        permissionMapper.insert(permission);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//如果存在就修改</span></span><br><span class="line">                        permissionTmp.setName(name);</span><br><span class="line">                        permissionTmp.setSn(permissionSn);</span><br><span class="line">                        permissionTmp.setUrl(uri);</span><br><span class="line">                        permissionMapper.updateById(permissionTmp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取t_permission表中的url  //@RequestMapping(&quot;/department&quot;) //@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getUri</span><span class="params">(Class clazz, Method method)</span> &#123;</span><br><span class="line">        <span class="comment">//获取类上的请求路径：/department</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取当前类的@RequestMapping注解</span></span><br><span class="line">        <span class="type">Annotation</span> <span class="variable">annotation</span> <span class="operator">=</span> clazz.getAnnotation(RequestMapping.class);</span><br><span class="line">        <span class="comment">// 判断注解是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 类型强转</span></span><br><span class="line">            <span class="type">RequestMapping</span> <span class="variable">requestMapping</span> <span class="operator">=</span> (RequestMapping) annotation;</span><br><span class="line">            <span class="comment">// 获取@RequestMapping注解的数组值</span></span><br><span class="line">            String[] values = requestMapping.value();</span><br><span class="line">            <span class="comment">// 判断值是否为空</span></span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 将请求路径赋值给classPath</span></span><br><span class="line">                classPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(classPath) &amp;&amp; !classPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    classPath = <span class="string">&quot;/&quot;</span> + classPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以下是获取方法上的请求路径：/&#123;id&#125;</span></span><br><span class="line">        <span class="type">GetMapping</span> <span class="variable">getMapping</span> <span class="operator">=</span> method.getAnnotation(GetMapping.class);</span><br><span class="line">        <span class="comment">// 方法上的请求路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (getMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取注解上的值</span></span><br><span class="line">            String[] values = getMapping.value();</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                methodPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(methodPath) &amp;&amp; !methodPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    methodPath = <span class="string">&quot;/&quot;</span> + methodPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">PostMapping</span> <span class="variable">postMapping</span> <span class="operator">=</span> method.getAnnotation(PostMapping.class);</span><br><span class="line">        <span class="keyword">if</span> (postMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">            String[] values = postMapping.value();</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                methodPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(methodPath) &amp;&amp; !methodPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    methodPath = <span class="string">&quot;/&quot;</span> + methodPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">DeleteMapping</span> <span class="variable">deleteMapping</span> <span class="operator">=</span> method.getAnnotation(DeleteMapping.class);</span><br><span class="line">        <span class="keyword">if</span> (deleteMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">            String[] values = deleteMapping.value();</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                methodPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(methodPath) &amp;&amp; !methodPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    methodPath = <span class="string">&quot;/&quot;</span> + methodPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">PutMapping</span> <span class="variable">putMapping</span> <span class="operator">=</span> method.getAnnotation(PutMapping.class);</span><br><span class="line">        <span class="keyword">if</span> (putMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">            String[] values = putMapping.value();</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                methodPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(methodPath) &amp;&amp; !methodPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    methodPath = <span class="string">&quot;/&quot;</span> + methodPath;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">PatchMapping</span> <span class="variable">patchMapping</span> <span class="operator">=</span> method.getAnnotation(PatchMapping.class);</span><br><span class="line">        <span class="keyword">if</span> (patchMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">            String[] values = patchMapping.value();</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                methodPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(methodPath) &amp;&amp; !methodPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    methodPath = <span class="string">&quot;/&quot;</span> + methodPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">RequestMapping</span> <span class="variable">requestMapping</span> <span class="operator">=</span> method.getAnnotation(RequestMapping.class);</span><br><span class="line">        <span class="keyword">if</span> (requestMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">            String[] values = requestMapping.value();</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                methodPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(methodPath) &amp;&amp; !methodPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    methodPath = <span class="string">&quot;/&quot;</span> + methodPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classPath + methodPath;  <span class="comment">// /department/&#123;id&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getPermissionSn</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\[(.*?)]&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?&lt;=\\()[^\\)]+&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(value);</span><br><span class="line">        <span class="type">String</span> <span class="variable">permissionSn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (m.find()) &#123;</span><br><span class="line">            permissionSn = m.group(<span class="number">0</span>).substring(<span class="number">1</span>, m.group().length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> permissionSn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-工具类：ClassUtils-java">8. 工具类：ClassUtils.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassUtils</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从传入的包中获取所有的类的字节码对象:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LEIYU</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getClasses(String pack) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个class类的集合</span></span><br><span class="line">Set&lt;Class&lt;?&gt;&gt; classes = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;Class&lt;?&gt;&gt;();</span><br><span class="line"><span class="comment">// 是否循环迭代</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">recursive</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 获取包的名字 并进行替换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> pack;</span><br><span class="line"><span class="type">String</span> <span class="variable">packageDirName</span> <span class="operator">=</span> packageName.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"><span class="comment">// 定义一个枚举的集合 并进行循环来处理这个目录下的things</span></span><br><span class="line">Enumeration&lt;URL&gt; dirs;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);</span><br><span class="line"><span class="comment">// 循环迭代下去</span></span><br><span class="line"><span class="keyword">while</span> (dirs.hasMoreElements()) &#123;</span><br><span class="line"><span class="comment">// 获取下一个元素</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> dirs.nextElement();</span><br><span class="line"><span class="comment">// 得到协议的名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> url.getProtocol();</span><br><span class="line"><span class="comment">// 如果是以文件的形式保存在服务器上</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;file&quot;</span>.equals(protocol)) &#123;</span><br><span class="line"><span class="comment">// 获取包的物理路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> URLDecoder.decode(url.getFile(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 以文件的方式扫描整个包下的文件 并添加到集合中</span></span><br><span class="line">findAndAddClassesInPackageByFile(packageName, filePath, recursive, classes);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> classes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.以文件的形式来获取包下的所有Class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以文件的形式来获取包下的所有Class</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> packagePath</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> recursive</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findAndAddClassesInPackageByFile</span><span class="params">(String packageName, String packagePath, <span class="keyword">final</span> <span class="type">boolean</span> recursive,</span></span><br><span class="line"><span class="params">Set&lt;Class&lt;?&gt;&gt; classes)</span> &#123;</span><br><span class="line"><span class="comment">// 获取此包的目录 建立一个File</span></span><br><span class="line"><span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(packagePath);</span><br><span class="line"><span class="comment">// 如果不存在或者 也不是目录就直接返回</span></span><br><span class="line"><span class="keyword">if</span> (!dir.exists() || !dir.isDirectory()) &#123;</span><br><span class="line"><span class="comment">// log.warn(&quot;用户定义包名 &quot; + packageName + &quot; 下没有任何文件&quot;);</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果存在 就获取包下的所有文件 包括目录</span></span><br><span class="line">File[] dirfiles = dir.listFiles(<span class="keyword">new</span> <span class="title class_">FileFilter</span>() &#123;</span><br><span class="line"><span class="comment">// 自定义过滤规则 如果可以循环(包含子目录) 或则是以.class结尾的文件(编译好的java类文件)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File file)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (recursive &amp;&amp; file.isDirectory()) || (file.getName().endsWith(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 循环所有文件</span></span><br><span class="line"><span class="keyword">for</span> (File file : dirfiles) &#123;</span><br><span class="line"><span class="comment">// 如果是目录 则继续扫描</span></span><br><span class="line"><span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">findAndAddClassesInPackageByFile(packageName + <span class="string">&quot;.&quot;</span> + file.getName(), file.getAbsolutePath(), recursive,</span><br><span class="line">classes);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果是java类文件 去掉后面的.class 只留下类名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> file.getName().substring(<span class="number">0</span>, file.getName().length() - <span class="number">6</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 添加到集合中去</span></span><br><span class="line"><span class="comment">// classes.add(Class.forName(packageName + &#x27;.&#x27; +</span></span><br><span class="line"><span class="comment">// className));</span></span><br><span class="line"><span class="comment">// 经过回复同学的提醒，这里用forName有一些不好，会触发static方法，没有使用classLoader的load干净</span></span><br><span class="line">classes.add(</span><br><span class="line">Thread.currentThread().getContextClassLoader().loadClass(packageName + <span class="string">&#x27;.&#x27;</span> + className));</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// log.error(&quot;添加用户自定义视图类错误 找不到此类的.class文件&quot;);</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/posts/46563.html"/>
      <url>/posts/46563.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-简介-happy">一. 简介:happy:</h3><ol><li><p>? 通配符匹配文件名中的 0 个或 1 个字符，而 * 通配符匹配零个或多个字符。</p></li><li><p>正则表达式在线测试工具：(<a href="https://c.runoob.com/front-end/854/">https://c.runoob.com/front-end/854/</a>)</p></li><li><p>例子：像 <code>data(\w)?\.dat</code> 这样的模式将查找下列文件：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data.dat</span><br><span class="line">data1.dat</span><br><span class="line">data2.dat</span><br><span class="line">datax.dat</span><br><span class="line">dataN.dat</span><br></pre></td></tr></table></figure></li><li><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220715155152.png" alt="image-20220715155152077"></p><ul><li><code>^</code> 为匹配输入字符串的开始位置。</li><li><code>[0-9]+</code>匹配多个数字， <code>[0-9]</code> 匹配单个数字，<code>+</code> 匹配一个或者多个。</li><li><code>abc$</code>匹配字母 <code>abc</code> 并以 <code>abc</code> 结尾，<code>$</code> 为匹配输入字符串的结束位置。</li></ul></li><li><p>例子①：我们在写用户注册表单时，只允许用户名包含字符、数字、下划线和连接字符 -，并设置用户名的长度，我们就可以使用以下正则表达式来设定。（<code>^[a-z0-9_-]&#123;3,20&#125;$</code>）</p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220715160155.png" alt="image-20220715160155236" style="zoom: 50%;" /></li><li><p>例子②</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/^[0-9]+abc$/</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">match</span>(patt1));</span><br></pre></td></tr></table></figure><p>匹配结果是：<code>123.abc</code></p></li></ol><h3 id="二-语法">二. 语法</h3><ol><li><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p></li><li><p><code>runoo+b</code>，可以匹配 <strong><code>runoob</code>、<code>runooob</code>、<code>runoooooob</code></strong> 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。</p></li><li><p><code>runoo*b</code>，可以匹配 <strong><code>runob</code>、<code>runoob</code>、<code>runoooooob</code></strong> 等，* 号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</p></li><li><p><code>colou?r</code> 可以匹配 <strong><code>color</code></strong> 或者 <strong><code>colour</code></strong>，? 问号代表前面的字符最多只可以出现一次（0次或1次）。</p></li><li><h4 id="普通字符">普通字符</h4><ul><li><p><code>[ABC]</code>: 匹配 […] 中的所有字符，例如 <code>[aeiou]</code> 匹配字符串 “<code>google runoob taobao</code>” 中所有的 e o u a 字母。</p></li><li><p><code>[^ABC]</code>: 匹配除了 […] 中字符的所有字符，例如<code>[^aeiou]</code>匹配字符串 “<code>google runoob taobao</code>” 中除了 e o u a 字母的所有字母。</p></li><li><p><code>[A-Z]</code>: <code>[A-Z]</code> 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</p></li><li><p><code>.</code>: 匹配除换行符（\n、\r）之外的任何单个字符，相等于 <code>[^\n\r]</code>。</p></li><li><p><code>[\s\S]</code>: 匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;google runoob taobao\nRUnoob\ntaobao&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/[\s\S]/g</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">match</span>(patt1));</span><br></pre></td></tr></table></figure><p>结果：<code>g,o,o,g,l,e, ,r,u,n,o,o,b, ,t,a,o,b,a,o, ,R,U,n,o,o,b, ,t,a,o,b,a,o</code></p></li><li><p><code>[\w]</code>: 匹配字母、数字、下划线。等价于 <code>[A-Za-z0-9_]</code></p></li></ul></li><li><h4 id="特殊字符">特殊字符</h4><ul><li>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 <code>runoo*b</code> 中的 *，简单的说就是表示任何字符串的意思。如果要查找字符串中的 * 符号，则需要对 * 进行转义，即在其前加一个 \，<code>runo\*ob</code> 匹配字符串 <strong><code>runo\*ob</code></strong>。</li></ul></li><li><h4 id="限定符">限定符</h4><table><thead><tr><th>*</th><th style="text-align:center">匹配前面的子表达式零次或多次。例如，<code>zo*</code> 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</th></tr></thead><tbody><tr><td>+</td><td style="text-align:center">匹配前面的子表达式一次或多次。例如，<code>'zo+'</code> 能匹配 <code>&quot;zo</code>&quot; 以及 <code>&quot;zoo&quot;</code>，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>?</td><td style="text-align:center">匹配前面的子表达式零次或一次。例如，“do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “<code>doxy</code>” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td>{n}</td><td style="text-align:center">n 是一个非负整数。匹配确定的 n 次。例如，‘o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td style="text-align:center">n 是一个非负整数。至少匹配n 次。例如，‘o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “<code>foooood</code>” 中的所有 o。‘o{1,}’ 等价于 ‘o+’。‘o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td>{n,m}</td><td style="text-align:center">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，“o{1,3}” 将匹配 “<code>fooooood</code>” 中的前三个 o。‘o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table></li></ol><p><code>*</code>和 <code>+</code> 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 <code>?</code> 就可以实现非贪婪或最小匹配.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>RUNOOB-菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>贪婪</strong>：<code>/&lt;.*&gt;/</code>===&gt;&gt;&gt;匹配所有内容<code>&lt;h1&gt;RUNOOB-菜鸟教程&lt;/h1&gt;</code></li><li><strong>非贪婪</strong>：<code>/&lt;.*?&gt;/</code>===&gt;&gt;&gt;<code>&lt;h1&gt;</code>或者<code>/&lt;\w+?&gt;/</code>===&gt;&gt;&gt;<code>&lt;h1&gt;</code></li><li>通过在 *、+ 或 ? 限定符之后放置 ?，该表达式从&quot;贪婪&quot;表达式转换为&quot;非贪婪&quot;表达式或者最小匹配。</li></ul><ol start="8"><li><strong>定位符</strong></li></ol><ul><li>定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。</li><li>下面的表达式匹配单词 Chapter 的开头三个字符，因为这三个字符出现在单词边界后面：<code>/\bCha/</code></li><li>下面的表达式匹配单词 Chapter 中的字符串 <code>ter</code>，因为它出现在单词边界的前面：<code>/ter\b/</code></li><li>下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：<code>\Bapt</code></li><li>不匹配 Chapter 中的 <code>Cha</code>：<code>/\Bcha/</code></li></ul><ol start="9"><li><p><strong>例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;https://www.runoob.com:80/html/html-tutorial.html&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/</span>;</span><br><span class="line">arr = str.<span class="title function_">match</span>(patt1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> ; i++) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(arr[i]);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三行代码 <code>str.match(patt1)</code> 返回一个数组，实例中的数组包含 5 个元素，索引 0 对应的是整个字符串，索引 1 对应第一个匹配符（括号内），以此类推。</li><li>第一个括号子表达式包含 <strong><code>https</code></strong></li><li>第二个括号子表达式包含 <strong><code>www.runoob.com</code></strong></li><li>第三个括号子表达式包含 <strong>:80</strong></li><li>第四个括号子表达式包含 <strong><code>/html/html-tutorial.html</code></strong></li></ul></li></ol><h3 id="三-修饰符-pattern-flags">三. 修饰符 <code>/pattern/flags</code></h3><table><thead><tr><th>i</th><th>ignore - 不区分大小写</th><th style="text-align:left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</th></tr></thead><tbody><tr><td>g</td><td>global - 全局匹配</td><td style="text-align:left">查找所有的匹配项。</td></tr><tr><td>m</td><td>multi line - 多行匹配</td><td style="text-align:left">使边界字符 ^ 和 $ 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td>s</td><td>特殊字符圆点 . 中包含换行符 \n</td><td style="text-align:left">默认情况下的圆点 . 是匹配除换行符 \n 之外的任何字符，加上 s 修饰符之后, . 中包含换行符 \n。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Google runoob taobao runoob&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> n1=str.<span class="title function_">match</span>(<span class="regexp">/runoob/</span>);   <span class="comment">// 查找第一次匹配项 runoob</span></span><br><span class="line"><span class="keyword">var</span> n2=str.<span class="title function_">match</span>(<span class="regexp">/runoob/g</span>);  <span class="comment">// 查找所有匹配项 runoob,runoob</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Google runoob taobao RUNoob&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> n1=str.<span class="title function_">match</span>(<span class="regexp">/runoob/g</span>);   <span class="comment">// 区分大小写 runoob</span></span><br><span class="line"><span class="keyword">var</span> n2=str.<span class="title function_">match</span>(<span class="regexp">/runoob/gi</span>);  <span class="comment">// 不区分大小写 runoob,RUNoob</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;runoobgoogle\ntaobao\nrunoobweibo&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n1=str.<span class="title function_">match</span>(<span class="regexp">/^runoob/g</span>);   <span class="comment">// 匹配一个 runoob</span></span><br><span class="line"><span class="keyword">var</span> n2=str.<span class="title function_">match</span>(<span class="regexp">/^runoob/gm</span>);  <span class="comment">// 多行匹配 runoob,runoob</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;google\nrunoob\ntaobao&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n1=str.<span class="title function_">match</span>(<span class="regexp">/google./</span>);   <span class="comment">// 没有使用 s，无法匹配\n. </span></span><br><span class="line"><span class="keyword">var</span> n2=str.<span class="title function_">match</span>(<span class="regexp">/runoob./</span>s);  <span class="comment">// 使用 s，匹配\n. runoob</span></span><br></pre></td></tr></table></figure><p><strong>匹配邮箱</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcd 112306@qq.com 1234&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/\b[\w.%+-]+@[\w.-]+\.[a-zA-Z]&#123;2,6&#125;\b/g</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">match</span>(patt1)); <span class="comment">//112306@qq.com</span></span><br></pre></td></tr></table></figure><h3 id="四-实例">四. 实例</h3><p>ONE:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc123-_def&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/[a-zA-Z0-9_-]+/</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">match</span>(patt));<span class="comment">//abc123-_def</span></span><br></pre></td></tr></table></figure><p>TWO:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc123def&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;abc123_def&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/[a-zA-Z0-9_]+/</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">match</span>(patt));<span class="comment">//abc123def</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str2.<span class="title function_">match</span>(patt));<span class="comment">//abc123_def</span></span><br></pre></td></tr></table></figure><p>THREE: 匹配所有 <code>img</code> 标签：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">&lt;</span>img.<span class="operator">*</span><span class="operator">?</span>src<span class="operator">=</span><span class="string">&quot;(.*?)&quot;</span>.<span class="operator">*</span><span class="operator">?</span><span class="punctuation">\</span><span class="operator">/</span><span class="operator">?</span><span class="operator">&gt;</span><span class="operator">/</span>gi</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220715194304.jpg" alt="2" style="zoom:50%;" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>怎么实现对登录用户访问权限的拦截</title>
      <link href="/posts/9a421b.html"/>
      <url>/posts/9a421b.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-自定义权限注解">一.  自定义权限注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PreAuthorize &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">sn</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-在接口方法上使用注解">二. 在接口方法上使用注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptDTO 部门查询参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PreAuthorize(name = &quot;部门列表&quot;, sn = &quot;department:list&quot;)</span></span><br><span class="line"><span class="meta">@LogAnnotation(module = &quot;部门模块&quot;, operate = &quot;分页查询部门列表&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;查询部门列表&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">(<span class="meta">@RequestBody(required = false)</span> DeptDTO deptDTO)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> departmentService.list(deptDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-登录拦截器">三. 登录拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.basic.annotation.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.basic.constant.Constants;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.org.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.user.domain.LoginInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 静态资源放行</span></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//3.如果有token，通过token获取redis的登录信息</span></span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">loginInfo</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(Constants.LOGIN_TOKEN + token); <span class="comment">// LoginInfo对象</span></span><br><span class="line">            <span class="keyword">if</span> (loginInfo != <span class="literal">null</span>) &#123;<span class="comment">//登录成功，而且没有过期</span></span><br><span class="line">                <span class="comment">//5.如果登录信息不为null - 放行 + 刷新过期时间[重新添加到redis]</span></span><br><span class="line">                stringRedisTemplate.opsForValue().set(Constants.LOGIN_TOKEN + token, loginInfo, <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">LoginInfo</span> <span class="variable">info</span> <span class="operator">=</span> JSON.parseObject(loginInfo, LoginInfo.class);</span><br><span class="line">                <span class="keyword">if</span> (info.getType() == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 前端用户直接放行</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 后端管理员 需要判断权限</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line">                <span class="comment">// 获取访问的方法上的权限注解</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">PreAuthorize</span> <span class="variable">p</span> <span class="operator">=</span> handlerMethod.getMethodAnnotation(PreAuthorize.class);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == p) &#123;</span><br><span class="line">                    <span class="comment">// 此方法上没有该注解直接放行 公用资源</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 需要判断该登录用户是否具备此接口的操作权限</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">sn</span> <span class="operator">=</span> p.sn();</span><br><span class="line">                <span class="comment">// 查询该登录用户的所有权限集合</span></span><br><span class="line">                List&lt;String&gt; ownPermissions = employeeMapper.getPermissionSnByLoginInfoId(info.getId());</span><br><span class="line">                <span class="keyword">if</span> (ownPermissions.contains(sn)) &#123;</span><br><span class="line">                    <span class="comment">// 包含该权限</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 没有权限返回json信息给客户端</span></span><br><span class="line">                resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">                writer.print(<span class="string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;noPermission\&quot;&#125;&quot;</span>);</span><br><span class="line">                writer.close();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;noLogin\&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-查询当前登录用户的所有权限涉及到多张表">四. 查询当前登录用户的所有权限涉及到多张表</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPermissionSnByLoginInfoId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">    select tp.sn</span><br><span class="line">    from t_employee te</span><br><span class="line">             join t_employee_role ter on te.id = ter.employee_id</span><br><span class="line">             join t_role tr on ter.role_id = tr.id</span><br><span class="line">             join t_role_permission trp on tr.id = trp.role_id</span><br><span class="line">             join t_permission tp on tp.id = trp.permission_id</span><br><span class="line">    where te.logininfo_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220923112147.png" alt="网络传输数据安全"></p><h3 id="五-前端后置拦截器处理">五. 前端后置拦截器处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//======================axios的后置拦截器【处理后台登录拦截的结果】====================//</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//后端响应的是没有登录的信息</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === res.<span class="property">data</span>.<span class="property">success</span> &amp;&amp; <span class="string">&quot;noLogin&quot;</span> === res.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;loginInfo&quot;</span>);</span><br><span class="line">        router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === res.<span class="property">data</span>.<span class="property">success</span> &amp;&amp; <span class="string">&quot;noPermission&quot;</span> === res.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">      <span class="title class_">Message</span>.<span class="title function_">info</span>(<span class="string">&#x27;您没有访问权限&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//======================axios的后置拦截器【处理后台登录拦截的结果】====================//</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在maven中使用RocketMQ发布消息和消费消息</title>
      <link href="/posts/75f7075c.html"/>
      <url>/posts/75f7075c.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-创建maven项目并导入依赖">一. 创建maven项目并导入依赖</h3><p><strong>PS: 需要自行安装RocketMQ并启动服务</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二-同步消息">二. 同步消息</h3><p>同步发送是指发送的消息需要<strong>等待获取到返回结果</strong>后再执行第二条消息发送,采用的是一种阻塞模型，安全，但效率会降低一丢丢。</p><ol><li><h4 id="生产者">生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 9:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123; <span class="comment">// 生产者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建生产者 </span></span><br><span class="line">        <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;producer-demo&quot;</span>);</span><br><span class="line">        <span class="comment">// 连接服务</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">        producer.start();</span><br><span class="line"><span class="comment">// 消息参数依次是主题、标签、发送的消息</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;demo-topic&quot;</span>, <span class="string">&quot;demo&quot;</span>, <span class="string">&quot;aaa I am a monster! nice to see ya!!!&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="type">SendResult</span> <span class="variable">result</span> <span class="operator">=</span> producer.send(message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"><span class="comment">// 关闭生产者</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="消费者">消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 9:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;<span class="comment">// 消费者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建消费者</span></span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;demo-consumer&quot;</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">        <span class="comment">// 订阅需要消费的主题和标签下的消息</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;demo-topic&quot;</span>, <span class="string">&quot;demo&quot;</span>);</span><br><span class="line">        <span class="comment">// 实现消息监听接口</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    list.forEach(l -&gt; &#123;</span><br><span class="line">                        <span class="comment">// 获取消息</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;body:&quot;</span> +<span class="keyword">new</span> <span class="title class_">String</span>(l.getBody()));</span><br><span class="line">                        System.out.println(<span class="string">&quot;context:&quot;</span> + consumeConcurrentlyContext);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息消息启动成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="三-异步消息">三. 异步消息</h3><p>异步消息是指发送的消息到MQ队列不用等待其返回结果，继续发送其它消息，效率快。</p><ol><li><h4 id="生产者-2">生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendCallback;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 9:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;<span class="comment">// 异步生产者发送消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;producer-demo&quot;</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;demo-topic&quot;</span>, <span class="string">&quot;demo-async&quot;</span>, <span class="string">&quot;this is a async message and lqs is freaking awesome!&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// 设置延时(过了一定时间再发送到MQ对列) 5秒</span></span><br><span class="line">      <span class="comment">//  message.setDelayTimeLevel(2);// 指定延迟等级 比如2 表示5秒</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 异步回调获取返回结果</span></span><br><span class="line">        producer.send(message, <span class="keyword">new</span> <span class="title class_">SendCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult sendResult)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;发送结果:&quot;</span>+sendResult);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;失败原因:&quot;</span>+throwable.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="消费者-2">消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 9:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;demo-consumer&quot;</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">        consumer.subscribe(<span class="string">&quot;demo-topic&quot;</span>, <span class="string">&quot;demo-async&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现消息监听接口</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    list.forEach(l -&gt; &#123;</span><br><span class="line">                        <span class="comment">// 获取消息</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;body:&quot;</span> +<span class="keyword">new</span> <span class="title class_">String</span>(l.getBody()));</span><br><span class="line">                        System.out.println(<span class="string">&quot;context:&quot;</span> + consumeConcurrentlyContext);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">// 返回状态表示消息已经被消费，不可再次消费</span></span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// 消费失败 可再次消费</span></span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息消息启动成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="四-事务消息">四. 事务消息</h3><ol><li><h4 id="事务监听">事务监听</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.LocalTransactionState;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.TransactionListener;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 10:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTransactionCheckListener</span> <span class="keyword">implements</span> <span class="title class_">TransactionListener</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o       事物消息携带的额外参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LocalTransactionState <span class="title function_">executeLocalTransaction</span><span class="params">(Message message, Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;事务发布消息:&quot;</span> + message);</span><br><span class="line">            System.out.println(<span class="string">&quot;事务参数（额外数据）:&quot;</span> + o);</span><br><span class="line">            <span class="comment">// 事务返回状态</span></span><br><span class="line">            <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LocalTransactionState <span class="title function_">checkLocalTransaction</span><span class="params">(MessageExt messageExt)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="生成者">生成者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.TransactionMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 10:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;<span class="comment">// 事务消息生产者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.创建生产者对象</span></span><br><span class="line">        <span class="type">TransactionMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionMQProducer</span>(<span class="string">&quot;trans-demo&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接NameServer</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">        <span class="comment">//3.创建线程</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        producer.setExecutorService(executorService);</span><br><span class="line">        <span class="comment">//4.指定线程的事物监听</span></span><br><span class="line">        producer.setTransactionListener(<span class="keyword">new</span> <span class="title class_">MyTransactionCheckListener</span>());</span><br><span class="line">        <span class="comment">//3.启动</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;demo-topic&quot;</span>, <span class="string">&quot;demo-trans&quot;</span>, <span class="string">&quot;this is a trans message and lqs is freaking awesome!&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        producer.sendMessageInTransaction(message, <span class="string">&quot;事务demo参数&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="消费者-3">消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 9:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;demo-trans&quot;</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">        consumer.subscribe(<span class="string">&quot;demo-topic&quot;</span>, <span class="string">&quot;demo-trans&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现消息监听接口</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    list.forEach(l -&gt; &#123;</span><br><span class="line">                        <span class="comment">// 获取消息</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;body:&quot;</span> +<span class="keyword">new</span> <span class="title class_">String</span>(l.getBody()));</span><br><span class="line">                        System.out.println(<span class="string">&quot;context:&quot;</span> + consumeConcurrentlyContext);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息消息启动成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="五-RocketMQ事务消息工作流程">五. <code>RocketMQ</code>事务消息工作流程</h3><ul><li>事务消息解决的就是，事务发送方执行本地事务和事务消息的原子性。</li></ul><ol><li><p>首先事务发起方:往MQ中发送一个事务消息-half半消息(准备消息)，该消息不可被消费;</p></li><li><p>然后事务发送方执行本地事务，并发送commit给MQ，如果是执行失败就会发送rollback给MQ;</p></li><li><p>MQ搜到commit指令，代表本地事务执行成功，之前的half消息就会成为可以被commit提交的消</p><p>息，否则就是Rollback消息;</p></li><li><p>事务参与者，也就是消费者会消费这个消息，然后执行相关的逻辑处理。如果是Rollback消息就不</p><p>会被消费，而是丢弃;</p></li><li><p>如果事务参与方并没有发送commit或者rollback指令MQ，MQ回调用事务发送方的回到方法来检</p><p>查，我们需要去实现这个本地事务检查接口，通过返回commit或者rollback来告知MQ本地事务是</p><p>否执行成功。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用java比较两个二叉搜索树是否等价</title>
      <link href="/posts/c73d9d2.html"/>
      <url>/posts/c73d9d2.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-定义树的的节点">一. 定义树的的节点</h3><p>​    不同二叉树的叶节点上可以保存相同的值序列。例如，以下两个二叉树都保存了序列 <code>1，1，2，3，5，8，13</code>。</p><p><img src="../blog/coderyeah/source/_posts/img/tree.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wedoo.coderyeah.<span class="keyword">module</span>.iot.algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/6 15:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123; <span class="comment">// 比较两个二叉搜索树是否等价</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode Left; <span class="comment">// 左边的树结构</span></span><br><span class="line">    <span class="keyword">private</span> Integer Value; <span class="comment">// 树节点的数值</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode Right; <span class="comment">// 右边的树结构</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    TreeNode(<span class="type">int</span> x) &#123;</span><br><span class="line">        Value = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-具体实现">二. 具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wedoo.coderyeah.<span class="keyword">module</span>.iot.algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/6 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于保存每个节点值 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveNodeValues</span><span class="params">(TreeNode node, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归调用自己 左树</span></span><br><span class="line">        saveNodeValues(node.getLeft(), list);</span><br><span class="line">        <span class="comment">// 将值保存在集合中 最后所得是整棵树的各节点值</span></span><br><span class="line">        list.add(node.getValue());</span><br><span class="line">         <span class="comment">// 递归调用自己 右树</span></span><br><span class="line">        saveNodeValues(node.getRight(), list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于比较两棵树是否等价</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">compare</span><span class="params">(TreeNode tree1, TreeNode tree2)</span> &#123;</span><br><span class="line">        <span class="comment">// 准备集合保存节点值</span></span><br><span class="line">        List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        saveNodeValues(tree1, list1);</span><br><span class="line">        saveNodeValues(tree2, list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list1:&quot;</span> + list1);<span class="comment">//list1:[2, 1, 9]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list2:&quot;</span> + list2);<span class="comment">//list2:[2, 1, 3]</span></span><br><span class="line"><span class="comment">// 比较集合是否相等</span></span><br><span class="line">        <span class="keyword">return</span> list1.equals(list2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 构造第一颗二叉树</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">        treeNode.setLeft(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>));</span><br><span class="line">        treeNode.setRight(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// 构造第二颗二叉树</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">        treeNode2.setLeft(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>));</span><br><span class="line">        treeNode2.setRight(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">9</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> compare(treeNode2, treeNode);</span><br><span class="line">        System.out.println(<span class="string">&quot;aBoolean: &quot;</span> + aBoolean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-GO实现">三. GO实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;golang.org/x/tour/tree&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树查找比较 等价二叉查找树</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t1 := tree.New(<span class="number">1</span>)</span><br><span class="line">    t2 := tree.New(<span class="number">1</span>)</span><br><span class="line">    b := compare(t1, t2)</span><br><span class="line">    fmt.Println(<span class="string">&quot;t1==t2:&quot;</span>, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Walk</span><span class="params">(t *tree.Tree, ch <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> t == <span class="literal">nil</span> &#123; <span class="comment">// 空树 没有叶子节点</span></span><br><span class="line">       <span class="keyword">return</span> <span class="comment">// 递归函数结束条件</span></span><br><span class="line">    &#125;</span><br><span class="line">    Walk(t.Left, ch)</span><br><span class="line">    ch &lt;- t.Value</span><br><span class="line">    Walk(t.Right, ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(t1, t2 *tree.Tree)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>) <span class="comment">// 管道 传递数据 无缓冲默认1，按顺序传递数据</span></span><br><span class="line">    c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> Walk(t1, c1)</span><br><span class="line">    <span class="keyword">go</span> Walk(t2, c2)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">       x, y := &lt;-c1, &lt;-c2</span><br><span class="line">       fmt.Println(x, y)</span><br><span class="line">       <span class="keyword">if</span> x != y &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一篇带你了解什么是事务及其原理</title>
      <link href="/posts/9447ebf6.html"/>
      <url>/posts/9447ebf6.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是事务">一.什么是事务</h3><p><strong>事务:</strong> 指作为单个逻辑工作单元(Service方法)执行的一系列操作（数据库操作），要么全部执行，要么全部不执行。事务可以看做是一组任务，通常对应了一个业务方法,这些任务要么全部成功,要么全部失败。</p><p>本地事务有这么几个特征:</p><ul><li><p>一次事务只连接一个支持事务的数据库（一般来说都是关系型数据库）</p></li><li><p>事务的执行结果保证[ACID]</p></li><li><p>会用到数据库锁</p></li></ul><p>事务具有原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）四个特性，简称 ACID，缺一不可。</p><h3 id="二-原子性-Atomicity">二.原子性 Atomicity</h3><p><strong>官方解释</strong></p><blockquote><p>Atomicity requires that each transaction be <strong>“all or nothing”</strong>: if one part of the transaction fails, then the entire transaction fails, and the database state is left unchanged. An atomic system must guarantee atomicity in each and every situation, including power failures, errors and crashes. To the outside world, a committed transaction appears (by its effects on the database) to be <strong>indivisible</strong> (“atomic”), and an aborted transaction does not happen.</p></blockquote><p><strong>关键词在于：</strong></p><ul><li><p>all or nothing，它的意思是数据库要么被修改了，要么保持原来的状态。所谓保持原来的状态不是我先insert再delete，而是压根就没有发生过任何操作。因为insert然后再delete实际上还是修改了数据库状态的，至少在数据库日志层面是这样。</p></li><li><p>indivisible，不可分割，<strong>一个事务就是一个最小的无法分割的独立单元，不允许部分成功部分失败。</strong></p></li></ul><p>利用<strong>Innodb</strong>的undo log，<strong>undo log</strong>名为回滚日志，是实现原子性的关键，当事务回滚时能够撤销所有已经成功执行的sql语句，他需要记录你要回滚的相应日志信息。 例如:</p><ul><li><p>当你delete一条数据的时候，就需要记录这条数据的信息，回滚的时候，insert这条旧数据;</p></li><li><p>当你update一条数据的时候，就需要记录之前的旧值，回滚的时候，根据旧值执行update操作;</p></li><li><p>当年insert一条数据的时候，就需要这条记录的主键，回滚的时候，根据主键执行delete操作</p></li></ul><p>undo log记录了这些回滚需要的信息，当事务执行失败或调用了rollback，导致事务需要回滚，便可以利用undo log中的信息将数据回滚到修改之前的样子。</p><h3 id="三-Consistency-一致性">三.Consistency 一致性</h3><p><strong>官方解释</strong></p><blockquote><p>The consistency property ensures that any transaction will bring the database from one valid state to another. <strong>Any data written to the database must be valid according to all defined rules, including constraints, cascades, triggers, and any combination thereof</strong>. This does not guarantee correctness of the transaction in all ways the application programmer might have wanted (that is the responsibility of application-level code), but merely that any programming errors cannot result in the violation of any defined rules.</p></blockquote><p>一致性要求任何写到数据库的数据都必须满足于预先定义的规则（比如余额不能小于0、外键约束等），简单来说就是在任何时间点都不能出现违反一致性要求的状态。几个并行执行的事务，其执行结果必须与按某一顺序 串行执行的结果相一致，<strong>Mysql通过排他锁来保证一致性</strong>.</p><h3 id="四-Durability-持久性">四.Durability 持久性</h3><p>官方解释</p><blockquote><p>The durability property ensures that <strong>once a transaction has been committed, it will remain so, even in the event of power loss, crashes, or errors</strong>. In a relational database, for instance, once a group of SQL statements execute, the results need to be stored permanently (even if the database crashes immediately thereafter). To defend against power loss, transactions (or their effects) must be recorded in a non-volatile memory.</p></blockquote><p>持久性的关键在于一旦“完成提交”（committed），那么数据就不会丢失。<strong>undolog实现事务原子性，redolog实现事务的持久性</strong>,**Redo Log记录的是新数据的备份。**在事务提交前，只要将Redo Log持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，但是Redo Log已经持久化。系统可以根据Redo Log的内容，将所有数据恢复到最新的状态。</p><h4 id="Undo-Redo事务的简化过程">Undo + Redo事务的简化过程</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.A.事务开始. </span><br><span class="line">2.B.记录<span class="attribute">A</span>=1到undo log. </span><br><span class="line">3.C.修改<span class="attribute">A</span>=3. </span><br><span class="line">4.D.记录<span class="attribute">A</span>=3到redo log. </span><br><span class="line">5.E.记录<span class="attribute">B</span>=2到undo log. </span><br><span class="line">6.F.修改<span class="attribute">B</span>=4. </span><br><span class="line">7.G.记录<span class="attribute">B</span>=4到redo log. </span><br><span class="line">8.H.将redo log写入磁盘。 </span><br><span class="line">I.事务提交</span><br></pre></td></tr></table></figure><p>通过<strong>undolog</strong>（记录旧数据用来反悔）保证事务的原子性，<strong>redolog</strong>(记录新数据用来保存到磁盘)保证持久性。</p><h4 id="采用redo-log的好处">采用redo log的好处</h4><p>redo log进行刷盘比对数据页刷盘效率高，具体表现如下</p><ul><li><p>redo log体积小，毕竟只记录了哪一页修改了啥，因此体积小，刷盘快。</p></li><li><p>redo log是一直往末尾进行追加，属于顺序IO。效率显然比随机IO来的快。</p></li></ul><h3 id="五-Isolation-隔离性">五.Isolation 隔离性</h3><p>隔离性要求如果两个事务修改同一个数据，则必须按顺序执行，并且前一个事务如果未完成，那么未完成的中间状态对另一个事务不可见。</p><h3 id="六-事务隔离级别">六.事务隔离级别</h3><ol><li><h4 id="线程并发和事务隔离">线程并发和事务隔离</h4><p>SQL 标准定义了四种隔离级别，MySQL 全都支持。这四种隔离级别分别是：</p><ul><li><p>读未提交（READ UNCOMMITTED）</p></li><li><p>读提交 （READ COMMITTED）</p></li><li><p>可重复读 （REPEATABLE READ）</p></li><li><p>串行化 （SERIALIZABLE）</p><p><strong>以上几个概念是事务隔离级别要实际解决的问题：脏读，不可重复读，幻读</strong></p></li></ul></li><li><h4 id="脏读">脏读</h4><p>脏读指的是读到了其他事务<strong>未提交的数据</strong>，未提交意味着这些数据可能会回滚，也就是可能最终不会存到数据库中，也就是不存在的数据。读到了不一定最终存在的数据，这就是脏读。<strong>读未提交会造成脏读;读提交可以解决脏读问题。</strong></p></li><li><h4 id="不可重复读">不可重复读</h4><p>可重复读指的是在一个事务内，最开始读到的数据和事务结束前的任意时刻读到的同一批数据都是一致的，那不可重复读就是一个事务多次读取到的数据是不一致的，<strong>通常针对数据更新（UPDATE）操作</strong>。即：<strong>同一个事务中多次使用相同条件读取到的数据是不一样的。</strong></p><p><code>set global transaction isolation level repeatable read;</code><strong>可重复读</strong>，这也是<code>Mysql</code>默认的事务隔离策略，但是该事务隔离级别没办法解决幻读问题。</p></li><li><h4 id="幻读">.幻读</h4><p>事务A 按照一定条件进行数据读取， 期间事务B 插入了相同搜索条件的新数据，事务A再次按照原先条件进行读取时，发现了事务B 新插入的数据 称为幻读 , 即：<strong>事物A两次读取相同条件的数据读到的条数不一样。</strong></p><p>MySQL 的可重复读隔离级别其实解决了幻读问题，它使用到了“间隙锁”。</p></li><li><h4 id="串行化">串行化</h4><p>串行化是4种事务隔离级别中隔离效果最好的，解决了脏读、可重复读、幻读的问题，但是效果最差，它将事务的执行变为顺序执行，与其他三个隔离级别相比，它就相当于单线程，后一个事务的执行必须等待前一个事务结束。</p><p>事务隔离其实就是为了解决上面提到的脏读、不可重复读、幻读这几个问题，下面展示了 4 种隔离级别对这三个问题的解决程度</p><table><thead><tr><th><strong>隔离级别</strong></th><th><strong>脏读</strong></th><th><strong>不可重复读</strong></th><th><strong>幻读</strong></th></tr></thead><tbody><tr><td>读未提交(Read uncommitted)</td><td>可能</td><td>可能</td><td>可能</td></tr><tr><td>读提交(Read committed)</td><td>不可能</td><td>可能</td><td>可能</td></tr><tr><td>可重复读(Repeatable reads)</td><td>不可能</td><td>不可能</td><td>可能</td></tr><tr><td>串行化(Serializable)</td><td>不可能</td><td>不可能</td><td>不可能</td></tr></tbody></table></li></ol><p>MySQL 事务隔离其实是依靠锁来实现的，加锁自然会带来性能的损失。而读未提交隔离级别是不加锁的，所以它的性能是最好的，没有加锁、解锁带来的性能开销。但有利就有弊，这基本上就相当于裸奔啊，所以它连脏读的问题都没办法解决。</p><h3 id="七-事务隔离级别原理-MVCC">七.事务隔离级别原理-MVCC</h3><ol><li><h4 id="利用的是锁和MVCC机制">利用的是锁和MVCC机制</h4><p><strong>MVCC</strong>的全称是**“多版本并发控制”<strong>(Multi Version Concurrency Control),。这项技术使得InnoDB的事务隔离级别下执行一致性读操作有了保证，换言之，就是为了查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值，一个行记录数据有多个版本对快照数据，这些</strong>快照数据在undo log中**。 如果一个事务读取的行正在做DELELE或者UPDATE操作，读取操作不会等行上的锁释放，而是<strong>读取该行的快照版本</strong>。</p><p>这是一个可以用来<strong>增强并发性</strong>的强大的技术，因为这样的一来的话查询就不用等待另一个事务释放锁。这项技术在数据库领域并不是普遍使用的。一些其它的数据库产品，以及<code>mysql</code>其它的存储引擎并不支持它。</p><p>可重复读是在事务开始的时候生成一个当前事务全局性的快照，而读提交则是每次执行语句的时候都重新生成一次快照。</p></li></ol><h3 id="八-丢失更新问题">八.丢失更新问题</h3><p>脏读，幻读，不可重复读，都是发生在一个事务在写，一个事务在读的时候出现的问题，而丢失更新发生在两个事务都在做写操作的时候出现的，丢失更新分为：<strong>回滚丢失更新(一类)和覆盖丢失更新(二类)</strong></p><ul><li>第一类丢失更新(回滚丢失，Lost update) （通过设置隔离级别可以防止 Repeatable Read）</li><li>第二类丢失更新(覆盖丢失/两次更新问题，Second lost update) A事务覆盖B事务已经提交的数据，造成B事务所做操作丢失</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图形验证码的使用详情</title>
      <link href="/posts/a48e7149.html"/>
      <url>/posts/a48e7149.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-关于js的启动服务">一. 关于js的启动服务</h3><p>传统导入js开发的模式没法直接服务器方式调试，需要安装live-server服务器，这个服务器就是node一个模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">安装：npm install -g live-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定端口80</span> </span><br><span class="line">启动项目：live-server --port=80 </span><br><span class="line">注意：live-server服务器自带热刷新</span><br></pre></td></tr></table></figure><h3 id="二-使用图形验证码">二. 使用图形验证码</h3><h4 id="1-前端代码">1. 前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user-phone&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;imageCode&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;am-icon-check am-icon-sm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 180px;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;phoneUserForm.imageCode&quot;</span> <span class="attr">id</span>=<span class="string">&quot;imageCode&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入图片验证码&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;captcha-image-temp&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getImageCode&quot;</span><span class="attr">:src</span>=<span class="string">&quot;base64ImageCode&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;captcha-image-temp&quot;</span>  <span class="attr">alt</span>=<span class="string">&quot;点击换图&quot;</span> <span class="attr">title</span>=<span class="string">&quot;点击换图&quot;</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle; cursor: pointer;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-流程分析">2. 流程分析</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 前端页面一加载或点击重新获取使用axios发送异步请求获取验证码</span><br><span class="line">2. 后端生成图形验证码，并将验证码保存在redis</span><br><span class="line">3. 后端使用Base64将图片编码成字符串，响应给前端</span><br><span class="line">4. 前端使用vue指令base64编码之后的字符串放在对应位置，最终显示图片</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;这里&quot;</span>/&gt;</span></span><br><span class="line">5. 在点击获取手机验证码的时候验证图形验证码是否正确</span><br><span class="line">防止非法人员通过脚本恶意点击获取手机验证码</span><br><span class="line"></span><br><span class="line">后端redis怎么保存图形验证码？</span><br><span class="line">1. 设置过期时间 - 简单</span><br><span class="line">2. key：UUID - 需要在前后端之间进行传输。浏览器的localStorage保存</span><br><span class="line">   value：验证码</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 请求图片验证码之前判断localStorage是否有KEY，如果没就创建，然后保存到localStorage，如果有自己直接作为参数发送Ajax请求获取图片验证码</span><br><span class="line"><span class="bullet">2.</span> 前端通过ajax发送一个图片验证码请求，携带者KEY</span><br><span class="line"><span class="bullet">3.</span> 后端收到请求，生成验证码的值</span><br><span class="line"><span class="bullet">4.</span> 把验证码的存储到Redis，以前段传入的key作为Redis的key</span><br><span class="line"><span class="bullet">5.</span> 把验证码合并到一个图片中</span><br><span class="line"><span class="bullet">6.</span> 把图片基于Base64编码层字符串，响应给前端</span><br><span class="line"><span class="bullet">7.</span> 前端拿到base64字符串，进行图片的展示，用户输入图片验证码</span><br><span class="line"></span><br><span class="line">校验过程：前台提交注册请求 ，验证图片验证码(key也要携带)，后端把前端传入的图片验证码的值和Redis中的图片验证码的值做比较 </span><br></pre></td></tr></table></figure><h4 id="3-前端存储数据">3.  前端存储数据</h4><p><strong><code>sessionStorage</code></strong>：存放的数据只在当前窗口有效。基本不用。不可以跨窗口；<br><strong><code>localStorage</code></strong>：持久化存储。只要不删除，在当前浏览器永远有效。可以跨窗口，不能跨浏览器。但是不同的域名共享数据的，即在后台系统保存在<code>localStorage</code>的数据在前台系统是获取不到的。</p><h4 id="4-前端功能代码">4. 前端功能代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            base64ImageCode: &#x27;&#x27;, //获取图形验证码响应一个base64位的字符串</span><br><span class="line">            base64ImageCodePrefix: &#x27;data:image/jpeg;base64,&#x27;,</span><br><span class="line">            phoneUserForm: &#123;</span><br><span class="line">                imageCode: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            //生成随机图形验证码的key</span><br><span class="line">            createUUID() &#123;</span><br><span class="line">                let s = [];</span><br><span class="line">                let hexDigits = &quot;0123456789abcdefghi&quot;;</span><br><span class="line">                for (let i = 0; i &lt; 36; i++) &#123;</span><br><span class="line">                    s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);</span><br><span class="line">                &#125;</span><br><span class="line">                s[14] = &quot;4&quot;; // bits 12-15 of the time_hi_and_version field to 0010</span><br><span class="line">                s[19] = hexDigits.substr((s[19] &amp; 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01</span><br><span class="line">                s[8] = s[13] = s[18] = s[23] = &quot;-&quot;;</span><br><span class="line">                let uuid = s.join(&quot;&quot;);</span><br><span class="line">                return uuid;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 获取图形验证码</span><br><span class="line">            getImageCode() &#123;</span><br><span class="line">                //获取localhost的键值 verifyCodeKey</span><br><span class="line">                let key = localStorage.getItem(&#x27;verifyCodeKey&#x27;)</span><br><span class="line">                if (!key) &#123;// 如果key不存在就重新生成存储到本地</span><br><span class="line">                    key = this.createUUID();</span><br><span class="line">                    localStorage.setItem(&#x27;verifyCodeKey&#x27;, key)</span><br><span class="line">                &#125;</span><br><span class="line">                //发送异步请求获取base64编码</span><br><span class="line">                this.$http.get(&#x27;/verifyCode/image/&#x27; + key).then((res) =&gt; &#123;</span><br><span class="line">                    // 在回调函数获取响应的数据与拼接前缀 绑定到src</span><br><span class="line">                    this.base64ImageCode = this.base64ImageCodePrefix + res.data.msg</span><br><span class="line">                &#125;).catch(() =&gt; &#123;</span><br><span class="line">                    alert(&#x27;服务器繁忙，请稍后再试！！！&#x27;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            this.getImageCode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="5-后端业务实现">5. 后端业务实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyCodeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">VerifyCodeService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getImgCode</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取随机验证码长度为4</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> VerifyCodeUtils.generateVerifyCode(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 将验证码的值存入redis中 有效期五分钟</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;cache:code:image:&quot;</span> + key, code, <span class="number">5L</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">// 把验证码的值合并到图片，设置宽度和高度 使用Base64编码。并返回base64编码的字符串</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(VerifyCodeUtils.verifyCode(<span class="number">115</span>, <span class="number">40</span>, code));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-生成图形验证码工具类">6. 生成图形验证码工具类</h4><p>①<code>VerifyCodeUtils</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.coderyeah.basic.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.AffineTransform;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyCodeUtils</span> &#123;</span><br><span class="line">    <span class="comment">//使用到Algerian字体，系统里没有的话需要安装字体，字体只显示大写，去掉了1,0,i,o几个容易混淆的字符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VERIFY_CODES</span> <span class="operator">=</span> <span class="string">&quot;23456789ABCDEFGHJKLMNPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用系统默认字符源生成验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize 验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateVerifyCode</span><span class="params">(<span class="type">int</span> verifySize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> generateVerifyCode(verifySize, VERIFY_CODES);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定源生成验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize 验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sources    验证码字符源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateVerifyCode</span><span class="params">(<span class="type">int</span> verifySize, String sources)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sources == <span class="literal">null</span> || sources.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            sources = VERIFY_CODES;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">codesLen</span> <span class="operator">=</span> sources.length();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(System.currentTimeMillis());</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">verifyCode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(verifySize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; verifySize; i++) &#123;</span><br><span class="line">            verifyCode.append(sources.charAt(rand.nextInt(codesLen - <span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> verifyCode.toString();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出指定验证码图片流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outputImage</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, OutputStream os, String code)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">verifySize</span> <span class="operator">=</span> code.length();</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(w, h, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">g2</span> <span class="operator">=</span> image.createGraphics();</span><br><span class="line">        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);</span><br><span class="line">        Color[] colors = <span class="keyword">new</span> <span class="title class_">Color</span>[<span class="number">5</span>];</span><br><span class="line">        Color[] colorSpaces = <span class="keyword">new</span> <span class="title class_">Color</span>[]&#123;Color.WHITE, Color.CYAN,</span><br><span class="line">                Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,</span><br><span class="line">                Color.PINK, Color.YELLOW&#125;;</span><br><span class="line">        <span class="type">float</span>[] fractions = <span class="keyword">new</span> <span class="title class_">float</span>[colors.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; colors.length; i++) &#123;</span><br><span class="line">            colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];</span><br><span class="line">            fractions[i] = rand.nextFloat();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(fractions);</span><br><span class="line"> </span><br><span class="line">        g2.setColor(Color.GRAY);<span class="comment">// 设置边框色</span></span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line"> </span><br><span class="line">        <span class="type">Color</span> <span class="variable">c</span> <span class="operator">=</span> getRandColor(<span class="number">200</span>, <span class="number">250</span>);</span><br><span class="line">        g2.setColor(c);<span class="comment">// 设置背景色</span></span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">2</span>, w, h - <span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//绘制干扰线</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        g2.setColor(getRandColor(<span class="number">160</span>, <span class="number">200</span>));<span class="comment">// 设置线条的颜色</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(w - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> random.nextInt(h - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">xl</span> <span class="operator">=</span> random.nextInt(<span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">yl</span> <span class="operator">=</span> random.nextInt(<span class="number">12</span>) + <span class="number">1</span>;</span><br><span class="line">            g2.drawLine(x, y, x + xl + <span class="number">40</span>, y + yl + <span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 添加噪点</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">yawpRate</span> <span class="operator">=</span> <span class="number">0.05f</span>;<span class="comment">// 噪声率</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> (<span class="type">int</span>) (yawpRate * w * h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; area; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(w);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> random.nextInt(h);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rgb</span> <span class="operator">=</span> getRandomIntColor();</span><br><span class="line">            image.setRGB(x, y, rgb);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        shear(g2, w, h, c);<span class="comment">// 使图片扭曲</span></span><br><span class="line"> </span><br><span class="line">        g2.setColor(getRandColor(<span class="number">100</span>, <span class="number">160</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">fontSize</span> <span class="operator">=</span> h - <span class="number">4</span>;</span><br><span class="line">        <span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;Algerian&quot;</span>, Font.ITALIC, fontSize);</span><br><span class="line">        g2.setFont(font);</span><br><span class="line">        <span class="type">char</span>[] chars = code.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; verifySize; i++) &#123;</span><br><span class="line">            <span class="type">AffineTransform</span> <span class="variable">affine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AffineTransform</span>();</span><br><span class="line">            affine.setToRotation(Math.PI / <span class="number">4</span> * rand.nextDouble() * (rand.nextBoolean() ? <span class="number">1</span> : -<span class="number">1</span>), (w / verifySize) * i + fontSize / <span class="number">2</span>, h / <span class="number">2</span>);</span><br><span class="line">            g2.setTransform(affine);</span><br><span class="line">            g2.drawChars(chars, i, <span class="number">1</span>, ((w - <span class="number">10</span>) / verifySize) * i + <span class="number">5</span>, h / <span class="number">2</span> + fontSize / <span class="number">2</span> - <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        g2.dispose();</span><br><span class="line">        ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, os);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Color <span class="title function_">getRandColor</span><span class="params">(<span class="type">int</span> fc, <span class="type">int</span> bc)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fc &gt; <span class="number">255</span>)</span><br><span class="line">            fc = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (bc &gt; <span class="number">255</span>)</span><br><span class="line">            bc = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="type">int</span> <span class="variable">g</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Color</span>(r, g, b);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRandomIntColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] rgb = getRandomRgb();</span><br><span class="line">        <span class="type">int</span> <span class="variable">color</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c : rgb) &#123;</span><br><span class="line">            color = color &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            color = color | c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] getRandomRgb() &#123;</span><br><span class="line">        <span class="type">int</span>[] rgb = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            rgb[i] = random.nextInt(<span class="number">255</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rgb;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shear</span><span class="params">(Graphics g, <span class="type">int</span> w1, <span class="type">int</span> h1, Color color)</span> &#123;</span><br><span class="line">        shearX(g, w1, h1, color);</span><br><span class="line">        shearY(g, w1, h1, color);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shearX</span><span class="params">(Graphics g, <span class="type">int</span> w1, <span class="type">int</span> h1, Color color)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> <span class="variable">period</span> <span class="operator">=</span> random.nextInt(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">borderGap</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">frames</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">phase</span> <span class="operator">=</span> random.nextInt(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; h1; i++) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="type">double</span>) i / (<span class="type">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862D</span> * (<span class="type">double</span>) phase)</span><br><span class="line">                    / (<span class="type">double</span>) frames);</span><br><span class="line">            g.copyArea(<span class="number">0</span>, i, w1, <span class="number">1</span>, (<span class="type">int</span>) d, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine((<span class="type">int</span>) d, i, <span class="number">0</span>, i);</span><br><span class="line">                g.drawLine((<span class="type">int</span>) d + w1, i, w1, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shearY</span><span class="params">(Graphics g, <span class="type">int</span> w1, <span class="type">int</span> h1, Color color)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> <span class="variable">period</span> <span class="operator">=</span> random.nextInt(<span class="number">40</span>) + <span class="number">10</span>; <span class="comment">// 50;</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">borderGap</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">frames</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">phase</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; w1; i++) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="type">double</span>) i / (<span class="type">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862D</span> * (<span class="type">double</span>) phase)</span><br><span class="line">                    / (<span class="type">double</span>) frames);</span><br><span class="line">            g.copyArea(i, <span class="number">0</span>, <span class="number">1</span>, h1, <span class="number">0</span>, (<span class="type">int</span>) d);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine(i, (<span class="type">int</span>) d, i, <span class="number">0</span>);</span><br><span class="line">                g.drawLine(i, (<span class="type">int</span>) d + h1, i, h1);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机验证码及其加密图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">verifyCode</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, String code)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//base64编码器</span></span><br><span class="line">            <span class="type">BASE64Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>();</span><br><span class="line">            <span class="comment">//准备输出流</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="comment">//使用code生成w宽 h高的图片，并将结果图片存入data流中</span></span><br><span class="line">            outputImage(w, h, data, code);</span><br><span class="line">            <span class="comment">//使用base64编码成String</span></span><br><span class="line">            <span class="keyword">return</span> encoder.encode(data.toByteArray());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;生成验证码失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        System.out.println(verifyCode(<span class="number">100</span>, <span class="number">30</span>, <span class="string">&quot;1234&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②<code>StrUtils</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把逗号分隔的字符串转换字符串数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] splitStr2StrArr(String str,String split) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; !str.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> str.split(split);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把逗号分隔字符串转换List的Long</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Long&gt; <span class="title function_">splitStr2LongArr</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        String[] strings = splitStr2StrArr(str,<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (strings == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;Long&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">            result.add(Long.parseLong(string));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把逗号分隔字符串转换List的Long</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Long&gt; <span class="title function_">splitStr2LongArr</span><span class="params">(String str,String split)</span> &#123;</span><br><span class="line">        String[] strings = splitStr2StrArr(str,split);</span><br><span class="line">        <span class="keyword">if</span> (strings == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Long&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">            result.add(Long.parseLong(string));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getRandomString</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;0123456789&quot;</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> random.nextInt(<span class="number">10</span>);</span><br><span class="line">            sb.append(str.charAt(number));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getComplexRandomString</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> random.nextInt(<span class="number">62</span>);</span><br><span class="line">            sb.append(str.charAt(number));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">convertPropertiesToHtml</span><span class="params">(String properties)</span>&#123;</span><br><span class="line">        <span class="comment">//1:容量:6:32GB_4:样式:12:塑料壳</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        String[] propArr = properties.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String props : propArr) &#123;</span><br><span class="line">            String[] valueArr = props.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            sBuilder.append(valueArr[<span class="number">1</span>]).append(<span class="string">&quot;:&quot;</span>).append(valueArr[<span class="number">3</span>]).append(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三-数据库三范式">三. 数据库三范式</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span><span class="meta">FN</span>:</span><br><span class="line"><span class="number">1</span>. 第一范式：列唯一</span><br><span class="line">列不可再分，保持原子性，关系型数据库默认支持</span><br><span class="line"><span class="number">2</span>. 第二范式：行唯一</span><br><span class="line">每一行的数据要唯一区分。怎么区分呢？需要加一列作为惟一标识。这列被称为主键</span><br><span class="line">并且行中每一列数据都与主键相关</span><br><span class="line"><span class="number">3</span>. 第三范式：如果一张表的数据能够通过其他表推导出来，不应该单独设计，通过外键的方式关联查询出来</span><br><span class="line">减少数据冗余</span><br><span class="line"></span><br><span class="line">总结：三大范式只是一般设计数据库的基本理念，可以建立冗余较小、结构合理的数据库。如果有特殊情况，当然要特殊对待，数据库设计最重要的是看需求跟性能，需求&gt;性能&gt;表结构。所以不能一味的去追求范式建立数据库表</span><br><span class="line"></span><br><span class="line">反<span class="number">3</span><span class="meta">FN</span>：</span><br><span class="line">原则上是不能违反三范式的，但是有的时候我们为了增强查询效率【不用关联查询，直接单表查询】，会设计一些冗余字段，变多表查询为单表查询</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用vue的富文本编辑器操作</title>
      <link href="/posts/e714b79f.html"/>
      <url>/posts/e714b79f.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-vue-quill-edit">一. vue-quill-edit</h3><h4 id="1-安装vue的富文本">1. 安装vue的富文本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 当前的vue项目路径</span><br><span class="line">npm install quill --save</span><br><span class="line">npm install vue-quill-editor --save</span><br></pre></td></tr></table></figure><h4 id="2-在页面中引入vue的富文本">2. 在页面中引入vue的富文本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue的ueditor的资源</span></span><br><span class="line"><span class="keyword">import</span> &#123;quillEditor&#125; <span class="keyword">from</span> <span class="string">&quot;vue-quill-editor&quot;</span>; <span class="comment">//调用编辑器</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.core.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.snow.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.bubble.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> quillConfig <span class="keyword">from</span> <span class="string">&#x27;../../common/js/quill-config&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="3-添加组件">3. 添加组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        quillEditor</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//......</span></span><br></pre></td></tr></table></figure><h4 id="4-使用组件">4. 使用组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;简介&quot; prop=&quot;intro&quot;&gt;</span><br><span class="line">  &lt;!-- v-if=&quot;editForm.petDetail&quot; 修改v-model绑定对象报错问题，v-if对需要显示的数据判断下 --&gt;</span><br><span class="line">  &lt;quill-editor v-model=&quot;editForm.petDetail.intro&quot; v-if=&quot;editForm.petDetail&quot;</span><br><span class="line">                :options=&quot;quillOption&quot;&gt;&lt;/quill-editor&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line">&lt;el-form-item label=&quot;领养须知&quot; prop=&quot;orderNotice&quot;&gt;</span><br><span class="line">  &lt;quill-editor v-model=&quot;editForm.petDetail.adoptNotice&quot; v-if=&quot;editForm.petDetail&quot;</span><br><span class="line">                :options=&quot;quillOption&quot;&gt;&lt;/quill-editor&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure><h4 id="5-整个表单">5. 整个表单</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--编辑界面--&gt;</span><br><span class="line">&lt;el-dialog :title=&quot;title&quot; :visible.sync=&quot;editFormVisible&quot; :close-on-click-modal=&quot;false&quot; width=&quot;60%&quot; @close=&quot;cancel&quot;&gt;</span><br><span class="line">  &lt;el-form :model=&quot;editForm&quot; label-width=&quot;80px&quot; :rules=&quot;editFormRules&quot; ref=&quot;editForm&quot;&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;宠物名称&quot; prop=&quot;name&quot;&gt;</span><br><span class="line">      &lt;el-input prefix-icon=&quot;el-icon-tickets&quot; v-model=&quot;editForm.name&quot; auto-complete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;成本价&quot; prop=&quot;costprice&quot;&gt;</span><br><span class="line">      &lt;el-input-number :min=&quot;0&quot; oninput=&quot;if(value&lt;0)value=0&quot; v-model.trim=&quot;editForm.costprice&quot;</span><br><span class="line">                       auto-complete=&quot;off&quot;&gt;&lt;/el-input-number&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;销售价&quot; prop=&quot;saleprice&quot;&gt;</span><br><span class="line">      &lt;el-input-number :min=&quot;0&quot; oninput=&quot;if(value&lt;0)value=0&quot; v-model.trim=&quot;editForm.saleprice&quot;</span><br><span class="line">                       auto-complete=&quot;off&quot;&gt;&lt;/el-input-number&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;宠物类型&quot; prop=&quot;type&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">        &lt;el-cascader</span><br><span class="line">            v-model=&quot;editForm.typeId&quot;</span><br><span class="line">            :options=&quot;petTypeTree&quot;</span><br><span class="line">            :props=&quot;&#123; checkStrictly: true,value:&#x27;id&#x27;,label:&#x27;name&#x27; &#125;&quot;</span><br><span class="line">            clearable&gt;</span><br><span class="line">        &lt;/el-cascader&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;宠物图片&quot; prop=&quot;index&quot;&gt;</span><br><span class="line">      &lt;el-upload class=&quot;upload-demo&quot;</span><br><span class="line">                 action=&quot;http://localhost:8080/fastDfs/&quot;</span><br><span class="line">                 :on-preview=&quot;handlePreview&quot;</span><br><span class="line">                 :on-remove=&quot;handleRemove&quot;</span><br><span class="line">                 :on-success=&quot;handleSuccess&quot;</span><br><span class="line">                 :file-list=&quot;fileList&quot;</span><br><span class="line">                 list-type=&quot;picture&quot;&gt;</span><br><span class="line">        &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;点击上传&lt;/el-button&gt;</span><br><span class="line">        &lt;div slot=&quot;tip&quot; class=&quot;el-upload__tip&quot;&gt;只能上传jpg/png文件，且不超过500kb&lt;/div&gt;</span><br><span class="line">      &lt;/el-upload&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;状态&quot;&gt;</span><br><span class="line">      &lt;el-radio-group v-model=&quot;editForm.state&quot;&gt;</span><br><span class="line">        &lt;el-radio class=&quot;radio&quot; :label=&quot;1&quot;&gt;开启&lt;/el-radio&gt;</span><br><span class="line">        &lt;el-radio class=&quot;radio&quot; :label=&quot;0&quot;&gt;关闭&lt;/el-radio&gt;</span><br><span class="line">      &lt;/el-radio-group&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;上架时间&quot; prop=&quot;onsaletime&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">        &lt;el-date-picker</span><br><span class="line">            value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">            v-model=&quot;editForm.onsaletime&quot;</span><br><span class="line">            type=&quot;datetime&quot;</span><br><span class="line">            placeholder=&quot;选择日期时间&quot;</span><br><span class="line">            align=&quot;right&quot;</span><br><span class="line">            :picker-options=&quot;pickerOptions&quot;&gt;</span><br><span class="line">        &lt;/el-date-picker&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;下架时间&quot; prop=&quot;offsaletime&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">        &lt;el-date-picker</span><br><span class="line">            value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">            v-model=&quot;editForm.offsaletime&quot;</span><br><span class="line">            type=&quot;datetime&quot;</span><br><span class="line">            placeholder=&quot;选择日期时间&quot;</span><br><span class="line">            align=&quot;right&quot;</span><br><span class="line">            :picker-options=&quot;pickerOptions&quot;&gt;</span><br><span class="line">        &lt;/el-date-picker&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;所属店铺&quot; prop=&quot;shop&quot;&gt;</span><br><span class="line">      &lt;el-select v-model=&quot;editForm.shopId&quot; placeholder=&quot;请选择店铺&quot; clearable&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;item in shops&quot;</span><br><span class="line">            :key=&quot;item.id&quot;</span><br><span class="line">            :label=&quot;item.name&quot;</span><br><span class="line">            :value=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;领养人&quot;&gt;</span><br><span class="line">      &lt;el-select v-model=&quot;editForm.userId&quot; placeholder=&quot;请选择领养人&quot; clearable&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;item in users&quot;</span><br><span class="line">            :key=&quot;item.id&quot;</span><br><span class="line">            :label=&quot;item.username&quot;</span><br><span class="line">            :value=&quot;item.id&quot;&gt;</span><br><span class="line">          &lt;span style=&quot;float: left&quot;&gt;&#123;&#123; item.username &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;span style=&quot;float: right; color: #8492a6; font-size: 13px&quot;&gt;&#123;&#123; item.phone &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;简介&quot; prop=&quot;intro&quot;&gt;</span><br><span class="line">      &lt;!-- v-if=&quot;saveForm.petDetail&quot; 修改v-model绑定对象报错问题，v-if对需要显示的数据判断下 --&gt;</span><br><span class="line">      &lt;quill-editor v-model=&quot;editForm.petDetail.intro&quot; v-if=&quot;editForm.petDetail&quot;</span><br><span class="line">                    :options=&quot;quillOption&quot;&gt;&lt;/quill-editor&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;领养须知&quot; prop=&quot;orderNotice&quot;&gt;</span><br><span class="line">      &lt;quill-editor v-model=&quot;editForm.petDetail.adoptNotice&quot; v-if=&quot;editForm.petDetail&quot;</span><br><span class="line">                    :options=&quot;quillOption&quot;&gt;&lt;/quill-editor&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">  &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">    &lt;el-button @click.native=&quot;cancel&quot;&gt;取消&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click.native=&quot;editSubmit&quot; :loading=&quot;editLoading&quot;&gt;提交&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure><h3 id="二-富文本整合Fastdfs">二. 富文本整合Fastdfs</h3><p>图片上传到服务器保存</p><p>编辑富文本内容的时候，原生的富文本，会直接将图片以base64编码的方式存储在页面上。当点击保存时，会直接将base64的数据直接存储到数据库，数据库的字段直接存储不了，内容太大！所以需要将富文本编辑框集成FastDfs，将图片上传到FastDfs。只存储图片的FastDfs访问路径即可。</p><h4 id="1-quill-config-js">1. quill-config.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*富文本编辑图片上传配置*/</span></span><br><span class="line"><span class="keyword">const</span> uploadConfig = &#123;</span><br><span class="line">    <span class="attr">fastDfsUrl</span>:<span class="string">&#x27;http://123.207.27.208&#x27;</span>,      <span class="comment">// 图片访问地址</span></span><br><span class="line">    <span class="attr">action</span>:  <span class="string">&#x27;http://localhost:8080/fastDfs&#x27;</span>, <span class="comment">// 必填参数 图片上传地址</span></span><br><span class="line">    <span class="attr">methods</span>: <span class="string">&#x27;POST&#x27;</span>,  <span class="comment">// 必填参数 图片上传方式</span></span><br><span class="line">    <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 可选参数 如果需要token验证，假设你的token有存放在sessionStorage</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;file&#x27;</span>,  <span class="comment">// 必填参数 文件的参数名</span></span><br><span class="line">    <span class="attr">size</span>: <span class="number">500</span>,  <span class="comment">// 可选参数   图片大小，单位为Kb, 1M = 1024Kb</span></span><br><span class="line">    <span class="attr">accept</span>: <span class="string">&#x27;image/png, image/gif, image/jpeg, image/bmp, image/x-icon&#x27;</span>  <span class="comment">// 可选 可上传的图片格式</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toolbar工具栏的工具选项（默认展示全部）</span></span><br><span class="line"><span class="keyword">const</span> toolOptions = [</span><br><span class="line">    [<span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27;italic&#x27;</span>, <span class="string">&#x27;underline&#x27;</span>, <span class="string">&#x27;strike&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;blockquote&#x27;</span>, <span class="string">&#x27;code-block&#x27;</span>],</span><br><span class="line">    [&#123;<span class="string">&#x27;header&#x27;</span>: <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;header&#x27;</span>: <span class="number">2</span>&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;list&#x27;</span>: <span class="string">&#x27;ordered&#x27;</span>&#125;, &#123;<span class="string">&#x27;list&#x27;</span>: <span class="string">&#x27;bullet&#x27;</span>&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;script&#x27;</span>: <span class="string">&#x27;sub&#x27;</span>&#125;, &#123;<span class="string">&#x27;script&#x27;</span>: <span class="string">&#x27;super&#x27;</span>&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;indent&#x27;</span>: <span class="string">&#x27;-1&#x27;</span>&#125;, &#123;<span class="string">&#x27;indent&#x27;</span>: <span class="string">&#x27;+1&#x27;</span>&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;direction&#x27;</span>: <span class="string">&#x27;rtl&#x27;</span>&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;size&#x27;</span>: [<span class="string">&#x27;small&#x27;</span>, <span class="literal">false</span>, <span class="string">&#x27;large&#x27;</span>, <span class="string">&#x27;huge&#x27;</span>]&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;header&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="literal">false</span>]&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;color&#x27;</span>: []&#125;, &#123;<span class="string">&#x27;background&#x27;</span>: []&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;font&#x27;</span>: []&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;align&#x27;</span>: []&#125;],</span><br><span class="line">    [<span class="string">&#x27;clean&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;link&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="string">&#x27;video&#x27;</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> handlers = &#123;</span><br><span class="line">    <span class="attr">image</span>: <span class="keyword">function</span> <span class="title function_">image</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">var</span> fileInput = <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input.ql-image[type=file]&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (fileInput === <span class="literal">null</span>) &#123;</span><br><span class="line">            fileInput = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">            fileInput.<span class="title function_">setAttribute</span>(<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;file&#x27;</span>);</span><br><span class="line">            <span class="comment">// 设置图片参数名</span></span><br><span class="line">            <span class="keyword">if</span> (uploadConfig.<span class="property">name</span>) &#123;</span><br><span class="line">                fileInput.<span class="title function_">setAttribute</span>(<span class="string">&#x27;name&#x27;</span>, uploadConfig.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 可设置上传图片的格式</span></span><br><span class="line">            fileInput.<span class="title function_">setAttribute</span>(<span class="string">&#x27;accept&#x27;</span>, uploadConfig.<span class="property">accept</span>);</span><br><span class="line">            fileInput.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;ql-image&#x27;</span>);</span><br><span class="line">            <span class="comment">// 监听选择文件</span></span><br><span class="line">            fileInput.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 创建formData</span></span><br><span class="line">                <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">                formData.<span class="title function_">append</span>(uploadConfig.<span class="property">name</span>, fileInput.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">                formData.<span class="title function_">append</span>(<span class="string">&#x27;object&#x27;</span>,<span class="string">&#x27;product&#x27;</span>);</span><br><span class="line">                <span class="comment">// 如果需要token且存在token</span></span><br><span class="line">                <span class="keyword">if</span> (uploadConfig.<span class="property">token</span>) &#123;</span><br><span class="line">                    formData.<span class="title function_">append</span>(<span class="string">&#x27;token&#x27;</span>, uploadConfig.<span class="property">token</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 图片上传</span></span><br><span class="line">                <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">                xhr.<span class="title function_">open</span>(uploadConfig.<span class="property">methods</span>, uploadConfig.<span class="property">action</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 上传数据成功，会触发</span></span><br><span class="line">                xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">                        <span class="keyword">let</span> length = self.<span class="property">quill</span>.<span class="title function_">getSelection</span>(<span class="literal">true</span>).<span class="property">index</span>;</span><br><span class="line">                        <span class="comment">//这里很重要，你图片上传成功后，img的src需要在这里添加，res.path就是你服务器返回的图片链接。</span></span><br><span class="line">                        self.<span class="property">quill</span>.<span class="title function_">insertEmbed</span>(length, <span class="string">&#x27;image&#x27;</span>, uploadConfig.<span class="property">fastDfsUrl</span>+res.<span class="property">data</span>);</span><br><span class="line">                        self.<span class="property">quill</span>.<span class="title function_">setSelection</span>(length + <span class="number">1</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    fileInput.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// 开始上传数据</span></span><br><span class="line">                xhr.<span class="property">upload</span>.<span class="property">onloadstart</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                    fileInput.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// 当发生网络异常的时候会触发，如果上传数据的过程还未结束</span></span><br><span class="line">                xhr.<span class="property">upload</span>.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// 上传数据完成（成功或者失败）时会触发</span></span><br><span class="line">                xhr.<span class="property">upload</span>.<span class="property">onloadend</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                    <span class="comment">// console.log(&#x27;上传结束&#x27;)</span></span><br><span class="line">                &#125;;</span><br><span class="line">                xhr.<span class="title function_">send</span>(formData)</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">appendChild</span>(fileInput);</span><br><span class="line">        &#125;</span><br><span class="line">        fileInput.<span class="title function_">click</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">placeholder</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">theme</span>: <span class="string">&#x27;snow&#x27;</span>,  <span class="comment">// 主题</span></span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="attr">toolbar</span>: &#123;</span><br><span class="line">            <span class="attr">container</span>: toolOptions,  <span class="comment">// 工具栏选项</span></span><br><span class="line">            <span class="attr">handlers</span>: handlers  <span class="comment">// 事件重写</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>PS:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个js文件中以下3个地方需要修改</span></span><br><span class="line"><span class="attr">fastDfsUrl</span>:<span class="string">&#x27;http://123.207.27.208&#x27;</span>,      <span class="comment">// 图片访问地址</span></span><br><span class="line"><span class="attr">action</span>:  <span class="string">&#x27;http://localhost:8080/fastDfs&#x27;</span>, <span class="comment">// 必填参数 图片上传地址</span></span><br><span class="line">self.<span class="property">quill</span>.<span class="title function_">insertEmbed</span>(length, <span class="string">&#x27;image&#x27;</span>, uploadConfig.<span class="property">fastDfsUrl</span>+res.<span class="property">data</span>); <span class="comment">//data 服务器端图片的路径</span></span><br></pre></td></tr></table></figure><h4 id="2-导入并使用">2. 导入并使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> quillConfig <span class="keyword">from</span> <span class="string">&#x27;../../common/js/quill-config&#x27;</span>;</span><br><span class="line"><span class="attr">quillOption</span>: quillConfig,<span class="comment">// data数据模型中配置</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220925232720.png" alt="image-20220925232720768"></p><h3 id="三-多图片上传">三. 多图片上传</h3><h4 id="1-数据库存储方式">1. 数据库存储方式</h4><p>例如t_pet中有个resources字段，专门用来保存宠物细节图片的，例如：</p><p><code>/group1/M00/00/0C/CgAIC2KrUU-ARA8EAAH2I5Y672k716.jpg,/group1/M00/00/0C/CgAIC2KrUYaAaR-6AADnxcxs4eA746.jpg,/group1/M00/00/0C/CgAIC2KrUYqAbjaZAAMbwtByyoU105.jpg,/group1/M00/00/0C/CgAIC2KrUY-AQcYWAAF5fdD2FCI302.jpg</code></p><p><strong>PS:采用逗号分隔多张图片路径</strong></p><h4 id="2-前端实现">2. 前端实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;宠物图片&quot; prop=&quot;index&quot;&gt;</span><br><span class="line">  &lt;el-upload class=&quot;upload-demo&quot;</span><br><span class="line">             action=&quot;http://localhost:8080/fastDfs/&quot;</span><br><span class="line">             :on-preview=&quot;handlePreview&quot;</span><br><span class="line">             :on-remove=&quot;handleRemove&quot;</span><br><span class="line">             :on-success=&quot;handleSuccess&quot;</span><br><span class="line">             :file-list=&quot;fileList&quot;</span><br><span class="line">             list-type=&quot;picture&quot;&gt;</span><br><span class="line">    &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;点击上传&lt;/el-button&gt;</span><br><span class="line">    &lt;div slot=&quot;tip&quot; class=&quot;el-upload__tip&quot;&gt;只能上传jpg/png文件，且不超过500kb&lt;/div&gt;</span><br><span class="line">  &lt;/el-upload&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure><h4 id="3-数据模型">3. 数据模型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编辑界面数据</span></span><br><span class="line"><span class="attr">editForm</span>: &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">typeId</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">resources</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">saleprice</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">costprice</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">onsaletime</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">offsaletime</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">shopId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">userId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">petDetail</span>: &#123;  <span class="comment">//与后端实体类一致</span></span><br><span class="line">    <span class="attr">id</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">intro</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">adoptNotice</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="4-逻辑代码实现">4. 逻辑代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件上传的业务逻辑</span></span><br><span class="line"><span class="title function_">handleSuccess</span>(<span class="params">response, file, fileList</span>) &#123;</span><br><span class="line">  <span class="comment">// 上传多张图片需要对resources进行处理,多张图片保存到数据库的resources字段用,隔开</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>) &#123;</span><br><span class="line">    <span class="comment">// 对已经存在的图片进行拼接</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span> = <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span> + <span class="string">&quot;,&quot;</span> + response.<span class="property">data</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span> = response.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>)</span><br><span class="line">  <span class="comment">// 对fileList进行处理，用以显示图片</span></span><br><span class="line">  <span class="comment">// 先清空 - 这个fileList做了绑定，以前是有值【先清空，再添加最新的数据】</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">fileList</span> = []</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>) &#123;</span><br><span class="line">    <span class="comment">// /group1/M00/00/0C/CgAIC2KrUU-ARA8EAAH2I5Y672k716.jpg,/group1/M00/00/0C/CgAIC2KrUYaAaR-6AADnxcxs4eA746.jpg 对其进行分割</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="comment">// 循环遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 从fastDfs文件系统获取资源</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fileList</span>.<span class="title function_">push</span>(&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://123.207.27.208&#x27;</span> + arr[i]&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件删除的业务逻辑</span></span><br><span class="line"><span class="title function_">handleRemove</span>(<span class="params">file, fileList</span>) &#123;</span><br><span class="line">  <span class="comment">// url:&quot;http://123.207.27.208/group1/M00/01/D0/CgAIC2MwX7eAWEwlAACO89rfJDY938.jpg&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(file);</span><br><span class="line">  <span class="keyword">const</span> filePath = file.<span class="property">url</span>.<span class="title function_">substring</span>(file.<span class="property">url</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;/group&#x27;</span>))<span class="comment">// /group1/M00/01/D0/CgAIC2MwX7eAWEwlAACO89rfJDY938.jpg</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">delete</span>(<span class="string">&quot;/fastDfs?path=&quot;</span> + filePath)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">success</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;删除成功&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;删除失败&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="comment">// 删除之后对resources做处理</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] == filePath) &#123;<span class="comment">//找到了删除的图片</span></span><br><span class="line">        arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);<span class="comment">//删除数组中指定的图片</span></span><br><span class="line">        <span class="comment">// 跳出循环</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对resources重新拼接</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span> = arr.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除后的resources:&quot;</span> + <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对fileList进行处理，用以显示图片</span></span><br><span class="line">  <span class="comment">// 先清空 - 这个fileList做了绑定，以前是有值【先清空，再添加最新的数据】</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">fileList</span> = []</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>) &#123;</span><br><span class="line">    <span class="comment">// /group1/M00/00/0C/CgAIC2KrUU-ARA8EAAH2I5Y672k716.jpg,/group1/M00/00/0C/CgAIC2KrUYaAaR-6AADnxcxs4eA746.jpg 对其进行分割</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="comment">// 循环遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 从fastDfs文件系统获取资源</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fileList</span>.<span class="title function_">push</span>(&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://123.207.27.208&#x27;</span> + arr[i]&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="5-数据回显">5. 数据回显</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示编辑界面</span></span><br><span class="line"><span class="attr">handleEdit</span>: <span class="keyword">function</span> (<span class="params">index, row</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;编辑&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">editForm</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, row);</span><br><span class="line">  <span class="comment">// 对fileList进行处理，用以显示图片</span></span><br><span class="line">  <span class="comment">// 先清空 - 这个fileList做了绑定，以前是有值【先清空，再添加最新的数据】</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">fileList</span> = []</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>) &#123;</span><br><span class="line">    <span class="comment">// /group1/M00/00/0C/CgAIC2KrUU-ARA8EAAH2I5Y672k716.jpg,/group1/M00/00/0C/CgAIC2KrUYaAaR-6AADnxcxs4eA746.jpg 对其进行分割</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="comment">// 循环遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 从fastDfs文件系统获取资源</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fileList</span>.<span class="title function_">push</span>(&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://123.207.27.208&#x27;</span> + arr[i]&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">editFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SpringBoot的定时任务发布秒杀活动到redis</title>
      <link href="/posts/56884dd3.html"/>
      <url>/posts/56884dd3.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-EnableScheduling注解开启定时任务">一. <code>@EnableScheduling</code>注解开启定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableScheduling</span><span class="comment">//开启定时任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KillServiceApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(KillServiceApp.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-Scheduled-cron-0-0-0-指定定时任务">二. <code>@Scheduled(cron = &quot;0 0 0 * * ?&quot;)</code>指定定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.domain.KillActivity;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.service.IKillActivityService;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.util.AssertUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublishKillCourse2Redis</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IKillActivityService activityService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时发布秒杀活动到redis  （0 0 1 * * ?）==&gt;&gt;每天凌晨一点执行一次</span></span><br><span class="line">    <span class="comment">// 每天凌晨0点执行一次  @Scheduled(cron = &quot;0 0 0 * * ?&quot;)</span></span><br><span class="line">    <span class="comment">// @Scheduled(cron = &quot;0 0/1 8-20 * * ?&quot;) // 每隔一分钟执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 0 * * ?&quot;)</span><span class="comment">// 每天凌晨0点执行一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 查询当天的数据sql:SELECT * FROM t_kill_activity WHERE TO_DAYS(start_time) =TO_DAYS(NOW())</span></span><br><span class="line">        <span class="comment">// 获取到当天待发布的活动</span></span><br><span class="line">        List&lt;KillActivity&gt; activities = activityService.getCurrentData();</span><br><span class="line">        AssertUtil.isNotNull(activities, <span class="string">&quot;今日暂无秒杀活动发布&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历每一个活动执行发布</span></span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;--任务准备发布到redis~~~&quot;</span>, DateUtil.now());</span><br><span class="line">        activities.forEach(killActivity -&gt; &#123;</span><br><span class="line">            <span class="comment">// 任务发布</span></span><br><span class="line">            activityService.publish(killActivity.getId());</span><br><span class="line">        &#125;);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;--已发布到redis~~~&quot;</span>, DateUtil.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-发布方法">三. 发布方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IKillCourseService courseService;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;Object, Object&gt; redisTemplate;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> KillActivityMapper activityMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// id:发布的活动id  根据id查询当前活动</span></span><br><span class="line">    <span class="type">KillActivity</span> <span class="variable">killActivity</span> <span class="operator">=</span> selectById(id);</span><br><span class="line">    AssertUtil.isNotNull(killActivity, <span class="string">&quot;秒杀活动不存在&quot;</span>);</span><br><span class="line">    <span class="comment">// 判断活动是否开启和过期</span></span><br><span class="line">    AssertUtil.isEqualsTrim(killActivity.getPublishStatus().toString(), KillActivity.KILL_WAIT_PUBLISH.toString(), <span class="string">&quot;活动已发布或已结束&quot;</span>);</span><br><span class="line">    AssertUtil.isFalse(killActivity.getStartTime().after(<span class="keyword">new</span> <span class="title class_">Date</span>()), <span class="string">&quot;活动未开启,请在规定时间发布&quot;</span>);</span><br><span class="line">    AssertUtil.isFalse(killActivity.getEndTime().before(<span class="keyword">new</span> <span class="title class_">Date</span>()), <span class="string">&quot;活动已经结束&quot;</span>);</span><br><span class="line">    <span class="comment">// 根据秒杀活动查询出所有秒杀课程</span></span><br><span class="line">    Wrapper&lt;KillCourse&gt; wrapper = <span class="keyword">new</span> <span class="title class_">EntityWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;activity_id&quot;</span>, id);</span><br><span class="line">    List&lt;KillCourse&gt; courses = courseService.selectList(wrapper);</span><br><span class="line">    <span class="comment">//更新秒杀活动状态</span></span><br><span class="line">    killActivity.setPublishTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    killActivity.setPublishStatus(KillActivity.KILL_OK_PUBLISH);</span><br><span class="line">    updateById(killActivity);</span><br><span class="line"></span><br><span class="line">    courses.forEach(course -&gt; &#123;</span><br><span class="line">        <span class="comment">// 使用hash存储秒杀课程</span></span><br><span class="line">        <span class="comment">// 课程没有库存 使用信号量来处理超卖超买问题</span></span><br><span class="line">        <span class="comment">// 获取信号量</span></span><br><span class="line">        <span class="type">RSemaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> redissonClient.getSemaphore(course.getId().toString());</span><br><span class="line">        <span class="comment">// 设置信号量 --课程秒杀的数量</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> semaphore.trySetPermits(course.getKillCount());</span><br><span class="line">        log.info(<span class="string">&quot;设置信号量：&#123;&#125;&quot;</span>, b);</span><br><span class="line">        AssertUtil.isTrue(b, <span class="string">&quot;获取信号量失败&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisConstants.KILL_ACTIVITY + id;</span><br><span class="line">        redisTemplate.opsForHash().put(key, course.getCourseId().toString(), course);</span><br><span class="line">        <span class="comment">// 更新秒杀课程状态 秒杀中</span></span><br><span class="line">        course.setPublishStatus(KillCourse.KILLING);</span><br><span class="line">        course.setPublishTime(<span class="keyword">new</span> <span class="title class_">Date</span>());<span class="comment">// 发布时间</span></span><br><span class="line">        courseService.updateById(course);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.redisson.Redisson;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建客户端</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>).setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Minio存储文件对象</title>
      <link href="/posts/f71a6512.html"/>
      <url>/posts/f71a6512.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-Docker拉取镜像（确保自己的服务器已经安装Docker）">一. Docker拉取镜像（确保自己的服务器已经安装Docker）</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure><h3 id="二-启动一个miniio容器">二. 启动一个miniio容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --name minio -p 9090:9000 -p 9999:9999 -d \</span><br><span class="line">--restart=always -e \</span><br><span class="line">&quot;MINIO_ROOT_USER=minio&quot; \</span><br><span class="line">-e &quot;MINIO_ROOT_PASSWORD=minio123&quot; \</span><br><span class="line">-v /home/minio/data:/data \</span><br><span class="line">-v /home/minio/config:/root/.minio minio/minio server /data --console-address &#x27;0.0.0.0:9999&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>账号是minio; 密码是minio123</strong></p><h3 id="三-访问minio管理界面">三. 访问minio管理界面</h3><p>端口<strong>9090</strong>或<strong>9999</strong>（确保在服务器放行相关端口即可访问）</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221118102023.png" alt="image-20221118102023717"></p><p>点击 create a Bucket 创建一个bucket(桶), 这里的Bucket 我们可以理解为文件存储的目录</p><p>输入 bucket name ,点击create bucket 。可以通过 upload 上传文件到bucket中。</p><h3 id="四-Java-上传文件到minio">四. Java 上传文件到minio</h3><ol><li><h4 id="导入依赖">导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试类(需要输入自己的账号密码和IP)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.ObjectWriteResponse;</span><br><span class="line"><span class="keyword">import</span> io.minio.PutObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.MinioException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/18 9:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构建一个Minio客户端</span></span><br><span class="line">            <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> MinioClient.builder()</span><br><span class="line">                    <span class="comment">//创建容器时指定的账号</span></span><br><span class="line">                    .credentials(<span class="string">&quot;账号&quot;</span>, <span class="string">&quot;密码&quot;</span>)</span><br><span class="line">                    <span class="comment">//上传地址</span></span><br><span class="line">                    .endpoint(<span class="string">&quot;http://IP:9090&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\coderyeah\\Desktop\\welt.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .object(<span class="string">&quot;welt.jpg&quot;</span>)    <span class="comment">//文件名</span></span><br><span class="line">                    .contentType(<span class="string">&quot;image/jpeg&quot;</span>)    <span class="comment">//文件类型</span></span><br><span class="line">                    .bucket(<span class="string">&quot;bucket-test&quot;</span>)  <span class="comment">//存储目录名</span></span><br><span class="line">                    .stream(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file), file.length(), -<span class="number">1</span>).build(); <span class="comment">//文件流，以及大小，-1代表不分片</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行上传</span></span><br><span class="line">            <span class="type">ObjectWriteResponse</span> <span class="variable">objectWriteResponse</span> <span class="operator">=</span> minioClient.putObject(putObjectArgs);</span><br><span class="line">            System.out.println(<span class="string">&quot;上传结果 &quot;</span> + objectWriteResponse);</span><br><span class="line">            <span class="comment">//上传之后的文件地址是：</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;http://IP:9090/bucket-test/welt.jpg&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MinioException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error occurred: &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="五-配置权限">五. 配置权限</h3><p>如果我们需要我们上传的文件可以被匿名用户访问，那么需要添加访问权限：找到文件存储目录，点击manager</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221118103113.png" alt="image-20221118103113051"></p><p>然后找到access Rules添加访问规则如下：</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221118103150.png" alt="image-20221118103150617"></p><p>然后再访问路径：<a href="http://IP:9090/bucket-test/welt.jpg">http://IP:9090/bucket-test/welt.jpg</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>生成订单编号的工具类</title>
      <link href="/posts/3f7f57de.html"/>
      <url>/posts/3f7f57de.html</url>
      
        <content type="html"><![CDATA[<hr color="red"/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerateUtils</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取商品编码</span></span><br><span class="line"><span class="comment">    * 商品编码规则：nanoTime(后5位)*5位随机数(10000~99999)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateProductCode</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">long</span> <span class="variable">nanoPart</span> <span class="operator">=</span> System.nanoTime() % <span class="number">100000L</span>;</span><br><span class="line">      <span class="keyword">if</span>(nanoPart&lt;<span class="number">10000L</span>)&#123;</span><br><span class="line">         nanoPart+=<span class="number">10000L</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">long</span> <span class="variable">randomPart</span> <span class="operator">=</span> (<span class="type">long</span>)(Math.random()*(<span class="number">90000</span>)+<span class="number">10000</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>+String.valueOf((<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(nanoPart).multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(randomPart))));</span><br><span class="line">      <span class="keyword">return</span> code.substring(code.length()-<span class="number">10</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id: 用户id</span></span><br><span class="line"><span class="comment">    * 生成订单编号</span></span><br><span class="line"><span class="comment">    * 订单编号规则：(10位)：(年末尾*月，取后2位)+（用户ID%3.33*日取整后2位）+(timestamp*10000以内随机数，取后6位)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateOrderSn</span><span class="params">(<span class="type">long</span> id)</span>&#123;</span><br><span class="line">      <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">      <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(Calendar.YEAR);</span><br><span class="line">      year = year % <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">if</span>(year == <span class="number">0</span>) year = <span class="number">10</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH)+<span class="number">1</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">yearMonth</span>  <span class="operator">=</span>  year * month;</span><br><span class="line">      <span class="type">String</span> <span class="variable">yearMonthPart</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>+yearMonth;</span><br><span class="line">      yearMonthPart = yearMonthPart.substring(yearMonthPart.length() - <span class="number">2</span> );</span><br><span class="line">      </span><br><span class="line">      <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">      <span class="type">int</span> <span class="variable">dayNum</span> <span class="operator">=</span> (<span class="type">int</span>)((id % <span class="number">3.33</span>) * day);</span><br><span class="line">      <span class="type">String</span> <span class="variable">dayPart</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>+dayNum;</span><br><span class="line">      dayPart = dayPart.substring(dayPart.length() - <span class="number">2</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="type">String</span> <span class="variable">timestampPart</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>+(Math.random() * <span class="number">10000</span>) * (System.currentTimeMillis()/<span class="number">10000</span>);</span><br><span class="line">      timestampPart = timestampPart.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      timestampPart = timestampPart.substring(<span class="number">0</span>,<span class="number">6</span>);</span><br><span class="line">      <span class="keyword">return</span> yearMonthPart+dayPart+timestampPart;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 生成统一支付单号</span></span><br><span class="line"><span class="comment">    * 规则：年(2)月(2)日(2)时(2)分(2)+timestamp*5位随机整数取后5位</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateUnionPaySn</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">      <span class="type">SimpleDateFormat</span> <span class="variable">dateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddhhmm&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">dateTime</span> <span class="operator">=</span> dateFormat.format(calendar.getTime());</span><br><span class="line">      dateTime = dateTime.substring(<span class="number">2</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">timestampPart</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>+(Math.random() * <span class="number">10000</span>) * (System.currentTimeMillis()/<span class="number">10000</span>);</span><br><span class="line">      timestampPart = timestampPart.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      timestampPart = timestampPart.substring(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">      <span class="keyword">return</span> dateTime+timestampPart;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">long</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">//String timestampPart = &quot;&quot;+(Math.random() * 10000) * (System.currentTimeMillis()/10000);</span></span><br><span class="line">         <span class="comment">//System.out.println(timestampPart);</span></span><br><span class="line">         <span class="comment">//System.out.println(generateOrderSn(i));</span></span><br><span class="line">         System.out.println(generateUnionPaySn());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计一个上下拖动分割窗口</title>
      <link href="/posts/d78d2689.html"/>
      <url>/posts/d78d2689.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-效果展示">一. 效果展示</h3><p><img src="F:%5Cblog%5Ccoderyeah%5Csource_posts%5Cimg%5Cimage-20230301100821417.png" alt="image-20230301100821417"></p><p><img src="F:%5Cblog%5Ccoderyeah%5Csource_posts%5Cimg%5Cimage-20230301100901413.png" alt="image-20230301100901413"></p><h3 id="二-自定义组件split-spane">二.自定义组件<code>split-spane</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;splitPane&quot; class=&quot;split-pane&quot; :class=&quot;direction&quot; :style=&quot;&#123; flexDirection: direction &#125;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;pane pane-one&quot; :style=&quot;lengthType + &#x27;:&#x27; + paneLengthValue&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;one&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div</span><br><span class="line">      style=&quot;z-index: 2&quot;</span><br><span class="line">      class=&quot;pane-trigger&quot;</span><br><span class="line">      :style=&quot;lengthType + &#x27;:&#x27; + triggerLengthValue&quot;</span><br><span class="line">      @mousedown=&quot;handleMouseDown&quot;</span><br><span class="line">    /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;pane pane-two&quot; style=&quot;z-index: 2;background-color: white&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;two&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    direction: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#x27;row&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    min: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 10</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    max: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 90</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    paneLengthPercent: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 50</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    triggerLength: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 10</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      triggerLeftOffset: 0 // 鼠标距滑动器左(顶)侧偏移量</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    lengthType() &#123;</span><br><span class="line">      return this.direction === &#x27;row&#x27; ? &#x27;width&#x27; : &#x27;height&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    paneLengthValue() &#123;</span><br><span class="line">      return `calc($&#123;this.paneLengthPercent&#125;% - $&#123;this.triggerLength / 2 + &#x27;px&#x27;&#125;)`</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    triggerLengthValue() &#123;</span><br><span class="line">      return this.triggerLength + &#x27;px&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 按下滑动器</span><br><span class="line">    handleMouseDown(e) &#123;</span><br><span class="line">      document.addEventListener(&#x27;mousemove&#x27;, this.handleMouseMove)</span><br><span class="line">      document.addEventListener(&#x27;mouseup&#x27;, this.handleMouseUp)</span><br><span class="line"></span><br><span class="line">      if (this.direction === &#x27;row&#x27;) &#123;</span><br><span class="line">        this.triggerLeftOffset = e.pageX - e.srcElement.getBoundingClientRect().left</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.triggerLeftOffset = e.pageY - e.srcElement.getBoundingClientRect().top</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 按下滑动器后移动鼠标</span><br><span class="line">    handleMouseMove(e) &#123;</span><br><span class="line">      const clientRect = this.$refs.splitPane.getBoundingClientRect()</span><br><span class="line">      let paneLengthPercent = 0</span><br><span class="line"></span><br><span class="line">      if (this.direction === &#x27;row&#x27;) &#123;</span><br><span class="line">        const offset = e.pageX - clientRect.left - this.triggerLeftOffset + this.triggerLength / 2</span><br><span class="line">        paneLengthPercent = (offset / clientRect.width) * 100</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        const offset = e.pageY - clientRect.top - this.triggerLeftOffset + this.triggerLength / 2</span><br><span class="line">        paneLengthPercent = (offset / clientRect.height) * 100</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (paneLengthPercent &lt; this.min) &#123;</span><br><span class="line">        paneLengthPercent = this.min</span><br><span class="line">      &#125;</span><br><span class="line">      if (paneLengthPercent &gt; this.max) &#123;</span><br><span class="line">        paneLengthPercent = this.max</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      this.$emit(&#x27;update:paneLengthPercent&#x27;, paneLengthPercent)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 松开滑动器</span><br><span class="line">    handleMouseUp() &#123;</span><br><span class="line">      document.removeEventListener(&#x27;mousemove&#x27;, this.handleMouseMove)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.split-pane &#123;</span><br><span class="line">  //background: palegreen;</span><br><span class="line">  height: 100%;</span><br><span class="line">  display: flex;</span><br><span class="line">  &amp;.row &#123;</span><br><span class="line">    .pane &#123;</span><br><span class="line">      height: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    .pane-trigger &#123;</span><br><span class="line">      height: 100%;</span><br><span class="line">      cursor: col-resize;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;.column &#123;</span><br><span class="line">    .pane &#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    .pane-trigger &#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">      cursor: row-resize;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .pane-one &#123;</span><br><span class="line">    //background: palevioletred;</span><br><span class="line">  &#125;</span><br><span class="line">  .pane-trigger &#123;</span><br><span class="line">    user-select: none;</span><br><span class="line">    background: rgba(241, 241, 241, 0.95);</span><br><span class="line">  &#125;</span><br><span class="line">  .pane-two &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    //background: turquoise;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三-使用示例">三.使用示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;page&quot; style=&quot;height: 800px&quot;&gt;</span><br><span class="line">    &lt;SplitPane</span><br><span class="line">      direction=&quot;column&quot;</span><br><span class="line">      :min=&quot;20&quot;</span><br><span class="line">      :max=&quot;80&quot;</span><br><span class="line">      :triggerLength=&quot;20&quot;</span><br><span class="line">      :paneLengthPercent.sync=&quot;paneLengthPercent&quot;&gt;</span><br><span class="line">      &lt;template v-slot:one&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          区域一</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;template v-slot:two&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          区域二</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/SplitPane&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import SplitPane from &#x27;@/views/quality/split-pane&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Test&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    SplitPane</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      paneLengthPercent: 50</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.page &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  //background: #000;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="F:%5Cblog%5Ccoderyeah%5Csource_posts%5Cimg%5Cimage-20230301101222525.png" alt="image-20230301101222525"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之适配器模式</title>
      <link href="/posts/796a0e79.html"/>
      <url>/posts/796a0e79.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-模式动机">一.模式动机</h3><ul><li>在软件开发中采用类似于电源适配器的设计和编码技巧被称为适配器模式。</li><li>通常情况下，客户端可以通过目标类的接口访问它所提供的服务。有时，现有的类可以满足客户类的功能需要，但是它所提供的接口不一定是客户类所期望的，这可能是因为现有类中方法名与目标类中定义的方法名不一致等原因所导致的。</li><li>在这种情况下，现有的接口需要转化为客户类期望的接口，这样保证了对现有类的重用。如果不进行这样的转化，客户类就不能利用现有类所提供的功能，适配器模式可以完成这样的转化。</li><li>在适配器模式中可以定义一个包装类，包装不兼容接口的对象，这个包装类指的就是适配器(<code>Adapter</code>)，它所包装的对象就是适配者(<code>Adaptee</code>)，即被适配的类。</li><li>适配器提供客户类需要的接口，适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。也就是说：当客户类调用适配器的方法时，在适配器类的内部将调用适配者类的方法，而这个过程对客户类是透明的，客户类并不直接访问适配者类。因此，适配器可以使由于接口不兼容而不能交互的类可以一起工作。这就是适配器模式的模式动机。</li></ul><h3 id="二-模式定义">二.模式定义</h3><p>适配器模式(<code>Adapter Pattern</code>) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p><h3 id="三-模式结构">三.模式结构</h3><p>适配器模式包含如下角色：</p><ul><li><code>Target</code>：目标抽象类</li><li><code>Adapter</code>：适配器类</li><li><code>Adaptee</code>：适配者类</li><li><code>Client</code>：客户类</li></ul><p>适配器模式有对象适配器和类适配器两种实现：</p><p>对象适配器：</p><p><img src="F:%5Cblog%5Ccoderyeah%5Csource_posts%5Cimg%5Cimage-20230111115432167.png" alt="image-20230111115432167"></p><p>类适配器：</p><p><img src="img/image-20230111115719568.png" alt="image-20230111115719568"></p><h3 id="四-代码示例">四.代码示例</h3><h4 id="1-类适配器">1.类适配器</h4><p>适配器与适配者之间是继承（或实现）关系</p><p>适配者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/11 14:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adaptee</span> <span class="keyword">implements</span> <span class="title class_">AdapteeInterface</span> &#123;<span class="comment">// 适配者类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;适配者类的表演时间...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;适配者类的dance...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/11 14:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AdapteeInterface</span> &#123; <span class="comment">// 适配者要实现的接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/11 14:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> &#123;<span class="comment">// 目标接口</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">capture</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">release</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/11 14:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adaptor</span> <span class="keyword">extends</span> <span class="title class_">Adaptee</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> &#123;<span class="comment">// 适配器--使接口不兼容的类协调工作</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">capture</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.dance();</span><br><span class="line">        System.out.println(<span class="string">&quot;target接口的获取方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;target接口的释放方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Adaptor</span> <span class="variable">adaptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adaptor</span>();</span><br><span class="line">        adaptor.release();</span><br><span class="line">        adaptor.capture();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="img/image-20230111145308227.png" alt="image-20230111145308227"></p><h4 id="2-对象适配器">2.对象适配器</h4><p>适配器与适配者之间是关联关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/11 14:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectAdaptor</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AdapteeInterface anInterface;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ObjectAdaptor</span><span class="params">(AdapteeInterface anInterface)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.anInterface = anInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">capture</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象适配器俘获方法...&quot;</span>);</span><br><span class="line">        anInterface.dance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象适配器释放方法...&quot;</span>);</span><br><span class="line">        anInterface.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/11 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*Adaptor adaptor = new Adaptor();</span></span><br><span class="line"><span class="comment">        adaptor.release();</span></span><br><span class="line"><span class="comment">        adaptor.capture();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AdapteeInterface</span> <span class="variable">adapteeInterface</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adaptee</span>();</span><br><span class="line">        <span class="type">ObjectAdaptor</span> <span class="variable">objectAdaptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectAdaptor</span>(adapteeInterface);</span><br><span class="line">        objectAdaptor.release();</span><br><span class="line">        objectAdaptor.capture();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-优点">五.优点</h3><ul><li><p>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。</p></li><li><p>增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。</p></li><li><p>灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。</p></li><li><p>类适配器模式还具有如下优点：</p><p>由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配器的灵活性更强。</p></li><li><p>对象适配器模式还具有如下优点：</p><p>一个对象适配器可以把多个不同的适配者适配到同一个目标，也就是说，同一个适配器可以把适配者类和它的子类都适配到目标接口。</p></li></ul><h3 id="六-缺点">六.缺点</h3><ul><li><p>类适配器模式的缺点如下：</p><p>对于Java、C#等不支持多重继承的语言，一次最多只能适配一个适配者类，而且目标抽象类只能为抽象类，不能为具体类，其使用有一定的局限性，不能将一个适配者类和它的子类都适配到目标接口。</p></li><li><p>对象适配器模式的缺点如下：</p><p>与类适配器模式相比，要想置换适配者类的方法就不容易。如果一定要置换掉适配者类的一个或多个方法，就只好先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。</p></li></ul><h3 id="七-适用环境">七.适用环境</h3><ul><li>系统需要使用现有的类，而这些类的接口不符合系统的需要。</li><li>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之建造者模式</title>
      <link href="/posts/722e57af.html"/>
      <url>/posts/722e57af.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-模式动机">一.模式动机</h3><p>无论是在现实世界中还是在软件系统中，都存在一些复杂的对象，它们拥有多个组成部分，如汽车，它包括车轮、方向盘、发送机等各种部件。而对于大多数用户而言，无须知道这些部件的装配细节，也几乎不会使用单独某个部件，而是使用一辆完整的汽车，可以通过建造者模式对其进行设计与描述，建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</p><p>在软件开发中，也存在大量类似汽车一样的复杂对象，它们拥有一系列成员属性，这些成员属性中有些是引用类型的成员对象。而且在这些复杂对象中，还可能存在一些限制条件，如某些属性没有赋值则复杂对象不能作为一个完整的产品使用；有些属性的赋值必须按照某个顺序，一个属性没有赋值之前，另一个属性可能无法赋值等。</p><p>复杂对象相当于一辆有待建造的汽车，而对象的属性相当于汽车的部件，建造产品的过程就相当于组合部件的过程。由于组合部件的过程很复杂，因此，这些部件的组合过程往往被“外部化”到一个称作建造者的对象里，建造者返还给客户端的是一个已经建造完毕的完整产品对象，而用户无须关心该对象所包含的属性以及它们的组装方式，这就是建造者模式的模式动机。</p><h3 id="二-模式定义">二.模式定义</h3><p>建造者模式(<code>Builder Pattern</code>)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的<strong>类型和内容</strong>就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。根据中文翻译的不同，建造者模式又可以称为<strong>生成器模式</strong>。</p><h3 id="三-建造者模式包含如下角色：">三.建造者模式包含如下角色：</h3><ul><li><code>Builder</code>：抽象建造者</li><li><code>ConcreteBuilder</code>：具体建造者</li><li><code>Director</code>：指挥者</li><li><code>Product</code>：产品角色</li></ul><p><img src="F:%5Cblog%5Ccoderyeah%5Csource_posts%5Cimg%5Cimage-20230110144152537.png" alt="image-20230110144152537"></p><h4 id="时序图">时序图</h4><p><img src="F:%5Cblog%5Ccoderyeah%5Csource_posts%5Cimg%5Cimage-20230110144311165.png" alt="image-20230110144311165"></p><h3 id="四-代码实例">四.代码实例</h3><ol><li><p><code>Builder</code>：抽象建造者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="comment">// 创建部件 A 比如创建汽车车轮</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildPartA</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建部件 B 比如创建汽车方向盘</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildPartB</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建部件 C 比如创建汽车发动机</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildPartC</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最后组装成品结果 (返回最后装配好的汽车)</span></span><br><span class="line">    <span class="comment">// 成品的组装过程不在这里进行,而是转移到下面的 Director 类中进行.</span></span><br><span class="line">    <span class="comment">// 从而实现了解耦过程和部件</span></span><br><span class="line">    Product <span class="title function_">getResult</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ConcreteBuilder</code>：具体建造者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.builder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteBuilder</span> <span class="keyword">implements</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPartA</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setNo(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt() + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;创建部件A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPartB</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setBrand(<span class="string">&quot;华为制造&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;创建部件B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPartC</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setName(<span class="string">&quot;悠悠米&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;创建部件C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 返回最后组装成品结果</span></span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Product</code>：产品角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String no; <span class="comment">// 编号</span></span><br><span class="line">    <span class="keyword">private</span> String brand; <span class="comment">// 品牌</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(String no)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&#x27;&quot;</span> + no + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Director</code>：指挥者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;<span class="comment">// 用于组装部件</span></span><br><span class="line">    Builder builder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Director</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将部件 partA partB partC 最后组成复杂对象</span></span><br><span class="line">    <span class="comment">// 这里是将车轮 方向盘和发动机组装成汽车的过程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">        builder.buildPartA();</span><br><span class="line">        builder.buildPartB();</span><br><span class="line">        builder.buildPartC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123; <span class="comment">// builder模式的调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConcreteBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteBuilder</span>();</span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(builder);</span><br><span class="line">        director.construct();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> builder.getResult();</span><br><span class="line">        System.out.println(product);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="img/image-20230110151816133.png" alt="image-20230110151816133"></p><h3 id="五-模式分析">五.模式分析</h3><p>抽象建造者类中定义了产品的创建方法和返回方法;</p><p>建造者模式的结构中还引入了一个<strong>指挥者类Director</strong>，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象</p><p>在客户端代码中，无须关心产品对象的具体组装过程，只需确定具体建造者的类型即可，建造者模式将复杂对象的构建与对象的表现分离开来，这样使得同样的构建过程可以创建出不同的表现。</p><h3 id="六-优点">六.优点</h3><ul><li>在建造者模式中， <strong>客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</strong></li><li>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者， <strong>用户使用不同的具体建造者即可得到不同的产品对象</strong> 。</li><li><strong>可以更加精细地控制产品的创建过程</strong> 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li><li><strong>增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。</strong></li></ul><h3 id="七-缺点">七.缺点</h3><ul><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li></ul><h3 id="八-模式应用">八.模式应用</h3><p>在很多游戏软件中，地图包括天空、地面、背景等组成部分，人物角色包括人体、服装、装备等组成部分，可以使用建造者模式对其进行设计，通过不同的具体建造者创建不同类型的地图或人物。</p><h3 id="九-模式扩展">九.模式扩展</h3><p>建造者模式的简化:</p><ul><li>省略抽象建造者角色：如果系统中只需要一个具体建造者的话，可以省略掉抽象建造者。</li><li>省略指挥者角色：在具体建造者只有一个的情况下，如果抽象建造者角色已经被省略掉，那么还可以省略指挥者角色，让Builder角色扮演指挥者与建造者双重角色。</li></ul><h3 id="十-建造者模式与抽象工厂模式的比较">十.建造者模式与抽象工厂模式的比较</h3><ul><li>与抽象工厂模式相比， <strong>建造者模式返回一个组装好的完整产品</strong> ，而 <strong>抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。</strong></li><li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。</li><li>如果将抽象工厂模式看成 <strong>汽车配件生产工厂</strong> ，生产一个产品族的产品，那么建造者模式就是一个 <strong>汽车组装工厂</strong> ，通过对部件的组装可以返回一辆完整的汽车。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之简单工厂模式</title>
      <link href="/posts/eeb5bd44.html"/>
      <url>/posts/eeb5bd44.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-模式动机">一.模式动机</h3><p>考虑一个简单的软件应用场景，一个软件系统可以提供多个外观不同的<strong>按钮</strong>（如圆形按钮、矩形按钮、菱形按钮等）， 这些按钮都源自同一个基类，不过在继承基类后不同的子类修改了部分属性从而使得它们可以呈现不同的外观，如果我们希望在使用这些按钮时，不需要知道这些具体按钮类的名字，<strong>只需要知道表示该按钮类的一个参数</strong>，并提供一个调用方便的方法，把该参数传入方法即可返回一个相应的按钮对象，此时，就可以使用简单工厂模式。</p><h3 id="二-模式定义">二.模式定义</h3><p><strong>简单工厂模式</strong>(Simple Factory Pattern)：又称为<strong>静态工厂方法</strong>(Static Factory  Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的<strong>实例</strong>通常都<strong>具有共同的父类</strong>。</p><h3 id="三-模式结构">三.模式结构</h3><p>简单工厂模式包含如下角色：</p><ul><li><p><code>Factory</code>：工厂角色</p><p>工厂角色负责实现创建所有实例的内部逻辑</p></li><li><p><code>Product</code>：抽象产品角色</p><p>抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口</p></li><li><p><code>ConcreteProduct</code>：具体产品角色</p><p>具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</p></li></ul><p><img src="img/image-20230109161635485.png" alt="image-20230109161635485"></p><h3 id="四-实序图">四.实序图</h3><p><img src="img/image-20230109161759963.png" alt="image-20230109161759963"></p><h3 id="五-代码实例">五.代码实例</h3><ol><li><h4 id="产品角色">产品角色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.design;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="具体产品角色">具体产品角色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.design;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/9 16:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产产品A...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.design;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductB</span> <span class="keyword">implements</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产产品B...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>工厂角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.design;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123; <span class="comment">// 简单工厂</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title function_">createProduct</span><span class="params">(String arg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(arg, <span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(arg, <span class="string">&quot;B&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="六-模式分析">六.模式分析</h3><ul><li>将对象的创建和对象本身业务处理分离可以<strong>降低系统的耦合度</strong>，使得两者修改起来都相对容易。</li><li>在调用工厂类的工厂方法时，由于工厂方法是静态方法，使用起来很方便，可通过类名直接调用，而且只需要传入一个简单的参数即可，在实际开发中，还可以在调用时将所传入的<strong>参数保存在XML等格式的配置文件</strong>中，修改参数时无须修改任何源代码。</li><li>简单工厂模式最大的问题在于工厂类的<strong>职责相对过重</strong>，增加新的产品需要修改工厂类的判断逻辑，这一点与开闭原则是相违背的。</li><li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li></ul><h3 id="七-简单工厂模式的优点">七.简单工厂模式的优点</h3><ul><li>工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法实现了对责任的分割，它提供了专门的工厂类用于创建对象。</li><li>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。</li><li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上<strong>提高了系统的灵活</strong>性。</li></ul><h3 id="八-简单工厂模式的缺点">八.简单工厂模式的缺点</h3><ul><li>由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。</li><li>使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。</li><li>系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。</li><li>简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。</li></ul><h3 id="九-适用环境">九.适用环境</h3><ul><li>工厂类负责创建的对象比较少：由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。</li><li>客户端只知道传入工厂类的参数，对于如何创建对象不关心：客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数。</li></ul><h3 id="十-模式应用">十.模式应用</h3><ol><li>JDK类库中广泛使用了简单工厂模式，如工具类java.text.DateFormat，它用于格式化一个本地日期或者时间。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> DateFormat <span class="title function_">getDateInstance</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> DateFormat <span class="title function_">getDateInstance</span><span class="params">(<span class="type">int</span> style)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> DateFormat <span class="title function_">getDateInstance</span><span class="params">(<span class="type">int</span> style,Locale locale)</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>Java加密技术</li></ol><p>获取不同加密算法的密钥生成器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">KeyGenerator</span> <span class="variable">keyGen</span> <span class="operator">=</span> KeyGenerator.getInstance(<span class="string">&quot;DESede&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建密码器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cipher cp=Cipher.getInstance(<span class="string">&quot;DESede&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="十一-总结">十一.总结</h3><ul><li>创建型模式对类的实例化过程进行了抽象，能够将对象的创建与对象的使用过程分离。</li><li>简单工厂模式又称为静态工厂方法模式，它属于<strong>类创建型模式</strong>。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</li><li>简单工厂模式包含三个角色：<strong>工厂角色</strong>负责实现创建所有实例的内部逻辑；<strong>抽象产品角色</strong>是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；<strong>具体产品角色</strong>是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li><li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li><li>简单工厂模式最大的优点在于实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责，但是其最大的缺点在于工厂类<strong>不够灵活</strong>，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂。</li><li>简单工厂模式适用情况包括：工厂类负责创建的对象比较少；客户端只知道传入工厂类的参数，对于如何创建对象不关心。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂方法模式</title>
      <link href="/posts/cdd7d3fd.html"/>
      <url>/posts/cdd7d3fd.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-模式动机">一.模式动机</h3><p>现在对该系统进行修改，不再设计一个按钮工厂类来统一负责所有产品的创建，而是将具体按钮的创建过程交给专门的<strong>工厂子类</strong>去完成，我们先定义一个抽象的按钮工厂类，再定义具体的工厂类来生成圆形按钮、矩形按钮、菱形按钮等，它们实现在抽象按钮工厂类中定义的方法。这种抽象化的结果使这种结构可以在不修改具体工厂类的情况下引进新的产品，如果出现新的按钮类型，只需要为这种新类型的按钮创建一个具体的工厂类就可以获得该新按钮的实例，这一特点无疑使得工厂方法模式具有超越简单工厂模式的优越性，更加符合**“开闭原则(OCP: Open-Closed Principle）：一个软件的实体应当对扩展开放，对修改关闭)**。</p><h3 id="二-模式定义">二.模式定义</h3><p><strong>工厂方法模式</strong>(Factory Method Pattern)又称为工厂模式，也叫虚拟构造器(Virtual  Constructor)模式或者<strong>多态工厂</strong>(Polymorphic  Factory)模式，它属于<strong>类创建型模式</strong>。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p><h3 id="三-模式结构">三.模式结构</h3><p>工厂方法模式包含如下角色：</p><ul><li><code>Product</code>：抽象产品</li><li><code>ConcreteProduct</code>：具体产品</li><li><code>Factory</code>：抽象工厂</li><li><code>ConcreteFactory</code>：具体工厂</li></ul><p><img src="img/image-20230109171501106.png" alt="image-20230109171501106"></p><h3 id="四-代码实例">四.代码实例</h3><ol><li><p>抽象产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;制造ProductA...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽象工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Factory</span> &#123; <span class="comment">// 工厂方法</span></span><br><span class="line">    Product <span class="title function_">create</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 9:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryA</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="五-模式分析">五.模式分析</h3><p>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，<strong>核心的工厂类不再负责所有产品的创建</strong>，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责哪一个产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。</p><h3 id="六-工厂方法模式优点">六.工厂方法模式优点</h3><ul><li>在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品<strong>对应的工厂</strong>，无须关心创建细节，甚至无须知道具体产品类的类名。</li><li>基于<strong>工厂角色</strong>和<strong>产品角色</strong>的<strong>多态</strong>性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，是因为所有的具体工厂类都具有同一抽象父类。</li><li>使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要<strong>添加一个具体工厂和具体产品</strong>就可以了。这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</li></ul><h3 id="七-工厂方法模式的缺点">七.工厂方法模式的缺点</h3><ul><li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，<strong>系统中类的个数将成对增加</strong>，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li></ul><h3 id="八-模式应用">八.模式应用</h3><p>JDBC中的工厂方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=DB;user=sa;password=&quot;</span>);</span><br><span class="line">Statement statement=conn.createStatement();</span><br><span class="line">ResultSet rs=statement.executeQuery(<span class="string">&quot;select * from UserInfo&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="九-总结">九.总结</h3><ul><li>工厂方法模式又称为<strong>工厂模式</strong>，它属于<strong>类创建型模式</strong>。在工厂方法模式中，<strong>工厂父类负责定义创建产品对象的公共接口</strong>，而<strong>工厂子类则负责生成具体的产品对象</strong>，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</li><li>工厂方法模式包含四个角色：抽象产品是定义产品的接口，是工厂方法模式所创建对象的超类型，即产品对象的共同父类或接口；具体产品实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，它们之间往往一一对应；抽象工厂中声明了工厂方法，用于返回一个产品，它是工厂方法模式的核心，任何在模式中创建对象的工厂类都必须实现该接口；具体工厂是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户调用，返回一个具体产品类的实例。</li><li>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，<strong>核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做</strong>。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。</li><li>工厂方法模式的主要优点是增加新的产品类时无须修改现有系统，并封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性；其缺点在于增加新产品的同时需要增加新的工厂，导致系统类的个数成对增加，在一定程度上增加了系统的复杂性。</li><li>工厂方法模式适用情况包括：一个类不知道它所需要的对象的类；一个类通过其子类来指定创建哪个对象；将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="/posts/1a4b62fe.html"/>
      <url>/posts/1a4b62fe.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-模式动机">一.模式动机</h3><p>对于系统中的某些类来说，<strong>只有一个实例</strong>很重要，例如，一个系统中可以存在多个打印任务，但是只能有一个正在工作的任务；一个系统只能有一个窗口管理器或文件系统；一个系统只能有一个计时工具或ID（序号）生成器。</p><p>如何保证一个类只有一个实例并且这个实例易于被访问呢？定义一个全局变量可以确保对象随时都可以被访问，但不能防止我们实例化多个对象。</p><p>一个更好的解决办法是让类自身负责保存它的唯一实例。这个类可以保证没有其他实例被创建，并且它可以提供一个访问该实例的方法。这就是单例模式的模式动机。</p><h3 id="二-模式定义">二.模式定义</h3><p>单例模式(Singleton Pattern)：<strong>单例模式确保某一个类只有一个实例</strong>，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p><p>单例模式的要点有三个：<strong>一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例</strong>。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。</p><h3 id="三-模式结构">三.模式结构</h3><p>单例模式包含如下角色：</p><ul><li>Singleton：单例</li></ul><p><img src="F:%5Cblog%5Ccoderyeah%5Csource_posts%5Cimg%5Cimage-20230110153503088.png" alt="image-20230110153503088"></p><h3 id="四-代码示例">四.代码示例</h3><ol><li><p>单例模式-饿汉模式</p><p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，不再改变，是<strong>线程安全</strong>的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;<span class="comment">// 单例设计模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单例模式-懒汉模式（线程不安全）</p><p>① 在<code>getInstance2</code>方法上加同步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;<span class="comment">// 懒加载单例模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton2</span> <span class="variable">singleton2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton2 <span class="title function_">getInstance2</span><span class="params">()</span> &#123;<span class="comment">// 防止高并发创建多个实例</span></span><br><span class="line">        <span class="keyword">if</span> (singleton2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            singleton2 = <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 双重锁鉴定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 15:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123; <span class="comment">//懒汉单例模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">SINGLETON</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 唯一实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">// 创建实例静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (SINGLETON == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (SINGLETON == <span class="literal">null</span>) &#123;</span><br><span class="line">                    SINGLETON = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SINGLETON;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ 静态内部类（在使用时才会被加载）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 16:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123; <span class="comment">// 静态内部类解决单例懒汉模式的线程安全问题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LazyLoad</span> &#123;</span><br><span class="line">        <span class="comment">// 唯一实例对象</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">SINGLETON</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 静态方法获取实例对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LazyLoad.SINGLETON;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="五-模式分析">五.模式分析</h3><p>单例模式的目的是保证<strong>一个类仅有一个实例</strong>，并提供一个访问它的<strong>全局访问点</strong>。单例模式包含的角色只有一个，就是单例类——<strong>Singleton</strong>。单例类拥有一个<strong>私有构造函数</strong>，确保用户无法通过new关键字直接实例化它。除此之外，该模式中包含一个<strong>静态私有成员变量与静态公有的工厂方法</strong>，该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</p><p>在单例模式的实现过程中，需要注意如下三点：</p><ul><li>单例类的构造函数为私有；</li><li>提供一个自身的静态私有成员变量；</li><li>提供一个公有的静态工厂方法。</li></ul><h3 id="六-优点">六.优点</h3><ul><li>提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了<strong>共享</strong>的概念。</li><li>由于在系统内存中只存在一个对象，因此可以<strong>节约系统资源</strong>，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。</li><li>允许可变数目的实例。我们可以基于单例模式进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例。</li></ul><h3 id="七-缺点">七.缺点</h3><ul><li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。</li><li>单例类的职责过重，在一定程度上违背了“<strong>单一职责原则</strong>”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。</li><li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态的丢失。</li></ul><h3 id="八-适用环境">八.适用环境</h3><p>在以下情况下可以使用单例模式：</p><ul><li>系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器，或者需要考虑资源消耗太大而只允许创建一个对象。</li><li>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。</li><li>在一个系统中要求一个类只有一个实例时才应当使用单例模式。反过来，如果一个类可以有几个实例共存，就需要对单例模式进行改进，使之成为多例模式。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之抽象工厂模式</title>
      <link href="/posts/1ef33906.html"/>
      <url>/posts/1ef33906.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-模式动机">一.模式动机</h3><ul><li><p>在工厂方法模式中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法也具有唯一性，一般情况下，一个具体工厂中只有一个工厂方法或者一组重载的工厂方法。但是有时候我们需要<strong>一个工厂可以提供多个产品对象</strong>，而不是单一的产品对象。</p><blockquote><p>为了更清晰地理解工厂方法模式，需要先引入两个概念：</p><ul><li><strong>产品等级结构</strong> ：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，<strong>抽象电视机是父类，而具体品牌的电视机是其子类</strong>。</li><li><strong>产品族</strong> ：在抽象工厂模式中，<strong>产品族是指由同一个工厂生产的</strong>，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</li></ul></blockquote></li><li><p>当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时需要使用抽象工厂模式。</p></li><li><p>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</p><ul><li>抽象工厂模式与工厂方法模式最大的区别在于，<strong>工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建</strong> 。当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、有效率。</li></ul></li></ul><h3 id="二-模式定义">二.模式定义</h3><p>抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</p><h3 id="三-模式结构">三.模式结构</h3><p>抽象工厂模式包含如下角色：</p><ul><li><code>AbstractFactory</code>：抽象工厂模式的核心，包含对多个产品等级结构的声明，任何工厂类都必须实现这个接口。</li><li><code>ConcreteFactory</code>：具体工厂类是抽象工厂的一个实现，负责实例化某个产品族中的产品对象。</li><li><code>AbstractProduct</code>：抽象模式所创建的所有对象的父类，或声明所有具体产品所共有的公共接口。</li><li><code>Product</code>：抽象工厂模式所创建的真正实例。</li></ul><p><img src="img/image-20230110101800602.png" alt="image-20230110101800602"></p><h3 id="四-实序图">四.实序图</h3><p><img src="img/image-20230110102043096.png" alt="image-20230110102043096"></p><h3 id="五-代码实例">五.代码实例</h3><h4 id="架构图">架构图</h4><p><img src="img/image-20230110141525649.png" alt="image-20230110141525649"></p><ol><li><p><code>AbstractFactory</code>抽象工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 11:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductFactory</span> &#123; <span class="comment">// 生产产品的工厂 就是抽象工厂</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Phone实例的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Phone <span class="title function_">createPhone</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Computer实例的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Computer <span class="title function_">createComputer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ConcreteFactory</code>具体工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 11:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWeiFactory</span> <span class="keyword">implements</span> <span class="title class_">ProductFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">createPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaWeiPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">createComputer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaWeiComputer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Product</code>抽象工厂模式所创建的真正实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWeiComputer</span> <span class="keyword">implements</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is a HUAWEI Computer...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 11:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWeiPhone</span> <span class="keyword">implements</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is a HUAWEI Phone...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>AbstractProduct</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 11:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showPhone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 11:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showPhone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试(可以自建XiaoMiFactory类并实现工厂接口，创造出小米产品)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 14:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ProductFactory</span> <span class="variable">huaWeiFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuaWeiFactory</span>(); <span class="comment">// 向上转型</span></span><br><span class="line">        huaWeiFactory.createPhone().showPhone();<span class="comment">// this is a HUAWEI Phone...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="六-优点">六.优点</h3><ul><li>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。另外，应用抽象工厂模式可以实现<strong>高内聚低耦合</strong>的设计目的，因此抽象工厂模式得到了广泛的应用。</li><li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。这对一些需要根据当前环境来决定其行为的软件系统来说，是一种非常实用的设计模式。</li><li>增加新的具体工厂和产品 族很方便，无须修改已有系统，符合“开闭原则”。</li></ul><h3 id="七-缺点">七.缺点</h3><ul><li>在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。</li><li>开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。</li></ul><h3 id="八-总结">八.总结</h3><ul><li>抽象工厂模式提供一个<strong>创建一系列相关或相互依赖对象的接口</strong>，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</li><li>抽象工厂模式包含四个角色：<strong>抽象工厂</strong>用于声明生成抽象产品的方法；<strong>具体工厂</strong>实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个<strong>产品族</strong>，每一个产品都位于某个<strong>产品等级</strong>结构中；<strong>抽象产品</strong>为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；<strong>具体产品</strong>定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li><li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式与工厂方法模式最大的区别在于，<strong>工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</strong>。</li><li>抽象工厂模式的主要优点是隔离了具体类的生成，使得客户并不需要知道什么被创建，而且每次可以通过具体工厂类创建一个产品族中的多个对象，增加或者替换产品族比较方便，增加新的具体工厂和产品族很方便；主要缺点在于增加新的产品等级结构很复杂，需要修改抽象工厂和所有的具体工厂类，对“开闭原则”的支持呈现倾斜性。</li><li>抽象工厂模式适用情况包括：一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；系统中有多于一个的产品族，而每次只使用其中某一产品族；属于同一个产品族的产品将在一起使用；系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何在项目中使用百度地图API进行地理位置选择？</title>
      <link href="/posts/5d0387a1.html"/>
      <url>/posts/5d0387a1.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-项目需求（举例）">一. 项目需求（举例）</h3><p>寻主功能需要推送离用户最近的线下门店，系统需要将用户的输入的地址解析为经纬度。再通过经纬度计算哪一家店铺离用户地址最近。</p><p>实现地址输入提示，手动输入的地址不完整。</p><h3 id="二-百度地图开发平台">二.  百度地图开发平台</h3><p>百度地图提供了很多开发的api，方便开发者接入到自己应用中。我们根据用户注册的地址，在百度地图进行标注，方便系统管理员管理</p><p>主站地址：<a href="http://lbsyun.baidu.com/">http://lbsyun.baidu.com/</a></p><ul><li><p>注册成功申请成为开发者后，创建应用-申请AK</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">应用名称：项目名</span><br><span class="line">应用类型：浏览器端</span><br><span class="line">启用服务：全选，特别是逆地址</span><br><span class="line">白名单：* - 表示所有网址都可以访问</span><br></pre></td></tr></table></figure></li><li><p>测试地图功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1.0, user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>, <span class="selector-tag">html</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">font-family</span>:<span class="string">&quot;微软雅黑&quot;</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#l-map</span>&#123;<span class="attribute">height</span>:<span class="number">300px</span>;<span class="attribute">width</span>:<span class="number">100%</span>;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#r-result</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//api.map.baidu.com/api?v=2.0&amp;ak=LSNHTIDvIKtkv7UgAUKfStSz4QU74osS&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>关键字输入提示词条<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;l-map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;r-result&quot;</span>&gt;</span>请输入:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;suggestId&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百度&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;searchResultPanel&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:1px solid #C0C0C0;width:150px;height:auto; display:none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 百度地图API功能</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">G</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Map</span>(<span class="string">&quot;l-map&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// map.centerAndZoom(&quot;成都&quot;,12);     // 初始化地图,设置城市和地图级别。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ac = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Autocomplete</span>(    <span class="comment">//建立一个自动完成的对象</span></span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="string">&quot;input&quot;</span> : <span class="string">&quot;suggestId&quot;</span></span></span><br><span class="line"><span class="language-javascript">            ,<span class="string">&quot;location&quot;</span> : map</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    ac.<span class="title function_">addEventListener</span>(<span class="string">&quot;onhighlight&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;  <span class="comment">//鼠标放在下拉列表上的事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> _value = e.<span class="property">fromitem</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e.<span class="property">fromitem</span>.<span class="property">index</span> &gt; -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            value = _value.<span class="property">province</span> +  _value.<span class="property">city</span> +  _value.<span class="property">district</span> +  _value.<span class="property">street</span> +  _value.<span class="property">business</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        str = <span class="string">&quot;FromItem&lt;br /&gt;index = &quot;</span> + e.<span class="property">fromitem</span>.<span class="property">index</span> + <span class="string">&quot;&lt;br /&gt;value = &quot;</span> + value;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e.<span class="property">toitem</span>.<span class="property">index</span> &gt; -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            _value = e.<span class="property">toitem</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            value = _value.<span class="property">province</span> +  _value.<span class="property">city</span> +  _value.<span class="property">district</span> +  _value.<span class="property">street</span> +  _value.<span class="property">business</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        str += <span class="string">&quot;&lt;br /&gt;ToItem&lt;br /&gt;index = &quot;</span> + e.<span class="property">toitem</span>.<span class="property">index</span> + <span class="string">&quot;&lt;br /&gt;value = &quot;</span> + value;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">G</span>(<span class="string">&quot;searchResultPanel&quot;</span>).<span class="property">innerHTML</span> = str;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> myValue;</span></span><br><span class="line"><span class="language-javascript">    ac.<span class="title function_">addEventListener</span>(<span class="string">&quot;onconfirm&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;    <span class="comment">//鼠标点击下拉列表后的事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> _value = e.<span class="property">item</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        myValue = _value.<span class="property">province</span> +  _value.<span class="property">city</span> +  _value.<span class="property">district</span> +  _value.<span class="property">street</span> +  _value.<span class="property">business</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">G</span>(<span class="string">&quot;searchResultPanel&quot;</span>).<span class="property">innerHTML</span> =<span class="string">&quot;onconfirm&lt;br /&gt;index = &quot;</span> + e.<span class="property">item</span>.<span class="property">index</span> + <span class="string">&quot;&lt;br /&gt;myValue = &quot;</span> + myValue;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setPlace</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">setPlace</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        map.<span class="title function_">clearOverlays</span>();    <span class="comment">//清除地图上所有覆盖物</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">myFun</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> pp = local.<span class="title function_">getResults</span>().<span class="title function_">getPoi</span>(<span class="number">0</span>).<span class="property">point</span>;    <span class="comment">//获取第一个智能搜索的结果</span></span></span><br><span class="line"><span class="language-javascript">            map.<span class="title function_">centerAndZoom</span>(pp, <span class="number">18</span>);</span></span><br><span class="line"><span class="language-javascript">            map.<span class="title function_">addOverlay</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Marker</span>(pp));    <span class="comment">//添加标注</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> local = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">LocalSearch</span>(map, &#123; <span class="comment">//智能搜索</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">onSearchComplete</span>: myFun</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        local.<span class="title function_">search</span>(myValue);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="三-vue集成百度地图api">三. vue集成百度地图api</h3><h4 id="1-安装百度地图-在当前项目路径下安装">1. 安装百度地图(在当前项目路径下安装)</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install --save vue-baidu-map</span><br></pre></td></tr></table></figure><h4 id="2-全局引入百度地图">2. 全局引入百度地图</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在main.<span class="property">js</span>中引入：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BaiduMap</span> <span class="keyword">from</span> <span class="string">&#x27;vue-baidu-map&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">BaiduMap</span>, &#123;</span><br><span class="line">    <span class="comment">/* Visit http://lbsyun.baidu.com/apiconsole/key for details about app key. */</span></span><br><span class="line">    <span class="attr">ak</span>: <span class="string">&#x27;4RWmQlKQkGgdOUuDqaVbkjBg2IY3sjh0&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-地图展示框">3. 地图展示框</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      &lt;el-form-item prop=&quot;address&quot; label=&quot;店铺地址&quot;&gt;</span><br><span class="line">        &lt;el-input type=&quot;text&quot; v-model=&quot;shop.address&quot; auto-complete=&quot;off&quot; placeholder=&quot;请输入地址！&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;el-button size=&quot;small&quot; type=&quot;primary&quot; @click=&quot;selectAddress&quot;&gt;选择&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--百度地图--&gt;</span><br><span class="line">&lt;el-dialog</span><br><span class="line">    title=&quot;选择地址&quot;</span><br><span class="line">    :visible.sync=&quot;dialogVisable&quot;</span><br><span class="line">    width=&quot;30%&quot;&gt;</span><br><span class="line">  &lt;baidu-map :center=&quot;&#123;lng: 104.06, lat: 30.67&#125;&quot; :zoom=&quot;11&quot;&gt;</span><br><span class="line">    &lt;bm-view class=&quot;map&quot;&gt;&lt;/bm-view&gt;</span><br><span class="line">    &lt;bm-control :offset=&quot;&#123;width: &#x27;10px&#x27;, height: &#x27;10px&#x27;&#125;&quot;&gt;</span><br><span class="line">      &lt;bm-auto-complete v-model=&quot;keyword&quot; :sugStyle=&quot;&#123;zIndex: 2100&#125;&quot;&gt;</span><br><span class="line">        &lt;div style=&quot;margin-bottom:10px&quot;&gt;</span><br><span class="line">          &lt;input id=&quot;searchInput&quot; type=&quot;text&quot; placeholder=&quot;请输入关键字&quot; class=&quot;searchinput&quot;/&gt;</span><br><span class="line">          &lt;el-button type=&quot;success&quot; @click=&quot;selectAddressConfirm&quot;&gt;确定&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/bm-auto-complete&gt;</span><br><span class="line">    &lt;/bm-control&gt;</span><br><span class="line">    &lt;bm-local-search :keyword=&quot;keyword&quot; :auto-viewport=&quot;true&quot; &gt;&lt;/bm-local-search&gt;</span><br><span class="line">  &lt;/baidu-map&gt;</span><br><span class="line">  &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">    &lt;el-button @click=&quot;dialogVisable=false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;selectAddressConfirm&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure><h4 id="4-业务代码">4. 业务代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//百度地址的业务逻辑</span></span><br><span class="line"><span class="title function_">selectAddressConfirm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//获取值搜索框值,设置给地址</span></span><br><span class="line">  <span class="keyword">var</span> searchInputV = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;searchInput&quot;</span>).<span class="property">value</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">shop</span>.<span class="property">address</span> = searchInputV;</span><br><span class="line">  <span class="comment">//关闭对话框</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dialogVisable</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">selectAddress</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dialogVisable</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="四-HTML页面输入地址自动提示">四. HTML页面输入地址自动提示</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入百度地图 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//api.map.baidu.com/api?v=2.0&amp;ak=LSNHTIDvIKtkv7UgAUKfStSz4QU74osS&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 引入vue和axios --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/plugins/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/plugins/axios/dist/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- axios全局配置 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/common.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>引入js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 百度地图API功能</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">G</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Map</span>(<span class="string">&quot;&quot;</span>); <span class="comment">//没有1-map就删除掉，但是必须传递一个值，空字符串都行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//map.centerAndZoom(&quot;北京&quot;,12);                   // 初始化地图,设置城市和地图级别。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ac = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Autocomplete</span>(    <span class="comment">//建立一个自动完成的对象</span></span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;input&quot;</span>: <span class="string">&quot;suggestId&quot;</span></span></span><br><span class="line"><span class="language-javascript">            , <span class="string">&quot;location&quot;</span>: map</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    ac.<span class="title function_">addEventListener</span>(<span class="string">&quot;onhighlight&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;  <span class="comment">//鼠标放在下拉列表上的事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> _value = e.<span class="property">fromitem</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e.<span class="property">fromitem</span>.<span class="property">index</span> &gt; -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            value = _value.<span class="property">province</span> + _value.<span class="property">city</span> + _value.<span class="property">district</span> + _value.<span class="property">street</span> + _value.<span class="property">business</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        str = <span class="string">&quot;FromItem&lt;br /&gt;index = &quot;</span> + e.<span class="property">fromitem</span>.<span class="property">index</span> + <span class="string">&quot;&lt;br /&gt;value = &quot;</span> + value;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e.<span class="property">toitem</span>.<span class="property">index</span> &gt; -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            _value = e.<span class="property">toitem</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            value = _value.<span class="property">province</span> + _value.<span class="property">city</span> + _value.<span class="property">district</span> + _value.<span class="property">street</span> + _value.<span class="property">business</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        str += <span class="string">&quot;&lt;br /&gt;ToItem&lt;br /&gt;index = &quot;</span> + e.<span class="property">toitem</span>.<span class="property">index</span> + <span class="string">&quot;&lt;br /&gt;value = &quot;</span> + value;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//G(&quot;searchResultPanel&quot;).innerHTML = str;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> myValue;</span></span><br><span class="line"><span class="language-javascript">    ac.<span class="title function_">addEventListener</span>(<span class="string">&quot;onconfirm&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;    <span class="comment">//鼠标点击下拉列表后的事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> _value = e.<span class="property">item</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        myValue = _value.<span class="property">province</span> + _value.<span class="property">city</span> + _value.<span class="property">district</span> + _value.<span class="property">street</span> + _value.<span class="property">business</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//G(&quot;searchResultPanel&quot;).innerHTML =&quot;onconfirm&lt;br /&gt;index = &quot; + e.item.index + &quot;&lt;br /&gt;myValue = &quot; + myValue;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//将百度地图的地址赋值给 数据模型</span></span></span><br><span class="line"><span class="language-javascript">        vue.<span class="property">searchMasterMsg</span>.<span class="property">address</span> = myValue;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setPlace</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">setPlace</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        map.<span class="title function_">clearOverlays</span>();    <span class="comment">//清除地图上所有覆盖物</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">myFun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> pp = local.<span class="title function_">getResults</span>().<span class="title function_">getPoi</span>(<span class="number">0</span>).<span class="property">point</span>;    <span class="comment">//获取第一个智能搜索的结果</span></span></span><br><span class="line"><span class="language-javascript">            map.<span class="title function_">centerAndZoom</span>(pp, <span class="number">18</span>);</span></span><br><span class="line"><span class="language-javascript">            map.<span class="title function_">addOverlay</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Marker</span>(pp));    <span class="comment">//添加标注</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> local = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">LocalSearch</span>(map, &#123; <span class="comment">//智能搜索</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">onSearchComplete</span>: myFun</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        local.<span class="title function_">search</span>(myValue);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输入框定义<code>suggestId</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;am-form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;suggestId&quot;</span> <span class="attr">class</span>=<span class="string">&quot;am-form-label&quot;</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;am-form-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;suggestId&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;searchMasterMsg.address&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入地址&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;am-btn am-btn-danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;publish&quot;</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">publish</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//string - boolean不行  那就string - int - boolean就可以了 1==true，0==false</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>.<span class="property">gender</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>.<span class="property">gender</span> = <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>.<span class="property">gender</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&quot;/searchMasterMsg/publish&quot;</span>, <span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//发布成功后就跳转到主页</span></span><br><span class="line">        result = result.<span class="property">data</span>;</span><br><span class="line">        <span class="keyword">if</span> (result.<span class="property">success</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;发布成功！&quot;</span>);</span><br><span class="line">            location.<span class="property">href</span> = <span class="string">&quot;/index.html&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(result.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;系统错误&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>addEventListener方法中添加一句代码，这样地址才能传递到后端</p><p><code>vue.searchMasterMsg.address = myValue;</code></p></li><li><p>要注释点G(“searchResultPanel”),这个是用来显示地图的，没有这个id属性</p></li></ul><p><strong>vue挂在实例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#myDiv&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">loginInfo</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">searchMasterMsg</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;小七&#x27;</span>,</span><br><span class="line">                <span class="attr">price</span>: <span class="number">10</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">gender</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">coatColor</span>: <span class="string">&#x27;黑色&#x27;</span>,</span><br><span class="line">                <span class="attr">resources</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">petType</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">address</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;二哈寻主&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">publish</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//string - boolean不行  那就string - int - boolean就可以了 1==true，0==false</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>.<span class="property">gender</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>.<span class="property">gender</span> = <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>.<span class="property">gender</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&quot;/searchMasterMsg/publish&quot;</span>, <span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//发布成功后就跳转到主页</span></span><br><span class="line">                result = result.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">if</span> (result.<span class="property">success</span>) &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&quot;发布成功！&quot;</span>);</span><br><span class="line">                    location.<span class="property">href</span> = <span class="string">&quot;/index.html&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(result.<span class="property">msg</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;系统错误&quot;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> loginInfo = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;loginInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (loginInfo) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">loginInfo</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(loginInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="五-工具类">五.  工具类</h3><h4 id="1-解析地址经纬度">1. 解析地址经纬度</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存放经纬度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="comment">//经度</span></span><br><span class="line">    <span class="keyword">private</span> Double lng;</span><br><span class="line">    <span class="comment">//维度</span></span><br><span class="line">    <span class="keyword">private</span> Double lat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-位置工具类">2. 位置工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.coderyeah.org.domain.Shop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 位置相关工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistanceUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给一个地址 - 算出这个地址的经纬度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Point <span class="title function_">getPoint</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">Application_ID</span> <span class="operator">=</span> <span class="string">&quot;PQ9FAt6qg7taDWj6LLABYO7u6bSETXhD&quot;</span>;<span class="comment">//配置上自己的百度地图应用的AK</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sCurrentLine;</span><br><span class="line">            String sTotalString;</span><br><span class="line">            sCurrentLine = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            sTotalString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            InputStream l_urlStream;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">l_url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://api.map.baidu.com/geocoding/v3/?address=&quot;</span> + address + <span class="string">&quot;&amp;output=json&amp;ak=&quot;</span> + Application_ID + <span class="string">&quot;&amp;callback=showLocation&quot;</span>);</span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">l_connection</span> <span class="operator">=</span> (HttpURLConnection) l_url.openConnection();</span><br><span class="line">            l_connection.connect();</span><br><span class="line">            l_urlStream = l_connection.getInputStream();</span><br><span class="line">            java.io.<span class="type">BufferedReader</span> <span class="variable">l_reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(l_urlStream));</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> l_reader.readLine();</span><br><span class="line">            System.out.println(str);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用经度分割返回的网页代码</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;,&quot;</span> + <span class="string">&quot;\&quot;&quot;</span> + <span class="string">&quot;lat&quot;</span> + <span class="string">&quot;\&quot;&quot;</span> + <span class="string">&quot;:&quot;</span>;</span><br><span class="line">            String strs[] = str.split(s, <span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;\&quot;&quot;</span> + <span class="string">&quot;lng&quot;</span> + <span class="string">&quot;\&quot;&quot;</span> + <span class="string">&quot;:&quot;</span>;</span><br><span class="line">            String a[] = strs[<span class="number">0</span>].split(s1, <span class="number">2</span>);</span><br><span class="line">            s1 = <span class="string">&quot;&#125;&quot;</span> + <span class="string">&quot;,&quot;</span> + <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">            String a1[] = strs[<span class="number">1</span>].split(s1, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>();</span><br><span class="line">            point.setLng(Double.valueOf(a[<span class="number">1</span>]));</span><br><span class="line">            point.setLat(Double.valueOf(a1[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">return</span> point;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地球半径,进行经纬度运算需要用到的数据之一</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">EARTH_RADIUS</span> <span class="operator">=</span> <span class="number">6378137</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据坐标点获取弧度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">rad</span><span class="params">(<span class="type">double</span> d)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> d * Math.PI / <span class="number">180.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据两点间经纬度坐标（double值），计算两点间距离，单位为米</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point1 A点坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point2 B点坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">getDistance</span><span class="params">(Point point1, Point point2)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">radLat1</span> <span class="operator">=</span> rad(point1.getLat());</span><br><span class="line">        <span class="type">double</span> <span class="variable">radLat2</span> <span class="operator">=</span> rad(point2.getLat());</span><br><span class="line">        <span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> radLat1 - radLat2;</span><br><span class="line">        <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> rad(point1.getLng()) - rad(point2.getLng());</span><br><span class="line">        <span class="type">double</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">2</span> * Math.asin(Math.sqrt(Math.pow(Math.sin(a / <span class="number">2</span>), <span class="number">2</span>) +</span><br><span class="line">                Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / <span class="number">2</span>), <span class="number">2</span>)));</span><br><span class="line">        s = s * EARTH_RADIUS;</span><br><span class="line">        s = Math.round(s * <span class="number">10000</span>) / <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据两点间经纬度坐标（double值），计算两点间距离，单位为米</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point 用户指定的地址坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shops 商店</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Shop <span class="title function_">getNearestShop</span><span class="params">(Point point, List&lt;Shop&gt; shops)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果传过来的集合只有一家店铺,那么直接将这家店铺的信息返回就是最近的店铺了</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> shops.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//获取集合中第一家店铺到指定地点的距离</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">distance</span> <span class="operator">=</span> getDistance(point, getPoint(shops.get(<span class="number">0</span>).getAddress()));</span><br><span class="line">        <span class="type">double</span> <span class="variable">minDistance</span> <span class="operator">=</span> distance;</span><br><span class="line">        <span class="comment">//如果有多家店铺,那么就和第一家店铺到指定地点的距离做比较</span></span><br><span class="line">        <span class="keyword">if</span> (shops.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; shops.size(); i++) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">distanceTmp</span> <span class="operator">=</span> getDistance(point, getPoint(shops.get(i).getAddress()));</span><br><span class="line">                <span class="keyword">if</span> (distanceTmp &lt; minDistance) &#123;</span><br><span class="line">                    shop = shops.get(i);</span><br><span class="line">                    minDistance = distanceTmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minDistance &gt; <span class="number">50000</span>) &#123; <span class="comment">//大于50公里，没有合适的店铺</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(getPoint(<span class="string">&quot;成都市天府广场&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-业务代码（示例）">3. 业务代码（示例）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.search.service.impl;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coderyeah</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 针对表【t_search_master_msg】的数据库操作Service实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2022-09-28 10:43:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SearchMasterMsgServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SearchMasterMsgMapper, SearchMasterMsg&gt; <span class="keyword">implements</span> <span class="title class_">SearchMasterMsgService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper employeeMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SearchMasterMsgMapper searchMasterMsgMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BaiduAiAuditService baiduAiAuditService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SearchMasterMsgAuditLogMapper logMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ShopMapper shopMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span><span class="comment">// 开启事务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">publish</span><span class="params">(SearchMasterMsg searchMasterMsg, HttpServletRequest req)</span> &#123;</span><br><span class="line">        <span class="comment">// 参数校验</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(searchMasterMsg.getAddress()) || StrUtil.isBlank(searchMasterMsg.getName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;参数错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取当前寻主消息发布人</span></span><br><span class="line">        <span class="type">LoginInfo</span> <span class="variable">loginInfo</span> <span class="operator">=</span> LoginContext.getLoginInfo(req);</span><br><span class="line">        <span class="comment">// 找到当前loginInfo的user对象</span></span><br><span class="line">        <span class="keyword">assert</span> loginInfo != <span class="literal">null</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .eq(User::getLogininfoId, loginInfo.getId()));</span><br><span class="line">        <span class="comment">// 保存寻主消息</span></span><br><span class="line">        searchMasterMsg.setUserId(user.getId());</span><br><span class="line">        searchMasterMsgMapper.insert(searchMasterMsg);</span><br><span class="line">        <span class="comment">// 百度ai智能审核</span></span><br><span class="line">        <span class="comment">// 审核文本内容</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">bool1</span> <span class="operator">=</span> baiduAiAuditService.textAudit(searchMasterMsg.getName() + searchMasterMsg.getTitle() + searchMasterMsg.getCoatColor());</span><br><span class="line">        <span class="comment">// 审核图片</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">bool2</span> <span class="operator">=</span> baiduAiAuditService.imageAudit(searchMasterMsg.getResources());</span><br><span class="line">        <span class="comment">// 提交审核日志</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">SearchMasterMsgAuditLog</span> <span class="variable">log</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchMasterMsgAuditLog</span>();</span><br><span class="line">        log.setMsgId(searchMasterMsg.getId());</span><br><span class="line">        <span class="keyword">if</span> (bool1 &amp;&amp; bool2) &#123;</span><br><span class="line">            <span class="comment">// 发布消息审核成功 0-1</span></span><br><span class="line">            searchMasterMsg.setState(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 查询所有店铺</span></span><br><span class="line">            <span class="keyword">final</span> List&lt;Shop&gt; shops = shopMapper.selectList(<span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;());</span><br><span class="line">            <span class="comment">// 获取发布人位置的经纬度</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> DistanceUtils.getPoint(searchMasterMsg.getAddress());</span><br><span class="line">            <span class="comment">// 获取距离最近的店铺</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Shop</span> <span class="variable">nearestShop</span> <span class="operator">=</span> DistanceUtils.getNearestShop(point, shops);</span><br><span class="line">            <span class="keyword">if</span> (nearestShop != <span class="literal">null</span>) &#123;</span><br><span class="line">                searchMasterMsg.setState(<span class="number">2</span>);</span><br><span class="line">                searchMasterMsg.setShopId(nearestShop.getId());</span><br><span class="line">                <span class="comment">// 更新发布信息</span></span><br><span class="line">                searchMasterMsgMapper.updateById(searchMasterMsg);</span><br><span class="line">                <span class="comment">// 发送短信通知店铺管理员</span></span><br><span class="line">                <span class="comment">// 通过shopId查找店铺管理员</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;Employee&gt;().eq(Employee::getShopId, nearestShop.getId()));</span><br><span class="line"><span class="comment">//                SmsUtils.sendSms(employee.getPhone(), &quot;您有新的订单啦！请前往&quot; + searchMasterMsg.getAddress() + &quot;完成收购！&quot;);</span></span><br><span class="line">                System.out.println(<span class="string">&quot;您有新的订单啦！请前往&quot;</span> + searchMasterMsg.getAddress() + <span class="string">&quot;完成收购！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 放入寻主池</span></span><br><span class="line">                searchMasterMsg.setState(<span class="number">3</span>);</span><br><span class="line">                <span class="comment">// 更新发布信息</span></span><br><span class="line">                searchMasterMsgMapper.updateById(searchMasterMsg);</span><br><span class="line">            &#125;</span><br><span class="line">            log.setState(<span class="number">1</span>); <span class="comment">// 审核成功</span></span><br><span class="line">            log.setNote(<span class="string">&quot;AI审核通过&quot;</span>);</span><br><span class="line">            <span class="comment">// 保存审核日志</span></span><br><span class="line">            logMapper.insert(log);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 审核失败</span></span><br><span class="line">            log.setState(<span class="number">0</span>); <span class="comment">// 审核成功</span></span><br><span class="line">            log.setNote(<span class="string">&quot;AI审核未通过&quot;</span>);</span><br><span class="line">            logMapper.insert(log);</span><br><span class="line">              <span class="comment">// 删除寻主消息 避免多次添加</span></span><br><span class="line">            searchMasterMsgMapper.deleteById(searchMasterMsg.getId());</span><br><span class="line"><span class="comment">//            SmsUtils.sendSms(user.getPhone(),&quot;审核未通过,请重新编辑内容后上传！！！&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;发布失败,请修改信息后再次提交&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;发布成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用短信验证码完成注册功能</title>
      <link href="/posts/d57e0a92.html"/>
      <url>/posts/d57e0a92.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-MD5加密工具类">一. MD5加密工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码加密工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Md5Utils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypByMd5</span><span class="params">(String context)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            md.update(context.getBytes());<span class="comment">//update处理  </span></span><br><span class="line">            <span class="type">byte</span> [] encryContext = md.digest();<span class="comment">//调用该方法完成计算  </span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>; offset &lt; encryContext.length; offset++) &#123;<span class="comment">//做相应的转化（十六进制）  </span></span><br><span class="line">                i = encryContext[offset];</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">0</span>) i += <span class="number">256</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">16</span>) buf.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                buf.append(Integer.toHexString(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> buf.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="二-短信服务">二. 短信服务</h3><p>短信验证，只有三大运营商具有短信发送的能力。要发送短信只有找三大运营，或者中间商。简单说就是要找第三方的短信平台。常见的有阿里云，京东智联云，乐讯通等等非常多。举例使用网建短信通：<a href="http://www.smschinese.cn/">http://www.smschinese.cn/</a></p><ol><li><p>操作流程</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">点击左上角首页 -&gt; API接口 -&gt; 网建SMS短信通API接口地址 -&gt; UTF<span class="number">-8</span>编码发送短信接口：</span><br><span class="line">http:<span class="comment">//utf8.api.smschinese.cn/?Uid=本站用户名&amp;Key=接口短信密钥&amp;smsMob=手机号码&amp;smsText=验证码:8888</span></span><br><span class="line">本站用户名Uid：注册时用户名</span><br><span class="line">接口安全密钥key：刚刚看到的密钥</span><br><span class="line">手机号码smsMob：手机号码</span><br><span class="line">短信内容smsText：随便写</span><br><span class="line">api接口中有发送短信的各个对应状态：发送了一条，就只剩下<span class="number">4</span>条了</span><br></pre></td></tr></table></figure></li><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主要用于后端发送http请求--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 后端发送http请求 - 一般用在调用三方接口时会用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>发送短信工具类（官网也有相应代码可参考）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.methods.PostMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信发送工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UID</span> <span class="operator">=</span> <span class="string">&quot;codermyth&quot;</span>;</span><br><span class="line">    <span class="comment">//秘钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="string">&quot;29766C0677741B5DA2CE2203260365DB&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phones  手机们 a,b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 发送内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sendSms</span><span class="params">(String phones, String content)</span> &#123;</span><br><span class="line">        <span class="type">PostMethod</span> <span class="variable">post</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpClient</span>();</span><br><span class="line">            post = <span class="keyword">new</span> <span class="title class_">PostMethod</span>(<span class="string">&quot;http://utf8.api.smschinese.cn&quot;</span>);</span><br><span class="line">            post.addRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded;charset=utf8&quot;</span>);<span class="comment">//在头文件中设置转码</span></span><br><span class="line">            NameValuePair[] data = &#123;<span class="keyword">new</span> <span class="title class_">NameValuePair</span>(<span class="string">&quot;Uid&quot;</span>, SmsUtils.UID),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">NameValuePair</span>(<span class="string">&quot;Key&quot;</span>, SmsUtils.KEY),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">NameValuePair</span>(<span class="string">&quot;smsMob&quot;</span>, phones),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">NameValuePair</span>(<span class="string">&quot;smsText&quot;</span>, content)&#125;;</span><br><span class="line">            post.setRequestBody(data);</span><br><span class="line"></span><br><span class="line">            client.executeMethod(post);</span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> post.getStatusCode();</span><br><span class="line">            System.out.println(<span class="string">&quot;statusCode:&quot;</span> + statusCode); <span class="comment">//200 404 400</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(post.getResponseBodyAsString().getBytes(<span class="string">&quot;utf8&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (post != <span class="literal">null</span>) &#123;</span><br><span class="line">                post.releaseConnection();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(SmsUtils.sendSms(<span class="string">&quot;18365403510&quot;</span>, <span class="string">&quot;您的验证码为：【8848】,鉴于您优秀的能力表现,您被授予玛丽叶奥特曼称号,accept it, cutie!&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-前端获取验证码接口">三. 前端获取验证码接口</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;verification&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;code&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;am-icon-code-fork&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;code&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;phoneUserForm.phoneCode&quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dyMobileButton&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;sendMobileCode&quot;</span>&gt;</span>获取验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取短信验证码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送验证码</span></span><br><span class="line"><span class="title function_">sendMobileCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1.判断手机号不为空</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">phoneUserForm</span>.<span class="property">phone</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;手机号不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.判断图片验证码不为空</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">phoneUserForm</span>.<span class="property">imageCode</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;图片验证码不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.获取按钮，禁用按钮  发送时灰化不能使用，发送成功倒计时60才能使用，如果发送失败立即可以发送</span></span><br><span class="line">    <span class="keyword">let</span> sendBtn = $(event.<span class="property">target</span>);</span><br><span class="line">    sendBtn.<span class="title function_">attr</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> param = &#123;</span><br><span class="line">        <span class="attr">phone</span>: <span class="variable language_">this</span>.<span class="property">phoneUserForm</span>.<span class="property">phone</span>,</span><br><span class="line">        <span class="attr">imageCode</span>: <span class="variable language_">this</span>.<span class="property">phoneUserForm</span>.<span class="property">imageCode</span>,</span><br><span class="line">        <span class="attr">imageCodeKey</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;verifyCodeKey&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.发送ajax请求</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&quot;/verifyCode/smsCode&quot;</span>, param).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> ajaxResult = res.<span class="property">data</span>;</span><br><span class="line">        <span class="keyword">if</span> (ajaxResult.<span class="property">success</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;手机验证码已经发送到您的手机，请在3分钟内使用&quot;</span>);</span><br><span class="line">            <span class="comment">//4.1.发送成：倒计时</span></span><br><span class="line">            <span class="keyword">let</span> time = <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">let</span> interval = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">//每一条倒计时减一</span></span><br><span class="line">                time = time - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//把倒计时时间搞到按钮上</span></span><br><span class="line">                sendBtn.<span class="title function_">html</span>(time + <span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">                <span class="comment">//4.2.倒计时完成恢复按钮</span></span><br><span class="line">                <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    sendBtn.<span class="title function_">html</span>(<span class="string">&quot;重新发送&quot;</span>);</span><br><span class="line">                    sendBtn.<span class="title function_">attr</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="comment">//清除定时器</span></span><br><span class="line">                    <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(interval);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//4.3.发送失败：提示，恢复按钮</span></span><br><span class="line">            sendBtn.<span class="title function_">attr</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="title function_">alert</span>(ajaxResult.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手机注册功能</span></span><br><span class="line">            <span class="title function_">phoneRegister</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">agree</span>) &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&#x27;请勾选服务协议&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//前台一般做校验：空校验，格式校验，重复密码校验</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;/user/register/phone&#x27;</span>, <span class="variable language_">this</span>.<span class="property">phoneUserForm</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//注册成功跳转到登录页面</span></span><br><span class="line">                    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">success</span>) &#123;</span><br><span class="line">                        location.<span class="property">href</span> = <span class="string">&quot;login.html&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">alert</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&quot;系统错误!&quot;</span>)</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><h3 id="四-后端实现获取短信接口">四. 后端实现获取短信接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/smsCode&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;获取短信验证码&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">getPhoneCode</span><span class="params">(<span class="meta">@RequestBody</span> PhoneCodeDTO phoneCodeDTO)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> verifyCodeService.getPhoneCode(phoneCodeDTO);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (BusinessException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           <span class="keyword">return</span> Result.fail(e.getMessage());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;系统异常,请稍后重试!&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getPhoneCode</span><span class="params">(PhoneCodeDTO phoneCodeDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> phoneCodeDTO.getPhone();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">InputImageCode</span> <span class="operator">=</span> phoneCodeDTO.getImageCode();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">imageCodeKey</span> <span class="operator">=</span> phoneCodeDTO.getImageCodeKey();</span><br><span class="line">        <span class="comment">// 1.判断参数是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(phone)) &#123;</span><br><span class="line">            <span class="comment">// 抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;电话号码不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(InputImageCode)) &#123;</span><br><span class="line">            <span class="comment">// 抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;图形验证码不能为空不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.判断图形验证码是否过期 正确</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">imageCode</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;cache:code:image:&quot;</span> + imageCodeKey);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(imageCode)) &#123;</span><br><span class="line">            <span class="comment">// 过期了</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;图形验证码已过期,请重新输入！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否一致 忽略大小写</span></span><br><span class="line">        <span class="keyword">if</span> (!InputImageCode.equalsIgnoreCase(imageCode)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;图片验证码错误,请重新输入！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 通过号码判断用户是否已经注册</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().eq(User::getPhone, phone));</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 用户已经存在</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;该手机号码已被注册过,请您直接登录...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.从redis获取短信验证码</span></span><br><span class="line">        <span class="comment">// 用来存储短信验证码  redis中存储的值是 【短信验证码:时间戳】</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(Constants.USER_REGISTER_PHONE_PREFIX + phone);</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123; <span class="comment">// 没有过期</span></span><br><span class="line">            <span class="comment">// 判断时间是否过期</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">oldTime</span> <span class="operator">=</span> Long.parseLong(value.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 一分钟之内不允许频繁操作</span></span><br><span class="line">            <span class="keyword">if</span> ((System.currentTimeMillis() - oldTime) &lt;= <span class="number">1000</span> * <span class="number">60</span>) &#123;<span class="comment">// 没过重发时间</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;操作频繁,请稍后再试!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                code = value.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 过期了</span></span><br><span class="line">            <span class="comment">// 生成验证码</span></span><br><span class="line">            code = String.valueOf(RandomUtil.randomNumbers(<span class="number">6</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存入redis 有效期3分钟</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:register:&quot;</span> + phone, code + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis(), <span class="number">3L</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">// 发送验证码短信</span></span><br><span class="line"><span class="comment">//        SmsUtils.sendSms(phone, &quot;您的验证码是&quot; + code + &quot;,请及时使用有限期为3分钟&quot;);</span></span><br><span class="line">        log.info(<span class="string">&quot;=========您的验证码是:&#123;&#125;=========&quot;</span>, code);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;获取验证码成功【&quot;</span> + code + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用百度AI智能审核</title>
      <link href="/posts/62783a14.html"/>
      <url>/posts/62783a14.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是自动审核">一. 什么是自动审核</h3><p>针对图像、文本、语音、视频等多媒体内容，提供全方位的审核能力，覆盖涉政、涉黄、涉恐、恶意推广、低质灌水等内容自动鉴别。</p><p>以上的功能需要使用到图像识别功能。如果要自己实现是需要花费大量的时间以及人力。我们项目里面可以直接使用第三方提供的功能百度AI 的内容审核功能https://ai.baidu.com/solution/censoring</p><p>百度AI的内容审核功能：<a href="https://ai.baidu.com/solution/censoring">https://ai.baidu.com/solution/censoring</a><br>API文档：<a href="https://ai.baidu.com/ai-doc/ANTIPORN/Rk3h6xb3i">https://ai.baidu.com/ai-doc/ANTIPORN/Rk3h6xb3i</a></p><p>ps:<strong>需要自自完成注册和创建应用</strong></p><h3 id="二-使用自动审核功能">二. 使用自动审核功能</h3><ol><li><p>第一步：获取 access_token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baidu.ai.aip.auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取token类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取权限token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回示例：</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getAuth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 官网获取的 API Key 更新为你注册的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">clientId</span> <span class="operator">=</span> <span class="string">&quot;百度云应用的AK&quot;</span>;</span><br><span class="line">        <span class="comment">// 官网获取的 Secret Key 更新为你注册的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">clientSecret</span> <span class="operator">=</span> <span class="string">&quot;百度云应用的SK&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> getAuth(clientId, clientSecret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取API访问token</span></span><br><span class="line"><span class="comment">     * 该token有一定的有效期，需要自行管理，当失效时需重新获取.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ak - 百度云官网获取的 API Key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sk - 百度云官网获取的 Secret Key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> assess_token 示例：</span></span><br><span class="line"><span class="comment">     * &quot;24.460da4889caad24cccdb1fea17221975.2592000.1491995545.282335-1234567&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getAuth</span><span class="params">(String ak, String sk)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取token地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authHost</span> <span class="operator">=</span> <span class="string">&quot;https://aip.baidubce.com/oauth/2.0/token?&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">getAccessTokenUrl</span> <span class="operator">=</span> authHost</span><br><span class="line">                <span class="comment">// 1. grant_type为固定参数</span></span><br><span class="line">                + <span class="string">&quot;grant_type=client_credentials&quot;</span></span><br><span class="line">                <span class="comment">// 2. 官网获取的 API Key</span></span><br><span class="line">                + <span class="string">&quot;&amp;client_id=&quot;</span> + ak</span><br><span class="line">                <span class="comment">// 3. 官网获取的 Secret Key</span></span><br><span class="line">                + <span class="string">&quot;&amp;client_secret=&quot;</span> + sk;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">realUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(getAccessTokenUrl);</span><br><span class="line">            <span class="comment">// 打开和URL之间的连接</span></span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) realUrl.openConnection();</span><br><span class="line">            connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">            connection.connect();</span><br><span class="line">            <span class="comment">// 获取所有响应头字段</span></span><br><span class="line">            Map&lt;String, List&lt;String&gt;&gt; map = connection.getHeaderFields();</span><br><span class="line">            <span class="comment">// 遍历所有的响应头字段</span></span><br><span class="line">            <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">                System.err.println(key + <span class="string">&quot;---&gt;&quot;</span> + map.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 定义 BufferedReader输入流来读取URL的响应</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream()));</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                result += line;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 返回结果示例</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            System.err.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(result);</span><br><span class="line">            <span class="type">String</span> <span class="variable">access_token</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> access_token;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.printf(<span class="string">&quot;获取token失败！&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二步：利用获取的access_token 调用接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baidu.ai.aip;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baidu.ai.aip.utils.HttpUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 文本审核接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextCensor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 重要提示代码中所需工具类</span></span><br><span class="line"><span class="comment">    * FileUtil,Base64Util,HttpUtil,GsonUtils请从</span></span><br><span class="line"><span class="comment">    * https://ai.baidu.com/file/658A35ABAB2D404FBF903F64D47C1F72</span></span><br><span class="line"><span class="comment">    * https://ai.baidu.com/file/C8D81F3301E24D2892968F09AE1AD6E2</span></span><br><span class="line"><span class="comment">    * https://ai.baidu.com/file/544D677F5D4E4F17B4122FBD60DB82B3</span></span><br><span class="line"><span class="comment">    * https://ai.baidu.com/file/470B3ACCA3FE43788B5A963BF0B625F3</span></span><br><span class="line"><span class="comment">    * 下载</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">TextCensor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 请求url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://aip.baidubce.com/rest/2.0/solution/v1/text_censor/v2/user_defined&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> <span class="string">&quot;text=&quot;</span> + <span class="string">&quot;不要侮辱伟大的乐侃&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注意这里仅为了简化编码每一次请求都去获取access_token，线上环境access_token有过期时间， 客户端可自行缓存，过期后重新获取。</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> <span class="string">&quot;[调用鉴权接口获取的token]&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpUtil.post(url, accessToken, param);</span><br><span class="line">            System.out.println(result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TextCensor.TextCensor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baidu.ai.aip;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baidu.ai.aip.utils.Base64Util;</span><br><span class="line"><span class="keyword">import</span> com.baidu.ai.aip.utils.FileUtil;</span><br><span class="line"><span class="keyword">import</span> com.baidu.ai.aip.utils.HttpUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 图像审核接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImgCensor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 重要提示代码中所需工具类</span></span><br><span class="line"><span class="comment">    * FileUtil,Base64Util,HttpUtil,GsonUtils请从</span></span><br><span class="line"><span class="comment">    * https://ai.baidu.com/file/658A35ABAB2D404FBF903F64D47C1F72</span></span><br><span class="line"><span class="comment">    * https://ai.baidu.com/file/C8D81F3301E24D2892968F09AE1AD6E2</span></span><br><span class="line"><span class="comment">    * https://ai.baidu.com/file/544D677F5D4E4F17B4122FBD60DB82B3</span></span><br><span class="line"><span class="comment">    * https://ai.baidu.com/file/470B3ACCA3FE43788B5A963BF0B625F3</span></span><br><span class="line"><span class="comment">    * 下载</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">ImgCensor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 请求url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://aip.baidubce.com/rest/2.0/solution/v1/img_censor/v2/user_defined&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 本地文件路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;[本地文件路径]&quot;</span>;</span><br><span class="line">            <span class="type">byte</span>[] imgData = FileUtil.readFileByBytes(filePath);</span><br><span class="line">            <span class="type">String</span> <span class="variable">imgStr</span> <span class="operator">=</span> Base64Util.encode(imgData);</span><br><span class="line">            <span class="type">String</span> <span class="variable">imgParam</span> <span class="operator">=</span> URLEncoder.encode(imgStr, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> <span class="string">&quot;image=&quot;</span> + imgParam;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注意这里仅为了简化编码每一次请求都去获取access_token，线上环境access_token有过期时间， 客户端可自行缓存，过期后重新获取。</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> <span class="string">&quot;[调用鉴权接口获取的token]&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpUtil.post(url, accessToken, param);</span><br><span class="line">            System.out.println(result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ImgCensor.ImgCensor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写自己的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 百度认证工具类：注意要修改API Key 和 Secret Key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaiduAuditUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取权限token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回示例：</span></span><br><span class="line"><span class="comment">     * &#123;</span></span><br><span class="line"><span class="comment">     * &quot;access_token&quot;: &quot;24.3265383f84ac64db9eff781e70587614.2592000.1654844607.282335-26205415&quot;,</span></span><br><span class="line"><span class="comment">     * &quot;expires_in&quot;: 2592000</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getAuth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 官网获取的 API Key 更新为你注册的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">clientId</span> <span class="operator">=</span> <span class="string">&quot;hNkxSg4Kg4V1DknrquZkLIg6&quot;</span>;</span><br><span class="line">        <span class="comment">// 官网获取的 Secret Key 更新为你注册的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">clientSecret</span> <span class="operator">=</span> <span class="string">&quot;mEwcQpNoVrpHvogxr0q0gZ4cqIyuH3k4&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> getAuth(clientId, clientSecret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取API访问token</span></span><br><span class="line"><span class="comment">     * 该token有一定的有效期，需要自行管理，当失效时需重新获取.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ak - 百度云官网获取的 API Key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sk - 百度云官网获取的 Securet Key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> assess_token 示例：</span></span><br><span class="line"><span class="comment">     * &quot;24.460da4889caad24cccdb1fea17221975.2592000.1491995545.282335-1234567&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getAuth</span><span class="params">(String ak, String sk)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取token地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authHost</span> <span class="operator">=</span> <span class="string">&quot;https://aip.baidubce.com/oauth/2.0/token?&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">getAccessTokenUrl</span> <span class="operator">=</span> authHost</span><br><span class="line">                <span class="comment">// 1. grant_type为固定参数</span></span><br><span class="line">                + <span class="string">&quot;grant_type=client_credentials&quot;</span></span><br><span class="line">                <span class="comment">// 2. 官网获取的 API Key</span></span><br><span class="line">                + <span class="string">&quot;&amp;client_id=&quot;</span> + ak</span><br><span class="line">                <span class="comment">// 3. 官网获取的 Secret Key</span></span><br><span class="line">                + <span class="string">&quot;&amp;client_secret=&quot;</span> + sk;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">realUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(getAccessTokenUrl);</span><br><span class="line">            <span class="comment">// 打开和URL之间的连接</span></span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) realUrl.openConnection();</span><br><span class="line">            connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">            connection.connect();</span><br><span class="line">            <span class="comment">// 获取所有响应头字段</span></span><br><span class="line">            Map&lt;String, List&lt;String&gt;&gt; map = connection.getHeaderFields();</span><br><span class="line">            <span class="comment">// 遍历所有的响应头字段</span></span><br><span class="line">            <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">                System.err.println(key + <span class="string">&quot;---&gt;&quot;</span> + map.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 定义 BufferedReader输入流来读取URL的响应</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream()));</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                result += line;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 返回结果示例</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            System.err.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.parseObject(result);</span><br><span class="line">            <span class="type">String</span> <span class="variable">access_token</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> access_token;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.printf(<span class="string">&quot;获取token失败！&quot;</span>);</span><br><span class="line">            e.printStackTrace(System.err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">TextCensor</span><span class="params">(String param)</span> &#123;</span><br><span class="line">        <span class="comment">// 请求url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://aip.baidubce.com/rest/2.0/solution/v1/text_censor/v2/user_defined&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 注意这里仅为了简化编码每一次请求都去获取access_token，线上环境access_token有过期时间， 客户端可自行缓存，过期后重新获取。</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> getAuth();</span><br><span class="line">            <span class="comment">//处理参数格式</span></span><br><span class="line">            param = <span class="string">&quot;text=&quot;</span> + param;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpUtil.post(url, accessToken, param);</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.parseObject(result);</span><br><span class="line">            <span class="type">String</span> <span class="variable">conclusion</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;conclusion&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;合规&quot;</span>.equals(conclusion)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imageUrl 需要审核的图片路径地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">ImgCensor</span><span class="params">(String imageUrl)</span> &#123;</span><br><span class="line">        <span class="comment">// 请求url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://aip.baidubce.com/rest/2.0/solution/v1/img_censor/v2/user_defined&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//图片地址进行编码</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">imgParam</span> <span class="operator">=</span> URLEncoder.encode(imageUrl, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="comment">//设置参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> <span class="string">&quot;imgUrl=&quot;</span> + imgParam;</span><br><span class="line">            <span class="comment">// 注意这里仅为了简化编码每一次请求都去获取access_token，线上环境access_token有过期时间， 客户端可自行缓存，过期后重新获取。</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> getAuth();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpUtil.post(url, accessToken, param);</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.parseObject(result);</span><br><span class="line">            <span class="type">String</span> <span class="variable">conclusion</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;conclusion&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;合规&quot;</span>.equals(conclusion)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(BaiduAuditUtils.getAuth());</span><br><span class="line">        System.out.println(BaiduAuditUtils.TextCensor(<span class="string">&quot;操&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(BaiduAuditUtils.TextCensor(<span class="string">&quot;cnm&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(BaiduAuditUtils.TextCensor(<span class="string">&quot;sb&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(BaiduAuditUtils.TextCensor(<span class="string">&quot;牛逼&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(BaiduAuditUtils.TextCensor(<span class="string">&quot;日寇&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(BaiduAuditUtils.TextCensor(<span class="string">&quot;公司&quot;</span>));<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>依赖的jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主要用于后端发送http请求--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 后端发送http请求 - 一般用在调用三方接口时会用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一般调用三方接口响应的都是json字符串，后端可以通过fastjson将json字符串转成json对象获取响应信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.58<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Http工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * http 工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">post</span><span class="params">(String requestUrl, String accessToken, String params)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> HttpUtil.post(requestUrl, accessToken, contentType, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">post</span><span class="params">(String requestUrl, String accessToken, String contentType, String params)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoding</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (requestUrl.contains(<span class="string">&quot;nlp&quot;</span>)) &#123;</span><br><span class="line">            encoding = <span class="string">&quot;GBK&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> HttpUtil.post(requestUrl, accessToken, contentType, params, encoding);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">post</span><span class="params">(String requestUrl, String accessToken, String contentType, String params, String encoding)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> requestUrl + <span class="string">&quot;?access_token=&quot;</span> + accessToken;</span><br><span class="line">        <span class="keyword">return</span> HttpUtil.postGeneralUrl(url, contentType, params, encoding);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">postGeneralUrl</span><span class="params">(String generalUrl, String contentType, String params, String encoding)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(generalUrl);</span><br><span class="line">        <span class="comment">// 打开和URL之间的连接</span></span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">        connection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置通用的请求属性</span></span><br><span class="line">        connection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, contentType);</span><br><span class="line">        connection.setRequestProperty(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">        connection.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">        connection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">        connection.setDoInput(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到请求的输出流对象</span></span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(connection.getOutputStream());</span><br><span class="line">        out.write(params.getBytes(encoding));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立实际的连接</span></span><br><span class="line">        connection.connect();</span><br><span class="line">        <span class="comment">// 获取所有响应头字段</span></span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; headers = connection.getHeaderFields();</span><br><span class="line">        <span class="comment">// 遍历所有的响应头字段</span></span><br><span class="line">        <span class="keyword">for</span> (String key : headers.keySet()) &#123;</span><br><span class="line">            System.err.println(key + <span class="string">&quot;---&gt;&quot;</span> + headers.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定义 BufferedReader输入流来读取URL的响应</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream(), encoding));</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String getLine;</span><br><span class="line">        <span class="keyword">while</span> ((getLine = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            result += getLine;</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        System.err.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务使用</p><ul><li><p>自定义业务异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 效验店铺名称是否违法</span></span><br><span class="line">   <span class="keyword">if</span> (!BaiduAuditUtils.TextCensor(shop.getName())) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;店铺名称不合法，请重新输入！！！&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 效验店铺logo是否违法</span></span><br><span class="line">   <span class="keyword">if</span> (!BaiduAuditUtils.ImgCensor(<span class="string">&quot;http://123.207.27.208&quot;</span> + shop.getLogo())) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;图片不合法，请重新选择！！！&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用SpringBoot实现excel文件的导入导出呢？</title>
      <link href="/posts/78c9bcb6.html"/>
      <url>/posts/78c9bcb6.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-导入和导出">一. 导入和导出</h3><p>导入：将文档中数据导入到内存中，后续可以添加到数据库</p><p>导出：将内存中的数据或数据库中查询的数据导出到文档中</p><p>注意：这里指的文档通常指的是基本的办公软件：word，excel，ppt。</p><h3 id="二-EasyPOI导出数据">二.  EasyPOI导出数据</h3><ol><li><p>easypoi导入/导出excel其实就是domain对象属性和excel列的映射，而easypoi是通过注解的方式来做映射的，学习easypoi其实就是学会使用工具类和掌握它的常用注解.</p></li><li><p>常见注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Excel</span> 作用到filed上面,是对Excel一列的一个描述</span><br><span class="line"><span class="meta">@ExcelCollection</span> 表示一个集合,主要针对一对多的导出,比如一个老师对应多个科目,科目就可以用集合表示</span><br><span class="line"><span class="meta">@ExcelEntity</span> 表示一个继续深入导出的实体,但他没有太多的实际意义,只是告诉系统这个对象里面同样有导出的字段</span><br><span class="line"><span class="meta">@ExcelIgnore</span> 和名字一样表示这个字段被忽略跳过这个导导出</span><br><span class="line"><span class="meta">@ExcelTarget</span> 这个是作用于最外层的对象,描述这个对象的id,以便支持一个对象可以针对不同导出做出不同处理</span><br></pre></td></tr></table></figure></li><li><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-annotation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.ExcelExportUtil;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.ExcelImportUtil;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.entity.ExportParams;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.entity.ImportParams;</span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.entity.enmus.ExcelType;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Excel导入导出工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出工具类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pojoClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isCreateHeader</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exportExcel</span><span class="params">(List&lt;?&gt; list, String title, String sheetName, Class&lt;?&gt; pojoClass, String fileName, <span class="type">boolean</span> isCreateHeader, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">ExportParams</span> <span class="variable">exportParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExportParams</span>(title, sheetName);</span><br><span class="line">        exportParams.setCreateHeadRows(isCreateHeader);</span><br><span class="line">        defaultExport(list, pojoClass, fileName, response, exportParams);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出工具类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pojoClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exportExcel</span><span class="params">(List&lt;?&gt; list, String title, String sheetName, Class&lt;?&gt; pojoClass, String fileName, HttpServletResponse response)</span> &#123;</span><br><span class="line">        defaultExport(list, pojoClass, fileName, response, <span class="keyword">new</span> <span class="title class_">ExportParams</span>(title, sheetName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exportExcel</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; list, String fileName, HttpServletResponse response)</span> &#123;</span><br><span class="line">        defaultExport(list, fileName, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">defaultExport</span><span class="params">(List&lt;?&gt; list, Class&lt;?&gt; pojoClass, String fileName,</span></span><br><span class="line"><span class="params">                                      HttpServletResponse response, ExportParams exportParams)</span> &#123;</span><br><span class="line">        <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> ExcelExportUtil.exportExcel(exportParams, pojoClass, list);</span><br><span class="line">        <span class="keyword">if</span> (workbook != <span class="literal">null</span>) ;</span><br><span class="line">        downLoadExcel(fileName, response, workbook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downLoadExcel</span><span class="params">(String fileName, HttpServletResponse response, Workbook workbook)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;content-Type&quot;</span>, <span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            workbook.write(response.getOutputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">//throw new NormalException(e.getMessage());</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">defaultExport</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; list, String fileName, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> ExcelExportUtil.exportExcel(list, ExcelType.HSSF);</span><br><span class="line">        <span class="keyword">if</span> (workbook != <span class="literal">null</span>) ;</span><br><span class="line">        downLoadExcel(fileName, response, workbook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">importExcel</span><span class="params">(String filePath, Integer titleRows, Integer headerRows, Class&lt;T&gt; pojoClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(filePath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ImportParams</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImportParams</span>();</span><br><span class="line">        params.setTitleRows(titleRows);</span><br><span class="line">        params.setHeadRows(headerRows);</span><br><span class="line">        List&lt;T&gt; list = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            list = ExcelImportUtil.importExcel(<span class="keyword">new</span> <span class="title class_">File</span>(filePath), pojoClass, params);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">            <span class="comment">//throw new NormalException(&quot;模板不能为空&quot;);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//throw new NormalException(e.getMessage());</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">importExcel</span><span class="params">(MultipartFile file, Integer titleRows, Integer headerRows, Class&lt;T&gt; pojoClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ImportParams</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImportParams</span>();</span><br><span class="line">        params.setTitleRows(titleRows);</span><br><span class="line">        params.setHeadRows(headerRows);</span><br><span class="line">        List&lt;T&gt; list = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            list = ExcelImportUtil.importExcel(file.getInputStream(), pojoClass, params);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">            <span class="comment">// throw new NormalException(&quot;excel文件不能为空&quot;);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//throw new NormalException(e.getMessage());</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文件导出</p><ul><li><p>前端请求方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出excel文件</span></span><br><span class="line">   <span class="title function_">exportExcel</span>(<span class="params"></span>) &#123;</span><br><span class="line">     location.<span class="property">href</span> = <span class="string">&#x27;http://localhost:8080/shop/exportExcel&#x27;</span>;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></li><li><p>后端接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;导出excel文件&quot;)</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/exportExcel&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">export</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 查询所有店铺信息</span></span><br><span class="line">           <span class="keyword">final</span> List&lt;Shop&gt; list = shopService.list();</span><br><span class="line">           <span class="comment">// List&lt;?&gt; list, String title, String sheetName, Class&lt;?&gt; pojoClass, String fileName, HttpServletResponse response</span></span><br><span class="line">           ExcelUtils.exportExcel(list, <span class="string">&quot;店铺列表&quot;</span>, <span class="string">&quot;店铺数据&quot;</span>, Shop.class, <span class="string">&quot;shop.xlsx&quot;</span>, response);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>文件导入</p><ul><li><p>前端请求方法（文件表单项）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item&gt;</span><br><span class="line">         &lt;!-- 默认name=&quot;file&quot; --&gt;</span><br><span class="line">         &lt;el-upload class=&quot;upload-demo&quot;</span><br><span class="line">                    action=&quot;http://localhost:8080/shop/importExcel&quot;</span><br><span class="line">                    list-type=&quot;text&quot;&gt;</span><br><span class="line">           &lt;el-button type=&quot;success&quot;&gt;点击导入&lt;/el-button&gt;</span><br><span class="line">         &lt;/el-upload&gt;</span><br><span class="line"> &lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure></li><li><p>后端接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@ApiOperation(&quot;导入excel文件&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/importExcel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">importExcel</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;Shop&gt; shops = ExcelUtils.importExcel(file, <span class="number">1</span>, <span class="number">1</span>, Shop.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;导入数据共&quot;</span> + shops.size() + <span class="string">&quot;行&quot;</span>);</span><br><span class="line">        shops.forEach(System.out::println);</span><br><span class="line">        <span class="comment">// 通过批量添加数据到数据库</span></span><br><span class="line"><span class="comment">//        shopService.saveBatch(shops, shops.size());</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实体类加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.org.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.annotation.Excel;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shop</span> <span class="keyword">extends</span> <span class="title class_">BaseDomain</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//店铺名称</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;店铺名称&quot;, orderNum = &quot;1&quot;, width = 30)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//电话座机</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;电话座机&quot;, orderNum = &quot;2&quot;, width = 30)</span></span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="comment">//入驻时间</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;入驻时间&quot;, orderNum = &quot;3&quot;, width = 30, exportFormat = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(&quot;registerTime&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Date</span> <span class="variable">registerTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">//店铺状态：待审核【1】 ，审核通过，待激活【2】，激活成功【3】，审核失败-&gt;驳回【4】</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;店铺状态&quot;, orderNum = &quot;4&quot;, width = 30)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">state</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//店铺地址</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;店铺地址&quot;, orderNum = &quot;5&quot;, width = 30)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//店铺logo</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;店铺logo&quot;, orderNum = &quot;6&quot;, width = 30)</span></span><br><span class="line">    <span class="keyword">private</span> String logo;</span><br><span class="line">    <span class="comment">//店铺管理员ID</span></span><br><span class="line">    <span class="keyword">private</span> Long adminId;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="comment">//关联对象 - 店铺管理员对象</span></span><br><span class="line">    <span class="keyword">private</span> Employee admin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-了解点">三. 了解点</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>. 办公软件<span class="number">2003</span>与<span class="number">2007</span>区别</span><br><span class="line"><span class="attribute">word</span>有：.doc[word2003及之前的版本]和.docx[word2007及以后的版本]</span><br><span class="line"><span class="attribute">docx</span>版本更新</span><br><span class="line"><span class="attribute">docx</span>相比doc更节省空间</span><br><span class="line"><span class="attribute">docx</span>访问速度和兼容性更好</span><br><span class="line"><span class="attribute">excel</span>有：xls[excel2003及以前的版本]和xlsx[excel2007及以后的版本]</span><br><span class="line"><span class="attribute">xlsx</span>格式是向下兼容的,可兼容xls格式</span><br><span class="line"><span class="attribute">xlsx</span>格式存储内容更多</span><br><span class="line"><span class="attribute">xls</span>最大只有<span class="number">65536</span>行、<span class="number">256</span>列</span><br><span class="line"><span class="attribute">xlsx</span>可以有<span class="number">1048576</span>行、<span class="number">16384</span>列</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2. domain/entity/pojo与dto/vo</span><br><span class="line">domain/entity/pojo[简单的Java对象]：一般用做数据库操作的对象</span><br><span class="line">dto[数据传输对象-data transfer object]/vo[值对象-value objet]：一般用来接收参数</span><br><span class="line">对象中的数据不一定和数据库字段进行一一对象</span><br><span class="line">其实query也算是一种特殊的dto对象</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用SpringBoot发送邮件</title>
      <link href="/posts/2404cf60.html"/>
      <url>/posts/2404cf60.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-发送邮件原理">一. 发送邮件原理</h3><p>发件人【设置授权码】 - SMTP协议【Simple Mail TransferProtocol - 是一种提供可靠且有效的电子邮件传输的协议】 - 收件人</p><h3 id="二-获取授权码">二. 获取授权码</h3><p>开通POP3/SMTP，获取授权码</p><p>授权码是QQ邮箱推出的，用于登录第三方客户端的专用密码。适用于登录以下服务：POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务。</p><p><strong>温馨提醒：为了你的帐户安全，更改QQ密码以及独立密码会触发授权码过期，需要重新获取新的授权码登录</strong></p><p>第一步：进入邮箱设置 -&gt; 账户 -&gt; 生成授权码 ：<code>【注意】POP3/SMTP ,IMAP/SMTP服务都需要开启</code></p><h3 id="三-SpringBoot发送邮件步骤">三. SpringBoot发送邮件步骤</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 选择一个邮件服务商：QQ - smtp.qq.com</span><br><span class="line"><span class="bullet">2.</span> 获取授权码</span><br><span class="line"><span class="bullet">3.</span> 导包</span><br><span class="line"><span class="bullet">4.</span> 配置文件</span><br><span class="line"><span class="bullet">5.</span> 注入使用JavaMailSender</span><br><span class="line">注意事项：163和126邮箱要检查邮件中是否有未许可的信息，所有最好用qq邮箱作为发送方。而且发送方邮箱账号就是配置中的邮箱账号</span><br></pre></td></tr></table></figure><ol><li><h4 id="导入依赖">导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--对邮件的支持jar--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="配置邮箱">配置邮箱</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="comment">#设置单个文件大小</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">      <span class="comment">#设置单次请求文件的总大小</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">50MB</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span>   <span class="comment"># 设置邮箱主机(服务商),这里使用QQ邮件服务器</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">2399690261</span><span class="string">@qq.com</span>  <span class="comment"># 设置用户名 - 发送方</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">axgjklvsrgoeeaie</span>   <span class="comment"># 设置密码，该处的密码是QQ邮箱开启SMTP的授权码而非QQ密码</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">auth:</span> <span class="literal">true</span>  <span class="comment"># 必须进行授权认证，它的目的就是阻止他人任意乱发邮件</span></span><br><span class="line">          <span class="attr">starttls:</span> <span class="comment">#SMTP加密方式:连接到一个TLS保护连接</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">required:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>发送邮件测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes = PetHomeApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送简单邮件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SimpleMailMessage</span> <span class="variable">simpleMailMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">        <span class="comment">// 设置发送人</span></span><br><span class="line">        simpleMailMessage.setFrom(<span class="string">&quot;2399690261@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置标题</span></span><br><span class="line">        simpleMailMessage.setSubject(<span class="string">&quot;新型冠状病毒防护指南&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置文件内容</span></span><br><span class="line">        simpleMailMessage.setText(<span class="string">&quot;&lt;h2&gt;好好在家待着别到处乱跑噢.....&lt;/h2&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置发收件人</span></span><br><span class="line">        simpleMailMessage.setTo(<span class="string">&quot;3050105866@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置发送时间</span></span><br><span class="line">        simpleMailMessage.setSentDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">// 发送邮件</span></span><br><span class="line">        javaMailSender.send(simpleMailMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送复杂文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">// 创建复杂邮件对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> javaMailSender.createMimeMessage();</span><br><span class="line">        <span class="comment">// 发送复杂邮件工具类 true - 能够添加附件</span></span><br><span class="line">        <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage, <span class="literal">true</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 发件人</span></span><br><span class="line">        helper.setFrom(<span class="string">&quot;2399690261@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 邮件标题</span></span><br><span class="line">        helper.setSubject(<span class="string">&quot;店铺激活邮件&quot;</span>);</span><br><span class="line">        <span class="comment">// 邮件内容 true - 能够再内容中编写html标签 - 会解析</span></span><br><span class="line">        helper.setText(<span class="string">&quot;&lt;h3&gt;你的店铺已经审核通过，请&lt;a href=&#x27;http://localhost:8080/shop/active/40&#x27;&gt;点击这里&lt;/a&gt;激活邮件&lt;/h3&gt;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//添加附件</span></span><br><span class="line">        helper.addAttachment(<span class="string">&quot;Java面试题大全.pdf&quot;</span>,<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\coderyeah\\Desktop\\Java面试题大全.pdf&quot;</span>));</span><br><span class="line">        helper.addAttachment(<span class="string">&quot;welt.jpg&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\coderyeah\\Desktop\\welt.jpg&quot;</span>));</span><br><span class="line">        <span class="comment">//收件人</span></span><br><span class="line">        helper.setTo(<span class="string">&quot;3050105866@qq.com&quot;</span>);</span><br><span class="line">        javaMailSender.send(mimeMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">pass</span><span class="params">(ShopAuditLog auditLog)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">     <span class="comment">// 1.店铺审核通过 将t_shop表状态修改为2表示审核通过待激活</span></span><br><span class="line">     <span class="keyword">final</span> <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shop</span>();</span><br><span class="line">     shop.setState(<span class="number">2</span>);</span><br><span class="line">     shopMapper.update(shop, <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Shop&gt;().eq(BaseDomain::getId, auditLog.getShopId()));</span><br><span class="line">     <span class="comment">// 2. 新增审核日志</span></span><br><span class="line">     auditLog.setAuditId(<span class="number">356L</span>); <span class="comment">// 审核人</span></span><br><span class="line">     auditLog.setState(<span class="number">2</span>);</span><br><span class="line">     auditLogMapper.insert(auditLog);</span><br><span class="line">     <span class="comment">// 3.发送激活邮件 复杂邮件</span></span><br><span class="line">     <span class="keyword">final</span> <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> javaMailSender.createMimeMessage();</span><br><span class="line">     <span class="keyword">final</span> <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage, <span class="literal">true</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">     helper.setFrom(<span class="string">&quot;2399690261@qq.com&quot;</span>);</span><br><span class="line">     helper.setSubject(<span class="string">&quot;店铺激活邮件&quot;</span>);</span><br><span class="line">     helper.setText(<span class="string">&quot;&lt;h3&gt;你的店铺已经审核通过，请&lt;a href=&#x27;http://localhost:8080/shop/active/&quot;</span> + auditLog.getShopId() + <span class="string">&quot;&#x27;&gt;&lt;font color=&#x27;blue&#x27;&gt;点击这里&lt;/font&gt;&lt;/a&gt;激活邮件&lt;/h3&gt;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">     <span class="keyword">final</span> <span class="type">Shop</span> <span class="variable">shop1</span> <span class="operator">=</span> shopMapper.selectById(auditLog.getShopId()); <span class="comment">// 待激活店铺</span></span><br><span class="line">     <span class="comment">// 店铺管理员</span></span><br><span class="line">     <span class="keyword">final</span> <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.selectById(shop1.getAdminId());</span><br><span class="line">     helper.setTo(employee.getEmail()); <span class="comment">//收件人</span></span><br><span class="line">     <span class="comment">// 发送邮件</span></span><br><span class="line">     javaMailSender.send(mimeMessage);</span><br><span class="line">     <span class="keyword">return</span> Result.success(<span class="literal">null</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用JDBC连接MYSQL数据库</title>
      <link href="/posts/8059.html"/>
      <url>/posts/8059.html</url>
      
        <content type="html"><![CDATA[<ol><li><h3 id="JDBC-Java-Database-Connection-java数据库连接"><code>JDBC</code>: Java Database Connection <code>java</code>数据库连接</h3></li><li><p><code>DDL</code>:数据库定义语言</p></li><li><p><code>DDQ</code>: 数据库查询语言(查询)</p></li><li><p><code>DDM</code>: 数据库管理语言(增删改)</p></li><li><h3 id="步骤：贾琏欲执事-加载驱动，获取连接，获取sql语句执行对象，执行sql语句，释放资源。">步骤：贾琏欲执事===&gt;&gt;&gt;加载驱动，获取连接，获取<code>sql</code>语句执行对象，执行<code>sql</code>语句，释放资源。</h3></li><li><p>加载驱动①：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetDriver</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">      <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>();</span><br><span class="line">      <span class="comment">//创建类交给DriverManager管理</span></span><br><span class="line">      DriverManager.registerDriverr(driver);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>不推荐这种方式，加载驱动，因为在Driver源码中已经帮我们注册驱动了，使用这种方式就注册了两次驱动。<strong>当一个类被加载的时候，它的静态代码块就被执行了</strong>，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> <span class="keyword">extends</span> <span class="title class_">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title class_">java</span>.sql.Driver &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="加载驱动②：推荐这种方式">加载驱动②：推荐这种方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="comment">//类被加载，执行静态代码块的注册驱动语句</span></span><br></pre></td></tr></table></figure></li><li><h3 id="获取连接：驱动加载后，获取连接">获取连接：驱动加载后，获取连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//1.加载驱动</span></span><br><span class="line"> Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"> <span class="comment">//2.获取连接对象</span></span><br><span class="line"> <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);<span class="comment">//获取连接</span></span><br><span class="line"> <span class="comment">//简写模式</span></span><br><span class="line"><span class="comment">// Connection conn = DriverManager.getConnection(&quot;jdbc:mysql:///jdbc&quot;, &quot;root&quot;, &quot;123456&quot;);</span></span><br></pre></td></tr></table></figure><ul><li><code>DriverManager.getConnection(url,username,password)</code>提供了三个参数</li><li><code>url</code>: 表示要连接的<code>MYSQL</code>地址, <code>localhost</code>表示连接的主机地址，3306表示端口号，后面跟的<code>jdbc</code>表示连接的数据库名称。</li><li><code>root</code>: 表示自己数据库的用户名称。</li><li><code>password</code>: 连接数据库的密码。</li></ul></li><li><h3 id="获取语句执行对象">获取语句执行对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//1.加载驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="comment">//2.获取连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);<span class="comment">//获取连接</span></span><br><span class="line">   <span class="comment">//3.获取语句执行对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_user&quot;</span>;</span><br><span class="line">   <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);<span class="comment">//预编译sql语句</span></span><br></pre></td></tr></table></figure></li><li><h3 id="执行sql">执行<code>sql</code></h3></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//1.加载驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="comment">//2.获取连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);<span class="comment">//获取连接</span></span><br><span class="line">   <span class="comment">//3.获取语句执行对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_user&quot;</span>;</span><br><span class="line">   <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);<span class="comment">//预编译sql语句</span></span><br><span class="line">   <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();<span class="comment">//执行查询 返回结果集</span></span><br></pre></td></tr></table></figure><ol start="11"><li><h3 id="释放资源：先开后关">释放资源：先开后关</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">ps.close();</span><br><span class="line">conn.close;</span><br></pre></td></tr></table></figure></li><li><h3 id="SQL注入问题"><code>SQL</code>注入问题</h3><ul><li><p>如果使用Statement 获取<code>sql</code>语句执行对象<code>(Statement sm = conn.createStatement()</code>)，<code>sql</code>采用的是字符串拼接的形式，不安全，所以用<code>PreparedStatement ps = conn.prepareStatement(sql);</code>得到语句执行对象，<code>sql</code>中的问号(?)作为占位符。如下就可以查找所有用户。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_user <span class="keyword">WHERE</span> user_name <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">OR</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">AND</span> user_password <span class="operator">=</span> <span class="string">&#x27;1233&#x27;</span> ;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span><span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="Statement和PreparedStatement的区别："><code>Statement</code>和<code>PreparedStatement</code>的区别：</h3></li></ol><p><code>Statement</code>:</p><p>①有<code>sql</code>注入的风险；</p><p>②<code>sql</code>是字符串拼接(<code>sql</code>结构会根据参数的改变而改变)；</p><p>③<code>Statement</code>是<code>PreparedStatement</code>的父类。</p><p><code>PreparedStatement</code>:</p><p>①可以防止<code>sql</code>注入；</p><p>②<code>sql</code>是预编译(<code>sql</code>结构不会根据参数的改变而改变)的；</p><p>③<code>PreparedStatement</code>是安全的；</p><p>④<code>PreparedStatement</code>执行效率比<code>Statement</code>高</p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220718150450.bmp" alt="capture_20220718114944983" style="zoom: 67%;" /><ol start="11"><li><h3 id="事务及其特性">事务及其特性</h3><ul><li><p>概念：一组逻辑操作单元， 数据从一种状态改变为另一种状态。</p></li><li><h3 id="ACID">ACID</h3><p>​      原子性 ： 把一次操作当成一个最小的单元不可以分割，要么同时成功要么同时失败回滚</p><p>​      一致性：一个事务执行的前后，数据的总量不会发生改变</p><p>​      隔离性：在并发的环境中，操作相同的数据是每一个事物都是独立的，相互不会影响</p><p>​      持久性：事物一旦提交，数据将永久保存到数据库中。</p></li><li><p>银行转账示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Connection conn;</span><br><span class="line">      </span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">      conn = JDBCUtils.INSTANCE.getConnection();</span><br><span class="line">  &#125;</span><br><span class="line">      </span><br><span class="line">  <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">ResultSet</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferAccounts</span><span class="params">(String username, String username2, Double money)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update t_student set money = money - ? where username = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">assert</span> conn != <span class="literal">null</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql1);</span><br><span class="line">            <span class="comment">//将自动提交设为false,改为手动提交,保证事务的一致性</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            ps.setDouble(<span class="number">1</span>, money);</span><br><span class="line">            ps.setString(<span class="number">2</span>, username);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line"><span class="comment">//            System.out.println(1/ 0);</span></span><br><span class="line">            <span class="comment">//-----------------------------------</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update t_student set money = money + ? where username=?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql2);</span><br><span class="line">            ps.setDouble(<span class="number">1</span>, money);</span><br><span class="line">            ps.setString(<span class="number">2</span>, username2);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            <span class="comment">//自动提交,只有上面的代码都正常执行后才提交修改数据库数据，否则不能提交，数据库数据保持不变</span></span><br><span class="line">            conn.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;转账完成！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//如果有异常 事务回滚:将缓存的sql语句回滚出来，节约空间开销 将占用的数据释放掉</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.INSTANCE.close(ps, res, conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="获取主键">获取主键</h3><ul><li><p><code>Statement.RETURN_GENERATED_KEYS</code>  运行返回主键id可以使用</p><p><code>statement.getGeneratedKeys()</code>  这个方法就是用来获取主键id的</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回添加主键值</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetKey</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//底层执行了两次sql语句，还有一次是select max(id) from t_student;就得到了新增id值。</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_student(username, password, age, sex, money) VALUES (?,?,?,?,?)&quot;</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//返回主键的sql语句</span></span><br><span class="line">          ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">          ps.setObject(<span class="number">1</span>, <span class="string">&quot;青青&quot;</span>);</span><br><span class="line">          ps.setObject(<span class="number">2</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">          ps.setObject(<span class="number">3</span>, <span class="number">18</span>);</span><br><span class="line">          ps.setObject(<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">          ps.setObject(<span class="number">5</span>, <span class="number">900.0</span>);</span><br><span class="line">          ps.executeUpdate();</span><br><span class="line">          res = ps.getGeneratedKeys();</span><br><span class="line">          res.next();<span class="comment">//读取下一行数据</span></span><br><span class="line">          System.out.println(<span class="string">&quot;返回主键：&quot;</span> + res.getLong(<span class="number">1</span>));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="连接池">连接池</h3><ul><li><p>概述：数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。在Java中,连接池使用javax.sql.DataSource接口来表示连接池. 这里的DataSource就是连接池。连接池就是DataSource</p></li><li><p>常用连接池：</p><ol><li>DBCP: Spring推荐的（Spring框架已经集成DBCP）</li><li>C3P0: Hibernate推荐的(早期)（Hibernate框架已经集成C3P0）</li><li>boneCP：淘汰了</li><li>Hikari：<a href="https://github.com/brettwooldridge/HikariCP">HikariCP</a>可能是目前业内最快的数据库连接池，而且轻量的连接池</li><li>Druid ：<a href="https://github.com/alibaba/druid">Druid</a>是阿里巴巴开源的“为监控而生的数据库连接池！”。 性能测试过程略低于HikariCP，但是提供了强大的监控和扩展功能。支持psCache。</li></ol></li><li><p>使用步骤：所需jar<a href="https://gitee.com/coderyeah/layui-module/tree/master/lib">https://gitee.com/coderyeah/layui-module/tree/master/lib</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">步骤：</span></span><br><span class="line"> <span class="attr">1.</span> <span class="string">导入jar包:HikariCP 3.2.0【版本根据需求】</span></span><br><span class="line"> <span class="attr">2.</span> <span class="string">创建连接池参数HikariConfig对象</span></span><br><span class="line"> <span class="attr">3.</span> <span class="string">连接池参数对象设置连接参数：</span></span><br><span class="line"> <span class="attr">4.</span> <span class="string">创建连接池对象，将参数对象传入</span></span><br><span class="line"> <span class="attr">5.</span> <span class="string">获取连接对象：getConnection();</span></span><br><span class="line"><span class="comment"># driverClassName驱动名【自定义即可，现在可以不写】</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># url连接ip和端口、数据库，以及字符集。都是项目中约定好的</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="comment"># username用户名【自定义即可】</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># password密码【自定义即可】</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#连接池启动时的初始值</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">200</span></span><br><span class="line"><span class="comment">#连接池的最大值</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">500</span></span><br><span class="line"><span class="comment">#连接池的最大空闲数</span></span><br><span class="line"><span class="attr">maxIdle</span>=<span class="string">200</span></span><br></pre></td></tr></table></figure></li><li><p>Hikari配置参数</p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220719112637.jpg" alt="img"  /><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220719112805.jpg" alt="img"></p></li><li><p>CRUD综合案例</p><ol><li><p>准备一个resource文件夹用来存放配置文件</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220719112939.png" alt="image-20220719112939411"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">///jdbc</span></span><br></pre></td></tr></table></figure></li><li><p>准备工具类获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.jdbc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lqs.jdbc.dao.IStudentDao;</span><br><span class="line"><span class="keyword">import</span> com.lqs.jdbc.dao.impl.StudentDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.zaxxer.hikari.HikariConfig;</span><br><span class="line"><span class="keyword">import</span> com.zaxxer.hikari.HikariDataSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Properties</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="comment">// private static String driver;</span></span><br><span class="line">    <span class="comment">//private static String url;</span></span><br><span class="line">    <span class="comment">// private static String username;</span></span><br><span class="line">    <span class="comment">// private static String password;</span></span><br><span class="line">    <span class="comment">//private static HikariDataSource dataSource;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取配置文件 解决硬编码</span></span><br><span class="line">            ps.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>));</span><br><span class="line">            <span class="comment">//创建连接池配置对象</span></span><br><span class="line">            <span class="type">HikariConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HikariConfig</span>();</span><br><span class="line">            <span class="comment">//设置配置参数</span></span><br><span class="line">            config.setUsername(ps.getProperty(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">            config.setJdbcUrl(ps.getProperty(<span class="string">&quot;url&quot;</span>));</span><br><span class="line">            config.setDriverClassName(ps.getProperty(<span class="string">&quot;driver&quot;</span>));</span><br><span class="line">            config.setPassword(ps.getProperty(<span class="string">&quot;password&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建数据源对象</span></span><br><span class="line">            dataSource = <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>(config);</span><br><span class="line">            <span class="comment">//获取连接</span></span><br><span class="line"><span class="comment">//            dataSource.getConnection();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            driver = ps.getProperty(&quot;driver&quot;);</span></span><br><span class="line"><span class="comment">//            username = ps.getProperty(&quot;username&quot;);</span></span><br><span class="line"><span class="comment">//            password = ps.getProperty(&quot;password&quot;);</span></span><br><span class="line"><span class="comment">//            url = ps.getProperty(&quot;url&quot;);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">/*   Class.forName(driver);//加载驱动</span></span><br><span class="line"><span class="comment">            final Connection conn = DriverManager.getConnection(url, username, password);</span></span><br><span class="line"><span class="comment">            if (conn != null) &#123;</span></span><br><span class="line"><span class="comment">                return conn;</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(PreparedStatement ps, ResultSet res, Connection conn)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                res.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>目录</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220719113338.png" alt="image-20220719113338692"></p></li><li><p>Student类，生成get，set方法</p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220719113527.png" alt="image-20220719113527573" style="zoom:50%;" /><ol start="5"><li><p>接口中的方法</p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220719113628.png" alt="image-20220719113628600" style="zoom:50%;" /></li><li><p>接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">IStudentDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Connection conn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        conn = JDBCUtils.INSTANCE.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">queryByUsernameAndPwd</span><span class="params">(String username, String pwd)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.INSTANCE.getConnection();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_student where username=? and password=?&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">assert</span> conn != <span class="literal">null</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, username);</span><br><span class="line">            ps.setString(<span class="number">2</span>, pwd);</span><br><span class="line">            res = ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (res.next()) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">                student.setAge(res.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">                student.setUsername(res.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                student.setIntro(res.getString(<span class="string">&quot;intro&quot;</span>));</span><br><span class="line">                student.setSex(res.getBoolean(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line">                student.setId(res.getLong(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                student.setPassword(res.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">                <span class="keyword">return</span> student;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.INSTANCE.close(ps, res, conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_student(username,password,sex,age,intro) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps = conn.prepareStatement(sql);<span class="comment">//预编译sql语句</span></span><br><span class="line">                ps.setString(<span class="number">1</span>, student.getUsername());</span><br><span class="line">                ps.setString(<span class="number">2</span>, student.getPassword());</span><br><span class="line">                ps.setBoolean(<span class="number">3</span>, student.isSex());</span><br><span class="line">                ps.setInt(<span class="number">4</span>, student.getAge());</span><br><span class="line">                ps.setString(<span class="number">5</span>, student.getIntro());</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                JDBCUtils.INSTANCE.close(ps, res, conn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;获取连接失败！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">del</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_student where id=?&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps = conn.prepareStatement(sql);<span class="comment">//预编译sql语句</span></span><br><span class="line">                ps.setLong(<span class="number">1</span>, id);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                JDBCUtils.INSTANCE.close(ps, res, conn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;获取连接失败！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Student student, Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_student set username =?, password=?, sex=?, age=?, intro=? where id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps = conn.prepareStatement(sql);</span><br><span class="line">                ps.setString(<span class="number">1</span>, student.getUsername());</span><br><span class="line">                ps.setString(<span class="number">2</span>, student.getPassword());</span><br><span class="line">                ps.setBoolean(<span class="number">3</span>, student.isSex());</span><br><span class="line">                ps.setInt(<span class="number">4</span>, student.getAge());</span><br><span class="line">                ps.setString(<span class="number">5</span>, student.getIntro());</span><br><span class="line">                ps.setLong(<span class="number">6</span>, id);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                JDBCUtils.INSTANCE.close(ps, res, conn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;获取连接失败！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_student where id=?&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                ps = conn.prepareStatement(sql);</span><br><span class="line">                ps.setLong(<span class="number">1</span>, id);</span><br><span class="line">                res = ps.executeQuery();</span><br><span class="line">                <span class="keyword">while</span> (res.next()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">                    student.setId(res.getLong(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                    student.setUsername(res.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                    student.setAge(res.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">                    student.setSex(res.getBoolean(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line">                    student.setIntro(res.getString(<span class="string">&quot;intro&quot;</span>));</span><br><span class="line">                    student.setPassword(res.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">                    <span class="keyword">return</span> student;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;获取连接失败！！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.INSTANCE.close(ps, res, conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">queryAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_student&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                ps = conn.prepareStatement(sql);</span><br><span class="line">                res = ps.executeQuery();</span><br><span class="line">                List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">while</span> (res.next()) &#123;</span><br><span class="line">                    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">                    student.setId(res.getLong(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                    student.setUsername(res.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                    student.setAge(res.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">                    student.setSex(res.getBoolean(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line">                    student.setIntro(res.getString(<span class="string">&quot;intro&quot;</span>));</span><br><span class="line">                    student.setPassword(res.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">                    students.add(student);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> students;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;获取连接失败！！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.INSTANCE.close(ps, res, conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferAccounts</span><span class="params">(String username, String username2, Double money)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update t_student set money = money - ? where username = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">assert</span> conn != <span class="literal">null</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql1);</span><br><span class="line">            <span class="comment">//将自动提交设为false,改为手动提交,保证事务的一致性</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            ps.setDouble(<span class="number">1</span>, money);</span><br><span class="line">            ps.setString(<span class="number">2</span>, username);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line"><span class="comment">//            System.out.println(1/ 0);</span></span><br><span class="line">            <span class="comment">//-----------------------------------</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update t_student set money = money + ? where username=?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql2);</span><br><span class="line">            ps.setDouble(<span class="number">1</span>, money);</span><br><span class="line">            ps.setString(<span class="number">2</span>, username2);</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            <span class="comment">//自动提交,只有上面的代码都正常执行后才提交修改数据库数据，否则不能提交，数据库数据保持不变</span></span><br><span class="line">            conn.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;转账完成！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//如果有异常 事务回滚:将缓存的sql语句回滚出来，节约空间开销 将占用的数据释放掉</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.INSTANCE.close(ps, res, conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h3 id="PrepareStatement和Statement的区别"><code>PrepareStatement</code>和<code>Statement</code>的区别:</h3><p>1.prepareStatement会先初始化SQL，先把这个SQL提交到数据库中进行预处理，多次使用可提高效率，不用一直更改SQL语句，只需要修改变量就行了，还可以有效的防止SQL注入攻击。</p><p>2.使用 Statement 对象。在对数据库只执行一次性存取，PreparedStatement 对象的开销比Statement大，对于一次性操作并不会带来额外的好处。</p><ul><li>3.statement每次执行sql语句，相关数据库都要执行sql语句的编译，</li></ul><p>3.preparedstatement是预编译得, preparedstatement支持批处理</p></li><li><h3 id="事务的四个特性ACID">事务的四个特性ACID</h3><ol><li>原子性(atomicity)：原子性事务中的操作为一个整体，要么都做，要么都不做.即一旦事务出错，就回滚事务.</li><li>一致性(consistency)：执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。</li><li>隔离性(isolation)：一个事务的执行不能被其他事务干扰。即一个事物内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事物之间不能互相干扰</li><li>持久性(durability)：指一个事物一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响</li></ol></li><li><h3 id="事务-transaction-：是数据库操作的最小工作单元，是作为单个逻辑工作单元执行的一系列操作；这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行；事务是一组不可再分割的操作集合-工作逻辑单元-。">事务(transaction)：是数据库操作的最小工作单元，是作为单个逻辑工作单元执行的一系列操作；这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行；事务是一组不可再分割的操作集合(工作逻辑单元)。</h3></li><li><h3 id="为啥使用连接池？">为啥使用连接池？</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一段Java代码操作数据库，需要取得连接，每次操作数据库都是需要取到一个连接。</span><br><span class="line">例如：新浪首页，查询体育新闻，需要一条sql，查询娱乐新闻，需要一条sql，可能一个首页面，就会存在100多个请求（到数据库查询），那这样浪费多少秒? 浪费1000秒</span><br><span class="line">结论：会浪费很多时间</span><br><span class="line">每次请求都会创建一个connection，因此会浪费资源（内存），当同时1000人访问的时候，那就会占用很多资源，因此很浪费时间和容器操作系统崩溃;</span><br><span class="line">所以，我们用连接池来提供资源利用率。</span><br></pre></td></tr></table></figure></li><li><h3 id="封装一个统一的增删改">封装一个统一的增删改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装一个通用的增删改</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 参数数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeUpdate</span><span class="params">(String sql, Object... obj)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取连接</span></span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line">            <span class="comment">//获取语句执行对象</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//            给sql赋值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, obj[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//执行sql</span></span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close(ps, <span class="literal">null</span>, conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="封装一个统一的查询方法">封装一个统一的查询方法</h3></li><li><table><thead><tr><th><code>ResultSetMetaData</code></th><th><code>getMetaData()</code>  检索此 <code>ResultSet</code>对象的列的数量，类型和属性。</th></tr></thead><tbody><tr><td><code>int</code></td><td><code>getColumnCount()</code>  返回此 <code>ResultSet</code>对象中的列数。</td></tr><tr><td><code>String</code></td><td><code>getColumnLabel(int column)</code>  获取指定列的建议标题用于打印输出和显示。</td></tr></tbody></table><ul><li>查询一个</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">executeQueryOne</span><span class="params">(String sql, Class&lt;T&gt; clazz, Object... obj)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过连接池获取连接对象</span></span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line">            <span class="comment">//获取执行对象</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给占位符赋值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, obj[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//得到结果集</span></span><br><span class="line">            res = ps.executeQuery();</span><br><span class="line">            <span class="comment">//获取结果集的元数据ResultSetMetaData getMetaData()</span></span><br><span class="line">            <span class="comment">//检索此 ResultSet对象的列的数量，类型和属性。</span></span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> res.getMetaData();</span><br><span class="line"><span class="comment">//            返回此 `res`对象中的列数。</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> metaData.getColumnCount();</span><br><span class="line">            <span class="comment">//判断结果集中是否存在下一条数据</span></span><br><span class="line">            <span class="keyword">if</span> (res.next()) &#123;</span><br><span class="line">                <span class="comment">//通过字节码对象 反射出对象实例</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> clazz.newInstance();<span class="comment">//必须有一个无参构造器</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">//获取别名</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> metaData.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;columnLabel==&quot;</span> + columnLabel);</span><br><span class="line">                    <span class="comment">//获取查询的一个子段值</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objVal</span> <span class="operator">=</span> res.getObject(i + <span class="number">1</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;objVal==&quot;</span> + objVal);</span><br><span class="line">                    <span class="comment">//通过反射封装字段</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnLabel);<span class="comment">//注意数据库字段要和实体类中保持一致</span></span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);<span class="comment">//允许访问private 修饰的字段</span></span><br><span class="line">                    field.set(t, objVal);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close(ps, res, conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>查询集合:与上面类似，将if(res.next())换为while(res.next())，再放入集合中即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> sql   sql语句</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> clazz 字节码对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> obj   参数数组</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> &lt;T&gt;   定义泛型</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 集合</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">queryMany</span><span class="params">(String sql, Class&lt;T&gt; clazz, Object... obj)</span> &#123;</span><br><span class="line">       <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">ResultSet</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">               </span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           conn = dataSource.getConnection();</span><br><span class="line">           ps = conn.prepareStatement(sql);</span><br><span class="line">           <span class="comment">//给占位符赋值</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class="line">               ps.setObject(i + <span class="number">1</span>, obj[i]);</span><br><span class="line">           &#125;</span><br><span class="line">           res = ps.executeQuery();</span><br><span class="line">           <span class="comment">//获取元数据</span></span><br><span class="line">           <span class="keyword">final</span> <span class="type">ResultSetMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> res.getMetaData();</span><br><span class="line">           <span class="keyword">final</span> <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> metaData.getColumnCount();<span class="comment">//得到列数</span></span><br><span class="line">           <span class="comment">//创建List集合对象用于保存数据</span></span><br><span class="line">           List&lt;T&gt; tList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">           <span class="keyword">while</span> (res.next()) &#123;</span><br><span class="line">               <span class="keyword">final</span> <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnCount; i++) &#123;<span class="comment">//循环每一列</span></span><br><span class="line">                   <span class="keyword">final</span> <span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> metaData.getColumnLabel(i + <span class="number">1</span>);<span class="comment">//数据库中字段名</span></span><br><span class="line">                   <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objVal</span> <span class="operator">=</span> res.getObject(i + <span class="number">1</span>);<span class="comment">//数据库中字段名对应的值</span></span><br><span class="line">                   <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnLabel);</span><br><span class="line">                   field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                   field.set(t, objVal);</span><br><span class="line">               &#125;</span><br><span class="line">               tList.add(t);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> tList;</span><br><span class="line">               </span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用Excel自定义函数并且全局使用</title>
      <link href="/posts/61f502ef.html"/>
      <url>/posts/61f502ef.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-使用Excel自定义一个从末尾开始截取指定字符串后面的函数">一.使用Excel自定义一个从末尾开始截取指定字符串后面的函数</h3><p>1.选择文件—&gt;选项—&gt;自定义功能区；勾选开发工具。</p><p><img src="F:%5Cblog%5Ccoderyeah%5Csource_posts%5Cimg%5Cimage-20230410102638578.png" alt="image-20230410102638578"></p><p>2.选择开发工具—&gt;visual Basic</p><p><img src="F:%5Cblog%5Ccoderyeah%5Csource_posts%5Cimg%5Cimage-20230410102919281.png" alt="image-20230410102919281"></p><p>3.选择插入—&gt;模块</p><p><img src="img/image-20230410103055919.png" alt="image-20230410103055919"></p><p>4.模块命名test</p><p><img src="img/image-20230410103157859.png" alt="image-20230410103157859"></p><p>5.然后在test模块中就可以自定义函数代码（这里用VB代码实现）</p><p><img src="img/image-20230410103333675.png" alt="image-20230410103333675"></p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="keyword">Function</span> LastStrForSpan(a <span class="keyword">As</span> <span class="type">String</span>)</span><br><span class="line">    <span class="keyword">Dim</span> b</span><br><span class="line">    b = InStrRev(a, <span class="string">&quot;-&quot;</span>)</span><br><span class="line">    <span class="keyword">Dim</span> length</span><br><span class="line">    length = Len(a)</span><br><span class="line">    LastStrForSpan = Right(a, length - b)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><p>6.然后保存格式为Excel加载宏，自定义命名。</p><p><img src="img/image-20230410104146666.png" alt="image-20230410104146666"></p><p>7.在Excel界面选择开发工具—&gt;Excel加载项；勾选需要加载的函数</p><p><img src="img/image-20230410104309406.png" alt="image-20230410104309406"></p><p>8.然后就可以在Excel中使用了</p><p><img src="img/image-20230410104511751.png" alt="image-20230410104511751"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-全文搜索专题">title:全文搜索专题</h2><h2 id="一-ElasticSearch">一.ElasticSearch</h2><h3 id="一-ES为什么比Mysql搜索快">一.ES为什么比Mysql搜索快</h3><ol><li>基于分词后的全文检索：例如select * from test where name like ‘%张三%’，对于mysql来说，因为索引失效，会进行全表检索；对es而言分词后，每个字都可以利用FST高速找到倒排索引的位置，并迅速获取文档id列表，大大的提升了性能，减少了磁盘IO。</li><li>精确检索：进行精确检索，有些时候可能mysql要快一些，当mysql的非聚合索引引用上了聚合索引，无需回表，则速度上可能更快；es还是通过FST找到倒排索引的位置比获取文档id列表，再根据文档id获取文档并根据相关度进行排序。但是es还有个优势，就是es即天然的分布式能够在大量数据搜索时可以通过分片降低检索规模，并且可以通过并行检索提升效率，用filter时，更是可以直接跳过检索直接走缓存。</li></ol><h3 id="二-ES中Match和Term的区别">二.ES中Match和Term的区别</h3><table><thead><tr><th>字段类型</th><th>match</th><th>term</th></tr></thead><tbody><tr><td>可分,即Text类型</td><td>先分，再查询</td><td>整体查询</td></tr><tr><td>不可分,非Text类型</td><td>整体查询</td><td>整体查询</td></tr></tbody></table><h3 id="三-ES有哪些聚合查询？">三.ES有哪些聚合查询？</h3><ul><li>ES聚合查询主要有三种模式,分别是分桶聚合(Bucket aggregations)、指标聚合(Metrics aggregations)、管道聚合(Pipeline aggregations),三种模式处理的业务场景不同,下面开始简要分析下.</li></ul><h4 id="1-分桶聚合-Bucket-aggregations">1.分桶聚合(Bucket aggregations)</h4><ul><li>分桶聚合类似与关系型数据库的Group By查询,按照指定的条件,进行分组统计。</li></ul><p><img src="C:%5CUsers%5C%E7%81%BF%5CDesktop%5C%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E4%B8%93%E9%A2%98%5CES%5C772156-20220810183202776-639768109.png" alt="772156-20220810183202776-639768109"></p><ul><li>图中首先按照手机的品牌进行分桶统计数量,接着在小米手机的分桶基础上,再按照小米手机的档次进行二次分桶(分桶的嵌套查询)统计数量.</li><li>分桶聚合大致就是为了完成以上需求的</li></ul><p>2.指标聚合(Metrics aggregations)</p><ul><li>指标聚合主要是计算指标的Avg(平均值)、Max(最大值)、Min(最小值)、Sum(求和)、Cardinality(去重)、ValueCount(记数)、Stats(统计聚合)、Top Hits(聚合)等。</li></ul><p><img src="C:%5CUsers%5C%E7%81%BF%5CDesktop%5C%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E4%B8%93%E9%A2%98%5CES%5C772156-20220810194551740-1731261867.png" alt="772156-20220810194551740-1731261867"></p><ul><li>可以通过指标聚合计算某个班级、某个学科的最高分、最低分等等.</li></ul><p>3.管道聚合(Pipeline aggregations)</p><ul><li>管道聚合主要用于对聚和结果的二次聚合,举个例子,这里需要计算某个商城中的各个品牌手机价格平均值中最小的手机品牌.</li><li>第一步需要计算各个手机品牌价格的平均值,接着计算平均值中的最小值,这里就需要用到管道聚合.</li></ul><h3 id="四-ES高亮怎么做的？">四.ES高亮怎么做的？</h3><ul><li>使用 HighlightBuilder 对关键字作高亮处理，SpringBoot 整合 ES的 jar 包，结果没有进行高亮处理，使用 ElasticsearchTemplate 的 queryForPage 方法来获取结果，再手动进行分页封装返回前台。</li></ul><h3 id="五-ES和数据库的数据一致性如何实现">五.ES和数据库的数据一致性如何实现</h3><ul><li>代码控制的，数据库做了写操作，直接更新 ES 中的数据，我知道可以通过 Logstash 中数据和 ES 的数据自动同步。也可以通过阿里的 canal 组件来同步。</li></ul><h3 id="六-你们项目怎么使用ES，用在哪儿，为什么要用它">六.你们项目怎么使用ES，用在哪儿，为什么要用它</h3><h3 id="七-ES的keyword和text区别">七.ES的keyword和text区别</h3><ul><li>keyword：不分词，直接建立索引，支持模糊查询，精确查询，聚合查询</li><li>text：分词后建立索引，支持模糊查询，精确查询，不支持聚合查询</li><li>keyword 通常用于通常用于存储年龄，性别，邮编，邮箱号码等等，直接将完整数据保存的场景</li><li>text 通常存储全文搜索的数据，例如地址，文章内容的保存八.ES用到什么数据结构？倒排索引创建原理</li></ul><h3 id="九-ES分片机制了解吗">九.ES分片机制了解吗</h3><ul><li>ES 的索引库由多个分片 shard 组成，shard 分为 primary shard 主 shad 和 replica shard 副本,主 shard 承担写请求，replica 副本的数据从 primary 复制而来，同时分担读请求，primary shard 的数量设定了就不能修改，replica 数量可以修改。</li></ul><h3 id="十-ES做集群没有，有几个实例">十.ES做集群没有，有几个实例</h3><ul><li>做集群最低三个master实例，并且宕机不能超过两个，否则会报错。</li></ul><h3 id="十一-描述一下ES添加文档的过程">十一.描述一下ES添加文档的过程</h3><ol><li>客户端请求一个协调节点 coordinating node</li><li>协调节点根据算法选择一个 primary shard: 算法 hash(document_id) % (num_of_primary_shards)</li><li>对应的 primary shard 所在节点保存完数据后，将数据同步到 replica node。</li><li>协调节点 coordinating node 发现 primary node 和所有 replica node 都搞定之后返回结果给客户端</li></ol><h3 id="十二-数据节点存储数据详细流程">十二.数据节点存储数据详细流程</h3><ol><li>当分片所在的节点接收到来自协调节点的请求后，会将请求写入到 Memory Buffer，然后定时（默认是每隔 1 秒）写入到 Filesystem Cache，这个从 Momery Buffer到 Filesystem Cache 的过程就叫做 refresh</li><li>当然在某些情况下，存在 Momery Buffer 和 Filesystem Cache 的数据可能会丢失，ES 是通过 translog 的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到 translog 中，当 Filesystem cache 中的数据写入到磁盘中时，才会清除掉，这个过程叫做 flush；</li><li>在 flush 过程中，内存中的缓冲将被清除，内容被写入一个新段，段的 fsync 将创建一个新的提交点，并将内容刷新到磁盘，旧的 translog 将被删除并开始一个新的translog。flush 触发的时机是定时触发（默认 30 分钟）或者 translog 变得太大（默认为512M）时；</li></ol><h3 id="十三-ES的节点类型有几种">十三.ES的节点类型有几种</h3><h3 id="1-master-主节点：">1.master - 主节点：</h3><ul><li>elasticsearch.yml :</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>主要功能：维护元数据，管理集群节点状态；不负责数据写入和查询。</li><li>配置要点：内存可以相对小一些，但是机器一定要稳定，最好是独占的机器。</li></ul><h3 id="2-data-数据节点：">2.data - 数据节点：</h3><ul><li>elasticsearch.yml :</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node.master:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>主要功能：负责数据的写入与查询，压力大。</li><li>配置要点：大内存，最好是独占的机器。</li></ul><h3 id="3-client-客户端节点：">3.client - 客户端节点：</h3><ul><li>elasticsearch.yml :</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node.master:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>主要功能：负责任务分发和结果汇聚，分担数据节点压力。</li><li>配置要点：大内存，最好是独占的机器</li></ul><h3 id="4-mixed-混合节点（不建议）：">4.mixed- 混合节点（不建议）：</h3><ul><li>elasticsearch.yml :</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>主要功能：综合上述三个节点的功能。</li><li>配置要点：大内存，最好是独占的机器。</li><li>特别说明：不建议这种配置，节点容易挂掉。</li></ul><h3 id="十四-详细描述一下Elasticsearch获取文档的过程">十四.详细描述一下Elasticsearch获取文档的过程</h3><ol><li><p>客户端请求一个协调节点 coordinating node</p></li><li><p>coordinate node 根据算法 hash(document_id) % (num_of_primary_shards)，将请求转发到对应的 node，此时会使用 round-robin 随机轮询算法，在 primary shard 以及其所有 replica 中随机选择一个，让读请求负载均衡</p></li><li><p>接收到请求的 node 返回 document 给调节点 coordinate node。</p></li><li><p>coordinate node 返回 document 给客户端。</p><ul><li><h4 id="搜索被执行成一个两阶段过程，我们称之为-Query-Then-Fetch；">搜索被执行成一个两阶段过程，我们称之为 Query Then Fetch；</h4></li></ul></li></ol><h3 id="十五-详细描述一下Elasticsearch搜索过程">十五.详细描述一下Elasticsearch搜索过程</h3><ol><li>在初始查询阶段时，查询会广播到索引中每一个分片拷贝（主分片或者副本分片）。</li><li>每个分片在本地执行搜索并构建一个匹配文档的大小为 from + size 的优先队列。PS：在搜索的时候是会查询 Filesystem Cache 的，但是有部分数据还在 Memory Buffer，所以搜索是近实时的。</li><li>每个分片返回各自优先队列中所有文档的 ID 和排序值给协调节点，协调节点它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表。</li><li>接下来就是 取回阶段，协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。每个分片加载并 丰富 文档，如果有需要的话，接着返回文档给协调节点。一旦所有的文档都被取回了，协调节点返回结果给客户端。</li></ol><h3 id="十六-ES集群的三种颜色代表什么">十六.ES集群的三种颜色代表什么</h3><ul><li>绿色，黄色，红色，绿色代表集群健康，所有的主备分片都得到分配，如果有备分片没有 node 去分配，集群是黄色，黄色和绿色都是可用状态，如果有主分片的节点down 机，集群不可写数据，呈现红色，代表集群不健康。</li></ul><h2 id="二-RocketMQ">二.RocketMQ</h2><h3 id="一-MQ有哪些使用场景">一.MQ有哪些使用场景</h3><ul><li>可以用来消峰，异步，解耦, 日志收集等。</li><li>比如：秒杀，大促等高并发场景下使用 MQ 对请求进行排队，达到消峰的目的，防止服务器大流量打垮。</li><li>使用 MQ 对服务之间进行解耦和，同时也达到异步的效果，好处是服务消费者挂了，服务消费者依然可工作，同时也能提高系统的响应速度。</li><li>异构系统之间做数据交互也可以使用 MQ，通常使用 JSON 进行通信。</li><li>对大数据量的处理，比如：日志收集也可以用到 MQ。</li></ul><h3 id="二-RocketMQ有几种消息">二.RocketMQ有几种消息</h3><ol><li>同步消息: 发送者发送消息，需要等待结果的返回，才能继续发送第二条消息，这是一种阻塞式模型，虽然消息可靠性高，但是阻塞导致性能低；</li><li>异步消息：它是通过回调的方式来获取到消息的发送结果，消息可靠性高，性能也高；</li><li>单向消息: 单向发送是没有返回结果值的，可靠性不高；</li></ol><ul><li><p>使用场景建议如下：</p><ul><li><p>如果是比较重要的不可丢失的消息，且对时效性要去不高建议使用同步发送，如转账消息；</p></li><li><p>如果是不重要的可失败的消息，比如日志消息，建议使用单向发送；</p></li><li><p>如果对时效性要求比较高，且！消息不能丢失，可以尝试使用异步发送；</p></li></ul></li></ul><h3 id="三-Consumer消息的拉取模式有哪两种">三.Consumer消息的拉取模式有哪两种</h3><ul><li>消息到消费分为：拉取式 pull ,和推送是 push；</li><li>Pull:拉取式，需要消费者间隔一定时间就去遍历关联的 Queue,实时性差但是便于应用控制消息的拉取；</li><li>Push:推送式，封装了 Queue 的遍历，实时性强，但是对系统资源占用比较多；</li></ul><h3 id="四-RocketMQ如何保证消息的顺序">四.RocketMQ如何保证消息的顺序</h3><ul><li><p>按照发送的顺序进行消费就是顺序消息，遵循（FIFO）, 默认生产者以 Round Robin轮询方式把消息发送到不同的 Queue 分区队列；消费者从多个队列中消费消息，这种情况没法保证顺序。</p></li><li><p>RocketMQ 分为全局有序和部分有序：</p></li><li><p>全局有序是一个 topic 下的所有消息都要保证顺序，如果要保证消息全局顺序消费，就需要保证使用一个队列存放消息，一个消费者从这一个队列消费消息就能保证顺序，即：单线程执行部分顺序消息只要保证某一组消息被顺序消费，即：只需要保证一个队列中的消息有序消费即可。比如：保证同一个订单 ID 的生成、付款、发货消息按照顺序消费即可实现。</p></li></ul><h3 id="五-延迟消息有用过吗？怎么用？可以用在什么业务场景">五.延迟消息有用过吗？怎么用？可以用在什么业务场景</h3><ul><li>可以设置消息的过期时间等级，可以用作 VIP 过期，支付超时，自动确认收货等。</li></ul><h3 id="六-RocketMQ事务消息的使用场景，举例说明">六.RocketMQ事务消息的使用场景，举例说明</h3><ul><li>事务消息是最终一致性的事务场景。</li><li>比如：注册保存用户同时赠送积分，由于赠送积分这个动作可以接受延迟同步，采用最终一致性。</li><li>滴滴打车的费用结算，跨行转账，等场景都可以考虑最终一致性。</li></ul><h3 id="七-RocketMQ如何保证消息投递成功-投递可靠消息">七.RocketMQ如何保证消息投递成功(投递可靠消息)</h3><h3 id="八-RocketMQ如何保证消息不丢失">八.RocketMQ如何保证消息不丢失</h3><p>Producer发送消息阶段<br>发送消息阶段涉及到Producer到broker的网络通信，因此丢失消息的几率一定会有，那RocketMQ在此阶段用了哪些手段保证消息不丢失了（或者说降低丢失的可能性）。</p><h3 id="1-手段一：提供SYNC的发送消息方式，等待broker处理结果。">1.手段一：提供SYNC的发送消息方式，等待broker处理结果。</h3><ul><li>RocketMQ提供了3种发送消息方式，分别是：<ul><li><p>同步发送：Producer 向 broker 发送消息，阻塞当前线程等待 broker 响应 发送结果。</p></li><li><p>异步发送：Producer 首先构建一个向 broker 发送消息的任务，把该任务提交给线程池，等执行完该任务时，回调用户自定义的回调函数，执行处理结果。</p></li><li><p>Oneway发送：Oneway 方式只负责发送请求，不等待应答，Producer只负责把请求发出去，而不处理响应结果。</p></li><li><p>我们在调用producer.send方法时，不指定回调方法，则默认采用同步发送消息的方式，这也是丢失几率最小的一种发送方式(但是效率比较低)。</p></li></ul></li></ul><h3 id="2-手段二：发送消息如果失败或者超时，则重新发送。">2.手段二：发送消息如果失败或者超时，则重新发送。</h3><ul><li>发送重试源码如下，本质其实就是一个for循环，当发送消息发生异常或超时的时候重新循环发送。默认重试3次，重试次数可以通过producer指定。</li></ul><h3 id="3-手段三：broker提供多master模式">3.手段三：broker提供多master模式</h3><ul><li>即使某台broker宕机了，保证消息可以投递到另外一台正常的broker上。</li><li>如果broker只有一个节点，则broker宕机了，即使producer有重试机制，也没用（Broker都挂了，哪来的重试机制），因此利用多主模式，当某台broker宕机了，换一台broker进行投递，保持高可用。</li></ul><h3 id="总结">总结</h3><ul><li>producer消息发送方式虽然有3种，但为了减小丢失消息的可能性尽量采用同步的发送方式，同步等待发送结果，利用同步发送+重试机制+多个master节点，尽可能减小消息丢失的可能性。</li></ul><h3 id="九-RocketMQ如何处理幂等-消息重复消费问题">九.RocketMQ如何处理幂等(消息重复消费问题)</h3><h3 id="1-产生场景：">1.产生场景：</h3><ol><li>当系统的调用链路比较长的时候，比如系统A调用系统B，系统B再把消息发送到RocketMQ中，在系统A调用系统B的时候，如果系统B处理成功，但是迟迟没有将调用成功的结果返回给系统A的时候，系统A就会尝试重新发起请求给系统B，造成系统B重复处理，发起多条消息给RocketMQ造成重复消费；</li><li>在系统B发送给RocketMQ的时候，也有可能会发生和上面一样的问题，消息发送超时，节骨系统B重试，导致RocketMQ接收到了重读消息；</li><li>当RocketMQ成功接收到消息，并将消息交给消费者处理，如果消费者消费完成后还没来得及提交offset给RocketMQ，自己宕机或者重启了，那么RocketMQ没有接收到offset，就会认为消费失败了，会重发消息给消费者再次消费；</li></ol><h3 id="2-解决方案：">2.解决方案：</h3><ul><li>通过<strong>幂等性</strong>来保证，只要保证重复消息不对结果产生影响，就完美地解决这个问题。</li></ul><h3 id="1-在生产者端保证幂等性，以下两种方式：">1.在生产者端保证幂等性，以下两种方式：</h3><ol><li>RocketMQ支持消息查询的功能，只要去RocketMQ查询一下是否已经发送过该条消息就可以了，不存在则发送，存在则不发送；</li><li>引入Redis，在发送消息到RocketMQ成功之后，向Redis中插入一条数据，如果发送重试，则先去Redis查询一个该条消息是否已经发送过了，存在的话就不重复发送消息了；</li></ol><h3 id="2-注意：">2.注意：</h3><ul><li>方法一：RocketMQ消息查询的性能不是特别好，如果在高并发的场景下，每条消息在发送到RocketMQ时都去查询一下，可能会影响接口的性能；</li><li>方法二：在一些极端的场景下，Redis也无法保证消息发送成功之后，就一定能写入Redis成功，比如写入消息成功而Redis此时宕机，那么再次查询Redis判断消息是否已经发送过，是无法得到正确结果的；</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离知识要点</title>
      <link href="/posts/25f79b3a.html"/>
      <url>/posts/25f79b3a.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>前端框架采用<code>VUE</code>框架，发送请求使用<code>axios</code>,<code>UI</code>框架使用<code>ElementUi</code>；</p></li><li><p>在<code>main.js</code>中自定义<code>vue</code>属性对象和默认请求路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span>= <span class="string">&quot;http://127.0.0.1:8080/&quot;</span></span><br><span class="line"><span class="comment">//自定义Vue对象属性</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = axios</span><br></pre></td></tr></table></figure></li><li><p>发送批量删除请求用patch; 后端使用<code>PatchMapping(&quot;/emp/delByBatch&quot;)</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ids = <span class="variable language_">this</span>.<span class="property">sels</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span>); </span><br><span class="line"><span class="keyword">let</span> para = &#123;<span class="attr">ids</span>: ids&#125;;<span class="comment">//id数组</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">patch</span>(<span class="string">&#x27;/emp/delByBatch&#x27;</span>, para).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">listLoading</span> = <span class="literal">false</span>;</span><br><span class="line">          <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;批量删除成功&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure></li><li><p>部门无限级树：无限级树使用到<code>ElementUI</code>的级联选择器</p><ul><li><p>后端实体字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部门无限级树 </span></span><br><span class="line"> <span class="meta">@TableField(exist = false)</span></span><br><span class="line"> <span class="meta">@JsonInclude(JsonInclude.Include.NON_EMPTY)</span><span class="comment">// 过滤空的集合</span></span><br><span class="line"> List&lt;Department&gt; children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></li><li><p>方案：</p><ul><li>一次性查询出全部数据；</li><li>从所有数据中找到一级数据；</li><li>只要不是一级数据那就找到自己的上级数据，放入到上级数据的children中。</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">getDepartmentTrees</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> ArrayList&lt;Department&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//查询所有部门数据</span></span><br><span class="line">       <span class="keyword">final</span> List&lt;Department&gt; departments = departmentMapper.selectList(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;());</span><br><span class="line">       <span class="keyword">for</span> (Department department : departments) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="literal">null</span> != department.getParentId()) &#123;</span><br><span class="line">               <span class="comment">//表示为子级部门 找到唯一父级部门</span></span><br><span class="line">           <span class="comment">/*   双重for循环实现无限级树效率慢 所以使用HashMap</span></span><br><span class="line"><span class="comment">            for (Department parent : departments) &#123;</span></span><br><span class="line"><span class="comment">                   if (department.getParentId().equals(parent.getId())) &#123;</span></span><br><span class="line"><span class="comment">                       parent.getChildren().add(department);</span></span><br><span class="line"><span class="comment">                       break;//找到一个父级部门就跳出循环相当于一个父亲</span></span><br><span class="line"><span class="comment">                   &#125;</span></span><br><span class="line"><span class="comment">               &#125;*/</span></span><br><span class="line">               <span class="comment">// 实现无限级树高级版^_^</span></span><br><span class="line">               <span class="comment">// 将集合转成map 键是id 值是部门类</span></span><br><span class="line">     Map&lt;Long, Department&gt; map = departments.stream().collect(Collectors.toMap(Department::getId, e -&gt; e));</span><br><span class="line">               <span class="comment">//上面一行代码相当于如下代码</span></span><br><span class="line">            <span class="comment">/*   final HashMap&lt;Long, Department&gt; map2 = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">               for (Department d : departments) &#123;</span></span><br><span class="line"><span class="comment">                   map2.put(d.getId(), d);</span></span><br><span class="line"><span class="comment">               &#125;*/</span></span><br><span class="line">               <span class="comment">//获取父级部门</span></span><br><span class="line">               <span class="keyword">final</span> <span class="type">Department</span> <span class="variable">dept</span> <span class="operator">=</span> map.get(department.getParentId());</span><br><span class="line">               <span class="comment">//将当前子级部门添加到父级部门</span></span><br><span class="line">               dept.getChildren().add(department);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//顶级部门</span></span><br><span class="line">               list.add(department);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> Result.success(list);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li><p>复制对象<code>Object.assign()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复制对象 </span></span><br><span class="line"><span class="keyword">let</span> para = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">editForm</span>);<span class="comment">//assign&lt;T, U&gt;(target: T, source: U): T &amp; U;</span></span><br></pre></td></tr></table></figure></li><li><p>常用工具条</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--工具条--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;24&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toolbar&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete-solid&quot;</span>@<span class="attr">click</span>=<span class="string">&quot;batchRemove&quot;</span><span class="attr">:disabled</span>=<span class="string">&quot;this.sels.length===0&quot;</span>&gt;</span>批量删除</span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  分页插件  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">         <span class="attr">background</span></span></span><br><span class="line"><span class="tag">         <span class="attr">layout</span>=<span class="string">&quot;total,sizes, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span> <span class="attr">:current-page</span>=<span class="string">&quot;currentPage&quot;</span> <span class="attr">:page-size</span>=<span class="string">&quot;pageSize&quot;</span></span></span><br><span class="line"><span class="tag">         @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">         @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:page-sizes</span>=<span class="string">&quot;pageSizes&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">style</span>=<span class="string">&quot;float:right&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>后端配置跨域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前跨域请求最大有效时长。这里默认1天</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MAX_AGE</span> <span class="operator">=</span> <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>); <span class="comment">// 1 设置访问源地址</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>); <span class="comment">// 2 设置访问源请求头</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>); <span class="comment">// 3 设置访问源请求方法</span></span><br><span class="line">        corsConfiguration.setMaxAge(MAX_AGE);</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, corsConfiguration); <span class="comment">// 4 对接口配置跨域设置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Knife4j</code>文档测试接口</p><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开发文档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--参数验证--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(value = &quot;defaultApi2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">defaultApi2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(<span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                        .title(<span class="string">&quot;# coderyeah的接口测试文档&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;# coderyeah：18 true&quot;</span>)</span><br><span class="line">                        .termsOfServiceUrl(<span class="string">&quot;https://coderyeah.gitee.io/&quot;</span>)</span><br><span class="line">                        .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;lqs&quot;</span>, <span class="string">&quot;https://coderyeah.gitee.io/&quot;</span>, <span class="string">&quot;2399690261@qq.com&quot;</span>))</span><br><span class="line">                        .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                        .build())</span><br><span class="line">                <span class="comment">//分组名称</span></span><br><span class="line">                .groupName(<span class="string">&quot;petHome:1.0&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里指定Controller扫描包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;io.coderyeah.org.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问路径：<a href="http://localhost:8080/doc.html#/home">http://localhost:8080/doc.html#/home</a> (端口号修改成本地项目端口号)</p></li></ul></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-解决文件名称包含-号导致访问出错问题">title:解决文件名称包含#号导致访问出错问题</h2><p>例如系统有一个pdf文件名是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wew#ada.pdf</span><br></pre></td></tr></table></figure><p>当访问这个文件时就会报错。</p><p>解决方法：只需要将#转义一下就可以正常访问了，截取文件名称然后将其转换再进行字符串拼接或者将整个文件名称进行转义也可正常访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(URLEncoder.encode(<span class="string">&quot;#&quot;</span>)); <span class="comment">// %23</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wew#ada.pdf ==&gt;&gt;&gt; wew%23ada.pdf (即可正常访问)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于maven搭建的SSM项目文件配置</title>
      <link href="/posts/61113.html"/>
      <url>/posts/61113.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-CMS">一. CMS</h3><p>内容管理系统（Content Management System：内容管理系统，简称CMS）是一种位于WEB 前端（Web 服务器）和后端办公系统或流程（内容创作、编辑）之间的软件系统。内容的创作人员、编辑人员、发布人员使用内容管理系统来提交、修改、审批、发布内容。这里指的“内容”可能包括文件、表格、图片、数据库中的数据甚至视频等一切你想要发布到Internet、Intranet以及Extranet网站的信息。</p><h3 id="二-CRM">二. CRM</h3><p>客户关系管理系统(Customer Relationship Management)，是指利用软件、硬件和[网络技术，为企业建立一个客户信息收集、管理、分析和利用的信息系统。以客户数据的管理为核心，记录企业在市场营销和销售过程中和客户发生的各种交互行为，以及各类有关活动的状态，提供各类数据模型，为后期的分析和决策提供支持。</p><h3 id="三-GridManager-快速、灵活的对Table标签进行实例化，让Table标签充满活力。">三. GridManager----------快速、灵活的对Table标签进行实例化，让Table标签充满活力。</h3><ol><li><p>网址： <strong><a href="http://gridmanager.lovejavascript.com">http://gridmanager.lovejavascript.com</a></strong></p></li><li><p>使用步骤：</p><ul><li><p>引入css和js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入girdmanager的css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/system/gridmanager/css/gm.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入gridmanager的js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/static/system/gridmanager/js/gm.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>html页面加上相应的table</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;table-demo-baseCode&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>js中配置查询</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#table-demo-ajaxPageCode&#x27;</span>).<span class="title function_">GM</span>(&#123;</span><br><span class="line">        <span class="comment">//唯一组件标示</span></span><br><span class="line">        <span class="attr">gridManagerName</span>: <span class="string">&#x27;demo-ajaxPageCode&#x27;</span>,</span><br><span class="line">        <span class="comment">//ajax请求</span></span><br><span class="line">        <span class="attr">ajaxData</span>: <span class="string">&#x27;/system/article/list&#x27;</span>, <span class="attr">ajaxType</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="comment">//开启分页</span></span><br><span class="line">        <span class="attr">supportAjaxPage</span>: <span class="literal">true</span>, <span class="attr">supportAdjust</span>: <span class="literal">false</span>, <span class="attr">supportDrag</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//表格数据</span></span><br><span class="line">        <span class="attr">height</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">        <span class="attr">currentPageKey</span>: <span class="string">&#x27;currentPage&#x27;</span>,</span><br><span class="line">        <span class="attr">pageSizeKey</span>: <span class="string">&#x27;pageSize&#x27;</span>,</span><br><span class="line">        <span class="attr">sizeData</span>: [<span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">150</span>], <span class="comment">//配置每页显示条数的下拉项，数组元素仅允许为正整数。</span></span><br><span class="line">        <span class="attr">pageSize</span>: <span class="number">10</span>, <span class="comment">//初次进行页面的每页条数(不写默认20)</span></span><br><span class="line">        <span class="attr">columnData</span>: [&#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;title&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;文章标题&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">remind</span>: <span class="string">&#x27;the title&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;url&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;文章链接&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">remind</span>: <span class="string">&#x27;the link&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;clickCount&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;点击量&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">remind</span>: <span class="string">&#x27;the click&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;articleType&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;文章类型&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">remind</span>: <span class="string">&#x27;the type&#x27;</span>,</span><br><span class="line">            <span class="attr">template</span>: <span class="keyword">function</span> (<span class="params">cell, row, index, key</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> cell.<span class="property">name</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;enable&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;状态&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">remind</span>: <span class="string">&#x27;the status&#x27;</span>,</span><br><span class="line">            <span class="comment">//模板方法 自定义返回内容</span></span><br><span class="line">            <span class="comment">//cell:查询到的值，row:整行内容，index:索引，key:当前的key=enable</span></span><br><span class="line">            <span class="attr">template</span>: <span class="keyword">function</span> (<span class="params">cell, row, index, key</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> cell === <span class="literal">true</span> ? <span class="string">&quot;&lt;span style=&#x27;color: green&#x27;&gt;启用&lt;/span&gt;&quot;</span> : <span class="string">&quot;&lt;span style=&#x27;color: red&#x27;&gt;禁用&lt;/span&gt;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;createDate&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;发布时间&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">remind</span>: <span class="string">&#x27;the date&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;id&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;操作&#x27;</span>, <span class="attr">align</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">remind</span>: <span class="string">&#x27;the action&#x27;</span>,</span><br><span class="line">            <span class="attr">template</span>: <span class="keyword">function</span> (<span class="params">cell, row, index, key</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&lt;button type=&#x27;button&#x27; class=&#x27;btn btn-warning btn-sm edit&#x27; data-article=&#x27;&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(row) + <span class="string">&quot;&#x27;&gt;&lt;span class=&#x27;glyphicon glyphicon-pencil&#x27;&gt;&lt;/span&gt;修改&lt;/button&gt;  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&lt;button type=&#x27;button&#x27; class=&#x27;btn btn-danger btn-sm del&#x27; data-id=&#x27;&quot;</span> + row.<span class="property">id</span> + <span class="string">&quot;&#x27;&gt;&lt;span class=&#x27;glyphicon glyphicon-trash&#x27;&gt;&lt;/span&gt;删除&lt;/button&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    查询条件事件</span></span><br><span class="line">    $(<span class="string">&#x27;#queryButton&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//返回表单的json对象</span></span><br><span class="line">        <span class="keyword">var</span> query = $(<span class="string">&#x27;#queryForm&#x27;</span>).<span class="title function_">serializeObject</span>();</span><br><span class="line">        <span class="comment">//表格插件复用</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 更改在生成组件时所配置的参数query，执行后将会自动刷新表格数据。</span></span><br><span class="line"><span class="comment">注意事项:</span></span><br><span class="line"><span class="comment">1. 当query的key与分页及排序等字段冲突时将会被忽略</span></span><br><span class="line"><span class="comment">2. query中的key与columnData.key相同时，该值将会替换columnData.filter.selected的值</span></span><br><span class="line"><span class="comment">3. setQuery() 执行后会立即触发刷新操作</span></span><br><span class="line"><span class="comment">4. 在此配置的query在分页事件触发时, 会以参数形式传递至pagingAfter(query)事件内</span></span><br><span class="line"><span class="comment">5. setQuery方法中对query字段执行的操作是覆盖而不是合并, query参数位传递的任意值都会将原来的值覆盖.</span></span><br><span class="line"><span class="comment">6. setQuery() 执行后不会清除已选中的数据，如需清除可以在callback中执行setCheckedData(table, [])</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">GridManager.setQuery(table,&#123;&#x27;userName&#x27;:&#x27;baukh&#x27;,&#x27;sex&#x27;:&#x27;男&#x27;&#125;, gotoPage, callback);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="title class_">GridManager</span>.<span class="title function_">setQuery</span>(<span class="string">&#x27;demo-ajaxPageCode&#x27;</span>, query)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除事件</span></span><br><span class="line">    $(<span class="string">&#x27;#table-demo-ajaxPageCode&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.del&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//获取需要删除的id值</span></span><br><span class="line">        <span class="keyword">var</span> id = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(id)</span><br><span class="line">        <span class="comment">//打开删除模态框</span></span><br><span class="line">        $(<span class="string">&#x27;#del-dialog&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">        <span class="comment">//取消绑定事件</span></span><br><span class="line">        $(<span class="string">&#x27;#confirm-del-btn&#x27;</span>).<span class="title function_">off</span>(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">        <span class="comment">//确认删除请求</span></span><br><span class="line">        $(<span class="string">&#x27;#confirm-del-btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//隐藏模态框</span></span><br><span class="line">            $(<span class="string">&#x27;#del-dialog&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">            $.<span class="title function_">get</span>(<span class="string">&#x27;/system/article/delete&#x27;</span>, &#123;<span class="string">&#x27;id&#x27;</span>: id&#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">success</span>) &#123;</span><br><span class="line">                    <span class="comment">//刷新数据</span></span><br><span class="line">                    <span class="title class_">GridManager</span>.<span class="title function_">refreshGrid</span>(<span class="string">&#x27;demo-ajaxPageCode&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&#x27;删除失败&#x27;</span> + res.<span class="property">msg</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&#x27;json&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    添加按钮事件</span></span><br><span class="line">    $(<span class="string">&#x27;#addButton&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//开启新增模态框</span></span><br><span class="line">        $(<span class="string">&#x27;#save-dialog&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">        <span class="comment">//清除隐藏的id值</span></span><br><span class="line">        $(<span class="string">&#x27;#id&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="comment">//清空表单内容</span></span><br><span class="line">        $(<span class="string">&#x27;#save-form&#x27;</span>).<span class="title function_">resetForm</span>();</span><br><span class="line">        <span class="comment">//给单选框设置默认选中 禁用</span></span><br><span class="line">        $(<span class="string">&#x27;#disable&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//确认添加</span></span><br><span class="line">    $(<span class="string">&#x27;#confirm-save-btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 获取form表单的值 自动转换为json对象</span></span><br><span class="line">        <span class="keyword">var</span> saveData = $(<span class="string">&#x27;#save-form&#x27;</span>).<span class="title function_">serializeObject</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(saveData);</span><br><span class="line">        <span class="comment">//发送Ajax请求</span></span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/system/article/save&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: saveData,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">success</span>) &#123;</span><br><span class="line">                    <span class="comment">//隐藏模态框</span></span><br><span class="line">                    $(<span class="string">&#x27;#save-dialog&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">                    <span class="comment">//刷新数据</span></span><br><span class="line">                    <span class="title class_">GridManager</span>.<span class="title function_">refreshGrid</span>(<span class="string">&#x27;demo-ajaxPageCode&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">                    <span class="comment">// alert(&#x27;添加数据成功哦······&#x27;);</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&#x27;添加数据失败······&#x27;</span> + res.<span class="property">msg</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            <span class="attr">async</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    修改文章按钮 事件委托</span></span><br><span class="line">    $(<span class="string">&#x27;#table-demo-ajaxPageCode&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.edit&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//获取当前行数据</span></span><br><span class="line">        <span class="keyword">var</span> article = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&#x27;article&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(article);</span><br><span class="line">        <span class="comment">//为表单赋值</span></span><br><span class="line">        $(<span class="string">&#x27;#save-form&#x27;</span>).<span class="title function_">setForm</span>(article);</span><br><span class="line">        <span class="comment">//开启模态框</span></span><br><span class="line">        $(<span class="string">&#x27;#save-dialog&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="四-代码">四.代码</h3><h4 id="1-分页参数">1. 分页参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询的参数内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageParams</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    当前页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer currentPage;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    当前也数据量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    查询起始索引位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageBegin;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化pageBegin</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> pageBegin</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPageBegin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentPage != <span class="literal">null</span> &amp;&amp; pageSize != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">this</span>.currentPage - <span class="number">1</span>) * <span class="built_in">this</span>.pageSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-统一Ajax返回结果">2. 统一Ajax返回结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一返回ajax的请求结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxResult</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AjaxResult</span><span class="params">(<span class="type">boolean</span> success)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.success = success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AjaxResult <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AjaxResult</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AjaxResult <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AjaxResult</span>(<span class="literal">false</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-封装查询结果">3. 封装查询结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装一个查询结果类 使用GridManager组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 泛型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    查询结果数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long totals;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    返回的数据类型和数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-查询文章参数">4. 查询文章参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span><span class="comment">//解决子类对象比较不一至问题</span></span><br><span class="line"><span class="meta">@Data</span><span class="comment">//只对当前类生效</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span><span class="comment">//@Data 注解生成的 toString 方法也只包含了子类自有属性。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleParams</span> <span class="keyword">extends</span> <span class="title class_">PageParams</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    文章id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    文章标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    类型id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long typeId;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    是否禁用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer enable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    文章内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-SQL">5. SQL</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;articleQuery&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null and !&#x27;&#x27;.equals(title)&quot;</span>&gt;</span></span><br><span class="line">                title like concat(&#x27;%&#x27;,#&#123;title&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeId != null&quot;</span>&gt;</span></span><br><span class="line">                and typeId = #&#123;typeId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;enable != null&quot;</span>&gt;</span></span><br><span class="line">                and enable = #&#123;enable&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllArticlesAndType&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;articleMap&quot;</span>&gt;</span></span><br><span class="line">        select a.*, b.name, b.code</span><br><span class="line">        from t_article a</span><br><span class="line">        left join t_article_type b on a.typeId = b.id</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;articleQuery&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot; pageBegin != null and pageSize != null&quot;</span>&gt;</span></span><br><span class="line">            limit #&#123;pageBegin&#125;,#&#123;pageSize&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTotals&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        select count(*) from t_article</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;articleQuery&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getArticleByType&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lqs.domain.Article&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        from t_article a</span><br><span class="line">                 LEFT JOIN t_article_type b on a.typeId = b.id</span><br><span class="line">        WHERE b.`code` = #&#123;code&#125;</span><br><span class="line">          AND a.`enable` = 1</span><br><span class="line">        ORDER BY a.createDate DESC</span><br><span class="line">        LIMIT 0,8</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-pom">6. pom</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lqs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>apache-taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    数据库    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-pool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--     日志   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    jackson    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 工具包   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    &lt;build&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;resources&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &amp;lt;!&amp;ndash; maven项目中src源代码下的xml等资源文件编译进classes文件夹，--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--              注意：如果没有这个，它会自动搜索resources下是否有mapper.xml文件，--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--              如果没有就会报org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.pet.mapper.PetMapper.selectByPrimaryKey&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;resource&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                &lt;directory&gt;src/main/java&lt;/directory&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                &lt;includes&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                    &lt;include&gt;**/*.xml&lt;/include&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                &lt;/includes&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;/resource&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--            &amp;lt;!&amp;ndash;将resources目录下的配置文件编译进classes文件  &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;resource&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--                &lt;directory&gt;src/main/resources&lt;/directory&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;/resource&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;/resources&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;/build&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>黑马点评项目笔记</title>
      <link href="/posts/a50da3b7.html"/>
      <url>/posts/a50da3b7.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-docker安装nacos-运行容器">1.docker安装nacos,运行容器</h3><p><img src="../blog/coderyeah/source/_posts/img/image-20230629095246422.png" alt="image-20230629095246422"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos.nacos-server:1.2.0</span><br><span class="line">docker run --env MODE=standalone --name nacos --restart=always -d -p 8848:8848 nacos/nacos-server:1.2.0</span><br><span class="line">http://192.168.200.130:8848/nacos</span><br></pre></td></tr></table></figure><ul><li>docker ps: 查看运行的容器</li><li>docker logs -f 容器ID:查看运行日志</li></ul><h3 id="2-虚拟网络设置">2.虚拟网络设置</h3><p>账号：root  密码：itcast</p><img src="../blog/coderyeah/source/_posts/img/image-20230630153008431.png" alt="image-20230630153008431" style="zoom:50%;" /><img src="../blog/coderyeah/source/_posts/img/image-20230630153049522.png" alt="image-20230630153049522" style="zoom:50%;" /><h3 id="3-微服务解构">3.微服务解构</h3><img src="../blog/coderyeah/source/_posts/img/image-20230630163819254.png" alt="image-20230630163819254" style="zoom:50%;" /><h3 id="4-接口工具">4.接口工具</h3><ul><li><p>swagger</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自动配置</p><p><img src="../blog/coderyeah/source/_posts/img/image-20230703141927768.png" alt="image-20230703141927768"></p><p><img src="../blog/coderyeah/source/_posts/img/image-20230703141900728.png" alt="image-20230703141900728"></p></li></ul><p>配置代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.common.swagger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Docket <span class="title function_">buildDocket</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">              .apiInfo(buildApiInfo())</span><br><span class="line">              .select()</span><br><span class="line">              <span class="comment">// 要扫描的API(Controller)基础包</span></span><br><span class="line">              .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.heima&quot;</span>))</span><br><span class="line">              .paths(PathSelectors.any())</span><br><span class="line">              .build();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ApiInfo <span class="title function_">buildApiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;黑马程序员&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">              .title(<span class="string">&quot;黑马头条-平台管理API文档&quot;</span>)</span><br><span class="line">              .description(<span class="string">&quot;黑马头条后台api&quot;</span>)</span><br><span class="line">              .contact(contact)</span><br><span class="line">              .version(<span class="string">&quot;1.0.0&quot;</span>).build();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动user微服务，访问地址：<a href="http://localhost:51801/swagger-ui.html">http://localhost:51801/swagger-ui.html</a></p><ul><li><p>knife4j</p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.common.swagger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="meta">@Import(BeanValidatorPluginsConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Configuration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;defaultApi2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">defaultApi2</span><span class="params">()</span> &#123;</span><br><span class="line">        Docket docket=<span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">//分组名称</span></span><br><span class="line">                .groupName(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里指定Controller扫描包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.heima&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;黑马头条API文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;黑马头条API文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@EnableSwagger2</code></td><td>该注解是Springfox-swagger框架提供的使用Swagger注解，该注解必须加</td></tr><tr><td><code>@EnableKnife4j</code></td><td>该注解是<code>knife4j</code>提供的增强注解,Ui提供了例如动态参数、参数过滤、接口排序等增强功能,如果你想使用这些增强功能就必须加该注解，否则可以不用加</td></tr></tbody></table><ul><li>添加配置</li></ul><p>在Spring.factories中新增配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.heima.common.swagger.Swagger2Configuration, \</span><br><span class="line">  com.heima.common.swagger.SwaggerConfiguration</span><br></pre></td></tr></table></figure><ul><li>访问</li></ul><p>在浏览器输入地址：<code>http://host:port/doc.html</code></p><h3 id="5-网关">5.网关</h3><ul><li><p>appGateway依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">51601</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">leadnews-app-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.130</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.130</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>在nacos的配置中心创建dataid为leadnews-app-gateway的yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">DELETE</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">OPTION</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 平台管理</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://leadnews-user</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>环境搭建完成以后，启动项目网关和用户两个服务，使用postman进行测试</p><p>请求地址：<a href="http://localhost:51601/user/api/v1/login/login_auth">http://localhost:51601/user/api/v1/login/login_auth</a></p><h3 id="6-JWT全局验证">6.JWT全局验证</h3><p>全局过滤器实现jwt校验</p><p>思路分析：</p><ol><li>用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录</li><li>用户登录成功，后台管理微服务签发JWT TOKEN信息返回给用户</li><li>用户再次进入网关开始访问，网关过滤器接收用户携带的TOKEN</li><li>网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误</li></ol><p>具体实现：</p><p>第一：</p><p>​在认证过滤器中需要用到jwt的解析，所以需要把工具类拷贝一份到网关微服务</p><p>第二：</p><p>在网关微服务中新建全局过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.app.gateway.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.app.gateway.util.AppJwtUtil;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">Ordered</span>, GlobalFilter &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取request和response对象</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.判断是否是登录</span></span><br><span class="line">        <span class="keyword">if</span>(request.getURI().getPath().contains(<span class="string">&quot;/login&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeaders().getFirst(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断token是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(token))&#123;</span><br><span class="line">            response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.判断token是否有效</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claimsBody</span> <span class="operator">=</span> AppJwtUtil.getClaimsBody(token);</span><br><span class="line">            <span class="comment">//是否是过期</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> AppJwtUtil.verifyToken(claimsBody);</span><br><span class="line">            <span class="keyword">if</span>(result == <span class="number">1</span> || result  == <span class="number">2</span>)&#123;</span><br><span class="line">                response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">                <span class="keyword">return</span> response.setComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优先级设置  值越小  优先级越高</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p>启动user服务，继续访问其他微服务，会提示需要认证才能访问，这个时候需要在heads中设置设置token才能正常访问。</p><h3 id="7-垂直分表">7.垂直分表</h3><p><img src="../blog/coderyeah/source/_posts/img/image-20230704153559264.png" alt="image-20230704153559264"></p><h3 id="8-Freemarker模板技术">8.Freemarker模板技术</h3><p>FreeMarker 是一款 模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p><p>常用的java模板引擎还有哪些？</p><p>Jsp、Freemarker、Thymeleaf 、Velocity 等。</p><ul><li>Jsp 为 Servlet 专用，不能单独进行使用。</li><li>Thymeleaf 为新技术，功能较为强大，但是执行的效率比较低。</li><li>Velocity从2010年更新完 2.0 版本后，便没有在更新。Spring Boot 官方在 1.4 版本后对此也不在支持，虽然 Velocity 在 2017 年版本得到迭代，但为时已晚。</li></ul><p>freemarker作为springmvc一种视图格式，默认情况下SpringMVC支持freemarker视图格式。</p><h4 id="创建测试工程">创建测试工程</h4><p>创建一个freemarker-demo 的测试工程专门用于freemarker的功能测试与模板的测试。</p><p>pom.xml如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>heima-leadnews-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- apache 对 java io 的封装工具库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件">配置文件</h4><p>配置application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8881</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">freemarker-demo</span> <span class="comment">#指定服务名</span></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span>  <span class="comment">#关闭模板缓存，方便测试</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">template_update_delay:</span> <span class="number">0</span> <span class="comment">#检查模板更新延迟时间，设置为0表示立即检查，如果时间大于0会有缓存不方便进行模板测试</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.ftl</span>               <span class="comment">#指定Freemarker模板文件的后缀名</span></span><br></pre></td></tr></table></figure><h4 id="源码">源码</h4><p><img src="../blog/coderyeah/source/_posts/img/image-20230705095738189.png" alt="image-20230705095738189"></p><h4 id="创建模型类">创建模型类</h4><p>在freemarker的测试工程下创建模型类型用于测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.freemarker.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">//生日</span></span><br><span class="line">    <span class="keyword">private</span> Float money;<span class="comment">//钱包</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建模板">创建模板</h4><p>在resources下创建templates，此目录为freemarker的默认模板存放目录。</p><p>在templates下创建模板文件 01-basic.ftl ，模板中的插值表达式最终会被freemarker替换成具体的数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>普通文本 String 展示：<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Hello $&#123;name&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>对象Student中的数据展示：<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">姓名：$&#123;stu.name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：$&#123;stu.age&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建controller">创建controller</h4><p>创建Controller类，向Map中添加name，最后返回模板文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.freemarker.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.freemarker.entity.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/7/5 10:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreemarkerDemoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/basic&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">helloFreemarker</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;清清&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setAge(<span class="number">22</span>);</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.set(<span class="number">2000</span>, <span class="number">11</span>, <span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> sdf.format(calendar.getTime());</span><br><span class="line">        System.out.println(<span class="string">&quot;birthday:===============&quot;</span> + birthday);</span><br><span class="line"></span><br><span class="line">        student.setBirthday(calendar.getTime());</span><br><span class="line"></span><br><span class="line">        student.setMoney(<span class="number">99999999.0f</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;小青&quot;</span>);</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;stu&quot;</span>, student);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;01-basic&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>01-basic.ftl，使用插值表达式填充数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>普通文本 String 展示：<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Hello $&#123;name&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>对象Student中的数据展示：<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">姓名：$&#123;stu.name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：$&#123;stu.age&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../blog/coderyeah/source/_posts/img/image-20230705102031677.png" alt="image-20230705102031677"></p><h4 id="list遍历和if">list遍历和if</h4><p>模板文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;#-- list 数据的展示 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>展示list中的stu数据:<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &lt;#if stus??&gt;</span><br><span class="line">        &lt;#list stus as stu&gt;</span><br><span class="line">        &lt;#--   =和==一样的     --&gt;</span><br><span class="line">            &lt;#if stu.name=&#x27;小虹&#x27;&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu_index + 1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.money&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &lt;#else&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu_index + 1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.money&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &lt;/#if&gt;</span><br><span class="line">        &lt;/#list&gt;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;#-- Map 数据的展示 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>map数据的展示：<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span>方式一：通过map[&#x27;keyname&#x27;].property<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">输出stu1的学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">姓名：$&#123;stuMap[&#x27;stu1&#x27;].name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：$&#123;stuMap[&#x27;stu1&#x27;].age&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span>方式二：通过map.keyname.property<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">输出stu2的学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">姓名：$&#123;stuMap.stu1.name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：$&#123;stuMap.stu1.age&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span>遍历map中两个学生信息：<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;#list stuMap?keys as key&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;key_index + 1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stuMap[key].name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stuMap[key].age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stuMap[key].money&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &lt;/#list&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">    ArrayList&lt;Student&gt; stus = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    stu1.setName(<span class="string">&quot;小虹&quot;</span>);</span><br><span class="line">    stu1.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    stu1.setMoney(<span class="number">2232231.89f</span>);</span><br><span class="line">    stu1.setAge(<span class="number">18</span>);</span><br><span class="line">    stus.add(stu1);</span><br><span class="line"></span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    stu2.setName(<span class="string">&quot;jojo&quot;</span>);</span><br><span class="line">    stu2.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    stu2.setMoney(<span class="number">9999999.89f</span>);</span><br><span class="line">    stu2.setAge(<span class="number">22</span>);</span><br><span class="line">    stus.add(stu2);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;stus&quot;</span>, stus);</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, Student&gt; stuMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    stuMap.put(<span class="string">&quot;stu1&quot;</span>, stu1);</span><br><span class="line">    stuMap.put(<span class="string">&quot;stu2&quot;</span>, stu2);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;stuMap&quot;</span>, stuMap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;02-list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运算符">运算符</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>算数运算符<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    100+5 运算：  $&#123;100 + 5 &#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    100 - 5 * 5运算：$&#123;100 - 5 * 5&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    5 / 2运算：$&#123;5 / 2&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    12 % 10运算：$&#123;12 % 10&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>=</code><strong>或者</strong><code>==</code></strong>:判断两个值是否相等.</li><li><strong><code>!=</code></strong>:判断两个值是否不等.</li><li><strong><code>&gt;</code><strong>或者</strong><code>gt</code></strong>:判断左边值是否大于右边值</li><li><strong><code>&gt;=</code><strong>或者</strong><code>gte</code></strong>:判断左边值是否大于等于右边值</li><li><strong><code>&lt;</code><strong>或者</strong><code>lt</code></strong>:判断左边值是否小于右边值</li><li><strong><code>&lt;=</code><strong>或者</strong><code>lte</code></strong>:判断左边值是否小于等于右边值</li></ul><h4 id="空值处理">空值处理</h4><p><strong>1、判断某变量是否存在使用 “??”</strong></p><p>用法为:variable??,如果该变量存在,返回true,否则返回false</p><p>例：为防止stus为空报错可以加上判断如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;#if stus??&gt;</span><br><span class="line">&lt;#list stus as stu&gt;</span><br><span class="line">......</span><br><span class="line">&lt;/#list&gt;</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure><p><strong>2、缺失变量默认值使用 “!”</strong></p><ul><li><p>使用!要以指定一个默认值，当变量为空时显示默认值</p><p>例：  ${name!‘’}表示如果name为空显示空字符串。</p></li><li><p>如果是嵌套对象则建议使用（）括起来</p><p>例： ${(<a href="http://stu.bestFriend.name">stu.bestFriend.name</a>)!‘’}表示，如果stu或bestFriend或name为空默认显示空字符串。</p></li></ul><h4 id="内建函数">内建函数</h4><p>内建函数语法格式： <strong><code>变量+?+函数名称</code></strong></p><p><strong>1、和到某个集合的大小</strong></p><p><strong><code>$&#123;集合名?size&#125;</code></strong></p><p><strong>2、日期格式化</strong></p><p>显示年月日: <strong><code>$&#123;today?date&#125;</code></strong><br>显示时分秒：<strong><code>$&#123;today?time&#125;</code></strong><br>显示日期+时间：<strong><code>$&#123;today?datetime&#125;</code></strong><br>自定义格式化：  <strong><code>$&#123;today?string(&quot;yyyy年MM月&quot;)&#125;</code></strong></p><p><strong>3、内建函数<code>c</code></strong></p><p>model.addAttribute(“point”, 102920122);</p><p>point是数字型，使用${point}会显示这个数字的值，每三位使用逗号分隔。</p><p>如果不想显示为每三位分隔的数字，可以使用c函数将数字型转成字符串输出</p><p><strong><code>$&#123;point?c&#125;</code></strong></p><p><strong>4、将json字符串转成对象</strong></p><p>一个例子：</p><p>其中用到了 assign标签，assign的作用是定义一个变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign text=&quot;&#123;&#x27;bank&#x27;:&#x27;工商银行&#x27;,&#x27;account&#x27;:&#x27;10101920201920212&#x27;&#125;&quot; /&gt;</span><br><span class="line">&lt;#assign data=text?eval /&gt;</span><br><span class="line">开户行：$&#123;data.bank&#125;  账号：$&#123;data.account&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于什么是RocketMQ以及它的简单使用流程</title>
      <link href="/posts/8bc79cc1.html"/>
      <url>/posts/8bc79cc1.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-RocketMQ是什么">一. RocketMQ是什么</h3><p>RocketMQ是一个统一消息引擎、轻量级数据处理平台。</p><p>RocketMQ是⼀款阿⾥巴巴开源的消息中间件，双十一承载了万亿级消息的流转，2016年11⽉，阿⾥巴巴向 Apache 软件基⾦会捐赠 RocketMQ，成为 Apache 孵化项⽬，2017 年 9 ⽉ ，Apache 宣布 RocketMQ孵化成为 Apache 顶级项⽬（TLP ）成为国内⾸个互联⽹中间件在 Apache 上的顶级项⽬。</p><h3 id="二-RocketMQ特征">二. RocketMQ特征</h3><ul><li><p>支持集群模型、负载均衡、水平扩展能力</p></li><li><p>亿级别消息堆积能力</p></li><li><p>采用零拷贝的原理，顺序写盘，随机读</p></li><li><p>底层通信框架采用Netty NIO</p></li><li><p>NameServer代替Zookeeper，实现服务寻址和服务协调</p></li><li><p>消息失败重试机制、消息可查询</p></li><li><p>强调集群无单点，可扩展，任意一点高可用，水平可扩展</p></li><li><p>经过多次双十一的考验</p></li></ul><h3 id="三-RocketMQ安装">三. RocketMQ安装</h3><h4 id="1-下载RocketMQ">1.下载RocketMQ</h4><p><a href="https://rocketmq.apache.org/download">https://rocketmq.apache.org/download</a></p><h4 id="2-下载后解压">2. 下载后解压</h4><ul><li><p>Bin : 可执行文件目录</p></li><li><p>Conif：配置文件目录</p></li><li><p>Lib : 依赖库，一堆Jar包</p></li></ul><h4 id="3-配置ROCKETMQ-HOME">3. 配置ROCKETMQ_HOME</h4><p>例如：D:\installation\rocketmq-all-4.8.0-bin-release</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221009204453.png" alt="welt3"></p><h3 id="四-启动MQ">四. 启动MQ</h3><h4 id="1-启动NameServer">1. 启动NameServer</h4><p>Cmd命令框执行进入至<code>MQ文件夹\bin</code>下，然后执行 <code>start mqnamesrv.cmd</code>，启动NameServer。</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221009204642.png" alt="image-20221009204641999"></p><h4 id="2-启动Broker">2.启动Broker</h4><p>进入至<code>MQ文件夹\bin</code>下，<strong>修改</strong>Bean目录下的 <code>runbroker.cmd</code> 中JVM占用内存大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set &quot;JAVA_OPT=%JAVA_OPT% -server -Xms1g -Xmx1g -Xmn512m&quot;</span><br></pre></td></tr></table></figure><p>CMD执行<code>start mqbroker.cmd -n 127.0.0.1:9876 autoCreateTopicEnable=true</code> ，启动Broker。</p><h4 id="2-RocketMQ存储结构">2. RocketMQ存储结构</h4><p>RocketMQ安装好之后会在<code>用户目录下产生一个store目录</code>用来存储相关数据：C:\Users\coderyeah\store</p><h3 id="五-RocketMQ插件">五. RocketMQ插件</h3><p>RocketMQ可视化管理插件下载地址(该项目是一个springboot工程)：<a href="https://github.com/apache/rocketmq-externals">https://github.com/apache/rocketmq-externals</a></p><h4 id="1-修改配置">1. 修改配置</h4><p>解压后，修改配置：src/main/resource/application.properties ,这里需要指向Name Server 的地址和端口 如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rocketmq.config.namesrvAddr</span>=<span class="string">127.0.0.1:9876</span></span><br></pre></td></tr></table></figure><h4 id="2-打包插件">2. 打包插件</h4><p>回到安装目录(<strong>pom.xml</strong>所在目录),执行: <code>mvn clean package -Dmaven.test.skip=true</code> ，然后会在target目录生成打包后的jar文件</p><h4 id="3-启动插件">3. 启动插件</h4><p>进入 target 目录，CMD执行 <code>java -jar rocketmq-console-ng-1.0.0.jar</code>  ， 访问 <a href="http://localhost:8080">http://localhost:8080</a></p><h3 id="六-原理">六. 原理</h3><p>RocketMQ开发官方文档：</p><p><a href="https://github.com/apache/rocketmq/blob/master/docs/cn/RocketMQ_Example.md">https://github.com/apache/rocketmq/blob/master/docs/cn/RocketMQ_Example.md</a></p><p>RocketMQ的集群架构如下：</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221009210056.png" alt="image-20221009210056877"></p><h4 id="1-Producer">1. Producer</h4><p>消息发布的角色，支持分布式集群方式部署。Producer通过MQ的负载均衡模块选择相应的Broker集群队列进行消息投递，投递的过程支持快速失败并且低延迟。</p><h4 id="2-Consumer">2. Consumer</h4><p>消息消费的角色，支持分布式集群方式部署。支持以push推，pull拉两种模式对消息进行消费。同时也支持集群方式和广播方式的消费，它提供实时消息订阅机制，可以满足大多数用户的需求。</p><h4 id="3-Broker">3. Broker</h4><p>Broker主要负责消息的存储、投递和查询以及服务高可用保证。</p><h4 id="4-NameServer">4. NameServer</h4><p>NameServer是一个Broker与Topic路由的注册中心支持Broker的动态注册与发现，主要包括两个功能</p><ul><li><p>Broker管理</p><p>NameServer接受Broker集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查Broker是否还存活。</p></li><li><p>路由信息管理</p><p>每个NameServer将保存关于Broker集群的整个路由信息和用于客户端查询的队列信息。然后Producer和Conumser通过NameServer就可以知道整个Broker集群的路由信息，从而进行消息的投递和消费</p></li></ul><h3 id="七-MQ实践">七. MQ实践</h3><p>官方案例：<a href="https://github.com/apache/rocketmq/blob/master/docs/cn/RocketMQ_Example.md">https://github.com/apache/rocketmq/blob/master/docs/cn/RocketMQ_Example.md</a></p><h4 id="1-导入依赖">1. 导入依赖</h4><p>注意和安装的MQ版本一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-生产者">2. 生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncProducer</span> &#123;<span class="comment">// 同步消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 实例化消息生产者Producer</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;hello-mq&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置NameServer的地址</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">        <span class="comment">// 启动Producer实例</span></span><br><span class="line">        producer.start();</span><br><span class="line">        <span class="comment">// 创建消息，并指定Topic，Tag和消息体</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;hello-rocketMq&quot;</span>, <span class="string">&quot;hello-mq&quot;</span>, <span class="string">&quot;哈哈哈哈啊哈&quot;</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">        <span class="comment">// 设置延时等级3,这个消息将在10s之后发送(现在只支持固定的几个时间,详看delayTimeLevel)</span></span><br><span class="line"><span class="comment">//        message.setDelayTimeLevel(3);</span></span><br><span class="line">        <span class="comment">// 发送消息到一个Broker</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">SendResult</span> <span class="variable">result</span> <span class="operator">=</span> producer.send(message);</span><br><span class="line">        <span class="comment">// 发送单向消息，没有任何返回结果</span></span><br><span class="line"><span class="comment">//        producer.sendOneway(message);</span></span><br><span class="line">        <span class="comment">// 通过sendResult返回消息是否成功送达</span></span><br><span class="line"><span class="comment">// [sendStatus=SEND_OK, msgId=7F000001983C18B4AAC22CAD1C830000, offsetMsgId=AC100BEA00002A9F0000000000000173, messageQueue=MessageQueue [topic=topic-async, brokerName=LAPTOP-CRB8PEDK, queueId=1], queueOffset=0]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">        <span class="comment">// 如果不再发送消息，关闭Producer实例。</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-消费者">3. 消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;<span class="comment">// 消费者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 实例化消费者</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;topic-consumer&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置NameServer的地址</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">        <span class="comment">// 订阅一个或者多个Topic，以及Tag来过滤需要消费的消息</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;topic-async&quot;</span>, <span class="string">&quot;tag-async&quot;</span>);</span><br><span class="line">        <span class="comment">// 注册回调实现类来处理从broker拉取回来的消息</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext context)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (MessageExt ext : list) &#123;</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(ext.getBody(), StandardCharsets.UTF_8));</span><br><span class="line">                        System.out.println(context);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 标记该消息已经被成功消费</span></span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动消费者实例</span></span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者启动成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-RabbitMQ工作流程">4. RabbitMQ工作流程</h4><ol><li><p>启动NameServer，NameServer起来后监听端口，等待Broker、Producer、Consumer连上来，相当于一个路由控制中心。</p></li><li><p>Broker启动，跟所有的NameServer保持长连接，定时发送心跳包。心跳包中包含当前Broker信息(IP+端口等)以及存储所有Topic信息。注册成功后，NameServer集群中就有Topic跟Broker的映射关系。</p></li><li><p>收发消息前，先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，也可以在发送消息时自动创建Topic。</p></li><li><p>Producer发送消息，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，轮询从队列列表中选择一个队列，然后与队列所在的Broker建立长连接从而向Broker发消息。</p></li><li><p>Consumer跟Producer类似，跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建立连接通道，开始消费消息</p></li></ol><h4 id="6-Producer-生产者">6. Producer 生产者</h4><p>RocketMQ提供多种发送方式，<code>同步发送、异步发送、顺序发送、单向发送</code>。同步和异步方式均需要Broker返回确认信息，单向发送不需要。</p><p>RocketMQ中的消息生产者都是以生产者组（Producer Group）的形式出现的。生产者组是同一类生产者的集合，这类Producer发送相同Topic类型的消息。一个生产者组可以同时发送多个主题的消息。</p><p>Producer会使用一定的算法选择把消息发送到哪个master的某个queue中。</p><h4 id="7-Consumer-消费者">7. Consumer 消费者</h4><p>Consumer 支持两种消费形式：拉取式消费、推动式消费。（主动，被动），RocketMQ中的消息消费者都是以消费者组（Consumer Group）的形式出现的。消费者组是同一类消费者的集合，这类Consumer消费的是同一个Topic类型的消息，不同的 Consumer Group可以消费同一个Topic。</p><h4 id="8-Topic-消息主题">8. Topic 消息主题</h4><p>Topic表示一类消息的集合，每个topic主题包含若干条message消息，每条message消息只能属于一个topic主题，Topic是RocketMQ进行消息订阅的基本单位。</p><h4 id="9-Message">9. Message</h4><p>消息是指，消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。</p><h4 id="10-Tag-标签">10. Tag 标签</h4><p><code>为消息设置的标志，用于同一主题下区分不同类型的消息</code>。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。Topic是消息的一级分类，Tag是消息的二级分类(如订单order下可有服务订单、收购订单、消费订单等)。</p><h4 id="11-MessageQueue队列">11. MessageQueue队列</h4><p>一个Topic中可以包含多个Queue，一 个Topic的Queue也被称为一个Topic中消息的分区（Partition）。 在一个Consumer Group内，一个Queue最多只能分配给一个Consumer，一个Cosumer可以分配得到多个Queue。这样的分配规则，每个Queue只有一个消费者，可以避免消费过程中的多线程处理和资源锁定，有效提高各Consumer消费的并行度和处理效率。</p><h3 id="八-异步发送消息">八. 异步发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendCallback;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/9 16:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncProducer</span> &#123;<span class="comment">// 异步生产者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;AsyncProducer&quot;</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;localhost:9876&quot;</span>);</span><br><span class="line">        <span class="comment">// 启动producer实例</span></span><br><span class="line">        producer.start();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;topic-async&quot;</span>, <span class="string">&quot;tag-async&quot;</span>, <span class="string">&quot;生产者发送的异步消息&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// SendCallback接收异步返回结果的回调</span></span><br><span class="line">        producer.send(message, <span class="keyword">new</span> <span class="title class_">SendCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult sendResult)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;发送异步消息成功：&quot;</span> + sendResult);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;发送异步消息失败：&quot;</span> + throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//        producer.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SendCallback 是消息发送结果回调。如果：sendResult.getSendStatus() == SendStatus.SEND_OK 表示成功</p><h4 id="①-单项发送消息">① 单项发送消息</h4><p>这种方式指的是发送者发送消息后无需等待Broker的结果返回，Broker也不会返回结果，该方式性能最高，但是消息可靠性低。API : producer.sendOneway(message) 示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... 省略...</span></span><br><span class="line"><span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;asyn-topic&quot;</span>, <span class="string">&quot;sms&quot;</span>, <span class="string">&quot;我是消息&quot;</span>.getBytes(CharsetUtil.UTF_8));</span><br><span class="line">producer.sendOneway(message);</span><br></pre></td></tr></table></figure><p>sendOneway 单向发送是没有返回结果值的。</p><h3 id="九-延迟消息概述">九. 延迟消息概述</h3><p>我们通常使用定时任务比如Quartz来解决超时业务，比如：订单支付超时关单，VIP会员超时提醒。但是使用定时任务来处理这些业务场景在数据量大的时候并不是一个很好的选择，会造成大量的空扫描浪费性能。我们可以考虑使用延迟消息来解决。</p><p>延迟消息即：把消息写到Broker后需要延迟一定时间才能被消费 ， 在RocketMQ中消息的延迟时间不能任意指定，而是由特定的等级(1 到 18)来指定，分别有：</p><p>messageDelayLevel=1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</p><p>可以通过修改配置来增加级别，比如在mq安装目录的 broker.conf 文件中增加</p><p>messageDelayLevel=1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h 2d  这个时候总共就有19个level。</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221009213320.png" alt="image-20221009213320025"></p><h4 id="延迟流程"><strong>延迟流程</strong></h4><p>RocketMQ Broker端在存储生产者写入的消息时，首先都会将其写入到CommitLog中。之后根据消息中的Topic信息和队列信息，将其转发到目标Topic的指定队列(ConsumeQueue)中。不过，在分发之前，系统会先判断消息中是否带有<code>延时</code>等级。若没有，则直接正常分发；如果有就走下面的流程：</p><ol><li><p>修改消息Topic的名字为SCHEDULE_TOPIC_XXXX</p></li><li><p>根据延时等级，在consumequeue目录中SCHEDULE_TOPIC_XXXX主题下创建出相应的queueId</p></li></ol><p>目录与consumequeue文件</p><ol start="3"><li>修改消息索引单元，计算出的投递时间当做消息Tag的哈希值存储到CosumeQueue中，投递时间 = 消息存储时间 + 延时等级时间 。下面是CosumeQueue单个存储单元组成结构如下</li></ol><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221009213556.png" alt="1634813716044"></p><ul><li><p>Commit Log Offset：记录在CommitLog中的位置。</p></li><li><p>Size：记录消息的大小</p></li><li><p>Message Tag HashCode：记录消息Tag的哈希值，用于消息过滤。特别的，对于延迟消息，这个字段记录的是消息的投递时间戳。</p></li></ul><ol start="4"><li><p>将消息索引写入到SCHEDULE_TOPIC_XXXX主题下相应的consumequeue中</p></li><li><p>Broker内部有⼀个延迟消息服务类ScheuleMessageService，根据延迟级别数，创建对应数量的定时器Timer，定时消费SCHEDULE_TOPIC_XXXX中的消息，并投递到目标Topic中。</p></li><li><p>在将消息到期后，队列的Level等级改为0,作为一条普通消息，投递到目标Topic。</p></li></ol><p><strong>只需要一处改动，发送者通过  message.setDelayTimeLevel(3); 设置延迟级别即可</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;hello-rocketMq&quot;</span>, <span class="string">&quot;hello-mq&quot;</span>, <span class="string">&quot;哈哈&quot;</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">        <span class="comment">// 设置延时等级3,这个消息将在10s之后发送(现在只支持固定的几个时间,详看delayTimeLevel)</span></span><br><span class="line">        message.setDelayTimeLevel(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 发送消息到一个Broker</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">SendResult</span> <span class="variable">result</span> <span class="operator">=</span> producer.send(message);</span><br></pre></td></tr></table></figure><h3 id="十-事务消息">十. 事务消息</h3><p>如果业务只涉及到一个数据库的写操作，我们只需要保证这一个事物的提交和回滚，这种事务管理叫传统事物或本地事务，如果业务涉及到多个数据库(多个服务)的写操作，我们需要保证多个数据库同时提交或回滚，这种夸多个数据库的事务操作叫分布式事务。</p><h4 id="事务消息实战">事务消息实战</h4><ol><li><p>编写本地事务检查监听TransactionListener ，一是执行本地事务逻辑，二是返回本地事务执行状态</p></li><li><p>发消息时生产者需要设置producer.setTransactionListener 事务监听</p></li></ol><h4 id="事务监听器">事务监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTransactionCheckListener</span> <span class="keyword">implements</span> <span class="title class_">TransactionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LocalTransactionState <span class="title function_">executeLocalTransaction</span><span class="params">(Message message, Object o)</span> &#123;</span><br><span class="line">        <span class="comment">//执行业务，保存本地事务</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存成功</span></span><br><span class="line">        <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE ; <span class="comment">//ROLLBACK_MESSAGE;    //未知</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LocalTransactionState <span class="title function_">checkLocalTransaction</span><span class="params">(MessageExt messageExt)</span> &#123;</span><br><span class="line">        <span class="comment">//这里查询本地事务状态</span></span><br><span class="line">        <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="消息生产者">消息生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransationSender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException &#123;</span><br><span class="line"><span class="comment">//使用事务消息生产者</span></span><br><span class="line">        <span class="type">TransactionMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionMQProducer</span>(<span class="string">&quot;tran-product-group&quot;</span>);</span><br><span class="line"></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程池底层是使用新开线程去发布消息到MQ</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">excutorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        producer.setExecutorService(excutorService);</span><br><span class="line"><span class="comment">//指定事务监听器</span></span><br><span class="line">        producer.setTransactionListener(<span class="keyword">new</span> <span class="title class_">MyTransactionCheckListener</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置事务消息监听</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">            <span class="type">String</span> <span class="variable">tags</span> <span class="operator">=</span> <span class="string">&quot;Tag&quot;</span>;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;topic-tran&quot;</span>, <span class="string">&quot;tag&quot;</span>, orderId, (<span class="string">&quot;下单:&quot;</span>+i).getBytes(CharsetUtil.UTF_8));</span><br><span class="line"><span class="comment">//发送事务消息</span></span><br><span class="line">            <span class="type">TransactionSendResult</span> <span class="variable">transactionSendResult</span> <span class="operator">=</span> producer.sendMessageInTransaction(message, <span class="literal">null</span>);</span><br><span class="line">            System.out.println(transactionSendResult);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="消息消费者">消息消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransationConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException &#123;</span><br><span class="line">        <span class="comment">//创建消费者</span></span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">defaultMQPushConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;trans-consumer-group&quot;</span>);</span><br><span class="line">        <span class="comment">//设置name server 地址</span></span><br><span class="line">        defaultMQPushConsumer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//订阅</span></span><br><span class="line">        defaultMQPushConsumer.subscribe(<span class="string">&quot;topic-tran&quot;</span>, <span class="string">&quot;tag&quot;</span>);</span><br><span class="line"></span><br><span class="line">        defaultMQPushConsumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> &#123;</span><br><span class="line"></span><br><span class="line">                list.forEach(message-&gt;&#123;</span><br><span class="line">                    System.out.println(message+<span class="string">&quot; ; &quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(), CharsetUtil.UTF_8));</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        defaultMQPushConsumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于springcloud-netflix使用RestTemplate实现服务之间的请求</title>
      <link href="/posts/596a9837.html"/>
      <url>/posts/596a9837.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-Eureka介绍">一. Eureka介绍</h3><h4 id="1-什么是Eureka">1.什么是Eureka</h4><p>微服务的其中一个特点是<strong>服务之间需要进行网络通信</strong>，服务器之间发起调用时调用服务得知道被调用服务的通信地址，试问当微服务数量成百上千之多，该如何管理众多的服务通信地址，对于随时新增加的微服务和下线的微服务，又应该如何去动态添加和删除这些微服务的通信地址呢？所以手工管理服务的通信地址是一件遥不可及的事情，我们需要借助一个强大的工具帮我们实现这一功能 - <strong>Eureka</strong>，同类型的组件还有 zookeeper,consul等。</p><h4 id="2-服务注册">2.服务注册</h4><p>Eureka是一个服务注册与发现组件,简单说就是用<strong>来统一管理微服务的通信地址</strong>的组件，它包含了<strong>EurekaServer</strong> 服务端(也叫注册中心)和<strong>EurekaClient</strong>客户端两部分组成，EurekaServer是独立的服务，而EurekaClient需要集成到每个微服务中。</p><p>微服务(EurekaClient)在启动的时候会向EurekaServer提交自己的服务信息(通信地址如:<strong>服务名,ip,端口</strong>等)，在 EurekaServer会形成一个微服务的通信地址列表存储起来。 — 这叫<strong>服务注册</strong></p><h4 id="3-服务发现">3.服务发现</h4><p>微服务(EurekaClient)会定期<code>(RegistryFetchIntervalSeconds:默认30s)</code>的从EurekaServer拉取一份微服务通信地址列表缓存到本地。当一个微服务在向另一个微服务发起调用的时候会根据目标服务的服务名找到其通信地址，然后基于HTTP协议向目标服务发起请求。—这叫服务发现。</p><h4 id="4-服务续约">4.服务续约</h4><p>另外，微服务(EurekaClient)采用定时(LeaseRenewalIntervalInSeconds:默认30s)发送“心跳”请求向EurekaServer发请求进行服务续约，其实就是定时向 EurekaServer发请求报告自己的健康状况，告诉EurekaServer自己还活着，不要把自己从服务地址清单中剔除掉，那么当微服务(EurekaClient)宕机未向EurekaServer续约，或者续约请求超时，注册中心机会从服务地址清单中剔除该续约失败的服务。</p><h4 id="5-服务下线">5.服务下线</h4><p>微服务(EurekaClient)关闭服务前向注册中心发送下线请求，注册中心(EurekaServer)接受到下线请求负责将该服务实例从注册列表剔除</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221012185842.png" alt="image-20221012185842388"></p><h3 id="二-Eureka-Server实例">二.Eureka Server实例</h3><h4 id="1-在父项目导入依赖">1.在父项目导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.管理 SpringBoot的jar包--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--SpringBoot--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--2.管理 SpringCloud的jar包--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--3.这里是所有子项目都可以用的jar包--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--    使用lombok插件    --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-搭建Eureka-Server">2.搭建Eureka Server</h4><p>创建模块后导入以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring-cloud-starter-netflix-eureka-server --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span>  <span class="comment">#端口</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#主机</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#客户端配置</span></span><br><span class="line">    <span class="attr">registerWithEureka:</span> <span class="literal">false</span>  <span class="comment">#EurekaServer自己不要注册到EurekaServer自己 ，只有EurekaClient才注册</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">false</span>  <span class="comment">#EurekaServer不要拉取服务的通信地址列表 ，只有EurekaClient才拉取地址列表</span></span><br><span class="line">    <span class="attr">serviceUrl:</span>  <span class="comment">#注册中心的注册地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka/</span>  <span class="comment">#http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#关闭自我保护警告</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br></pre></td></tr></table></figure><p>提示：这里配置了EurekaServer的端口为 10086，主机名 localhost  ，需要特别说明的是我们再引入EurekaServer的基础依赖spring-cloud-starter-netflix-eureka-server时，这个依赖即引入了EurekaServer所需要的包，也引入了<strong>EurekaClient</strong>的包，换句话说，现在的springcloud-eureka-server-10086工程既是一个 EurekaServer，也是一个EurekaClient。</p><p>我们这里暂时把EurekaClient的功能屏蔽掉 ，即关闭它的服务注册和发现功能，让他做好EurekaServer该做的事情即可。</p><ul><li>serviceUrl是服务注册地址，EurekaClient需要注册到EurekaServer就得跟上该地址。</li><li>registerWithEureka=false ：禁止自己向自己注册</li><li>fetchRegistry=false ： 禁止拉取服务注册列表</li></ul><p>启动类用于启动服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line"> * 注册中心启动类</span><br><span class="line"> * <span class="meta">@EnableEurekaServer</span> : 开启EurekaServer服务端</span><br><span class="line"> */</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApplication1010</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">    &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication1010.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>提示：在主配置类上通过 <code>@EnableEurekaServer</code> 注解开启了<code>EurekaServer</code>端的功能。</p><p>3.启动测试</p><p>启动springcloud-eureka-server工程，浏览器访问 <a href="http://localhost:10086">http://localhost:10086</a>,出现如下界面代码EurekaServer集成成功：</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221012191518.png" alt="image-20221012191518547"></p><h4 id="3-Eureka自我保护">3.Eureka自我保护</h4><p>默认情况下，当EurekaServer接收到服务续约的心跳失败比例在15分钟之内低于85%，EurekaServer会把这些服务保护起来，即不会把该服务从服务注册地址清单中剔除掉，但是在此种情况下有可能会出现服务下线，那么消费者就会拿到一个无效的服务，请求会失败，那我们需要对消费者服务做一些重试，或在熔断策略。</p><p>当EurekaServer开启自我保护时，监控主界面会出现红色警告信息，我们可以使用<code>eureka.server.enable-self-preservation=false</code>来关闭EurekaServer的保护机制，这样可以确保注册中心中不可用的实例被及时的剔除，但是不推荐。</p><h3 id="三-Eureka-Clien实例-User">三.Eureka Clien实例-User</h3><h4 id="1-创建实体模块-包含订单和用户">1.创建实体模块(包含订单和用户)</h4><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221012192015.png" alt="image-20221012192015868"></p><p>User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Order</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-创建用户模块">2.创建用户模块</h4><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  引入eureka客户端  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    引入实体    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lqs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-entity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-主配置类">3.主配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line"> * 用户的启动类</span><br><span class="line"> * <span class="meta">@EnableEurekaClient</span>： 标记该应用是 Eureka客户端</span><br><span class="line"> */</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServerApp</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">    &#123;</span><br><span class="line">        SpringApplication.run(UserServerApp.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示：主配置类通过打<code>@EnableEurekaClient</code>注解开启<code>EurekaClient</code>客户端功能，当然如果不打这个标签也能实现功能，因为导入<code>spring-cloud-starter-netflix-eureka-client</code> 依赖后，默认就开启了<code>EurekaClient</code></p><h4 id="4-application-yml配置">4.application.yml配置</h4><p>默认情况下EurekaClient使用hostname进行注册到EurekaServer，我们希望使用ip进行注册，可以通过配置<code>eureka.instance.prefer-ip-address=true</code>来指定，同时为了方便区分和管理服务实例，我们指定服务的实例ID，通过<code>eureka.instance.instance-id为user-serer:8081</code>来指定</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#使用ip地址进行注册</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">user-server:$&#123;server.port&#125;</span>    <span class="comment">#实例ID</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四-Eureka-Clien实例-Order">四.Eureka Clien实例-Order</h3><h4 id="1-与User服务一样导入依赖">1.与User服务一样导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    引入entity模块    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lqs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-entity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-主配置类">2. 主配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServerApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderServerApp.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">// 实现负载均衡</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span> &#123;<span class="comment">// 实现服务之间的通信</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置随机的负载均衡算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> RandomRule</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RandomRule <span class="title function_">randomRule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-application-yml配置">3.application.yml配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span> <span class="comment">#实例</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">order-server:$&#123;server.port&#125;</span> <span class="comment">#唯一的实例ID</span></span><br></pre></td></tr></table></figure><h3 id="五-RestTemplate介绍">五.RestTemplate介绍</h3><p>微服务的通信协议主流的有RPC,Http，SpringCloud是基于Http Restful 风格 ，在Java中发起一个Http请求的方式很多，比如 Apache的HttpClient ， OKHttp等等 。Spring为我们封装了一个基于Restful的使用非常简单的Http客户端工具 <strong>RestTemplate</strong> ，我们就用它来实订单服务和用户服务的通信。需要注意的是，RestTmplate本身不具备服务发现和负载均衡器的功能。</p><h3 id="六-实例">六.实例</h3><p>user模块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getByUserId</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;coderyeah&quot;</span>, <span class="string">&quot;二仙桥&quot;</span>, port + <span class="string">&quot;:这是返回user信息的描述&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>order模块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">getOrderById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">// 发送的http请求</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://user-server/user/&quot;</span> + id;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">1L</span>, <span class="number">88L</span>, <span class="string">&quot;芋泥啵啵奶茶&quot;</span>, <span class="number">2</span>, <span class="number">1L</span>, user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="七-什么是Ribbon">七.什么是Ribbon</h3><p>我们知道，为了防止应用出现单节点故障问题，同时为了提高应用的作业能力，我们需要对应用做集群 ，如果我们对user-server(用户服务)做了集群 ，那么这个时候回衍生出一些问题：现在有两个user-server(用户服务)就意味着有两个user-server(用户服务)的通信地址，我的order-server(订单服务)在向user-server(用户服务)发起调用的时候该访问哪个？如何访问？这个时候就需要有一个组件帮我们做请求的分发，即：负载均衡器，而Ribbon就是一个 - 客户端负载均衡器。</p><p>Ribbon是Netflix发布的云中间层服务开源项目，主要功能是提供<code>客户端负载均衡算法</code>。Ribbon客户端组件提供一系列完善的配置项，如，连接<code>超时，重试</code>等。简单的说，Ribbon是一个客户端负载均衡器，Ribbon可以<code>按照负载均衡算法(如简单轮询，随机连接等)向多个服务发起调用</code>(正好可以解决上面的问题)，我们也很容易使用Ribbon实现<code>自定义的负载均衡算法</code>。</p><h4 id="客户端导入依赖">客户端导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="开启负载均衡">开启负载均衡</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单的启动类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServerApp</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置一个RestTemplate ，Spring封装的一个机遇Restful风格的http客户端 工具</span></span><br><span class="line">    <span class="comment">//@LoadBalanced :让RestTemplate有负载均衡的功能</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略...</span></span><br></pre></td></tr></table></figure><h4 id="Ribbon内置算法">Ribbon内置算法</h4><p>Ribbon内置7种负载均衡算法，每种算法对应了一个算法类如下：</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221012195253.png" alt="image-20221012195253383"></p><h4 id="配置负载均衡算法">配置负载均衡算法</h4><p>Ribbon可以进行全局负载均衡算法配置，也可以针对于具体的服务做不同的算法配置。同时可以使用注解方式和yml配置方式来实现上面两种情况。</p><ol><li><p>注解全局配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单的启动类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServerApp</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置一个RestTemplate ，Spring封装的一个机遇Restful风格的http客户端 工具</span></span><br><span class="line">    <span class="comment">//@LoadBalanced :让RestTemplate有负载均衡的功能</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//负载均衡算法</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RandomRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略...</span></span><br></pre></td></tr></table></figure></li><li><p>yml方式配置负载均衡算法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">   <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure></li><li><p>配置某个服务的Ribbon算法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-server:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure></li><li><p>Ribbon调优配置</p><p>使用Ribbon进行服务通信时为了防止网络波动造成服务调用超时，我们可以针对Ribbon配置超时时间以及重试机制</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">3000</span><span class="comment">#读取超时时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">3000</span><span class="comment">#链接超时时间</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment">#重试机制：同一台实例最大重试次数</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment">#重试负载均衡其他的实例最大重试次数</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span>  <span class="comment">#是否所有操作都重试，因为针对post请求如果没做幂等处理可能会造成数据多次添加/修改</span></span><br></pre></td></tr></table></figure></li><li><p>饥饿加载</p><p>我们在启动服务使用Ribbon发起服务调用的时候往往会出现找不到目标服务的情况，这是因为Ribbon在进行客户端负载均衡的时候并不是启动时就创建好的，而是在实际请求的时候才会去创建，所以往往我们在发起第一次调用的时候会出现超时导致服务调用失败，我们可以通过设置Ribbon的饥饿加载来改善此情况，即在服务启动时就把Ribbon相关内容创建好。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启饥饿加载</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">user-server</span> <span class="comment">#针对于哪些服务需要饥饿加载</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于Lucene和ES全文搜索引擎的介绍和使用</title>
      <link href="/posts/536d89ea.html"/>
      <url>/posts/536d89ea.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是全文检索">一. 什么是全文检索</h3><p>狭义的理解主要针对文本数据的搜索。数据可分为“<strong>结构化</strong>”数据(关系数据库表形式管理的数据)，半结构化数据(XML文档、JSON文档)，和非结构化数据(WORD、PDF)，通常而言在结构化的数据中搜索性能是比较高的，全文搜索的目的就是把非结构化的数据变成有结构化的数据进行搜索，从而提高搜索效率。</p><p><strong><code>全文搜索引擎 : 就是把没有结构的数据，转换为有结构的数据，来加快对文本的快速搜索，通常而言，有结构的数据的查询是很快的，比如： 有序数组 ， 红黑树</code></strong></p><h3 id="二-Lucene概述">二. Lucene概述</h3><h4 id="1-什么是Lucene">1. 什么是Lucene</h4><p>Lucene是apache下的一个开源的全文检索引擎工具包(一堆jar包)。它为软件开发人员提供一个简单易用的工具包（类库），以方便的在小型目标系统中实现全文检索的功能。Lucene适用于中小型项目 ，ES适用于中大型项目（它底层是基于lucene实现的）</p><h4 id="2-Lucene索引原理">2. Lucene索引原理</h4><p>任何技术都有一些核心，Lucene也有核心，而它的核心分为：<code>索引创建，索引搜索</code>。</p><h4 id="3-索引的创建">3. 索引的创建</h4><p>将现实世界中所有的结构化和非结构化数据提取信息，创建索引的过程。那么索引里面究竟存的什么，以及如何创建索引呢？在这通过下面的例子来解答这个问题。首先构造三个不同的句子，有长有短：</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221010185109.png" alt="image-20221010185109347"></p><p>在①处分别为3个句子加上编号，然后进行<strong>分词</strong>，把被一个单词分解出来与编号对应放在②处；在搜索的过程总，对于搜索的过程中大写和小写指的都是同一个单词，在这就没有区分的必要，按规则统一变为小写放在③处；要加快搜索速度，就必须保证这些单词的排列时有一定规则，这里按照字母顺序排列后放在④处；最后再简化索引，合并相同的单词，就得到如下结果：<strong><code>倒排索引文档</code></strong></p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221010185352.png" alt="image-20221010185352535"></p><p>通常在数据库中我们都是根据文档找到内容，而这里是通过词，能够快速找到包含他的文档，这就是文档倒排链表。以上就是lucene索引结构中最核心的部分。我们注意到关键字是按字符顺序排列的（lucene没有使用B树结构），因此lucene可以用二元搜索算法快速定位关键词。</p><h4 id="4-索引的搜索">4. 索引的搜索</h4><p>就是得到用户的查询请求，搜索创建的索引，然后返回结果的过程。</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221010190015.png" alt="image-20221010190015258"></p><p>搜索java world两个关键词，符合java的有1,2两个文档，符合world的有1,3两个文档，在搜索引擎中直接这样排列两个词他们之间是OR的关系，出现其中一个都可以被找到，所以这里3个都会出来。全文检索中是有相关性排序的，那么结果在是怎么排列的呢？hello java world中包含两个关键字排在第一，另两个都包含一个关键字，得到结果，hello lucene world排在第二，java在最长的句子中占的权重最低排在结果集的第三。从这里可以看出相关度排序还是有一定规则的。</p><h3 id="三-ElasticSearch相关概念">三. ElasticSearch相关概念</h3><h4 id="1-为什么要使用ElasticSearch">1. 为什么要使用ElasticSearch</h4><p>虽然全文搜索领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。但是，Lucene只是一个库。想要使用它，你必须使用Java来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene的配置及使用非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p><h4 id="2-什么是ElasticSearch">2. 什么是ElasticSearch</h4><p>ES是一个分布式的全文搜索引擎，为了解决原生Lucene使用的不足，优化Lucene的调用方式，并实现了高可用的分布式集群的搜索方案，ES的索引库管理支持依然是基于Apache Lucene™的开源搜索引擎。</p><p>ES也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的 RESTful API来隐Lucene的复杂性，从而让全文搜索变得简单。</p><p>案例：添加索引</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /mall/goods/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;哑铃&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>获取</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /mall/goods/<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="四-ES下载和安装">四. ES下载和安装</h3><h4 id="1-ElasticSearch安装">1.ElasticSearch安装</h4><p>ES服务只依赖于JDK，推荐使用JDK1.8+</p><p>下载地址：<a href="https://www.elastic.co/downloads/elasticsearch">https://www.elastic.co/downloads/elasticsearch</a></p><p>安装后解压即可，双击安装目录 bin/elasticsearch.bat即可启动</p><p>使用浏览器访问：<a href="http://localhost:9200">http://localhost:9200</a></p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221010190909.png" alt="image-20221010190909766"></p><p>看到上图信息，恭喜你，你的ES集群已经启动并且正常运行！</p><h4 id="2-Kibana安装">2.Kibana安装</h4><p>es的图形化管理界面</p><p>下载地址：<a href="https://www.elastic.co/downloads/kibana">https://www.elastic.co/downloads/kibana</a></p><p>解压即可安装 ， 执行bin\kibana.bat 即可启动Kibana</p><p>浏览器访问 <a href="http://localhost:5601">http://localhost:5601</a> Kibana默认地址</p><p>Kibana组件详细说明：<a href="https://www.cnblogs.com/hunttown/p/6768864.html">https://www.cnblogs.com/hunttown/p/6768864.html</a></p><h3 id="五-es与mysql的比较">五. es与mysql的比较</h3><table><thead><tr><th>ElastciSearch全文搜索</th><th>Mysql关系型数据库</th></tr></thead><tbody><tr><td>索引库(index)</td><td>数据库(database)</td></tr><tr><td>文档类型(Type)</td><td>数据表(Table)</td></tr><tr><td>文档(Document)</td><td>一行数据(Row)</td></tr><tr><td>字段(field)</td><td>一个列(column)</td></tr><tr><td>文档ID</td><td>主键ID</td></tr><tr><td>查询(Query DSL)</td><td>查询(SQL)</td></tr><tr><td>GET http://…</td><td>SELECT * FROM …</td></tr><tr><td>PUT http://</td><td>UPDATE table set…</td></tr></tbody></table><h3 id="六-查询索引库">六. 查询索引库</h3><p>查询所有索引库</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/indices?v</span><br></pre></td></tr></table></figure><p>查看指定索引库</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/indices/aigou</span><br></pre></td></tr></table></figure><p>删除索引库</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE 名字</span><br></pre></td></tr></table></figure><p>修改索引库</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除再添加</span><br></pre></td></tr></table></figure><p>添加索引</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT crm/user/11</span><br><span class="line">&#123;</span><br><span class="line">&quot;id&quot;:11,</span><br><span class="line">&quot;username&quot;:&quot;zs&quot;,</span><br><span class="line">&quot;age&quot;:18,</span><br><span class="line">&quot;name&quot;:&quot;zs&quot;,</span><br><span class="line">&quot;sex&quot;:1,</span><br><span class="line">&quot;join_date&quot;: 1584092062348</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：添加id为11的用户 ， 索引库为 crm，类型为 User</p><h4 id="获取文档">获取文档</h4><ul><li>获取指定文档</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">GET</span> 索引库/类型/文档ID </span><br></pre></td></tr></table></figure><p>指定返回的列</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /crm/user/123?_source=fullName,email</span><br></pre></td></tr></table></figure><p>只要内容不要元数据</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET mall/goods/1/_source</span><br></pre></td></tr></table></figure><p>删除文档</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">DELETE </span><span class="template-variable">&#123;index&#125;</span><span class="language-xml">/</span><span class="template-variable">&#123;type&#125;</span><span class="language-xml">/</span><span class="template-variable">&#123;id&#125;</span></span><br></pre></td></tr></table></figure><p>查询所有</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">GET</span> _search</span><br></pre></td></tr></table></figure><p>查询指定索引库</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">GET</span> crm/_search</span><br></pre></td></tr></table></figure><p>查询指定类型</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> crm/<span class="keyword">user</span>/_search</span><br></pre></td></tr></table></figure><p>查询指定文档</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> crm/<span class="keyword">user</span>/<span class="number">11</span></span><br></pre></td></tr></table></figure><h4 id="分页查询">分页查询</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;size</span>=<span class="number">2</span><span class="variable">&amp;from</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li><p>size: 每页条数</p></li><li><p>form:从多少条数据开始查</p></li></ul><p><strong>条件查询+分页+排序</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET crm/user/_search?q=age:17&amp;size=2&amp;from=2&amp;sort=id:desc&amp;_source=id,username</span><br></pre></td></tr></table></figure><h3 id="七-DSL查询与DSL过滤">七. DSL查询与DSL过滤</h3><h4 id="什么是DSL查询">什么是DSL查询</h4><p>对于简单查询，使用查询字符串比较好，但是对于复杂查询，由于条件多，逻辑嵌套复杂，查询字符串不易组织与表达，且容易出错，因此推荐复杂查询通过DSL使用JSON内容格式的请求体代替。</p><p>DSL查询是由ES提供丰富且<code>灵活的查询语言叫做DSL查询(Query DSL),它允许你构建更加复杂、强大的查询</code>。DSL(Domain Specific Language特定领域语言)以JSON请求体的形式出现。DSL有两部分组成：DSL查询和DSL过滤。</p><h4 id="一个常用的相对完整的DSL查询">一个常用的相对完整的DSL查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /crm/user/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> </span><br><span class="line"><span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;username&quot;</span><span class="punctuation">,</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span> <span class="string">&quot;id&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;join_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>上面查询 ， <code>match_all</code> 表示 查询所有数据，查询返回fullName，age和email几个列，按照加入日期和年龄进行排序</p><h4 id="DSL查询案例">DSL查询案例</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /crm/user/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;match&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;username&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Hello Java&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>match如同：where username = hello or username = java</p><p>term如同：where username = “Hello Java”</p><h4 id="DSL过滤">DSL过滤</h4><p>DSL过滤语句和DSL查询语句非常相似，但是它们的使用目的却不同：DSL过滤文档的方式更像是对于我的条件&quot;有&quot;或者&quot;没有&quot;（等于 ；不等于），而DSL查询语句则像是&quot;有多像&quot;(模糊查询)。</p><h4 id="DSL查询-过滤语法">DSL查询+过滤语法</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">GET /crm/user/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line"><span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//booleanQuery 组合</span></span><br><span class="line"><span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="comment">//与(must) 或(should) 非(must not) </span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//match : 匹配，吧查询的内容分词后去查询</span></span><br><span class="line"><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zs&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zs ls&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;name&quot;</span><span class="punctuation">,</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span> <span class="string">&quot;username&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;join_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><p>query : 查询，所有的查询条件在query里面</p></li><li><p>bool : 组合搜索bool可以组合多个查询条件为一个查询对象，这里包含了 DSL查询和DSL过滤的条件</p></li><li><p>must : 必须匹配 ：与(must) 或(should) 非(must_not)</p></li><li><p>match：分词匹配查询，会对查询条件分词 ， multi_match :多字段匹配</p></li><li><p>filter： 过滤条件</p></li><li><p>term：词元查询，不会对查询条件分词</p></li><li><p>from，size :分页</p></li><li><p>_source ：查询结果中需要哪些列</p></li><li><p>sort：排序</p></li></ul><h4 id="综合案例">综合案例</h4><p>名称(name)中有 “zs” 的用户 ，性别sex是男生(1),年龄（age）在 18- 20之间,按照年龄（age）倒排序，查询第 1 页，每页10 条 ，查询结果中只需要 ：id,name,username,age</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">GET /aigou/product/_search </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zs&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="comment">//范围查询</span></span><br><span class="line">                        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span><span class="number">20</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">//词元查询</span></span><br><span class="line"><span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;id&quot;</span><span class="punctuation">,</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span><span class="string">&quot;username&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="八-分词器安装和使用">八. 分词器安装和使用</h3><h4 id="1-什么是分词">1.什么是分词</h4><p>在全文检索理论中，文档的查询是通过关键字查询文档索引来进行匹配，因此将文本拆分为有意义的单词，对于搜索结果的准确性至关重要，因此，在建立索引的过程中和分析搜索语句的过程中都需要对文本串分词。ES的倒排索引是分词的结果。</p><h4 id="2-下载ES的IK分词器">2.下载ES的IK分词器</h4><p>插件源码地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><h5 id="解压elasticsearch-analysis-ik-6-8-0-zip文件">解压elasticsearch-analysis-ik-6.8.0.zip文件</h5><p>并将解压后的内容放置于ES根目录/plugins/ik</p><h3 id="九文档类型映射">九文档类型映射</h3><p>ES的文档映射(mapping)机制用于进行字段类型确认，将每个字段匹配为一种确定的数据类型。就如果Mysql创建表时候指定的每个column列的类型。 为了方便字段的检索，我们会指定存储在ES中的字段是否进行分词，但是有些字段类型可以分词，有些字段类型不可以分词，所以对于字段的类型需要我们自己去指定。</p><p>需要注意的是，我们在Mysql建表过程是：</p><p>Mysql创建数据库 -&gt; 创建表(指定字段类型) -&gt; crud数据 而在ES中也是一样，</p><p>ES创建索引库   -&gt; 文档类型映射      -&gt; crud文档</p><p>查看索引类型的映射配置：GET {indexName}/_mapping/{typeName}</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET mall/_mapping/goods</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mall&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;goods&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fields&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;keyword&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ignore_above&quot;</span> <span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>基本字段类型</p><table><thead><tr><th>字符串</th><th style="text-align:left">text(分词) ；</th><th>keyword(不分词) ；</th><th>StringField(不分词文本)；</th><th>TextFiled(要分词文本)</th><th></th></tr></thead><tbody><tr><td>数字</td><td style="text-align:left">long</td><td>integer</td><td>short</td><td>double</td><td>float</td></tr><tr><td>日期</td><td style="text-align:left">date</td><td></td><td></td><td></td><td></td></tr><tr><td>逻辑</td><td style="text-align:left">boolean</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>创建新的索引库</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">put</span> aigou</span><br></pre></td></tr></table></figure><p>单类型创建映射</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">put aigou/goods/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;goods&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>解释：给aigou索引库中的是goods类型创建映射 ，id指定为long类型 ， name指定为text类型(要分词)，analyzer分词使用ik，查询分词器也使用ik</p><p>多类型创建映射</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PUT aigou</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dept&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        ....更多字段映射配置</span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="十-JavaApi操作ES">十. JavaApi操作ES</h3><p>官方文档API：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/index.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api/index.html</a></p><h4 id="导入依赖">导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="连接ElasticSearch">连接ElasticSearch</h4><p>编写工具</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ESClientUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TransportClient <span class="title function_">getClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Settings</span> <span class="variable">settings</span> <span class="operator">=</span> Settings.builder()</span><br><span class="line">                .put(<span class="string">&quot;cluster.name&quot;</span>, <span class="string">&quot;elasticsearch&quot;</span>).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client = <span class="keyword">new</span> <span class="title class_">PreBuiltTransportClient</span>(settings)</span><br><span class="line">                    .addTransportAddress(<span class="keyword">new</span> <span class="title class_">TransportAddress</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">9300</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文档CRUD">文档CRUD</h4><ol><li><p>添加文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">//获取客户端对象</span></span><br><span class="line">  <span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> ESClientUtil.getClient();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建索引</span></span><br><span class="line">  <span class="type">IndexRequestBuilder</span> <span class="variable">indexRequestBuilder</span> <span class="operator">=</span> client.prepareIndex(<span class="string">&quot;shopping&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">  Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  data.put(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">  data.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">  data.put(<span class="string">&quot;age&quot;</span>,<span class="number">11</span>);</span><br><span class="line">  <span class="comment">//获取结果</span></span><br><span class="line">  <span class="type">IndexResponse</span> <span class="variable">indexResponse</span> <span class="operator">=</span> indexRequestBuilder.setSource(data).get();</span><br><span class="line"></span><br><span class="line">  System.out.println(indexResponse);</span><br><span class="line">  client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> ESClientUtil.getClient();</span><br><span class="line">       <span class="keyword">final</span> <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.prepareGet(<span class="string">&quot;shopping&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;2&quot;</span>).get();</span><br><span class="line">       <span class="keyword">final</span> Map&lt;String, Object&gt; source = response.getSource();</span><br><span class="line">       source.forEach((key, val) -&gt; &#123;</span><br><span class="line">           System.out.println(key + <span class="string">&quot;:&quot;</span> + val);</span><br><span class="line">       &#125;);</span><br><span class="line">       System.out.println(response);</span><br><span class="line">               client.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>更新文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取客户端对象</span></span><br><span class="line">        <span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> ESClientUtil.getClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改索引</span></span><br><span class="line">        <span class="type">UpdateRequestBuilder</span> <span class="variable">updateRequestBuilder</span> <span class="operator">=</span> client.prepareUpdate(<span class="string">&quot;shopping&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        data.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;age&quot;</span>,<span class="number">11</span>);</span><br><span class="line">        <span class="comment">//获取结果设置修改内容</span></span><br><span class="line">        <span class="type">UpdateResponse</span> <span class="variable">updateResponse</span> <span class="operator">=</span> updateRequestBuilder.setDoc(data).get();</span><br><span class="line"></span><br><span class="line">        System.out.println(updateResponse);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>删除文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//获取客户端对象</span></span><br><span class="line">       <span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> ESClientUtil.getClient();</span><br><span class="line">   </span><br><span class="line">       <span class="type">DeleteRequestBuilder</span> <span class="variable">deleteRequestBuilder</span> <span class="operator">=</span> client.prepareDelete(<span class="string">&quot;shopping&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">       <span class="type">DeleteResponse</span> <span class="variable">deleteResponse</span> <span class="operator">=</span> deleteRequestBuilder.get();</span><br><span class="line">   </span><br><span class="line">       System.out.println(deleteResponse);</span><br><span class="line">       client.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>批量操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuilkAdd</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//获取客户端对象</span></span><br><span class="line">       <span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> ESClientUtil.getClient();</span><br><span class="line">   </span><br><span class="line">       <span class="type">BulkRequestBuilder</span> <span class="variable">bulkRequestBuilder</span> <span class="operator">=</span> client.prepareBulk();</span><br><span class="line">   </span><br><span class="line">       Map&lt;String,Object&gt; data1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       data1.put(<span class="string">&quot;id&quot;</span>,<span class="number">11</span>);</span><br><span class="line">       data1.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">       data1.put(<span class="string">&quot;age&quot;</span>,<span class="number">11</span>);</span><br><span class="line">   </span><br><span class="line">       bulkRequestBuilder.add(client.prepareIndex(<span class="string">&quot;shopping&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;11&quot;</span>).setSource(data1));</span><br><span class="line">   </span><br><span class="line">       Map&lt;String,Object&gt; data2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       data2.put(<span class="string">&quot;id&quot;</span>,<span class="number">22</span>);</span><br><span class="line">       data2.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">       data2.put(<span class="string">&quot;age&quot;</span>,<span class="number">11</span>);</span><br><span class="line">   </span><br><span class="line">       bulkRequestBuilder.add(client.prepareIndex(<span class="string">&quot;shopping&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;11&quot;</span>).setSource(data2));</span><br><span class="line">   </span><br><span class="line">       <span class="type">BulkResponse</span> <span class="variable">bulkItemResponses</span> <span class="operator">=</span> bulkRequestBuilder.get();</span><br><span class="line">       Iterator&lt;BulkItemResponse&gt; iterator = bulkItemResponses.iterator();</span><br><span class="line">       <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">           <span class="type">BulkItemResponse</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">           System.out.println(next.getResponse());</span><br><span class="line">       &#125;</span><br><span class="line">       client.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSearch</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取客户端对象</span></span><br><span class="line">        <span class="type">TransportClient</span> <span class="variable">client</span> <span class="operator">=</span> ESClientUtil.getClient();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SearchRequestBuilder</span> <span class="variable">searchRequestBuilder</span> <span class="operator">=</span> client.prepareSearch(<span class="string">&quot;shopping&quot;</span>);</span><br><span class="line">        searchRequestBuilder.setTypes(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        searchRequestBuilder.setFrom(<span class="number">0</span>);</span><br><span class="line">        searchRequestBuilder.setSize(<span class="number">10</span>);</span><br><span class="line">        searchRequestBuilder.addSort(<span class="string">&quot;age&quot;</span>, SortOrder.ASC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询条件</span></span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQueryBuilder</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">        List&lt;QueryBuilder&gt; must = boolQueryBuilder.must();</span><br><span class="line">        must.add(QueryBuilders.matchQuery(<span class="string">&quot;username&quot;</span> , <span class="string">&quot;zs&quot;</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;QueryBuilder&gt; filter = boolQueryBuilder.filter();</span><br><span class="line">        filter.add(QueryBuilders.rangeQuery(<span class="string">&quot;age&quot;</span>).lte(<span class="number">20</span>).gte(<span class="number">10</span>));</span><br><span class="line">        filter.add(QueryBuilders.termQuery(<span class="string">&quot;id&quot;</span>,<span class="number">11</span>));</span><br><span class="line"></span><br><span class="line">        searchRequestBuilder.setQuery(boolQueryBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> searchRequestBuilder.get();</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> searchResponse.getHits();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;条数：&quot;</span>+hits.getTotalHits());</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits.getHits()) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WEBGL学习笔记</title>
      <link href="/posts/e1825e97.html"/>
      <url>/posts/e1825e97.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-基础入门">一.基础入门</h3><ol><li><p>使用版本r0.153，下载压缩包后执行<code>npm start</code>，即可查看本地教程文档。</p></li><li><p>创建项目：<code>npm init vite@latest</code></p></li><li><p>下载three：<code>npm install three</code></p></li><li><pre><code class="language-js">// 导入three jsimport * as THREE from 'three'<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">5.</span> ```js</span><br><span class="line">   <span class="comment">// 创建场景</span></span><br><span class="line">   <span class="keyword">const</span> scene = <span class="keyword">new</span> THREE.Scene();</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">// 创建透视相机const camera = new THREE.PerspectiveCamera(45, // 视角    window.innerWidth / window.innerHeight, // 宽高比    0.1, // 近平面    1000 //远平面);// 设置相机位置camera.position.z = 5 // z轴 正对眼睛位置camera.position.x = 2camera.position.y = 2camera.lookAt(0, 0, 0) // 相机看向原点 默认就是原点<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">7.</span> ```<span class="language-javascript">js</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 创建渲染器</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>();</span></span><br><span class="line"><span class="language-javascript">   renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>)</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>)</span></span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">// 添加世界坐标辅助器let axesHelper = new THREE.AxesHelper(5); // 线段长度. 默认为 1.scene.add(axesHelper)<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">9.</span> ```<span class="language-javascript">js</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 添加轨道控制器 </span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> controls = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>(camera, renderer.<span class="property">domElement</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 设置带阻尼的惯性</span></span></span><br><span class="line"><span class="language-javascript">   controls.<span class="property">enableDamping</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 设置阻尼系数</span></span></span><br><span class="line"><span class="language-javascript">   controls.<span class="property">dampingFactor</span> = <span class="number">0.05</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 设置自动旋转</span></span></span><br><span class="line"><span class="language-javascript">   controls.<span class="property">autoRotate</span> = <span class="literal">true</span></span></span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">// 渲染函数function animate() &#123;    controls.update()    requestAnimationFrame(animate)    &#123;        // 旋转        cube.rotation.x += 0.01        cube.rotation.y += 0.01        // 渲染        renderer.render(scene, camera)    &#125;&#125;animate()<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">11</span>. ```js</span><br><span class="line">    <span class="comment">// 设置物体坐标</span></span><br><span class="line">    cube<span class="selector-class">.position</span><span class="selector-class">.set</span>(<span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">// 设置立方体的放大// cube.scale.set(2, 2, 2) // 放大两倍parentCube.scale.set(2,2,2) // 父元素放大子元素一起放大<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">13</span>. ```js</span><br><span class="line">    <span class="comment">// 控制绕着x轴旋转</span></span><br><span class="line">    <span class="built_in">cube</span>.rotation.x = Math.<span class="literal">PI</span> / <span class="number">4</span> <span class="comment">// 旋转45° （局部旋转会叠加父元素旋转 90°）</span></span><br><span class="line">    parentCube.rotation.x=Math.<span class="literal">PI</span> / <span class="number">4</span> </span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">// 监听窗口变化window.addEventListener(&quot;resize&quot;, () =&gt; &#123;    // 重置渲染器宽高比    renderer.setSize(window.innerWidth, window.innerHeight)    // 重置相机宽高比    camera.aspect = window.innerWidth / window.innerHeight    // 更新相机投影矩阵    camera.updateProjectionMatrix()&#125;);<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">15.</span> ```<span class="language-javascript">js</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击按钮事件实现全屏</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>); <span class="comment">// 创建按钮元素</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">innerHTML</span> = <span class="string">&quot;点击全屏&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置按钮样式</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&quot;absolute&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;10px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;10px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">style</span>.<span class="property">zindex</span> = <span class="string">&#x27;999&#x27;</span> <span class="comment">//数值越大显示在最上层</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 全屏</span></span></span><br><span class="line"><span class="language-javascript">        renderer.<span class="property">domElement</span>.<span class="title function_">requestFullscreen</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(btn)</span></span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">// 使用GUI实现全屏import &#123;GUI&#125; from &quot;three/addons/libs/lil-gui.module.min.js&quot;;let eventObj = &#123;    // 全屏    fullscreen: function () &#123;        document.body.requestFullscreen();    &#125;,    // 退出全屏    exitFullscreen: function () &#123;        document.exitFullscreen();    &#125;&#125;// 创建GUI对象let gui = new GUI();// 添加按钮gui.add(eventObj,'fullscreen').name = &quot;全屏&quot;;gui.add(eventObj,'exitFullscreen').name = &quot;退出全屏&quot;;<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">17.</span> ```js</span><br><span class="line">    // 线框材质</span><br><span class="line">    parentMaterial.wireframe = <span class="keyword">true</span></span><br><span class="line">    </span><br><span class="line">    // 控制立方体位置</span><br><span class="line">    // gui.<span class="keyword">add</span>(<span class="keyword">cube</span>.position, <span class="string">&#x27;x&#x27;</span>, <span class="number">-5</span>, <span class="number">5</span>).name(<span class="string">&#x27;立方体x轴位置&#x27;</span>)</span><br><span class="line">    // gui.<span class="keyword">add</span>(<span class="keyword">cube</span>.position, <span class="string">&#x27;x&#x27;</span>).min(<span class="number">-10</span>).max(<span class="number">10</span>).step(<span class="number">1</span>).name(<span class="string">&#x27;立方体x轴位置&#x27;</span>)</span><br><span class="line">    let folder = gui.addFolder(<span class="string">&#x27;立方体位置&#x27;</span>);</span><br><span class="line">    folder.<span class="keyword">add</span>(<span class="keyword">cube</span>.position, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">        .min(<span class="number">-10</span>)</span><br><span class="line">        .max(<span class="number">10</span>)</span><br><span class="line">        .step(<span class="number">1</span>)</span><br><span class="line">        .name(<span class="string">&#x27;立方体x轴位置&#x27;</span>)</span><br><span class="line">        .onChange((val) =&gt; &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;x轴位置:&#x27;</span>, val)</span><br><span class="line">        &#125;);</span><br><span class="line">    folder.<span class="keyword">add</span>(<span class="keyword">cube</span>.position, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">        .min(<span class="number">-10</span>).max(<span class="number">10</span>)</span><br><span class="line">        .step(<span class="number">1</span>)</span><br><span class="line">        .name(<span class="string">&#x27;立方体y轴位置&#x27;</span>)</span><br><span class="line">        .onFinishChange((val) =&gt; &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;y轴位置:&#x27;</span>, val)</span><br><span class="line">        &#125;);</span><br><span class="line">    folder.<span class="keyword">add</span>(<span class="keyword">cube</span>.position, <span class="string">&#x27;z&#x27;</span>).min(<span class="number">-10</span>).max(<span class="number">10</span>).step(<span class="number">1</span>).name(<span class="string">&#x27;立方体z轴位置&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    //控制线框材质变化 单选框</span><br><span class="line">    gui.<span class="keyword">add</span>(parentMaterial, <span class="string">&#x27;wireframe&#x27;</span>).name(<span class="string">&#x27;父元素线框模式&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    // 控制立方体颜色</span><br><span class="line">    let colorParams = &#123;</span><br><span class="line">        cubeColor: <span class="string">&#x27;#0x00ff00&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    gui.addColor(colorParams, <span class="string">&#x27;cubeColor&#x27;</span>)</span><br><span class="line">        .name(<span class="string">&#x27;立方体颜色&#x27;</span>)</span><br><span class="line">        .onChange((val) =&gt; &#123;</span><br><span class="line">            <span class="keyword">cube</span>.material.color.<span class="keyword">set</span>(val)</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">// 创建几何体 所有的面都是由三角形构成的let geometry = new THREE.BufferGeometry();// 创建顶点数据 顶点是有序的 每三个为一个顶点 逆时针为正面const vertices = new Float32Array([    -1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 1.0, 0.0,    1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, -1.0, 0.0]);// 产生六个顶点// 创建顶点属性geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3))// 创建材质const material = new THREE.MeshBasicMaterial(&#123;    color: 0x00ff00,    wireframe: true,    // side: THREE.DoubleSide // 两面都可以看到&#125;);console.log(geometry); // count:6 有6个顶点// 使用索引绘制共用顶点 正方形四个顶点const geometry2 = new THREE.BufferGeometry();const vertices2 = new Float32Array([    -1.0, -1.0, 0.0, 1.0, -1.0, 0.0, 1.0, 1.0, 0.0, -1.0, 1.0, 0.0,]); // 平面正方形// 创建顶点属性geometry2.setAttribute('position', new THREE.BufferAttribute(vertices2, 3))// 创建索引const indices = new Uint16Array([0, 1, 2, 2, 3, 0]);// 创建索引属性geometry2.setIndex(new THREE.BufferAttribute(indices, 1))console.log(geometry2); // count:4 有4顶点// 创建网格const mesh = new THREE.Mesh(geometry2, material);scene.add(mesh)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">19.</span> ```js</span><br><span class="line">    <span class="comment">// 创建索引属性</span></span><br><span class="line">    geometry2.setIndex(<span class="keyword">new</span> <span class="title class_">THREE</span>.BufferAttribute(indices, <span class="number">1</span>))</span><br><span class="line">    <span class="comment">// 设置两个顶点组 形成两个材质</span></span><br><span class="line">    geometry2.addGroup(<span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>) <span class="comment">// 顶点索引位置 索引0开始，数量3</span></span><br><span class="line">    geometry2.addGroup(<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>) <span class="comment">// 索引3开始(正方形的第四个点)，数量3</span></span><br><span class="line">    console.log(geometry2); <span class="comment">// count:4 有4顶点</span></span><br><span class="line">    <span class="comment">// 创建网格</span></span><br><span class="line">    <span class="type">const</span> <span class="variable">mesh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">THREE</span>.Mesh(geometry2, [material, material2]);</span><br><span class="line">    scene.add(mesh)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建几合体</span></span><br><span class="line">    <span class="type">let</span> <span class="variable">cubeGeometry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">THREE</span>.BoxGeometry(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// // 创建材质</span></span><br><span class="line">    <span class="type">let</span> <span class="variable">material01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">THREE</span>.MeshBasicMaterial(&#123;color: <span class="number">0x00ff00</span>&#125;); <span class="comment">//</span></span><br><span class="line">    <span class="type">let</span> <span class="variable">material02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">THREE</span>.MeshBasicMaterial(&#123;color: <span class="string">&#x27;blue&#x27;</span>&#125;); <span class="comment">//</span></span><br><span class="line">    <span class="type">let</span> <span class="variable">material03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">THREE</span>.MeshBasicMaterial(&#123;color: <span class="string">&#x27;red&#x27;</span>&#125;); <span class="comment">//</span></span><br><span class="line">    <span class="type">let</span> <span class="variable">material04</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">THREE</span>.MeshBasicMaterial(&#123;color: <span class="string">&#x27;purple&#x27;</span>&#125;); <span class="comment">//</span></span><br><span class="line">    <span class="type">let</span> <span class="variable">material05</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">THREE</span>.MeshBasicMaterial(&#123;color: <span class="string">&#x27;white&#x27;</span>&#125;); <span class="comment">//</span></span><br><span class="line">    <span class="type">let</span> <span class="variable">material06</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">THREE</span>.MeshBasicMaterial(&#123;color: <span class="string">&#x27;yellow&#x27;</span>&#125;); <span class="comment">//</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">let</span> <span class="variable">cube</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">THREE</span>.Mesh(cubeGeometry, [material01, material02, material03, material04, material05, material06]);</span><br><span class="line">    cube.position.x = <span class="number">2</span></span><br><span class="line">    scene.add(cube)</span><br></pre></td></tr></table></figure></code></pre></li><li><p><img src="../blog/coderyeah/source/_posts/img/image-20230829114919999.png" alt="image-20230829114919999"></p></li><li><p>贴图下载</p><p><a href="https://www.poliigon.com/">https://www.poliigon.com/</a><br><a href="https://3dtextures.me/">https://3dtextures.me/</a><br><a href="https://www.arroway-textures.ch/">https://www.arroway-textures.ch/</a></p></li><li><pre><code class="language-js">import &#123;DoubleSide&#125; from &quot;three&quot;;// 导入hdr加载器import &#123;RGBELoader&#125; from &quot;three/examples/jsm/loaders/RGBELoader.js&quot;// 创建文理加载器let textureLoader = new THREE.TextureLoader();// 加载文理效果let texture = textureLoader.load('./texture/watercover/CityNewYork002_COL_VAR1_1K.png');// 加载ao贴图 明暗程度let aoMap = textureLoader.load('./texture/watercover/CityNewYork002_COL_VAR1_1K.png');// 透明度贴图 黑：全透明 白：不透明 灰：半透明let alphaMap = textureLoader.load('./texture/door/height.jpg');// 光照贴图let lightMap = textureLoader.load('./texture/colors.png');// 高光贴图let specularMap = textureLoader.load('./texture/watercover/CityNewYork002_GLOSS_1K.jpg');// rgbeLoader加载hdr贴图let rgbeLoader = new RGBELoader();rgbeLoader.load(&quot;./texture/Alex_Hart-Nature_Lab_Bones_2k.hdr&quot;, (envMap =&gt; &#123;    // 设置球形贴图    envMap.mapping = THREE.EquirectangularReflectionMapping    // 设置环境贴图    scene.background = envMap    //设置环境贴图-整个场景    scene.environment = envMap    // 设置planeMaterial环境贴图    planeMaterial.envMap = envMap&#125;))// 创建平面const planeGeometry = new THREE.PlaneGeometry(1, 1);// 创建平面材质const planeMaterial = new THREE.MeshBasicMaterial(&#123;    side: DoubleSide,    color: 0xffffff,    map: texture,    // 允许透明    transparent: true,    // 设置ao    aoMap: aoMap,    aoMapIntensity: 1,    // 设置透明度贴图 alpha贴图是一张灰度纹理，用于控制整个表面的不透明度。（黑色：完全透明；白色：完全不透明）。 默认值为null。    // alphaMap: alphaMap,    // 光照贴图    // lightMap: lightMap,    // 设置反射值    reflectivity: 0.5,    // 设置高光贴图    specularMap: specularMap&#125;);// planeMaterial.map = texture;gui.add(planeMaterial, 'aoMapIntensity').min(0).max(1).name('ao强度')const cube = new THREE.Mesh(planeGeometry, planeMaterial);scene.add(cube);<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">23.</span> ```js</span><br><span class="line">    <span class="comment">// 创建文理加载器</span></span><br><span class="line">    let textureLoader = <span class="keyword">new </span><span class="class title_">THREE</span>.<span class="property">TextureLoader</span>();</span><br><span class="line">    <span class="comment">// 加载文理效果</span></span><br><span class="line">    let <span class="built_in">texture</span> = textureLoader.<span class="property">load</span>(<span class="string">&#x27;./texture/watercover/CityNewYork002_COL_VAR1_1K.png&#x27;</span>);</span><br><span class="line">    <span class="built_in">texture</span>.<span class="property">colorSpace</span> = THREE.<span class="property">SRGBColorSpace</span> <span class="comment">// 更加真实的</span></span><br><span class="line">    <span class="comment">// texture.colorSpace = THREE.LinearSRGBColorSpace  // 默认线性空间</span></span><br><span class="line">    </span><br><span class="line">    gui.<span class="property">add</span>(<span class="built_in">texture</span>, <span class="string">&#x27;colorSpace&#x27;</span>, &#123;</span><br><span class="line">        sRGB: THREE.<span class="property">SRGBColorSpace</span>,</span><br><span class="line">        linear: THREE.<span class="property">LinearSRGBColorSpace</span></span><br><span class="line">    &#125;).<span class="property">onChange</span>(() =&gt; &#123;</span><br><span class="line">        <span class="built_in">texture</span>.<span class="property">needsUpdate</span> = <span class="literal">true</span> <span class="comment">//更改颜色空间</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-js">// 创建几何体let boxGeometry = new THREE.BoxGeometry(1, 1, 100);// 创建材质let basicMaterial = new THREE.MeshBasicMaterial(&#123;    color: 0x00ff00&#125;);let mesh = new THREE.Mesh(boxGeometry, basicMaterial);scene.add(mesh)// 创建场景fog// scene.fog = new THREE.Fog(0x999999, 0.1, 50);// 创建指数fogscene.fog = new THREE.FogExp2(0x999999, 0.1)scene.background = new THREE.Color(0x999999)<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &lt;img src=<span class="string">&quot;../blog/coderyeah/source/_posts/img/image-20230830113331658.png&quot;</span> alt=<span class="string">&quot;image-20230830113331658&quot;</span> style=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">25.</span> #### GLTF加载器（GLTFLoader）</span><br><span class="line"></span><br><span class="line">    [GlTF](https:<span class="comment">//www.khronos.org/gltf)（gl传输格式）是一种开放格式的规范 （[open format specification](https://github.com/KhronosGroup/glTF/tree/master/specification/2.0)）， 用于更高效地传输、加载3D内容。该类文件以JSON（.gltf）格式或二进制（.glb）格式提供， 外部文件存储贴图（.jpg、.png）和额外的二进制数据（.bin）。一个glTF组件可传输一个或多个场景， 包括网格、材质、贴图、蒙皮、骨架、变形目标、动画、灯光以及摄像机。</span></span><br><span class="line"></span><br><span class="line">    ```js</span><br><span class="line">    <span class="keyword">import</span> &#123;GLTFLoader&#125; <span class="keyword">from</span> <span class="string">&#x27;three/addons/loaders/GLTFLoader.js&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实例化加载器gltf</span></span><br><span class="line">    <span class="keyword">let</span> gltfLoader = new GLTFLoader();</span><br><span class="line">    gltfLoader.load(</span><br><span class="line">        <span class="comment">// 模型路径</span></span><br><span class="line">        <span class="string">&#x27;./model/Duck.glb&#x27;</span>,</span><br><span class="line">        <span class="comment">// 加载完成回调</span></span><br><span class="line">        (gltf =&gt; &#123;</span><br><span class="line">            scene.add(gltf.scene)</span><br><span class="line">            console.log(gltf)</span><br><span class="line">        &#125;))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加载环境贴图</span></span><br><span class="line">    <span class="keyword">let</span> rgbeLoader = new RGBELoader();</span><br><span class="line">    rgbeLoader.load(<span class="string">&#x27;./texture/Alex_Hart-Nature_Lab_Bones_2k.hdr&#x27;</span>, (envMap) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 设置球形映射</span></span><br><span class="line">        envMap.mapping = THREE.EquirectangularReflectionMapping</span><br><span class="line">        <span class="comment">// 设置环境贴图 四面八方的光照进来 小鸭子亮起来</span></span><br><span class="line">        scene.environment = envMap</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>&lt;img src=&quot;../blog/coderyeah/source/_posts/img/image-20230830141114526.png&quot; alt=&quot;image-20230830141114526&quot; style=&quot;zoom:50%;&quot; /&gt;</code></pre></li><li><p>加载压缩过的grtl模型</p><img src="../blog/coderyeah/source/_posts/img/image-20230830143306961.png" alt="image-20230830143306961" style="zoom:50%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">DRACOLoader</span>&#125; <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/loaders/DRACOLoader.js&quot;</span> <span class="comment">//解码器</span></span><br><span class="line"><span class="comment">// 实例化draco加载器</span></span><br><span class="line"><span class="keyword">let</span> dracoLoader = <span class="keyword">new</span> <span class="title class_">DRACOLoader</span>();</span><br><span class="line"><span class="comment">// 设置draco路径</span></span><br><span class="line">dracoLoader.<span class="title function_">setDecoderPath</span>(<span class="string">&#x27;./draco/&#x27;</span>)</span><br><span class="line"><span class="comment">// 设置gltf加载器draco解码器</span></span><br><span class="line">gltfLoader.<span class="title function_">setDRACOLoader</span>(dracoLoader)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载城市的glb文件 glb:二进制文件  gltf:json文件</span></span><br><span class="line">gltfLoader.<span class="title function_">load</span>(</span><br><span class="line">    <span class="string">&#x27;./model/city.glb&#x27;</span>,</span><br><span class="line">    <span class="function">(<span class="params">gltf</span>) =&gt;</span> &#123;</span><br><span class="line">    scene.<span class="title function_">add</span>(gltf.<span class="property">scene</span>) <span class="comment">//No DRACOLoader instance provided 因为是压缩文件 需要Draco解压</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>光线投射3d场景交互事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建三个球</span></span><br><span class="line"><span class="keyword">let</span> sphere1 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(</span><br><span class="line">        &#123;<span class="attr">color</span>: <span class="number">0x00ff00</span>&#125;</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line">sphere1.<span class="property">position</span>.<span class="property">x</span> = -<span class="number">4</span></span><br><span class="line">scene.<span class="title function_">add</span>(sphere1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sphere2 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="number">0x0000ff</span></span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">scene.<span class="title function_">add</span>(sphere2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sphere3 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="number">0xff00ff</span></span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">sphere3.<span class="property">position</span>.<span class="property">x</span> = <span class="number">4</span></span><br><span class="line">scene.<span class="title function_">add</span>(sphere3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建射线</span></span><br><span class="line"><span class="keyword">const</span> raycaster = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Raycaster</span>();</span><br><span class="line"><span class="comment">// 创建鼠标向量</span></span><br><span class="line"><span class="keyword">const</span> mouse = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector2</span>();</span><br><span class="line"><span class="comment">// 监听点击事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置鼠标向量的x, y值</span></span><br><span class="line">    mouse.<span class="property">x</span> = (event.<span class="property">clientX</span> / <span class="variable language_">window</span>.<span class="property">innerWidth</span>) * <span class="number">2</span> - <span class="number">1</span> <span class="comment">// 这样鼠标点击的x值范围就是-1到1</span></span><br><span class="line">    <span class="comment">//因为坐标相反 y轴上是正数，下方是负数 所以取相反</span></span><br><span class="line">    mouse.<span class="property">y</span> = -((event.<span class="property">clientY</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>) * <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// console.log(mouse.x, mouse.y)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过摄像机和鼠标位置更新射线</span></span><br><span class="line">    raycaster.<span class="title function_">setFromCamera</span>(mouse, camera)</span><br><span class="line">    <span class="comment">// 计算物体和射线的焦点</span></span><br><span class="line">    <span class="keyword">const</span> intersects = raycaster.<span class="title function_">intersectObjects</span>([sphere1, sphere2, sphere3]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(intersects);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (intersects.<span class="property">length</span> &gt; <span class="number">0</span>) &#123; <span class="comment">// 如果在一条直线上数值为3个 选择第一个距离相机位置最近</span></span><br><span class="line">        <span class="keyword">if</span> (intersects[<span class="number">0</span>].<span class="property">object</span>.<span class="property">_isSelected</span>) &#123;</span><br><span class="line">            <span class="comment">// 改变为原来的颜色</span></span><br><span class="line">            intersects[<span class="number">0</span>].<span class="property">object</span>.<span class="property">material</span>.<span class="property">color</span>.<span class="title function_">set</span>(intersects[<span class="number">0</span>].<span class="property">object</span>.<span class="property">_originColor</span>)</span><br><span class="line">            intersects[<span class="number">0</span>].<span class="property">object</span>.<span class="property">_isSelected</span> = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// originColor自定义的属性值</span></span><br><span class="line">        intersects[<span class="number">0</span>].<span class="property">object</span>.<span class="property">_originColor</span> = intersects[<span class="number">0</span>].<span class="property">object</span>.<span class="property">material</span>.<span class="property">color</span>.<span class="title function_">getHex</span>(); <span class="comment">// 获取圆球形原有的rgb颜色值</span></span><br><span class="line">        intersects[<span class="number">0</span>].<span class="property">object</span>.<span class="property">_isSelected</span> = <span class="literal">true</span> <span class="comment">// 已经选择</span></span><br><span class="line">        <span class="comment">// 设置颜色为红色</span></span><br><span class="line">        intersects[<span class="number">0</span>].<span class="property">object</span>.<span class="property">material</span>.<span class="property">color</span>.<span class="title function_">set</span>(<span class="number">0xff0000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="../blog/coderyeah/source/_posts/img/image-20230830155012561.png" alt="image-20230830155012561" style="zoom:50%;" /></li><li><p>补间动画Tween</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入tween</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">TWEEN</span> <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/libs/tween.module.js&quot;</span>;</span><br><span class="line"><span class="comment">// 创建一个球</span></span><br><span class="line"><span class="keyword">let</span> sphere = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(</span><br><span class="line">        &#123;<span class="attr">color</span>: <span class="number">0x00ff00</span>&#125;</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line">sphere.<span class="property">position</span>.<span class="property">x</span> = -<span class="number">4</span></span><br><span class="line">scene.<span class="title function_">add</span>(sphere);</span><br><span class="line"><span class="comment">// 创建补间对象</span></span><br><span class="line"><span class="keyword">const</span> tween = <span class="keyword">new</span> <span class="variable constant_">TWEEN</span>.<span class="title class_">Tween</span>(sphere.<span class="property">position</span>);</span><br><span class="line">tween.<span class="title function_">to</span>(&#123;<span class="attr">x</span>: <span class="number">4</span>&#125;, <span class="number">1000</span>)</span><br><span class="line">tween.<span class="title function_">onUpdate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sphere.<span class="property">position</span>.<span class="property">x</span>) <span class="comment">// 获取位置</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 循环往复</span></span><br><span class="line"><span class="comment">// tween.yoyo(true)</span></span><br><span class="line"><span class="comment">// tween.repeat(Infinity) // 设置循环无数次</span></span><br><span class="line"><span class="comment">// tween.repeat(2) // 设置循环2次</span></span><br><span class="line"><span class="comment">// 延迟运行</span></span><br><span class="line"><span class="comment">// tween.delay(3000)</span></span><br><span class="line"><span class="comment">// 设置缓动函数</span></span><br><span class="line">tween.<span class="title function_">easing</span>(<span class="variable constant_">TWEEN</span>.<span class="property">Easing</span>.<span class="property">Quadratic</span>.<span class="property">InOut</span>) <span class="comment">//Quadratic.InOut</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tween2 = <span class="keyword">new</span> <span class="variable constant_">TWEEN</span>.<span class="title class_">Tween</span>(sphere.<span class="property">position</span>);</span><br><span class="line">tween2.<span class="title function_">to</span>(&#123;<span class="attr">x</span>: -<span class="number">4</span>&#125;, <span class="number">1000</span>) <span class="comment">// yoyo(true)</span></span><br><span class="line">tween.<span class="title function_">chain</span>(tween2)</span><br><span class="line">tween2.<span class="title function_">chain</span>(tween)</span><br><span class="line"><span class="comment">// 启动补间动画</span></span><br><span class="line">tween.<span class="title function_">start</span>();</span><br><span class="line"><span class="comment">// tween的回调函数</span></span><br><span class="line">tween.<span class="title function_">onStart</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">tween.<span class="title function_">onStop</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;暂停&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">tween.<span class="title function_">onComplete</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">tween.<span class="title function_">onUpdate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更新&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> param = &#123;</span><br><span class="line">    <span class="attr">stop</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        tween.<span class="title function_">stop</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">gui.<span class="title function_">add</span>(param, <span class="string">&#x27;stop&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="二-Geometry进阶">二.Geometry进阶</h3><ol><li><p>UV：二维纹理坐标</p><img src="../blog/coderyeah/source/_posts/img/uv_grid_opengl.jpg" alt="uv_grid_opengl" style="zoom:50%;" /></li><li><p>法向量：垂直于平面，作用计算反射光，可以给四个顶点设置法向量，使物体具有反射光。</p></li><li><p>物体转换，顶点转换。</p></li><li><p>包围盒，包围球</p><img src="../blog/coderyeah/source/_posts/img/image-20230905112629736.png" alt="image-20230905112629736" style="zoom:50%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载小鸭子</span></span><br><span class="line"><span class="comment">// 实例化加载器gltf</span></span><br><span class="line"><span class="keyword">let</span> gltfLoader = <span class="keyword">new</span> <span class="title class_">GLTFLoader</span>();</span><br><span class="line">gltfLoader.<span class="title function_">load</span>(</span><br><span class="line">    <span class="comment">// 模型路径</span></span><br><span class="line">    <span class="string">&#x27;./model/Duck.glb&#x27;</span>,</span><br><span class="line">    <span class="comment">// 加载完成回调</span></span><br><span class="line">    (<span class="function"><span class="params">gltf</span> =&gt;</span> &#123;</span><br><span class="line">        scene.<span class="title function_">add</span>(gltf.<span class="property">scene</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(gltf)</span><br><span class="line">        <span class="keyword">const</span> duckMesh = gltf.<span class="property">scene</span>.<span class="title function_">getObjectByName</span>(<span class="string">&quot;LOD3spShape&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> duckGeometry = duckMesh.<span class="property">geometry</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(duckGeometry)</span><br><span class="line">        <span class="comment">// 计算包围盒</span></span><br><span class="line">        duckGeometry.<span class="title function_">computeBoundingBox</span>();</span><br><span class="line">        <span class="comment">// 获取包围盒</span></span><br><span class="line">        <span class="keyword">const</span> duckBox = duckGeometry.<span class="property">boundingBox</span>;</span><br><span class="line">        <span class="comment">// 更新世界矩阵</span></span><br><span class="line">        duckMesh.<span class="title function_">updateWorldMatrix</span>(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">        <span class="comment">// 更新包围盒</span></span><br><span class="line">        duckBox.<span class="title function_">applyMatrix4</span>(duckMesh.<span class="property">matrixWorld</span>)</span><br><span class="line">        <span class="comment">// 创建包围盒辅助器</span></span><br><span class="line">        <span class="keyword">const</span> box3Helper = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Box3Helper</span>(duckBox, <span class="number">0xffff00</span>);</span><br><span class="line">        scene.<span class="title function_">add</span>(box3Helper);</span><br><span class="line">    &#125;))</span><br></pre></td></tr></table></figure></li><li><p>几何物体居中</p><img src="../blog/coderyeah/source/_posts/img/image-20230905114143368.png" alt="image-20230905114143368" style="zoom:50%;" /></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置几合体剧中</span></span><br><span class="line">     <span class="comment">// duckGeometry.center</span></span><br><span class="line">     <span class="comment">// 获取包围盒</span></span><br><span class="line">     <span class="keyword">const</span> duckBox = duckGeometry.<span class="property">boundingBox</span>;</span><br><span class="line">     <span class="comment">// 获取包围盒中心点</span></span><br><span class="line">     <span class="keyword">const</span> center = duckBox.<span class="title function_">getCenter</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>());</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(center);</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">      <span class="comment">// 获取包围球</span></span><br><span class="line">     <span class="keyword">let</span> duckSphere = duckGeometry.<span class="property">boundingSphere</span>;</span><br><span class="line">     duckSphere.<span class="title function_">applyMatrix4</span>(duckMesh.<span class="property">matrixWorld</span>)</span><br><span class="line">     <span class="comment">// 创建包围球辅助器</span></span><br><span class="line">     <span class="keyword">let</span> sphereGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(duckSphere.<span class="property">radius</span>, <span class="number">16</span>, <span class="number">16</span>);</span><br><span class="line">     <span class="keyword">let</span> sphereMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123;</span><br><span class="line">         <span class="attr">color</span>: <span class="number">0xff0000</span>,</span><br><span class="line">         <span class="attr">wireframe</span>: <span class="literal">true</span></span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="keyword">let</span> sphereMesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(sphereGeometry,sphereMaterial);</span><br><span class="line">     sphereMesh.<span class="property">position</span>.<span class="title function_">copy</span>(duckSphere.<span class="property">center</span>)</span><br><span class="line">     scene.<span class="title function_">add</span>(sphereMesh);</span><br><span class="line">     </span><br></pre></td></tr></table></figure><ol start="6"><li><p>获取多个物体包围盒</p><img src="../blog/coderyeah/source/_posts/img/image-20230905134609742.png" alt="image-20230905134609742" style="zoom:50%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取多个物体包围盒</span></span><br><span class="line"><span class="keyword">let</span> box = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Box3</span>();</span><br><span class="line"><span class="keyword">let</span> sphereArr = [sphere1, sphere2, sphere3]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sphereArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// // 后去当前物体包围盒</span></span><br><span class="line">    <span class="comment">// sphereArr[i].geometry.computeBoundingBox()</span></span><br><span class="line">    <span class="comment">// // 获取包围盒</span></span><br><span class="line">    <span class="comment">// let box3 = sphereArr[i].geometry.boundingBox</span></span><br><span class="line">    <span class="comment">// sphereArr[i].updateWorldMatrix(true, true)</span></span><br><span class="line">    <span class="comment">// // 将包围盒转换到世界坐标系</span></span><br><span class="line">    <span class="comment">// box3.applyMatrix4(sphereArr[i].matrixWorld)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种方式 更简单</span></span><br><span class="line">    <span class="keyword">let</span> box3 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Box3</span>().<span class="title function_">setFromObject</span>(sphereArr[i]);</span><br><span class="line">    <span class="comment">// 合并包围盒</span></span><br><span class="line">    box.<span class="title function_">union</span>(box3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> box3Helper = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Box3Helper</span>(box, <span class="number">0xff0000</span>);</span><br><span class="line">scene.<span class="title function_">add</span>(box3Helper)</span><br></pre></td></tr></table></figure></li><li><p>边缘几何体和线框几合体</p><img src="../blog/coderyeah/source/_posts/img/image-20230905153442341.png" alt="image-20230905153442341" style="zoom:50%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化draco加载器</span></span><br><span class="line"><span class="keyword">let</span> dracoLoader = <span class="keyword">new</span> <span class="title class_">DRACOLoader</span>();</span><br><span class="line"><span class="comment">// 设置draco路径</span></span><br><span class="line">dracoLoader.<span class="title function_">setDecoderPath</span>(<span class="string">&#x27;./draco/&#x27;</span>)</span><br><span class="line"><span class="comment">// 设置gltf加载器draco解码器</span></span><br><span class="line"><span class="keyword">let</span> gltfLoader = <span class="keyword">new</span> <span class="title class_">GLTFLoader</span>();</span><br><span class="line">gltfLoader.<span class="title function_">setDRACOLoader</span>(dracoLoader)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载城市的glb文件 glb:二进制文件  gltf:json文件</span></span><br><span class="line">gltfLoader.<span class="title function_">load</span>(</span><br><span class="line">    <span class="string">&#x27;./model/city.glb&#x27;</span>,</span><br><span class="line">    <span class="function">(<span class="params">gltf</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// scene.add(gltf.scene) //No DRACOLoader instance provided 因为是压缩文件 需要Draco解压</span></span><br><span class="line">        <span class="comment">// 遍历所有3d物体</span></span><br><span class="line">        gltf.<span class="property">scene</span>.<span class="title function_">traverse</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (child.<span class="property">isMesh</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> geometry = child.<span class="property">geometry</span>;</span><br><span class="line">                <span class="comment">// 线框材质</span></span><br><span class="line">                <span class="keyword">let</span> edgesMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">LineBasicMaterial</span>(&#123;</span><br><span class="line">                    <span class="attr">color</span>: <span class="number">0xffffff</span></span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">// 线框geometry</span></span><br><span class="line">                <span class="keyword">let</span> edgesGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WireframeGeometry</span>(geometry);</span><br><span class="line">                <span class="comment">// 创建线段</span></span><br><span class="line">                <span class="keyword">let</span> edges = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">LineSegments</span>(edgesGeometry, edgesMaterial);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 更新建筑物世界转换矩阵</span></span><br><span class="line">                child.<span class="title function_">updateWorldMatrix</span>(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">                edges.<span class="property">matrix</span>.<span class="title function_">copy</span>(child.<span class="property">matrixWorld</span>)</span><br><span class="line">                edges.<span class="property">matrix</span>.<span class="title function_">decompose</span>(edges.<span class="property">position</span>, edges.<span class="property">quaternion</span>, edges.<span class="property">scale</span>)</span><br><span class="line">                <span class="comment">// 添加到场景</span></span><br><span class="line">                scene.<span class="title function_">add</span>(edges)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-材质与纹理">三.材质与纹理</h3><ol><li><p>MatCap材质</p><p>MeshMatcapMaterial 由一个材质捕捉（MatCap，或光照球（Lit Sphere））纹理所定义，其编码了材质的颜色与明暗。</p><p>由于mapcap图像文件编码了烘焙过的光照，因此MeshMatcapMaterial 不对灯光作出反应。 它将会投射阴影到一个接受阴影的物体上(and shadow clipping works)，但不会产生自身阴影或是接受阴影。</p><img src="../blog/coderyeah/source/_posts/img/image-20230908150601068.png" alt="image-20230908150601068" style="zoom:50%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建渲染器</span></span><br><span class="line"><span class="keyword">let</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123;</span><br><span class="line">    <span class="comment">// 开启抗锯齿</span></span><br><span class="line">    <span class="attr">antialias</span>:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">gltfLoader.<span class="title function_">load</span>(</span><br><span class="line">    <span class="string">&#x27;./model/Duck.glb&#x27;</span>,</span><br><span class="line">    <span class="function">(<span class="params">gltf</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(gltf)</span><br><span class="line">        scene.<span class="title function_">add</span>(gltf.<span class="property">scene</span>) <span class="comment">//No DRACOLoader instance provided 因为是压缩文件 需要Draco解压</span></span><br><span class="line">        <span class="comment">// 获取3D物体</span></span><br><span class="line">        <span class="keyword">let</span> duckMesh = gltf.<span class="property">scene</span>.<span class="title function_">getObjectByName</span>(<span class="string">&#x27;LOD3spShape&#x27;</span>);</span><br><span class="line">        <span class="comment">// 加载贴图</span></span><br><span class="line">        <span class="keyword">let</span> matCapTexture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>()</span><br><span class="line">            .<span class="title function_">load</span>(<span class="string">&#x27;./texture/matcaps/50332C_D98D79_955F52_AA7C6C-512px.png&#x27;</span>);</span><br><span class="line">        <span class="comment">// 获取材质</span></span><br><span class="line">        <span class="keyword">let</span> preMaterial = duckMesh.<span class="property">material</span>;</span><br><span class="line">        duckMesh.<span class="property">material</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshMatcapMaterial</span>(&#123;</span><br><span class="line">            <span class="attr">matcap</span>: matCapTexture,</span><br><span class="line">            <span class="attr">map</span>: preMaterial.<span class="property">map</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li><li><p>Lambert材质-模拟粗超表面</p><img src="../blog/coderyeah/source/_posts/img/image-20230912152758058.png" alt="image-20230912152758058" style="zoom:50%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载环境贴图</span></span><br><span class="line"><span class="keyword">let</span> rgbeLoader = <span class="keyword">new</span> <span class="title class_">RGBELoader</span>();</span><br><span class="line">rgbeLoader.<span class="title function_">load</span>(<span class="string">&quot;./texture/Alex_Hart-Nature_Lab_Bones_2k.hdr&quot;</span>, (<span class="function"><span class="params">envMap</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置球形贴图</span></span><br><span class="line">    envMap.<span class="property">mapping</span> = <span class="variable constant_">THREE</span>.<span class="property">EquirectangularReflectionMapping</span></span><br><span class="line">    <span class="comment">// 设置环境贴图</span></span><br><span class="line">    scene.<span class="property">background</span> = envMap</span><br><span class="line">    <span class="comment">//设置环境贴图-整个场景</span></span><br><span class="line">    scene.<span class="property">environment</span> = envMap</span><br><span class="line">    <span class="comment">// 反光</span></span><br><span class="line">    phongMaterial.<span class="property">envMap</span> = envMap</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加环境光</span></span><br><span class="line"><span class="keyword">let</span> ambientLight = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AmbientLightProbe</span>(<span class="number">0xffffff</span>, <span class="number">0.3</span>);</span><br><span class="line">scene.<span class="title function_">add</span>(ambientLight)</span><br><span class="line"><span class="comment">// 添加点光源</span></span><br><span class="line"><span class="keyword">let</span> pointLight = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PointLight</span>(<span class="number">0xffffff</span>, <span class="number">1</span>);</span><br><span class="line">pointLight.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line">scene.<span class="title function_">add</span>(pointLight);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加纹理</span></span><br><span class="line"><span class="keyword">let</span> textureLoader = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>();</span><br><span class="line"><span class="keyword">let</span> colorTexture = textureLoader.<span class="title function_">load</span>(<span class="string">&#x27;./texture/watercover/CityNewYork002_COL_VAR1_1K.png&#x27;</span>);</span><br><span class="line">colorTexture.<span class="property">colorSpace</span> = <span class="variable constant_">THREE</span>.<span class="property">SRGBColorSpace</span></span><br><span class="line"><span class="comment">// 高光贴图</span></span><br><span class="line"><span class="keyword">let</span> specularTexture = textureLoader.<span class="title function_">load</span>(<span class="string">&#x27;./texture/watercover/CityNewYork002_GLOSS_1K.jpg&#x27;</span>);</span><br><span class="line"><span class="comment">// 法线贴图</span></span><br><span class="line"><span class="keyword">let</span> normalTexture = textureLoader.<span class="title function_">load</span>(<span class="string">&#x27;./texture/watercover/CityNewYork002_NRM_1K.jpg&#x27;</span>);</span><br><span class="line"><span class="comment">// 凹凸贴图</span></span><br><span class="line"><span class="keyword">let</span> dumpTexture = textureLoader.<span class="title function_">load</span>(<span class="string">&#x27;./texture/watercover/CityNewYork002_DISP_1K.jpg&#x27;</span>);</span><br><span class="line"><span class="comment">// 环境光遮蔽贴图</span></span><br><span class="line"><span class="keyword">let</span> aoTexture = textureLoader.<span class="title function_">load</span>(<span class="string">&#x27;./texture/watercover/CityNewYork002_AO_1K.jpg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建平面</span></span><br><span class="line"><span class="keyword">let</span> planeGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PlaneGeometry</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"><span class="comment">// let phongMaterial = new THREE.MeshPhongMaterial(&#123;</span></span><br><span class="line"><span class="comment">//     map: colorTexture,</span></span><br><span class="line"><span class="comment">//     transparent: true,</span></span><br><span class="line"><span class="comment">//     // 高光贴图</span></span><br><span class="line"><span class="comment">//     specularMap: specularTexture,</span></span><br><span class="line"><span class="comment">//     // normalMap: normalTexture,</span></span><br><span class="line"><span class="comment">//     bumpMap: dumpTexture,</span></span><br><span class="line"><span class="comment">//     // 置换贴图</span></span><br><span class="line"><span class="comment">//     displacementMap: dumpTexture,</span></span><br><span class="line"><span class="comment">//     // 置换程度</span></span><br><span class="line"><span class="comment">//     displacementScale: 0.02,</span></span><br><span class="line"><span class="comment">//     aoMap: aoTexture</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="keyword">let</span> phongMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshLambertMaterial</span>(&#123;</span><br><span class="line">    <span class="attr">map</span>: colorTexture,</span><br><span class="line">    <span class="attr">transparent</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 高光贴图</span></span><br><span class="line">    <span class="attr">specularMap</span>: specularTexture,</span><br><span class="line">     <span class="attr">normalMap</span>: normalTexture,</span><br><span class="line">    <span class="attr">bumpMap</span>: dumpTexture,</span><br><span class="line">    <span class="comment">// 置换贴图</span></span><br><span class="line">    <span class="attr">displacementMap</span>: dumpTexture,</span><br><span class="line">    <span class="comment">// 置换程度</span></span><br><span class="line">    <span class="attr">displacementScale</span>: <span class="number">0.02</span>,</span><br><span class="line">    <span class="attr">aoMap</span>: aoTexture</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> plane = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(planeGeometry, phongMaterial);</span><br><span class="line"><span class="comment">// 旋转90度</span></span><br><span class="line">plane.<span class="property">rotation</span>.<span class="property">x</span> = -<span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">0.5</span></span><br><span class="line">scene.<span class="title function_">add</span>(plane);</span><br></pre></td></tr></table></figure></li><li><p><code>PhongMaterial</code>用于表面光滑，模拟水晶鸭子</p><img src="../blog/coderyeah/source/_posts/img/image-20230912154913497.png" alt="image-20230912154913497" style="zoom:50%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化draco加载器</span></span><br><span class="line"><span class="keyword">let</span> dracoLoader = <span class="keyword">new</span> <span class="title class_">DRACOLoader</span>();</span><br><span class="line"><span class="comment">// 设置draco路径</span></span><br><span class="line">dracoLoader.<span class="title function_">setDecoderPath</span>(<span class="string">&#x27;./draco/&#x27;</span>)</span><br><span class="line"><span class="comment">// 设置gltf加载器draco解码器</span></span><br><span class="line"><span class="keyword">let</span> gltfLoader = <span class="keyword">new</span> <span class="title class_">GLTFLoader</span>();</span><br><span class="line">gltfLoader.<span class="title function_">setDRACOLoader</span>(dracoLoader)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载环境贴图</span></span><br><span class="line"><span class="keyword">let</span> rgbeLoader = <span class="keyword">new</span> <span class="title class_">RGBELoader</span>();</span><br><span class="line">rgbeLoader.<span class="title function_">load</span>(<span class="string">&quot;./texture/Alex_Hart-Nature_Lab_Bones_2k.hdr&quot;</span>, (<span class="function"><span class="params">envMap</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置球形贴图</span></span><br><span class="line">   <span class="comment">// envMap.mapping = THREE.EquirectangularReflectionMapping</span></span><br><span class="line">    envMap.<span class="property">mapping</span> = <span class="variable constant_">THREE</span>.<span class="property">EquirectangularRefractionMapping</span></span><br><span class="line">    <span class="comment">// 设置环境贴图</span></span><br><span class="line">    scene.<span class="property">background</span> = envMap</span><br><span class="line">    <span class="comment">//设置环境贴图-整个场景</span></span><br><span class="line">    scene.<span class="property">environment</span> = envMap</span><br><span class="line">    <span class="comment">// 加载城市的glb文件 glb:二进制文件  gltf:json文件</span></span><br><span class="line">    gltfLoader.<span class="title function_">load</span>(</span><br><span class="line">        <span class="string">&#x27;./model/Duck.glb&#x27;</span>,</span><br><span class="line">        <span class="function">(<span class="params">gltf</span>) =&gt;</span> &#123;</span><br><span class="line">            scene.<span class="title function_">add</span>(gltf.<span class="property">scene</span>) <span class="comment">//No DRACOLoader instance provided 因为是压缩文件 需要Draco解压</span></span><br><span class="line">            <span class="comment">// 添加环境光</span></span><br><span class="line">            <span class="keyword">let</span> ambientLight = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AmbientLight</span>(<span class="number">0xffffff</span>,<span class="number">1</span>);</span><br><span class="line">            scene.<span class="title function_">add</span>(ambientLight);</span><br><span class="line">            <span class="keyword">let</span> duckMesh = gltf.<span class="property">scene</span>.<span class="title function_">getObjectByName</span>(<span class="string">&#x27;LOD3spShape&#x27;</span>);</span><br><span class="line">            <span class="keyword">let</span> preMaterial = duckMesh.<span class="property">material</span>;</span><br><span class="line">            duckMesh.<span class="property">material</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshPhongMaterial</span>(&#123;</span><br><span class="line">                <span class="attr">color</span>: <span class="number">0xffffff</span>,</span><br><span class="line">                <span class="attr">map</span>: preMaterial.<span class="property">map</span>,</span><br><span class="line">                <span class="attr">refractionRatio</span>: <span class="number">0.7</span>, <span class="comment">// 折射率</span></span><br><span class="line">                <span class="attr">reflectivity</span>: <span class="number">0.99</span>, <span class="comment">// 反射强度 0-1</span></span><br><span class="line">                <span class="attr">envMap</span>: envMap</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li><li><p>标准网格材质-模拟真实物理光照效果</p><p><img src="../blog/coderyeah/source/_posts/img/image-20230912170202299.png" alt="image-20230912170202299"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化draco加载器</span></span><br><span class="line"><span class="keyword">let</span> dracoLoader = <span class="keyword">new</span> <span class="title class_">DRACOLoader</span>();</span><br><span class="line"><span class="comment">// 设置draco路径</span></span><br><span class="line">dracoLoader.<span class="title function_">setDecoderPath</span>(<span class="string">&#x27;./draco/&#x27;</span>)</span><br><span class="line"><span class="comment">// 设置gltf加载器draco解码器</span></span><br><span class="line"><span class="keyword">let</span> gltfLoader = <span class="keyword">new</span> <span class="title class_">GLTFLoader</span>();</span><br><span class="line">gltfLoader.<span class="title function_">setDRACOLoader</span>(dracoLoader)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> params = &#123;</span><br><span class="line">    <span class="attr">aoMap</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加载环境贴图</span></span><br><span class="line"><span class="keyword">let</span> rgbeLoader = <span class="keyword">new</span> <span class="title class_">RGBELoader</span>();</span><br><span class="line">rgbeLoader.<span class="title function_">load</span>(<span class="string">&quot;./texture/Alex_Hart-Nature_Lab_Bones_2k.hdr&quot;</span>, (<span class="function"><span class="params">envMap</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置球形贴图</span></span><br><span class="line">    <span class="comment">// envMap.mapping = THREE.EquirectangularReflectionMapping</span></span><br><span class="line">    envMap.<span class="property">mapping</span> = <span class="variable constant_">THREE</span>.<span class="property">EquirectangularRefractionMapping</span></span><br><span class="line">    <span class="comment">// 设置环境贴图</span></span><br><span class="line">    scene.<span class="property">background</span> = envMap</span><br><span class="line">    <span class="comment">//设置环境贴图-整个场景</span></span><br><span class="line">    scene.<span class="property">environment</span> = envMap</span><br><span class="line">    <span class="comment">// 加载城市的glb文件 glb:二进制文件  gltf:json文件</span></span><br><span class="line">    gltfLoader.<span class="title function_">load</span>(</span><br><span class="line">        <span class="string">&#x27;./model/sword/sword.gltf&#x27;</span>,</span><br><span class="line">        <span class="function">(<span class="params">gltf</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 添加环境光</span></span><br><span class="line">            <span class="keyword">let</span> ambientLight = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AmbientLight</span>(<span class="number">0xffffff</span>, <span class="number">1</span>);</span><br><span class="line">            scene.<span class="title function_">add</span>(ambientLight);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(gltf);</span><br><span class="line">            scene.<span class="title function_">add</span>(gltf.<span class="property">scene</span>) <span class="comment">//No DRACOLoader instance provided 因为是压缩文件 需要Draco解压</span></span><br><span class="line">            <span class="keyword">let</span> mesh = gltf.<span class="property">scene</span>.<span class="title function_">getObjectByName</span>(<span class="string">&#x27;Pommeau_Plane001&#x27;</span>);</span><br><span class="line">            <span class="keyword">let</span> aopMap = mesh.<span class="property">material</span>.<span class="property">aoMap</span></span><br><span class="line">            gui.<span class="title function_">add</span>(params, <span class="string">&#x27;aoMap&#x27;</span>).<span class="title function_">onChange</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">                mesh.<span class="property">material</span>.<span class="property">aoMap</span> = value ? aopMap : <span class="literal">null</span></span><br><span class="line">                mesh.<span class="property">material</span>.<span class="property">needsUpdate</span> = <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>物理网格材质</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue的拦截器和第三方微信登录的使用总结</title>
      <link href="/posts/6f596ec6.html"/>
      <url>/posts/6f596ec6.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-axios拦截器">一. axios拦截器</h3><h4 id="1-axios携带token">1. axios携带token</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//======================axios的前置拦截器【拦截调用后端的请求====================//</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(token)&#123;</span><br><span class="line">    res.<span class="property">headers</span>[<span class="string">&quot;token&quot;</span>] = token;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//======================axios的前置拦截器【拦截调用后端的请求】====================//</span></span><br></pre></td></tr></table></figure><h4 id="2-后端拦截器">2. 后端拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//3.如果有token，通过token获取redis的登录信息</span></span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">loginInfo</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(Constants.LOGIN_TOKEN + token); <span class="comment">// LoginInfo对象</span></span><br><span class="line">            <span class="keyword">if</span> (loginInfo != <span class="literal">null</span>) &#123;<span class="comment">//登录成功，而且没有过期</span></span><br><span class="line">                <span class="comment">//5.如果登录信息不为null - 放行 + 刷新过期时间[重新添加到redis]</span></span><br><span class="line">                stringRedisTemplate.opsForValue().set(token, loginInfo, <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.判断token，如果为null - 直接拦截 响应前端 - 跳转到登录页面</span></span><br><span class="line">        <span class="comment">//4.如果登录信息为null - 过期了 直接拦截 响应前端 - 跳转到登录页面</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//跳转到登录页面 - 后端跳不了，因为后端项目没有页面 - 放在前端跳转</span></span><br><span class="line">        <span class="comment">//告诉浏览器我要给你响应一个json数据，编码集为utf-8</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;noLogin\&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="3-处理拦截器响应">3. 处理拦截器响应</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="comment">//======================axios的后置拦截器【处理后台登录拦截的结果】====================//</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//后端响应的是没有登录的信息</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span> === res.<span class="property">data</span>.<span class="property">success</span> &amp;&amp; <span class="string">&quot;noLogin&quot;</span> === res.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;logininfo&quot;</span>);</span><br><span class="line">    router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//======================axios的后置拦截器【处理后台登录拦截的结果】====================//</span></span><br></pre></td></tr></table></figure><h4 id="4-路由拦截器">4. 路由拦截器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//======================路由的前端拦截器【拦截不到后端的请求】====================//</span></span><br><span class="line"><span class="comment">//注释掉登陆拦截：判断session中有没有user对象并且路径不是login就调转到登录页面</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (to.<span class="property">path</span> == <span class="string">&#x27;/login&#x27;</span> || to.<span class="property">path</span> == <span class="string">&quot;/register&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">next</span>();<span class="comment">//放行</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> logininfo = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;logininfo&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (logininfo) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(&#123;<span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>&#125;);<span class="comment">//跳转到login</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-前端登录代码">5. 前端登录代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleSubmit2</span>(<span class="params">ev</span>) &#123;</span><br><span class="line">  <span class="comment">//表单校验：所有表单项校验成功才返回为true - 才能发送请求</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ruleForm2</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">logining</span> = <span class="literal">true</span>; <span class="comment">//显示加载框或忙等框</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&quot;/login/account&quot;</span>, <span class="variable language_">this</span>.<span class="property">ruleForm2</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">success</span>) &#123;<span class="comment">//登录成功</span></span><br><span class="line">          <span class="comment">//1.显示成功信息</span></span><br><span class="line">          <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;登录成功&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">let</span> &#123;token, loginInfo&#125; = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>, token)</span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;logininfo&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(logininfo))</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">          <span class="comment">//跳转到后台首页</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>: <span class="string">&#x27;/echarts&#x27;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//登录失败</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">logining</span> = <span class="literal">false</span>; <span class="comment">//关闭加载框或忙等框</span></span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;系统繁忙，请稍后重试!!!【400,404】&quot;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">logining</span> = <span class="literal">false</span>; <span class="comment">//关闭加载框或忙等框</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;表单校验失败!!!&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-第三方登录概述">二. 第三方登录概述</h3><h4 id="1-什么是第三方登录">1. 什么是第三方登录</h4><p>三方登录指的是基于用户在主流平台【微信，支付宝，QQ】上已有的账号来快速完成己方应用的登录或者注册的功能。而这里的主流平台，一般是已经拥有大量用户的平台，国外的比如Facebook，Twitter等，国内的比如微博、微信、QQ等。 第三方登录的目的是使用用户在其他平台上频繁使用的账号，来快速登内录己方产品，也可以实现不注册就能登录，好处就是登录比较快捷，无需注册。</p><h4 id="2-优缺点">2. 优缺点</h4><ul><li><p>优点：这些系统有很大的用户群体，可以扩大客户群，引流。不需要记录账号密码，不担心忘记，直接扫描登录，体验度高。简单快捷，无需注册就可以直接登录</p></li><li><p>缺点：要交钱【网站运营商向微信运营商缴费】</p></li></ul><h3 id="三-三方登录协议">三. 三方登录协议</h3><h4 id="1-OAuth2-0">1. OAuth2.0</h4><p>OAuth协议为用户资源的授权提供了一个安全的、开放而又简易的标准。与以往的授权方式不同之处是OAUTH的授权不会使第三方触及到用户的帐号信息（如用户名与密码），即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权，因此OAuth是安全的。OAuth是Open Authorization的简写，目前的版本是2.0版.</p><p><a href="https://oauth.net/2/">https://oauth.net/2/</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：使用微信登录，并不会获取到微信的账号密码，只需要同意授权即可。如果我们的项目被攻破了，那就知道了用户的微信账号，然后用户的微信就危险了。小平台或小公司的系统很容易被攻击甚至被攻破</span><br></pre></td></tr></table></figure><h4 id="2-运行流程">2. 运行流程</h4><ol><li>获取用户授权</li><li>得到用户授权获取令牌</li><li>使用令牌访问受限资源</li></ol><p>（A）用户打开客户端以后，客户端要求用户给予授权。</p><p>（B）用户同意给予客户端授权。</p><p>（C）客户端使用上一步获得的授权，向认证服务器申请令牌。</p><p>（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。</p><p>（E）客户端使用令牌，向资源服务器申请获取资源。</p><p>（F）资源服务器确认令牌无误，同意向客户端开放资源。</p><p>上述六个步骤中，B是关键，即用户怎样才能给客户端授权。有了这个授权以后，客户端就可以获取令牌，进而凭借令牌获取资源</p><h3 id="四-微信登录概述">四. 微信登录概述</h3><ol><li>开发网址：<a href="https://open.weixin.qq.com/">https://open.weixin.qq.com/</a></li><li>自己的网站可以接入网站应用开发，为用户提供了微信登录功能，降低了注册门槛，并可在用户授权后，获取用户基本信息，包括头像、昵称、性别、地区。出于安全考虑，网站应用的微信登录，需通过微信扫描二维码来实现</li><li>注册账号：要想接入微信的登录功能，首先需要在微信开发平台进行用户的注册，同时需要认证为开发者，再<strong>创建网站应用</strong>，等待微信审批，审批过后，就可以使用相关功能</li><li>开发者认证：认证一次300人民币。 以后要做第三方登录</li><li>微信登陆功能官网教程网址：<a href="https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html">https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html</a></li></ol><h3 id="五-微信登录实现">五. 微信登录实现</h3><h4 id="1-三个请求">1. 三个请求</h4><ul><li>微信登录一共发送三个请求：<ol><li>授权请求 - a标签链接过去就OK，<strong>获取code</strong></li><li>使用<strong>授权码code</strong>和<strong>appid</strong>和SECRET获取令牌token，返回<strong>token</strong>和<strong>openid</strong> - 后端使用<strong>Httpclient</strong>发送请求</li><li>如果微信用户没有绑定三方程序user，需要发送请求获取微信用户信息：<strong>token</strong>和<strong>openid</strong></li></ol></li></ul><h4 id="2-配置回调域名">2. 配置回调域名</h4><p><strong>问：当扫码成功之后要跳转到哪个页面呢？</strong><br>即使你在当前项目中定义一个页面，外网微信开发平台无法访问本地应用127.0.0.1</p><p>如果上线了：配置真实域名，但是测试阶段使用本地域名</p><h4 id="3-配置本地域名（注：域名换成自己购买的域名）">3. 配置本地域名（注：域名换成自己购买的域名）</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文件位置：C:\Windows\System32\drivers\etc\hosts</span><br><span class="line">Host文件配置：<span class="number">127.0</span>.<span class="number">0.1</span> bugtracker<span class="selector-class">.itsource</span><span class="selector-class">.cn</span></span><br><span class="line">注意：bugtracker<span class="selector-class">.itsource</span>.cn是真实有效的</span><br></pre></td></tr></table></figure><h3 id="六-微信授权流程">六. 微信授权流程</h3><p>1.用户点击微信登录，发送第一个请求，弹出二维码，请求地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/qrconnect?appid=wxd853562a0548a7d0&amp;redirect_uri=http://bugtracker.itsource.cn/callback.html&amp;response_type=code&amp;scope=snsapi_login&amp;state=1#wechat_redirect </span><br></pre></td></tr></table></figure><p>​2.用户使用手机扫码之后，点击同意授权，返回回调地址和code<br>​回调地址：上一步<strong>redirect_uri</strong>设置的地址，该地址必须是一个可以访问的域名地址，localhost不行。<br>​可以使用bugtracker.itsource.cn做测试<br>​<strong>code</strong>：授权码<br>​3.配置回调域名：hosts文件<br>​准备<strong>callback.html</strong>回调页面，一个空页面，仅仅用来处理数据，并发送微信登录请求<br>​注意：前端拦截器已经拦截了callback.html，而且bugtracker.itsource.cn域名要访问后端服务器要配置跨域</p><p><strong>callback.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>回调<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入vue + axios--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/plugins/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/plugins/axios/dist/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--全局使用axios--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/common.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#myDiv&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//解析参数对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//http://bugtracker.itsource.cn/callback.html?code=031QtAll2kBeA64RzJol2gpcaW3QtAlk&amp;state=1</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> url = location.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(url)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> paramObj = <span class="title function_">parseUrlParams2Obj</span>(url);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取发送请求参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> params = &#123;<span class="string">&quot;code&quot;</span>: paramObj.<span class="property">code</span>&#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> code = paramObj.<span class="property">code</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//发起微信登录请求  调用微信登录接口</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&quot;/login/wechat/&quot;</span> + code)</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    result = result.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (result.<span class="property">success</span>) &#123; <span class="comment">//已经关联了 免密登录之后，需要调到主页</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//做登录</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//提示</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;登录成功！&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//1.保存返回的token，logininfo到localStorage</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">let</span> &#123;token, loginInfo&#125; = result.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>, token);</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;loginInfo&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(loginInfo));</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//2.跳转到首页，显示当前登录人</span></span></span><br><span class="line"><span class="language-javascript">                        location.<span class="property">href</span> = <span class="string">&quot;index.html&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">//没有关联跳转绑定页面   &quot;?accessToken=&quot;+accessToken+&quot;&amp;openId=&quot;+openId;</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">let</span> binderUrl = <span class="string">&quot;http://bugtracker.itsource.cn/binder.html&quot;</span> + <span class="string">&quot;?accessToken=&quot;</span> + result.<span class="property">data</span>.<span class="property">accessToken</span> + <span class="string">&quot;&amp;openId=&quot;</span> + result.<span class="property">data</span>.<span class="property">openId</span>;</span></span><br><span class="line"><span class="language-javascript">                        location.<span class="property">href</span> = binderUrl;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">catch</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;系统错误&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>common.js的全局配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios基础路径</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:8080&#x27;</span>;</span><br><span class="line"><span class="comment">// axios的全局属性</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = axios</span><br><span class="line"></span><br><span class="line"><span class="comment">//======================axios的前置拦截器【拦截调用后端的请求====================//</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        res.<span class="property">headers</span>[<span class="string">&quot;token&quot;</span>] = token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//======================axios的前置拦截器【拦截调用后端的请求】====================//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//======================axios的后置拦截器【处理后台登录拦截的结果】====================//</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//后端响应的是没有登录的信息</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === res.<span class="property">data</span>.<span class="property">success</span> &amp;&amp; <span class="string">&quot;noLogin&quot;</span> === res.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;loginInfo&quot;</span>);</span><br><span class="line">        location.<span class="property">href</span> = <span class="string">&#x27;login.html&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//======================axios的后置拦截器【处理后台登录拦截的结果】====================//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//======================路由的前端拦截器【拦截不到后端的请求】====================//</span></span><br><span class="line"><span class="keyword">let</span> url = location.<span class="property">href</span>;<span class="comment">//获取地址栏请求地址</span></span><br><span class="line"><span class="comment">// alert(url)</span></span><br><span class="line"><span class="comment">// 访问的不是login.html和register.html</span></span><br><span class="line"><span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&#x27;login.html&#x27;</span>) == -<span class="number">1</span> &amp;&amp; url.<span class="title function_">indexOf</span>(<span class="string">&#x27;register.html&#x27;</span>) == -<span class="number">1</span></span><br><span class="line">    &amp;&amp; url.<span class="title function_">indexOf</span>(<span class="string">&#x27;binder.html&#x27;</span>) == -<span class="number">1</span> &amp;&amp; url.<span class="title function_">indexOf</span>(<span class="string">&#x27;callback.html&#x27;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> logininfo = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;loginInfo&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!logininfo) &#123;<span class="comment">//没有登录</span></span><br><span class="line">        location.<span class="property">href</span> = <span class="string">&#x27;login.html&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装公用方法 - 将字符串的参数解析为json对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseUrlParams2Obj</span>(<span class="params">url</span>) &#123;<span class="comment">//xxx?code=xxx&amp;state=1</span></span><br><span class="line">    <span class="keyword">let</span> paramStr = url.<span class="title function_">substring</span>(url.<span class="title function_">indexOf</span>(<span class="string">&quot;?&quot;</span>) + <span class="number">1</span>);<span class="comment">//code=xxx&amp;state=1</span></span><br><span class="line">    <span class="keyword">let</span> paramArr = paramStr.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);<span class="comment">//[code=xxx,state=1]</span></span><br><span class="line">    <span class="keyword">let</span> paramObj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; paramArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> paramTemp = paramArr[i];<span class="comment">//code=xxx</span></span><br><span class="line">        <span class="keyword">let</span> paramName = paramTemp.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">0</span>];<span class="comment">//code</span></span><br><span class="line">        <span class="keyword">let</span> paramValue = paramTemp.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>];<span class="comment">//xxx</span></span><br><span class="line">        paramObj[paramName] = paramValue;<span class="comment">//&#123;code:xxx,state:1&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paramObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七-微信登录流程">七.  微信登录流程</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>在callback.html页面中解析地址栏中的code，并发送微信异步登录请求，传递code</span><br><span class="line"><span class="number">2.</span>后端处理微信登录请求，service业务中</span><br><span class="line">  <span class="number">2.1</span>.获得授权码code，和appid，SECRET一起发送获取access_token的请求</span><br><span class="line">请求地址<span class="number">2</span>：https:<span class="comment">//api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</span></span><br><span class="line">  <span class="number">2.2</span>：建议配置常量比较方便些，也比较好维护</span><br><span class="line">  <span class="number">2.3</span>：返回值是一个json字符串【参考官网】，想办法将其转成json对象，才能获取里面的数据【fastJsoon】</span><br><span class="line">&#123; </span><br><span class="line"><span class="string">&quot;access_token&quot;</span>:<span class="string">&quot;ACCESS_TOKEN&quot;</span>, </span><br><span class="line"><span class="string">&quot;expires_in&quot;</span>:<span class="number">7200</span>, </span><br><span class="line"><span class="string">&quot;refresh_token&quot;</span>:<span class="string">&quot;REFRESH_TOKEN&quot;</span>,</span><br><span class="line"><span class="string">&quot;openid&quot;</span>:<span class="string">&quot;OPENID&quot;</span>, </span><br><span class="line"><span class="string">&quot;scope&quot;</span>:<span class="string">&quot;SCOPE&quot;</span>,</span><br><span class="line"><span class="string">&quot;unionid&quot;</span>: <span class="string">&quot;o6_bmasdasdsad6_2sgVt7hMZOPfL&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3.</span>根据openid去查询微信用户信息</span><br><span class="line">a.如果有并且和user绑定了【有user_id】,说明绑定过，直接获取Logininfo对象实现免密登录</span><br><span class="line">解释<span class="number">1</span>：如果没有wxuser，说明第一次登录</span><br><span class="line">解释<span class="number">2</span>：如果用户以前登录过，后面注销了user信息，wxuser就关联不上了，获取级联清空了wxuser中的user_id</span><br><span class="line">疑问：为啥要将wxuser与user绑定：以后不管是微信登录还是账号登录都是同一个账户，都是自己的信息</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//登录成功</span></span><br><span class="line">b.如果没有wxuser信息并且也没有和user_id绑定</span><br><span class="line">就通过Result将access_token和openid响应给前端，发送微信用户绑定请求</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//登录失败，第一次登录需要手机验证码</span></span><br><span class="line">请求地址<span class="number">3</span>：https:<span class="comment">//api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID</span></span><br><span class="line">测试：注意，微信只能扫一次，第二次扫的时候accessToken为<span class="literal">null</span></span><br></pre></td></tr></table></figure><h4 id="7-1-微信登录常量">7.1 微信登录常量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//微信登录相关常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WxConstants</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">APPID</span> <span class="operator">=</span> <span class="string">&quot;wxd853562a0548a7d0&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">GET_ACK_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;4a5d5615f93f24bdba2ba8534642dbb6&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">GET_USER_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-微信登录业务代码">7.2 微信登录业务代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">wechatLogin</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        http请求方式: GET</span></span><br><span class="line"><span class="comment">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//发送第二次请求 准备参数</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> WxConstants.GET_ACK_URL.replace(<span class="string">&quot;APPID&quot;</span>, WxConstants.APPID)</span><br><span class="line">                .replace(<span class="string">&quot;SECRET&quot;</span>, WxConstants.SECRET).replace(<span class="string">&quot;CODE&quot;</span>, code);</span><br><span class="line">        <span class="comment">//发送get请求返回json字符串 返回的结果如下</span></span><br><span class="line">        <span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">        &quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,</span></span><br><span class="line"><span class="comment">        &quot;expires_in&quot;:7200,</span></span><br><span class="line"><span class="comment">        &quot;refresh_token&quot;:&quot;REFRESH_TOKEN&quot;,</span></span><br><span class="line"><span class="comment">        &quot;openid&quot;:&quot;OPENID&quot;,</span></span><br><span class="line"><span class="comment">        &quot;scope&quot;:&quot;SCOPE&quot;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> HttpUtil.httpGet(url);</span><br><span class="line">        <span class="comment">//转换json对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.parseObject(jsonStr);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">access_token</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">openid</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;openid&quot;</span>);</span><br><span class="line">        <span class="comment">//通过openid去t_wxuser中查询</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">WxUser</span> <span class="variable">wxUser</span> <span class="operator">=</span> wxUserMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;WxUser&gt;().eq(WxUser::getOpenid, openid));</span><br><span class="line">        <span class="keyword">if</span> (wxUser != <span class="literal">null</span>) &#123;<span class="comment">//微信已经与账号关联 直接跳转不需要密码登录</span></span><br><span class="line">            <span class="comment">//查找user表的关联信息</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(wxUser.getUserId());</span><br><span class="line">            <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//查找登录信息</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">LoginInfo</span> <span class="variable">loginInfo</span> <span class="operator">=</span> loginInfoMapper.selectById(user.getLogininfoId());</span><br><span class="line">                <span class="comment">//生成token</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">                <span class="comment">// 保存信息进入redis</span></span><br><span class="line">                stringRedisTemplate.opsForValue().set(Constants.LOGIN_TOKEN + token, JSON.toJSONString(loginInfo), <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">                <span class="comment">//封装返回登录的信息</span></span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                map.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">                map.put(<span class="string">&quot;loginInfo&quot;</span>, loginInfo);</span><br><span class="line">                <span class="keyword">return</span> Result.success(map);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户未注册&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 跳转微信绑定界面 &quot;?accessToken=&quot;+accessToken+&quot;&amp;openId=&quot;+openId</span></span><br><span class="line">            <span class="comment">//5.没有 - 需要跳转页面绑定 - 响应给前端进行跳转</span></span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;accessToken&quot;</span>, access_token);</span><br><span class="line">            map.put(<span class="string">&quot;openId&quot;</span>, openid);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="八-微信绑定流程">八. 微信绑定流程</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>callback.html发送异步请求的<span class="keyword">else</span>中获取后端响应的access_token和openid</span><br><span class="line"><span class="number">2.</span>将其拼接到binder.html后跳转到binder.html页面</span><br><span class="line">binder.html?accessToken=access_token&amp;openId=openid</span><br><span class="line"><span class="number">3.</span>binder.html页面，输入手机号码，获取验证码</span><br><span class="line"><span class="number">4.</span>后端处理获取验证码请求</span><br><span class="line"><span class="number">5.</span>前端binder.html页面收到验证码之后，填写验证码</span><br><span class="line">  <span class="number">5.1</span>.页面一加载要解析url获取access_token和openid，复制给模型数据</span><br><span class="line">phoneUserForm:&#123;</span><br><span class="line">phone:&quot;13330964748&quot;,</span><br><span class="line">verifyCode:<span class="keyword">null</span>,</span><br><span class="line">accessToken:<span class="keyword">null</span>,</span><br><span class="line">openId:<span class="keyword">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">6.</span>发送绑定微信用户请求</span><br><span class="line"><span class="number">7.</span>后端处理微信用户绑定请求</span><br><span class="line"><span class="number">8.</span>后端处理微信用户绑定请求</span><br><span class="line">  <span class="number">8.1</span>.校验验证码和验证码过期时间</span><br><span class="line">  <span class="number">8.2</span>.发送第三个请求获取wxuser信息</span><br><span class="line">  <span class="number">8.3</span>.将wxuser信息转成WxUser对象：WxUser wxUser = wxUserStr2WxUser(wxUserStr);</span><br><span class="line">  <span class="number">8.4</span>.根据电话从头t_user中获取用户信息，进行判断</span><br><span class="line">  <span class="number">8.5</span>.如过<span class="keyword">user</span>==<span class="keyword">null</span>，通过手机号构建一个<span class="keyword">User</span>对象，密码随机的<span class="number">6</span>位，并同步Logininfo信息,保存到数据库</span><br><span class="line">  <span class="number">8.6</span>.如果<span class="keyword">user</span>!=<span class="keyword">null</span>，直接就用这个<span class="keyword">user</span>对象</span><br><span class="line">  <span class="number">8.7</span>.将wxUser与<span class="keyword">User</span>绑定 = wxUser的user_id关联起来</span><br><span class="line">  <span class="number">8.8</span>.添加用户到t_wxUser</span><br><span class="line">  <span class="number">8.9</span>.免密登录</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-1-发送微信绑定请求">8.1 发送微信绑定请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">binder</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&quot;/login/wechat/binder&quot;</span>, <span class="variable language_">this</span>.<span class="property">phoneUserForm</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">phoneUserForm</span>)</span><br><span class="line">        result = result.<span class="property">data</span>;</span><br><span class="line">        <span class="keyword">if</span> (result.<span class="property">success</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;绑定成功！&quot;</span>)</span><br><span class="line">            <span class="comment">//1.保存返回的token，logininfo到localStorage</span></span><br><span class="line">            <span class="keyword">let</span> &#123;token, loginInfo&#125; = result.<span class="property">data</span>;</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;loginInfo&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(loginInfo));</span><br><span class="line">            location.<span class="property">href</span> = <span class="string">&quot;/index.html&quot;</span>; <span class="comment">//注册成功后跳转登录页面</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(result.<span class="property">msg</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;系统错误！&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="8-2-binder-html页面初始化数据">8.2 binder.html页面初始化数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> paramObj = <span class="title function_">parseUrlParams2Obj</span>(location.<span class="property">href</span>);</span><br><span class="line">    <span class="keyword">if</span> (paramObj) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">phoneUserForm</span>.<span class="property">accessToken</span> = paramObj.<span class="property">accessToken</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">phoneUserForm</span>.<span class="property">openId</span> = paramObj.<span class="property">openId</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-绑定时获取验证码">8.3 绑定时获取验证码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">binderSmsCode</span><span class="params">(PhoneCodeDTO codeDTO)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> codeDTO.getPhone();</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(phone)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;手机号码不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 因为微信扫码登录需要关联手机号码 判断手机号是否已经绑定微信号</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().eq(User::getPhone, phone));</span><br><span class="line">    <span class="comment">// 用户存在</span></span><br><span class="line">    <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">WxUser</span> <span class="variable">wxUser</span> <span class="operator">=</span> wxUserMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;WxUser&gt;().eq(WxUser::getUserId, user.getId()));</span><br><span class="line">        <span class="keyword">if</span> (wxUser != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;手机号已经绑定其它微信账号,请直接登录...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(VerifyCodeConstants.PHONE_CODE + phone);</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;<span class="comment">// 验证码还未过期</span></span><br><span class="line">        <span class="comment">//判断是否过了重发时间</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">oldTime</span> <span class="operator">=</span> Long.parseLong((value.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">if</span> ((System.currentTimeMillis() - oldTime) &lt;= <span class="number">60</span>) &#123;<span class="comment">//间隔时间未超过一分钟</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;操作频繁,请稍后再试!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            code = value.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 生成验证码</span></span><br><span class="line">        code = RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    stringRedisTemplate.opsForValue().set(VerifyCodeConstants.PHONE_CODE + phone, code, <span class="number">3L</span>, TimeUnit.MINUTES);</span><br><span class="line">    log.info(<span class="string">&quot;授权短信验证码:&#123;&#125;&quot;</span>, code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-4-微信绑定业务代码">8.4 微信绑定业务代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">wechatBinder</span><span class="params">(BinderDTO binderDTO)</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> binderDTO.getPhone();</span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">verifyCode</span> <span class="operator">=</span> binderDTO.getVerifyCode();</span><br><span class="line">       <span class="keyword">if</span> (StrUtil.isBlank(phone) || StrUtil.isBlank(verifyCode)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;数据不能为空&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(VerifyCodeConstants.PHONE_CODE + phone);</span><br><span class="line">       <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;验证码已经过期！！！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//判断验证码输入是否正确</span></span><br><span class="line">       <span class="keyword">if</span> (!verifyCode.equals(value.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>])) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;验证码错误！！！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> WxConstants.GET_USER_URL.replace(<span class="string">&quot;ACCESS_TOKEN&quot;</span>, binderDTO.getAccessToken())</span><br><span class="line">               .replace(<span class="string">&quot;OPENID&quot;</span>, binderDTO.getOpenId());</span><br><span class="line">       <span class="comment">// 发送获取微信用户信息请求</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> HttpUtil.httpGet(url);</span><br><span class="line">       <span class="type">WxUser</span> <span class="variable">wxUser</span> <span class="operator">=</span> jsonStr2WxUser(jsonStr);</span><br><span class="line">       <span class="comment">//查询user是否存在</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().eq(User::getPhone, phone));</span><br><span class="line">       <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//用户不存在就注册</span></span><br><span class="line">           user = phone2User(phone);</span><br><span class="line">           <span class="comment">// 新增登录对象</span></span><br><span class="line">           <span class="type">LoginInfo</span> <span class="variable">loginInfo</span> <span class="operator">=</span> user2LoginInfo(user);</span><br><span class="line">           loginInfoMapper.insert(loginInfo);</span><br><span class="line">           user.setLogininfoId(loginInfo.getId());</span><br><span class="line">           userMapper.insert(user);</span><br><span class="line">       &#125;</span><br><span class="line">       wxUser.setUserId(user.getId());</span><br><span class="line">       wxUserMapper.insert(wxUser);</span><br><span class="line">       <span class="comment">// 免密登录</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">LoginInfo</span> <span class="variable">loginInfo</span> <span class="operator">=</span> loginInfoMapper.selectById(user.getLogininfoId());</span><br><span class="line">       loginInfo.setPassword(<span class="literal">null</span>);</span><br><span class="line">       loginInfo.setSalt(<span class="literal">null</span>);</span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">       <span class="comment">// 存入redis</span></span><br><span class="line">       stringRedisTemplate.opsForValue().set(Constants.LOGIN_TOKEN + token, JSON.toJSONString(loginInfo), <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">       <span class="keyword">final</span> HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">       map.put(<span class="string">&quot;loginInfo&quot;</span>, loginInfo);</span><br><span class="line">       <span class="keyword">return</span> Result.success(map);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> LoginInfo <span class="title function_">user2LoginInfo</span><span class="params">(User user)</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">LoginInfo</span> <span class="variable">loginInfo</span> <span class="operator">=</span> BeanUtil.copyProperties(user, LoginInfo.class);</span><br><span class="line">       loginInfo.setDisable(<span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> loginInfo;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> User <span class="title function_">phone2User</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setPhone(phone);</span><br><span class="line">       user.setUsername(phone);</span><br><span class="line">       user.setState(<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> RandomUtil.randomString(<span class="number">32</span>);<span class="comment">//盐值</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);<span class="comment">//随机密码</span></span><br><span class="line">       user.setSalt(salt);</span><br><span class="line">       user.setPassword(DigestUtil.md5Hex(salt + pwd));<span class="comment">//密码</span></span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> WxUser <span class="title function_">jsonStr2WxUser</span><span class="params">(String jsonStr)</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">JSONObject</span> <span class="variable">res</span> <span class="operator">=</span> JSON.parseObject(jsonStr);</span><br><span class="line">       <span class="keyword">final</span> <span class="type">WxUser</span> <span class="variable">wxUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WxUser</span>();</span><br><span class="line">       wxUser.setNickname(res.getString(<span class="string">&quot;nickname&quot;</span>));</span><br><span class="line">       wxUser.setSex(res.getInteger(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line">       wxUser.setOpenid(res.getString(<span class="string">&quot;openid&quot;</span>));</span><br><span class="line">       wxUser.setHeadimgurl(res.getString(<span class="string">&quot;headimgurl&quot;</span>));</span><br><span class="line">       wxUser.setUnionid(res.getString(<span class="string">&quot;unionid&quot;</span>));</span><br><span class="line">       wxUser.setAddress(res.getString(<span class="string">&quot;country&quot;</span>) + res.getString(<span class="string">&quot;province&quot;</span>) + res.getString(<span class="string">&quot;city&quot;</span>));</span><br><span class="line">       log.info(<span class="string">&quot;nickname:&#123;&#125;&quot;</span>, res.getString(<span class="string">&quot;nickname&quot;</span>));</span><br><span class="line">       log.info(<span class="string">&quot;city:&#123;&#125;&quot;</span>, res.getString(<span class="string">&quot;city&quot;</span>));</span><br><span class="line">       log.info(<span class="string">&quot;province:&#123;&#125;&quot;</span>, res.getString(<span class="string">&quot;province&quot;</span>));</span><br><span class="line">       log.info(<span class="string">&quot;headimgurl:&#123;&#125;&quot;</span>, res.getString(<span class="string">&quot;headimgurl&quot;</span>));</span><br><span class="line">       <span class="keyword">return</span> wxUser;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="九-后端发送Http请求工具类">九. 后端发送Http请求工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.methods.GetMethod;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.params.HttpMethodParams;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * http 工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">post</span><span class="params">(String requestUrl, String accessToken, String params)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> HttpUtil.post(requestUrl, accessToken, contentType, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">post</span><span class="params">(String requestUrl, String accessToken, String contentType, String params)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoding</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (requestUrl.contains(<span class="string">&quot;nlp&quot;</span>)) &#123;</span><br><span class="line">            encoding = <span class="string">&quot;GBK&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> HttpUtil.post(requestUrl, accessToken, contentType, params, encoding);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">post</span><span class="params">(String requestUrl, String accessToken, String contentType, String params, String encoding)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> requestUrl + <span class="string">&quot;?access_token=&quot;</span> + accessToken;</span><br><span class="line">        <span class="keyword">return</span> HttpUtil.postGeneralUrl(url, contentType, params, encoding);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">postGeneralUrl</span><span class="params">(String generalUrl, String contentType, String params, String encoding)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(generalUrl);</span><br><span class="line">        <span class="comment">// 打开和URL之间的连接</span></span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">        connection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置通用的请求属性</span></span><br><span class="line">        connection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, contentType);</span><br><span class="line">        connection.setRequestProperty(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">        connection.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">        connection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">        connection.setDoInput(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到请求的输出流对象</span></span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(connection.getOutputStream());</span><br><span class="line">        out.write(params.getBytes(encoding));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立实际的连接</span></span><br><span class="line">        connection.connect();</span><br><span class="line">        <span class="comment">// 获取所有响应头字段</span></span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; headers = connection.getHeaderFields();</span><br><span class="line">        <span class="comment">// 遍历所有的响应头字段</span></span><br><span class="line">        <span class="keyword">for</span> (String key : headers.keySet()) &#123;</span><br><span class="line">            System.err.println(key + <span class="string">&quot;---&gt;&quot;</span> + headers.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定义 BufferedReader输入流来读取URL的响应</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream(), encoding));</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String getLine;</span><br><span class="line">        <span class="keyword">while</span> ((getLine = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            result += getLine;</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        System.err.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">httpGet</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="comment">// 1 创建发起请求客户端</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpClient</span>();</span><br><span class="line">            <span class="comment">// 2 创建要发起请求-tet</span></span><br><span class="line">            <span class="type">GetMethod</span> <span class="variable">getMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetMethod</span>(url);</span><br><span class="line">            <span class="comment">//            getMethod.addRequestHeader(&quot;Content-Type&quot;,</span></span><br><span class="line">            <span class="comment">//                    &quot;application/x-www-form-urlencoded;charset=UTF-8&quot;);</span></span><br><span class="line">            getMethod.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">            <span class="comment">// 3 通过客户端传入请求就可以发起请求,获取响应对象</span></span><br><span class="line">            client.executeMethod(getMethod);</span><br><span class="line">            <span class="comment">// 4 提取响应json字符串返回</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(getMethod.getResponseBodyAsString().getBytes(<span class="string">&quot;utf8&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>STAR-CCM+电化学</title>
      <link href="/posts/b7b16236.html"/>
      <url>/posts/b7b16236.html</url>
      
        <content type="html"><![CDATA[<h3 id="一">一.</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring的依赖注入和AOP使用详解</title>
      <link href="/posts/25073.html"/>
      <url>/posts/25073.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-需要的POM-xml依赖">一. 需要的POM.xml依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lqs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 进行spring导包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring的核心包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring上下文包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring的aop支持包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring的测试包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--面向切面支持包，Spring要支持AOP必需要导入这个包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--测试包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">下面这段配置是为了测试方便</span></span><br><span class="line"><span class="comment">              maven环境配置文件不能写在java中</span></span><br><span class="line"><span class="comment">              为了做测试方便好看，我想要maven也可以在java文件夹中读取配置</span></span><br><span class="line"><span class="comment">              下面的配置的意思是：在java代码中也读取xml文件</span></span><br><span class="line"><span class="comment">              但是注意：实际开发的时候不允许用这种东西</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/test/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二-DI依赖注入">二. DI依赖注入</h3><h3 id="1-构造器注入">1. 构造器注入</h3><ol><li><h4 id="1-实体类">1 实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> YouBean youBean;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(Long id, String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(Long id, String username, YouBean youBean)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.youBean = youBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YouBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--  默认使用无参构造 创建对象 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;bean id=&quot;myBean&quot; class=&quot;com.lqs.constructor.domain.MyBean2&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--有参构造--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.constructor.domain.MyBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    索引    --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;constructor-arg index=&quot;0&quot; value=&quot;100&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;constructor-arg index=&quot;1&quot; value=&quot;root&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--属性名赋值--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;constructor-arg name=&quot;id&quot; value=&quot;10086&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;constructor-arg name=&quot;username&quot; value=&quot;admin&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--   通过类型注入     --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;constructor-arg type=&quot;java.lang.Long&quot; value=&quot;11003&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;coderyeah&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10086&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;constructor-arg name=&quot;youBean&quot; ref=&quot;youBean&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--内部bean构造器注入，不需要指定ID  但是每次地址值不同--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;youBean&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.constructor.domain.YouBean&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;youBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.constructor.domain.YouBean&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-property-setter注入">2. property-setter注入</h3><h4 id="2-1-Bean">2.1  Bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean2</span> &#123;</span><br><span class="line">    <span class="comment">// 简单属性</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean sex;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal salary;</span><br><span class="line">    <span class="comment">// 集合属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] arrays;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> List&lt;OtherBean&gt; otherBeanList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;OtherBean&gt; otherBeanSet;</span><br><span class="line">    <span class="comment">//更多用来写配置文件，Alt+回车 导包</span></span><br><span class="line"><span class="comment">//老项目，就很有可能会用到它</span></span><br><span class="line">    <span class="keyword">private</span> Properties props1;</span><br><span class="line">    <span class="keyword">private</span> Properties props2;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OtherBean</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-简单属性">2.2 简单属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.property.domain.MyBean2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10086&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;salary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;8888.9999&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-集合属性">2.3 集合属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.property.domain.MyBean2&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     集合属性   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;arrays&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>JOJO<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>迪奥<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>小吴<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>110<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>119<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>120<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>初音未来<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;otherBeanList&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--         四个对象 三个不同       --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.property.domain.OtherBean&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.property.domain.OtherBean&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!--     地址一样           --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;otherBean&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;otherBean&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;otherBeanSet&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.property.domain.OtherBean&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.property.domain.OtherBean&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--     自动去重复           --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;otherBean&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;otherBean&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-properties">2.4 properties</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.property.domain.MyBean2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;props1&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--     支持中文       --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>001<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>002<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;特点&quot;</span>&gt;</span>自律<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    不支持中文    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;props2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                name=admin</span><br><span class="line">                id=007</span><br><span class="line">                sex=&quot;true&quot;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三-AOP">三. AOP</h3><h4 id="1-什么是AOP">1. 什么是AOP</h4><p>AOP：全称是Aspect Oriented Programming 即：面向切面编程。通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生泛型。利用AOP可以对业务逻辑的各部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><strong>简单的说它就是把我们程序重复的代码抽取出来，在需要执行的时候，使用动态代理的技术，在不修改源码的基础上，对我们的已有方法进行增强。</strong></p><h4 id="2-AOP实现方式">2. AOP实现方式</h4><ul><li><p>使用动态代理技术。</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220824190546.png" alt="1"></p></li></ul><h4 id="3-代理模式">3. 代理模式</h4><ul><li>SpringAOP底层是使用了<strong>代理模式</strong>对我们的方法进行增强；</li><li>代理模式分类：<ul><li>静态代理：作用不大，只能代理或增强一个方法，比较鸡肋</li><li><strong>动态代理</strong>：功能强大，有两种方案，Spring会自动选择使用那种方案<ul><li>方案一：原生JDK的方式，在我们的类实现了接口之后，就会使用这种方式，spring使用JDK的java.lang.reflect.Proxy类代理，推荐使用，更加解耦</li><li>方案二：我如果我们的类没有实现接口，那么Spring使用CGLIB库生成目标对象的子类。</li></ul></li></ul></li></ul><h4 id=""></h4><h3 id="四-aop的xml实现方式">四. aop的xml实现方式</h3><ol><li><p>Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启事务......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提交事务......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;回滚事务......&quot;</span>);</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭连接......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        begin();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">            commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            rollback(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.aop_xml.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  aop配置  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  声明切点</span></span><br><span class="line"><span class="comment">          *:方法返回不限制</span></span><br><span class="line"><span class="comment">          ..:参数不做限制</span></span><br><span class="line"><span class="comment">          expression=&quot;execution(* com.lqs.aop_xml.service.IUserService.add(..)</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.lqs.aop_xml.service.IUserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   配置切面  增强类   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;txManager&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--      在add()方法之前执行begin操作      --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            &lt;aop:before method=&quot;begin&quot; pointcut-ref=&quot;pointcut&quot;/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--     业务方法之后 执行      --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            &lt;aop:after-returning method=&quot;commit&quot; pointcut-ref=&quot;pointcut&quot;/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发生异常--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            &lt;aop:after-throwing method=&quot;rollback&quot; pointcut-ref=&quot;pointcut&quot; throwing=&quot;e&quot;/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--     最后执行       --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            &lt;aop:after method=&quot;close&quot; pointcut-ref=&quot;pointcut&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--     环绕通知强大 可代替以上通知       --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="五-aop的注解实现方式">五. aop的注解实现方式</h3><ol><li><p>配置注解扫描路径和开启动态代理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lqs.aop_xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lqs.aop_anno&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启AspectJ 自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>增强类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.aop_anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//定义一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxManager2</span> &#123;</span><br><span class="line">    <span class="comment">//定义切点 空的方法体</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.lqs.aop_anno.service.IUserService2.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    @Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启事务......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    @AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提交事务......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    @AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;e&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;回滚事务......&quot;</span>);</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        @After(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭连接......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知  不与其它通知一起用</span></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        begin();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">            commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            rollback(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="六-spring创建bean的四种方式">六. spring创建bean的四种方式</h3><ol><li><p>普通方式-通过公共无参进行实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring创建bean的四种方式：</span></span><br><span class="line"><span class="comment">            1.以前的方式，在xml中进行配置，或者是注解方式进行扫描</span></span><br><span class="line"><span class="comment">            2.使用静态方法工厂模式：当你要使用的类无法通过new创建出来，而只能通过工厂获取，比如sqlSession</span></span><br><span class="line"><span class="comment">            3.使用普通方法工厂模式</span></span><br><span class="line"><span class="comment">            4.使用FacctoryBean方式</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.bean.domain.MyBean&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>集成静态简单工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此工厂生产MyBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactory</span> &#123;</span><br><span class="line">    <span class="comment">// 此方法是一个静态方法，用来生产MyBean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MyBean <span class="title function_">getMyBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注入的是getMyBean方法的返回值 不是MyFactoryBean  --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.bean.MyFactoryBean&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getMyBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>集成实例简单工厂</p><ul><li><p>与第二种的区别就是，当你的工厂方法不是静态方法时，无法通过类名.方法名调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFactoryBean</span> &#123;</span><br><span class="line"><span class="comment">//    public static MyBean getMyBean() &#123;</span></span><br><span class="line"><span class="comment">//        return new MyBean();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  MyBean <span class="title function_">getMyBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  普通方法创建bean  --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.bean.MyFactoryBean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;myFactoryBean&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getMyBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用FactoryBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lqs.bean.domain.MyBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FactoryBean&lt;MyBean&gt;：实现一个FactoryBean接口，并指定要生产的Bean对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;MyBean&gt; &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 此方法指定你要生产的bean对象</span></span><br><span class="line">    <span class="keyword">public</span> MyBean <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此方法指定你生产的bean的类型，必须指定否则报错</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> MyBean.class;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此方法指定你生产的bean是否是单例的，默认false</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用MyBeanFactoryBean方式创建bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.bean.MyBeanFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="七-FactoryBean和BeanFactory的区别">七. FactoryBean和BeanFactory的区别</h3><p>BeanFactory是个Factory，也就是IOC容器或对象工厂，FactoryBean是个Bean。在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的。但对FactoryBean而言，这个Bean不是简单的Bean，而是一个能生产或者修饰对象生成的工厂Bean,它的实现与设计模式中的工厂模式和修饰器模式类似。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring的介绍及应用</title>
      <link href="/posts/23225.html"/>
      <url>/posts/23225.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是Spring">一. 什么是Spring</h3><ol><li><p>Spring是一个轻量级开源的控制反转(<code>IOC</code>)和面向切面编程(<code>AOP</code>)的容器框架。</p><p>(1) 轻量级：相对于重量级（框架设计比较繁琐，配置较多，例如<code>EJB</code>（tomcat不支持），现在基本不用了）而言，开发使用都比较简单，功能强大；</p><p>(2) <code>IOC</code>（Inverse of control - 控制反转）：将创建对象的权利和依赖关系维护（字段赋值）交给Spring容器（不再使用以前new关键字创建对象）。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被Spring控制，所以这叫控制反转；</p><p>(3)<code>AOP</code>（Aspect Oriented Programming）：将相同的逻辑抽取出来，即将业务逻辑从应用服务中分离出来。然后以拦截的方式作用在一个方法的不同位置。例如日志，事务的处理；</p><p>(4)<strong>Spring底层原理：<code>xml+dom4</code>j+工厂设计模式+反射</strong></p></li></ol><h3 id="二-Spring框架的好处">二. Spring框架的好处</h3><ol><li>方便解耦，降低维护难度，提高开发效率（Spring相当于是一个大的工厂，它提供的<code>IOC</code>思想，可以将对象的创建和依赖关系维护都交给spring管理）；</li><li>spring支持<code>AOP</code>编程（spring提供面向切面编程，可以很方便的实现对程序进行权限拦截和运行监控等功能，可以将一些通用任务如安全、事务、日志等进行集中式管理，从而提供了更好的复用）；</li><li>方便程序的测试（Spring 对<code>junit4</code>支持，可以通过注解测试Spring 程序，非常便捷）；</li></ol><h3 id="三-Spring框架的模块化">三. Spring框架的模块化</h3><ol><li><p>模块化就是有组织地把一个大文件拆成独立并互相依赖的多个小模块；</p></li><li><p>图片</p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220802160458.png" alt="image-20220802160457828"  /></li><li><p>Spring框架的功能大约由20个模块组成，这些模块按组可以分为：</p><p>3.1 Core Container（核心容器）:</p><ul><li>Beans：负责Bean工厂中Bean的装配，所谓Bean工厂即是创建对象的工厂，Bean的装配也就是对象的创建工作；</li><li>Core：这个模块即是负责<code>IOC</code>（控制反转）最基本的实现；</li><li><code>Context：Spring</code>的<code>IOC</code>容器，因大量调用Spring Core中的函数，整合了Spring的大部分功能。Bean创建好对象后，由Context负责建立Bean与Bean之间的关系并维护。所以也可以把Context看成是Bean关系的集合；</li><li><code>SpEl</code>：即Spring Expression Language（Spring表达式语言）；</li></ul></li><li><p><code>AOP</code>：面向切面；</p></li></ol><p>Aspects：同样是面向切面的一个重要的组成部分，提供对<code>AspectJ</code>框架的整合；</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220802175237.png" alt="image-20220802175237418"></p><ol start="5"><li><p>通常被Spring管理的类称之为Bean，在Spring容器中的对象称之为Bean对象；</p></li><li><p>依赖关系维护：DI（Dependency Injection）依赖注入。</p></li></ol><p>四. 配置介绍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.coderyeah.MyBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>bean元素：表示对象配置或注册标签；</p></li><li><p>id属性：这个bean对象在Spring容器中的唯一标识，也可以使用name，常用id（唯一特性），获取这个对象的时候就可以通过这个表示来获取；</p></li><li><p>class属性：对应对象所属类的完全限定名。注意这里可以是<code>JDK</code>自带的类，也可以是自己新建的类；</p></li><li><p>注意：Spring容器中不允许有两个名字【不管是id指定还是name指定】一个的对象。</p></li></ul><h3 id="五-Spring容器实例化">五. Spring容器实例化</h3><ol><li><p>Spring容器对象有两种：<code>BeanFactory</code>和<code>ApplicationContext（推荐使用）</code>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//1.创建容器 加载配置文件</span></span><br><span class="line">      <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">      <span class="comment">//2.获取bean工厂 懒加载模式 淘汰了！ 调用无参构造</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">BeanFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(resource);</span><br><span class="line">      <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) factory.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">      System.out.println(user);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//迫切加载 BeanFactory是ApplicationContext的父接口</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">      <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> app.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">      System.out.println(user);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ApplicationContext</code>与<code>BeanFactory</code>的区别</p><ul><li><code>ApplicationContext</code>是<code>BeanFactory</code>的子接口，拥有更多的功能与方法；</li><li><code>ApplicationContext</code>默认是在读取配置文件的时候就会根据配置创建Bean对象（迫切加载）。而<code>BeanFactory</code>是在使用的时候才进行对象的创建（懒加载/延迟加载）;</li><li><code>ApplicationContext</code>实现懒加载配置：<ul><li>①让所有Bean都变成懒加载，只需要在<beans>标签中加入<code>default-lazy-init=&quot;true&quot;</code>；</li><li>②让其中一个Bean变成懒加载，在<bean>标签中加入<code>lazy-init=&quot;true&quot;</code>。</li></ul></li></ul></li></ol><h3 id="六-Spring依赖注入">六. Spring依赖注入</h3><ol><li><p>给Spring中对象的属性字段赋值，这称为依赖注入DI（Dependency Injection）；</p></li><li><p><code>xml</code>注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- xml方式进行依赖注入 DI   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.domain.MyDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306///test&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;user1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注解注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 注解注入</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * Autowired 直接通过类型去匹配，如果只有一个bean类型为User，就直接注入该bean</span></span><br><span class="line"><span class="comment">    * 如果有多个在匹配变量名字</span></span><br><span class="line"><span class="comment">    * Qualifier 当有类型，名字不一样的时候，该注解配合使用，找到对应的名字</span></span><br><span class="line"><span class="comment">    *  Qualifier必须配合Autowired使用，不能单独使用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(&quot;user1&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> User user1;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span> <span class="comment">//默认按照名字匹配【名字对了，类型也必须一致】，然后按照类型匹配</span></span><br><span class="line"><span class="comment">//@Resource(name=&quot;otherBean1&quot;)//指定Bean的名称</span></span><br><span class="line"><span class="keyword">private</span> OtherBean otherBean;</span><br></pre></td></tr></table></figure></li></ol><h3 id="七-Spring测试">七. Spring测试</h3><ol><li><p>需要导入的jar包：</p><p><code>**spring-test-4.1.2****.RELEASE.jar**</code><strong>–</strong><strong>测试包</strong></p><p><code>**spring-aop-4.1.2.RELEASE.jar**</code> <strong>–</strong><strong><code>AOP</code>包</strong></p></li><li><p>注解</p><ul><li><p><code>@RunWith</code>：表示先启动Spring容器，把<code>junit</code>运行在Spring容器中；</p></li><li><p><code>@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</code>：表示从<code>CLASSPATH</code>路径去加载资源文件；</p></li><li><p><code>@Autowired</code>：表示自动装配，自动从Spring容器中取出对应bean赋值给当前使用的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span><span class="comment">//声明这是一个spring测试</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><span class="comment">//classpath:后面就是配置文件的路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyDataSource myDataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="八-配置细节">八. 配置细节</h3><ol><li><p>通过Bean元素中的scope属性指定模式(默认单例)：①singleton：默认值，单例；② prototype：多例。</p></li><li><p>Bean对象的生命周期：</p><p>(1)Bean对象的生命周期指的是：从对象创建、初始化、调用执行到销毁的一个过程；</p><ul><li>Bean对象的实例化和初始化：</li></ul><p>​     ① 实例化实质是Spring容器调用Bean的无参构造创建Bean对象；</p><p>​     ②初始化实质上是Spring容器调用指定的初始化方法；</p><p>​ ③<code>BeanFactory</code>管理的Bean默认是在使用的时候才创建Bean对象，即延迟加载，而<code>AppliacationContext</code>管理的Bean默认是在容器创建的时候就会创建Bean对象，即迫切加载。</p><ul><li><p>Bean对象的销毁：</p><p>① 实质上是Spring容器调用指定的销毁方法（并不是真正意义上的销毁Bean对象）；</p><p>② 在容器关闭的时候（<code>ApplicationContext</code>对象没有close方法，其实现类有），Spring</p><p>容器会自动调用指定的销毁方法；</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220802193022.png" alt="image-20220802193022706"></p></li></ul><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220802193948.jpg" alt="2" style="zoom:50%;" /></li></ol><h3 id="九-mybatis高级查询-将需要查询的条件封装成一个实体类。">九. <code>mybatis</code>高级查询, 将需要查询的条件封装成一个实体类。</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lqs.exam.domain.User&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--字符串不为null 并且不为空字符串--&gt;</span></span><br><span class="line">       select *</span><br><span class="line">       from tb_user</span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;whereQuery&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 抽取公共sql  id不为空唯一 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;whereQuery&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;qname != null and !&#x27;&#x27;.equals(qname.trim())&quot;</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--#过滤前后空格 --&gt;</span></span><br><span class="line">               name=trim(#&#123;qname&#125;)</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;qaddress != null and !&#x27;&#x27;.equals(qaddress.trim())&quot;</span>&gt;</span></span><br><span class="line">               and address=trim(#&#123;qaddress&#125;)</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;qtel != null and !&#x27;&#x27;.equals(qtel.trim())&quot;</span>&gt;</span></span><br><span class="line">               or tel like concat(&#x27;%&#x27;,#&#123;qtel&#125;,&#x27;%&#x27;)</span><br><span class="line">               <span class="comment">&lt;!--tel like &#x27;%$&#123;qtel&#125;%&#x27;--&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;qid != null&quot;</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--and id &amp;gt;#&#123;qid&#125;--&gt;</span></span><br><span class="line">               and &lt;![CDATA[id&gt;#&#123;qid&#125;]]&gt;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC的介绍和应用</title>
      <link href="/posts/48837.html"/>
      <url>/posts/48837.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-简介">一.简介</h3><ol><li>SpringMVC是一个基于MVC模式的WEB/表现层框架，它解决WEB开发中常见的问题：参数接收、文件上传/下载、表单验证、国际化(时间处理)等等；</li><li>SpringMVC需要的jar包:<ul><li><strong>spring-webmvc-4.1.2.RELEASE.jar</strong><strong>–</strong><strong>SpringMVC</strong>核心包</li><li><strong>spring-web-4.1.2.RELEASE.jar</strong> <strong>–</strong><strong>Spring对Web项目</strong>项目的支持</li></ul></li></ol><h3 id="二-核心控制器">二. 核心控制器</h3><ol><li><p>SpringMVC中使用的是DispatcherServlet为核心控制器. DispatcherServlet核心控制器会拦截匹配的请求，把拦截下来的请求，依据相应的规则分发到目标Controller来处理；</p></li><li><p>Spring的相关jar包：地址<a href="https://gitee.com/coderyeah/layui-module/tree/master/lib/spring%E7%9A%84jar">https://gitee.com/coderyeah/layui-module/tree/master/lib/spring%E7%9A%84jar</a></p><p>Ø com.springsource.org.apache.commons.logging-1.1.1.jar</p><p>Ø spring-beans-4.1.2.RELEASE.jar</p><p>Ø spring-context-4.1.2.RELEASE.jar</p><p>Ø spring-core-4.1.2.RELEASE.jar</p><p>Ø spring-expression-4.1.2.RELEASE.jar</p><p>Ø spring-aop-4.1.2.RELEASE.jar–Spring测试需要导入此包</p></li><li><p>在web.xml配置核心控制器（容器启动时就创建sevlet实例对象，并加载classpath下的一个名为spring-mvc.xml文件）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置前端控制器   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--   加载配置文件     --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   默认的是第一次访问加载配置文件，这里设置tomcat启动时就加载配置文件 提高访问效率     --&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--    数字表示访问级别 正整数值越低级别越高    --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 拦截所有请求给 dispatcherServlet处理  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--    /*会拦截所有;  /会放行jsp    --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件模板</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lqs.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启spring对springmvc的注解支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 对于静态资源(图片，css，js,html)进行放行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置视图路径的前后缀，该配置可以让我们写视图路径的时候更简单。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--前缀： jsp在当前工程文件夹的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--后缀：扩展名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置上传文件的最大尺寸为1MB --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 设置上传文件的最大尺寸为5MB --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;1024*1024*5&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="三-注解">三.  注解</h3><ol><li><p>指定请求方法：@RequestMapping(value = “/upload”, method = RequestMethod.GET)</p></li><li><p>实例化bean注解：</p><ol><li>指定一个包路径，Spring会自动扫描该包及其子包所有类，当发现类定义前<strong>有特定的注解标记</strong>时，就将该类的对象实例化并纳入到<strong>Spring容器</strong>中，等价于原有XML配置中**<bean>**定义功能；</li><li>组件扫描可以替代大量XML配置的<bean>定义；</li><li>需要在XML配置中指定扫描路径：&lt;context:component-scan base-package=“com.lqs.controller”/&gt;;容器在实例化对象时会自动扫描com.lqs.controller包及其子包下所有类，如果有多个包可以再写一条<context>；</li></ol></li><li><p>注解标记</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220803115203.jpg" alt="img"></p></li></ol><p>四. 注入注解</p><ol><li>具有依赖关系的Bean对象，利用此注解可以实现关系注入：@Autowired、@Resource；</li><li>这些注解标记可以用在字段定义或setter方法定义前面，一般用于注入容器中对象，该注解可以直接写在字段上，那么就不需要setter方法了；</li><li>注意：使用该注解之前，一定要确保容器中是否有该类型的对象，否则注入失败。</li></ol><h3 id="五-参数传递">五. 参数传递</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/form1&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">form1</span><span class="params">(HttpServletRequest req)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        System.out.println(name + <span class="string">&quot;  :  &quot;</span> + pwd);</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot; - &quot;</span> + pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/form2&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">form1</span><span class="params">(String name, String pwd)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;  :  &quot;</span> + pwd);</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot; - &quot;</span> + pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/form3&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">form1</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.out.println(user.getName() + <span class="string">&quot;  :  &quot;</span> + user.getName());</span><br><span class="line">        <span class="keyword">return</span> user.getName() + <span class="string">&quot;  :  &quot;</span> + user.getPwd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/form4/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">form4</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span> &#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> id + <span class="string">&quot;  &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给页面传值</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/form5&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">form5</span><span class="params">(HttpServletRequest req)</span> &#123;</span><br><span class="line">        req.setAttribute(<span class="string">&quot;message5&quot;</span>, <span class="string">&quot;coderyeah爱喝水水&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;model2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/form6&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">form5</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;message6&quot;</span>, <span class="string">&quot;我是我滴神&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;model2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/form7&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">form7</span><span class="params">(ModelAndView mav)</span> &#123;</span><br><span class="line">        mav.addObject(<span class="string">&quot;message7&quot;</span>, <span class="string">&quot;springmvc的宝贝&quot;</span>);</span><br><span class="line">        mav.setViewName(<span class="string">&quot;model2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六-解决乱码">六. 解决乱码</h3><ol><li><p>自定义Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器初始化。。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter被执行了。。。。&quot;</span>);</span><br><span class="line">        <span class="comment">//过滤器在servlet之前执行 拦截所有请求</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter被销毁了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>springmvc的过滤配置(web.xml)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 配置过滤器   --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   &lt;filter&gt;</span></span><br><span class="line"><span class="comment">           &lt;filter-name&gt;myFilter&lt;/filter-name&gt;</span></span><br><span class="line"><span class="comment">           &lt;filter-class&gt;com.lqs.filter.MyFilter&lt;/filter-class&gt;</span></span><br><span class="line"><span class="comment">       &lt;/filter&gt;</span></span><br><span class="line"><span class="comment">       &lt;filter-mapping&gt;</span></span><br><span class="line"><span class="comment">           &lt;filter-name&gt;myFilter&lt;/filter-name&gt;</span></span><br><span class="line"><span class="comment">           &amp;lt;!&amp;ndash;    过滤所有请求    &amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">           &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">       &lt;/filter-mapping&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--     支持UTF-8编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--强制指定字符编码，即使request或response设置了字符编码，也会强制使用当前设置的,任何情况下强制使用此编码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>返回前端中文乱码解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> XXXService xxxService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;test&quot;, produces = &quot;application/json;charset=utf-8&quot;)</span><span class="comment">//解决相应乱码</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        xxxService.test();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test被执行了哦&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="七-自定义请求转发和自定义重定向">七. 自定义请求转发和自定义重定向</h3><ol><li><p>forward</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">     model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;121212&quot;</span>);</span><br><span class="line">     <span class="comment">//自定义请求转发</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>redirect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">index2</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;1212地方法规12&quot;</span>);</span><br><span class="line">       <span class="comment">//自定义重定向 不能共享数据哦</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>编码和解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">       <span class="comment">//编码和解码</span></span><br><span class="line">       System.out.println(URLEncoder.encode(<span class="string">&quot;1212叫阿三的12&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">       System.out.println(URLDecoder.decode(<span class="string">&quot;1212%E5%8F%AB%E9%98%BF%E4%B8%89%E7%9A%8412&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="八-Java对象转换成json格式数据">八. Java对象转换成json格式数据</h3><ol><li><p>需要jar包</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220804174631.png" alt="image-20220804174631507"></p></li><li><p>@ResponseBody注解</p><ul><li>返回值是通过json流的方式输出，springmvc获取返回值，把对象自动转换位json，然后通过resp.getWrite().print(jsonString)返回json数据。</li><li>将返回的数据自动转换成json格式的数据，而且是用了@ResponseBody，不会经过视图解析器</li></ul></li><li><p>Json中对日期格式的特殊处理</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220805110611.png" alt="image-20220805110611265"></p><ul><li><p>默认返回的日期格式为时间戳，而在前台我们希望显示出指定规则的日期字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">//返回给前端时时间戳毫秒数 所以需要指定格式</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="九-文件上传">九. 文件上传</h3><ol><li><p>需要jar包</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220805112920.png" alt=""></p></li><li><p>配置上传解析器</p><ul><li><p>SpringMVC使用MultipartFile来进行文件上传，所以我们首先要配置MultipartResolver，用于处理表单中的file；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 设置视图路径的前后缀，该配置可以让我们写视图路径的时候更简单。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀： jsp在当前工程文件夹的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀：扩展名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  文件上传解析器 将文件的所有信息封装到MultipartFile对象中</span></span><br><span class="line"><span class="comment">      然后就可以从MultipartFile对象获取文件信息</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &amp;lt;!&amp;ndash; 设置上传文件的最大尺寸 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   1024字节-&gt;1kb-&gt;100M=1024*1024*100     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;104857600&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;maxUploadSize&quot; value=&quot;#&#123;1024*1024*5&#125;&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>后台实现文件上传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    @RequestMapping(&quot;upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(String name, MultipartFile photo, Model model, HttpServletRequest req)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;photo:&quot;</span> + photo);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件名称：&quot;</span> + photo.getOriginalFilename());<span class="comment">//back.jpeg 文件名称</span></span><br><span class="line">        System.out.println(<span class="string">&quot;filename:&quot;</span> + photo.getName());<span class="comment">//photo</span></span><br><span class="line">        System.out.println(<span class="string">&quot;size:&quot;</span> + photo.getSize());<span class="comment">//获取文件大小</span></span><br><span class="line">        System.out.println(<span class="string">&quot;type:&quot;</span> + photo.getContentType());<span class="comment">//image/jpeg 文件类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断文件是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (photo == <span class="literal">null</span> || photo.getSize() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;请选择文件！！！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//复制文件</span></span><br><span class="line">        <span class="comment">//获取字节输入流 读取文件</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> photo.getInputStream();</span><br><span class="line">        <span class="comment">//获取文件后缀</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));<span class="comment">//后缀 .png .jpg</span></span><br><span class="line"><span class="comment">//        给定不重复文件名</span></span><br><span class="line">        <span class="comment">//1.时间戳</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newFilename</span> <span class="operator">=</span> System.currentTimeMillis() + suffix;</span><br><span class="line">        <span class="comment">//2.UUID</span></span><br><span class="line"><span class="comment">//        String newFilename = UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;);//36位</span></span><br><span class="line">        <span class="comment">//获取上下文路径</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> req.getServletContext();</span><br><span class="line">        <span class="comment">//获取upload文件夹的真实路径</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> context.getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;contextPath:&quot;</span> + context.getContextPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;realPath:&quot;</span> + realPath);</span><br><span class="line">        <span class="comment">//判断文件对象是否存在</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="comment">//不存在创建文件夹</span></span><br><span class="line">            file.mkdirs();<span class="comment">//创建文件夹</span></span><br><span class="line"><span class="comment">//            file.createNewFile();//创建文件</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建字节输出流</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">FileOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(realPath, newFilename));</span><br><span class="line">        <span class="comment">//调用工具类复制图片</span></span><br><span class="line">        IOUtils.copy(in, os);</span><br><span class="line">        <span class="comment">//关流</span></span><br><span class="line">        os.close();</span><br><span class="line">        in.close();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;success！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>封装文件上传工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadPath 指定文件上传路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file       需要上传的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">uploadFile</span><span class="params">(String uploadPath, MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">fileItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath);</span><br><span class="line">        <span class="keyword">if</span> (!fileItem.exists()) &#123;</span><br><span class="line">            fileItem.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file.getSize() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">newFilename</span> <span class="operator">=</span> System.currentTimeMillis() + suffix;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">             <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(uploadPath, newFilename));</span><br><span class="line">        ) &#123;</span><br><span class="line">            IOUtils.copy(in, os);</span><br><span class="line">            <span class="keyword">return</span> newFilename;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="十-文件下载">十. 文件下载</h3><ol><li><p>下载页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;下载文件&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;下载功能&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/download?filename=star.mp4&quot;</span>&gt;star.mp4&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/download?filename=suiji.zip&quot;</span>&gt;suiji.zip&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/download?filename=words.txt&quot;</span>&gt;words.txt&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=<span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/download?filename=&lt;%=URLEncoder.encode(&quot;女孩.jpg&quot;,&quot;utf-8&quot;)%&gt;&#x27;</span>&gt;女孩.jpg&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>后台代码    <strong>user–agent：这个请求头是指用户代理的意思，告诉服务器使什么浏览器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">download</span><span class="params">(String filename, HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//E:\javabase\spring_demo\out\artifacts\spring_demo_war_exploded\download  这是编译路径</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> req.getServletContext().getRealPath(<span class="string">&quot;/download&quot;</span>);</span><br><span class="line">        System.out.println(realPath);</span><br><span class="line">        <span class="comment">//判断需要下载的文件是否还存在</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath, filename);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;<span class="comment">//文件存在</span></span><br><span class="line">            <span class="comment">//获取输入流</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="comment">//区分浏览器 解决中文乱码</span></span><br><span class="line">            <span class="keyword">if</span> (req.getHeader(<span class="string">&quot;User-Agent&quot;</span>).toUpperCase().contains(<span class="string">&quot;TRIDENT&quot;</span>)) &#123;</span><br><span class="line">                filename = URLEncoder.encode(filename, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="comment">//电脑自带edge【edʒ】浏览器</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.getHeader(<span class="string">&quot;User-Agent&quot;</span>).toUpperCase().contains(<span class="string">&quot;EDGE&quot;</span>)) &#123;</span><br><span class="line">                filename = URLEncoder.encode(filename, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//其他浏览器</span></span><br><span class="line">                filename = <span class="keyword">new</span> <span class="title class_">String</span>(filename.getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1);<span class="comment">//转码的方式</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置文件下载的名字  -- 附件表示做下载或上传操作，浏览器就不会将文件的内容直接显示出来了</span></span><br><span class="line">            resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + filename);</span><br><span class="line">            <span class="comment">//获取输出流</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">            <span class="comment">//实现下载</span></span><br><span class="line">            IOUtils.copy(in, os);</span><br><span class="line">            <span class="comment">//关流</span></span><br><span class="line">            os.close();</span><br><span class="line">            in.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/jsp/download.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="十一-SpringMVC拦截器">十一. SpringMVC拦截器</h3><ol><li><p>实现****HandlerInterceptor**** 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//preHandle()方法在业务处理器处理请求之前被调用   </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;进入拦截器了....&quot;</span>);</span><br><span class="line"><span class="comment">//这里可以判断用户是否登录 </span></span><br><span class="line"><span class="comment">//没有登录可以使用 request/response跳转回登录页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注：如果不继续执行返回false,否则返回true</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// postHandle()方法在业务处理器处理请求之后被调用   </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// afterCompletion()方法在DispatcherServlet完全处理完请求后被调用   </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置拦截器组  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  配置拦截器  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要拦截的配置，该配置必须写在不拦截的上面，/*拦截一级请求，/**拦截多级请求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置不拦截的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/list&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.lqs.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="十二-SpringMVC执行流程">十二.  SpringMVC执行流程</h3><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220804200104.png" alt="spring-mvc - 副本"></p><p>1、用户发送请求到前端控制器（DispatcherServlet）。<br>2、前端控制器请求处理器映射器（HandlerMapping）去查找处理器（Handler）。<br>3、找到以后处理器映射器（HandlerMappering）向前端控制器返回执行链（HandlerExecutionChain）。<br>4、前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）。<br>5、处理器适配器去执行Handler。<br>6、处理器执行完给处理器适配器返回ModelAndView。<br>7、处理器适配器向前端控制器返回ModelAndView。<br>8、前端控制器请求视图解析器（ViewResolver）去进行视图解析。<br>9、视图解析器向前端控制器返回View。<br>10、前端控制器对视图进行渲染。<br>11、前端控制器向用户响应结果。</p><h3 id="十三-SpringMVC接口">十三. SpringMVC接口</h3><ul><li>Spring MVC 涉及到的组件有  DispatcherServlet（前端控制器）、HandlerMapping（处理器映射器）、HandlerAdapter（处理器适配器）、Handler（处理器）、ViewResolver（视图解析器）和 View（视图）。</li></ul><ol><li><p>DispatcherServlet</p><p>Spring MVC 的所有请求都要经过 DispatcherServlet 来统一分发。DispatcherServlet 相当于一个转发器或中央处理器，控制整个流程的执行，对各个组件进行统一调度，以降低组件之间的耦合性，有利于组件之间的拓展。</p></li><li><p>HandlerMapping</p><p>HandlerMapping 是处理器映射器，其作用是根据请求的 URL 路径，通过注解或者 XML 配置，寻找匹配的处理器（Handler）信息。</p></li><li><p>HandlerAdapter</p><p>HandlerAdapter 是处理器适配器，其作用是根据映射器找到的处理器（Handler）信息，按照特定规则执行相关的处理器（Handler）。</p></li><li><p>Handler</p><p>Handler 是处理器，和 Java Servlet扮演的角色一致。其作用是执行相关的请求处理逻辑，并返回相应的数据和视图信息，将其封装至 ModelAndView 对象中。</p></li><li><p>View Resolver</p><p>View Resolver 是视图解析器，其作用是进行解析操作，通过 ModelAndView 对象中的 View 信息将逻辑视图名解析成真正的视图 View（如通过一个 JSP 路径返回一个真正的 JSP 页面）。</p></li><li><p>View</p><p>View 是视图，其本身是一个接口，实现类支持不同的 View 类型（JSP、FreeMarker、Excel 等）。</p></li></ol><h3 id="十四-拦截器和过滤器的区别">十四. 拦截器和过滤器的区别</h3><ol><li>过滤器Filter属于Servlet级别，拦截器Interceptor属于SpringMVC级别；</li><li>过滤器先执行，拦截器后执行；</li><li>过滤器基于函数回调方式实现，拦截器是基于反射方式实现。</li></ol><p>​                                  <img src="C:/Users/coderyeah/Desktop/jar/springmvc%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="image-20220805182430631"></p><h3 id="十五-流程">十五. 流程</h3><ol><li><p>用户向服务器发送请求，请求会统一交给SpringMVC前端控制DispatcherServlet处理；</p></li><li><p>DispatcherServlet通过请求HandlerMapping（处理器映射管理对象）找到该请求对应的Handler对象（包括控制器以及Handler对象对应的拦截器） 和HandlerExecutionChain对象（包含：控制器+2个拦截器）；</p></li><li><p>DispatcherServlet请求HandlerAdapter，选择一个合适的HandlerAdapter去处理Handler。（附注：如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(…)方法）；</p></li><li><p>提取request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p></li></ol><p>Ø HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p><p>Ø 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p><p>Ø 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>Ø 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><ol start="5"><li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象；</p></li><li><p>根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet；</p></li><li><p>ViewResolver 结合Model和View，来渲染视图（Model+View合成）</p></li><li><p>将渲染结果返回给客户端；</p></li></ol><h3 id="十六-简易版：">十六. 简易版：</h3><ol><li><p>客户端将请求统一提交到DispatcherServlet；</p></li><li><p>DispatcherServlet会将请求交给HandlerMapping进行请求映射，匹配该请求的Handler；</p></li><li><p>DispatcherServlet再请求HandlerAdapter调用相应的Handler处理请求，并向前端控制器返回一个ModelAndView对象；</p></li><li><p>DispatcherServlet将ModelAndView对象交给ViewResoler视图解析器处理，返回指定的视图View；</p></li><li><p>DispatcherServlet 对 View 进行渲染（即将模型数据填充至视图中）；</p></li><li><p>DispatcherServlet 将页面响应给用户。</p></li></ol><h3 id="十七-SSM整合">十七. SSM整合</h3><ol><li><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置资源文件路径</span></span><br><span class="line"><span class="comment">      system-properties-mode:表示配置文件使用username不会报错，否则会将username当初系统名称</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lqs&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  管理连接池对象  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;dbcp.maxActive&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;dbcp.maxIdle&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;dbcp.minIdle&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;dbcp.minEvictableIdleTimeMillis&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SqlSessionFactory对象   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    XML方式注入连接池对象    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--     配置别名包   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.lqs.domain&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--     加载sql映射文件   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 管理mapper的代理对象   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        扫描mapper接口的包，Spring会自动根据这个配置去扫描这个包下的所有mapper接口</span></span><br><span class="line"><span class="comment">        生成代理对象，交给spring管理</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.lqs.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  定义事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 7. 注解驱动，启动事务注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/ssm</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#DBCP</span></span><br><span class="line"><span class="attr">dbcp.initialSize</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">dbcp.maxIdle</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">dbcp.maxActive</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">dbcp.minIdle</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">dbcp.maxWaitMillis</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">dbcp.timeBetweenEvictionRunsMillis</span>=<span class="string">6000</span></span><br><span class="line"><span class="attr">dbcp.numTestsPerEvictionRun</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">dbcp.minEvictableIdleTimeMillis</span>=<span class="string">30000</span></span><br><span class="line"><span class="attr">dbcp.validationQuery</span> = <span class="string">SELECT 1</span></span><br><span class="line"><span class="attr">dbcp.testWhileIdle</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">dbcp.testOnBorrow</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">dbcp.removeAbandonedTimeout</span>=<span class="string">180</span></span><br></pre></td></tr></table></figure></li><li><p>spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.lqs.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启RequestMapping 注解支持   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源放行   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  文件上传解析器  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;1024*1024*3&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#控制台输出+自定义布局</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,my</span></span><br><span class="line"><span class="comment">#指定输出器</span></span><br><span class="line"><span class="attr">log4j.appender.my</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="comment">#指定布局器(自定义布局)</span></span><br><span class="line"><span class="comment">#指定布局为自定义布局</span></span><br><span class="line"><span class="attr">log4j.appender.my.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment">#指定在自定义布局的格式，%d -- 表示当前系统时间，%t -- 执行该业务的线程名称，%p -- 日记器的级别，-5 -- 5表示输出字符的个数，符号表示右对齐</span></span><br><span class="line"><span class="comment">#%c -- 表示指定业务所在的类的完全限定名(包名.类名)，%m -- 输出额外信息，%n -- 表示换行</span></span><br><span class="line"><span class="attr">log4j.appender.my.layout.ConversionPattern</span>=<span class="string">%d [%t] %-5p [%c] - %m%n</span></span><br><span class="line"><span class="comment">#设置package（可以是自定义的包也可以是api的包）输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.springframework</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">log4j.logger.com.lqs</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure></li><li><p>spring测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="comment">//    DI依赖注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BasicDataSource dataSource;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactoryBean factoryBean;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MapperScannerConfigurer mapperScannerConfigurer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(dataSource.getUrl());</span><br><span class="line">        System.out.println(dataSource.getUsername());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line">        System.out.println(factoryBean);</span><br><span class="line">        System.out.println(factoryBean.getDatabaseIdProvider());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">        System.out.println(mapperScannerConfigurer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        empMapper.queryAll().forEach(System.out::println);</span></span><br><span class="line">        System.out.println(empMapper.queryById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>spring整合mybatis所需jar</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220806180924.png" alt="image-20220806180924417"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudGataway</title>
      <link href="/posts/3f4c886e.html"/>
      <url>/posts/3f4c886e.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-Spring-Cloud-Gataway">一.Spring Cloud Gataway</h3><p>在Spring Cloud官方定义了SpringCloud Gateway 的如下特点：</p><ul><li>基于 Spring  5，Project Reactor ,  Spring Boot 2.0</li><li>默认集成 Hystrix 断路器</li><li>默认集成 Spring Cloud DiscoveryClient</li><li>Predicates 和 Filters 作用于特定路由，易于编写的 Predicates 和 Filters</li><li>支持动态路由、限流、路径重写.</li></ul><h3 id="二-Spring-Cloud-Gataway的核心概念">二.Spring Cloud Gataway的核心概念</h3><ul><li>Filter（过滤器）：</li></ul><p>Spring Cloud <code>Gateway的Filter和Zuul的过滤器类似</code>，可以在请求发出前后进行一些业务上的处理 ,这里分为`两种类型的Filter，分别是Gateway Filter网关filter和Global Filter全局Filter.</p><ul><li>Route（路由）：</li></ul><p>网关配置的基本组成模块，和Zuul的路由配置模块类似。一个Route模块由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配，目标URI会被访问。说白了就是把url请求路由到对应的资源(服务)，或者说是一个请求过来Gateway应该怎么把这个请求转发给下游的微服务，转发给谁。</p><ul><li>Predicate（断言）：</li></ul><p>这是一个 Java 8 的 Predicate，可以使用它来<code>匹配来自 HTTP 请求的任何内容</code>，例如 headers 或参数。断言的输入类型是一个 ServerWebExchange。简单理解就是处理HTTP请求的匹配规则，在什么样的请情况下才能命中资源继续访问。</p><h3 id="三-Spring-Cloud-Gateway的工作方式">三.Spring Cloud Gateway的工作方式</h3><p>Spring Cloud Gateway 的工作原理跟 Zuul 的差不多，最大的区别就是 Gateway 的 Filter 只有 pre 和 post 两种</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221015173013.png" alt="image-20221015173013121"></p><p>客户端向Spring Cloud Gateway发出请求。如果网关处理程序映射确定请求与路由匹配，则将其发送到网关Web处理程序。该处理程序通过特定于请求的过滤器链来运行请求。筛选器由虚线分隔的原因是，筛选器可以在发送代理请求之前和之后运行逻辑。所有“前置”过滤器逻辑均被执行。然后发出代理请求。发出代理请求后，将运行“后”过滤器逻辑。</p><h3 id="四-服务示例">四.服务示例</h3><p>创建项目导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务注册与发现--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayServerApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayServerApp.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9099</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">gateway-server:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">false</span> <span class="comment">#开放服务名访问方式</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span> <span class="comment">#服务名小写</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">application-user</span> <span class="comment">#指定服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-server</span> <span class="comment">#去注册中心找这个服务名</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment">#断言，匹配访问的路径</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/servers/user/**</span>    <span class="comment">#服务访问路径</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span>    <span class="comment">#请求转发的时候会去掉 /servers访问路径</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">application-order</span> <span class="comment">#指定服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://order-server</span> <span class="comment">#去注册中心找这个服务名</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment">#断言，匹配访问的路径</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/servers/order/**</span>    <span class="comment">#服务访问路径</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span>    <span class="comment">#请求转发的时候会去掉 /servers访问路径</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">application-pay</span> <span class="comment">#指定服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://pay-server</span> <span class="comment">#去注册中心找这个服务名</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment">#断言，匹配访问的路径</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/servers/pay/**</span>    <span class="comment">#服务访问路径</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span>    <span class="comment">#请求转发的时候会去掉 /servers访问路径</span></span><br></pre></td></tr></table></figure><h3 id="五-Gateway-的-Filter-过滤器">五.Gateway 的 Filter 过滤器</h3><p>Gateway的Filter的zuul的Filter有相似之处，与zuul不同的是，Gateway的filter从生命周期上可以为“pre”和“post”类型。根据作用范围可分为<code>针对于单个路由的gateway filter，和针对于所有路由的Global Filer</code>。</p><h4 id="内置的Gateway-filter">内置的Gateway filter</h4><p><code>针对单个路由的Filter</code>, 它允许以某种方式修改HTTP请求或HTTP响应。过滤器可以作用在某些特定的请求路径上。Gateway内置了很多的GatewayFilter工厂。如果要使用这些Filter只需要在配置文件配置GatewayFilter Factory的名称。下面拿一个内置的Gateway Filter举例：</p><p><strong>AddRequestHeader GatewayFilter Factory</strong><br>该Filter是Gateway内置的，它的作用是在请求头加上指定的属性。配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">add_request_header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Request-red,</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure><p>在<code>spring.cloud.gateway.routes.filters</code>配置项配置了一个<code>AddRequestHeader</code> ,他是“<code>AddRequestHeader GatewayFilter Factory</code>”的名称，意思是在请求头中添加一个“<code>X-Request-red</code>”的属性，值为<code>blue</code> 。</p><h4 id="自定义Gateway-Filter">自定义Gateway Filter</h4><p>在Spring Cloud Gateway自定义过滤器，过滤器需要实现GatewayFilter和Ordered这两个接口。我们下面来演示自定义filter计算请求的耗时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestTimeFilter</span> <span class="keyword">implements</span> <span class="title class_">GatewayFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(GatewayFilter.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COUNT_Start_TIME</span> <span class="operator">=</span> <span class="string">&quot;countStartTime&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">//开始时间</span></span><br><span class="line">        exchange.getAttributes().put(COUNT_Start_TIME, System.currentTimeMillis());</span><br><span class="line">        <span class="comment">//执行完成之后</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange).then(</span><br><span class="line">                Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">                    <span class="comment">//开始时间</span></span><br><span class="line">                    <span class="type">Long</span> <span class="variable">startTime</span> <span class="operator">=</span> exchange.getAttribute(COUNT_Start_TIME);</span><br><span class="line">                    <span class="comment">//结束时间</span></span><br><span class="line">                    Long endTime=(System.currentTimeMillis() - startTime);</span><br><span class="line">                    <span class="keyword">if</span> (startTime != <span class="literal">null</span>) &#123;</span><br><span class="line">                        log.info(exchange.getRequest().getURI().getRawPath() + <span class="string">&quot;: &quot;</span> + endTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Ordered.LOWEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示： getOrder返回filter的优先级，越大的值优先级越低 ， 在filterI方法中计算了请求的开始时间和结束时间</p><p>最后我们还需要把该Filter配置在对应的路由上，配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Filter作用于那个访问规则上</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customerRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.routes().route(r -&gt; r.path(<span class="string">&quot;/servers/user/**&quot;</span>)</span><br><span class="line">                <span class="comment">//去掉2个前缀</span></span><br><span class="line">                        .filters(f -&gt; f.stripPrefix(<span class="number">2</span>)</span><br><span class="line">                        .filter(<span class="keyword">new</span> <span class="title class_">RequestTimeFilter</span>())</span><br><span class="line">                        .addResponseHeader(<span class="string">&quot;X-Response-test&quot;</span>, <span class="string">&quot;test&quot;</span>))</span><br><span class="line">                        .uri(<span class="string">&quot;lb://user-server&quot;</span>)</span><br><span class="line">                        .order(<span class="number">0</span>)</span><br><span class="line">                        .id(<span class="string">&quot;test-RequestTimeFilter&quot;</span>)</span><br><span class="line">                ).build();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>提示：这里将  RequestTimeFilter 添加到 “/user/**”这里路由上，当请求包含/user就会触发Filter的执行。</p><h4 id="自定义GlobalFilter">自定义GlobalFilter</h4><p>GlobalFilter:全局过滤器，不需要在配置文件中配置，作用在所有的路由上，最终通过GatewayFilterAdapter包装成GatewayFilterChain可识别的过滤器，它为请求业务以及路由的URI转换为真实业务服务的请求地址的核心过滤器，不需要配置，系统初始化时加载，并作用在每个路由上。<br>这里我们模拟了一个登陆检查的Filter.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeGlobleFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> , Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; token = exchange.getRequest().getHeaders().get(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;检查 TOKEN = &#123;&#125;&quot;</span> ,token);</span><br><span class="line">        <span class="keyword">if</span>(token == <span class="literal">null</span> || token.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//响应对象</span></span><br><span class="line">            <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">            <span class="comment">//构建错误结果</span></span><br><span class="line">            HashMap&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            data.put(<span class="string">&quot;code&quot;</span>,<span class="number">401</span>);</span><br><span class="line">            data.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;未登录&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">DataBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = JSON.toJSONString(data).getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                buffer = response.bufferFactory().wrap(bytes);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//设置完成相应，不会继续执行后面的filter</span></span><br><span class="line">                <span class="comment">//response.setComplete();</span></span><br><span class="line">                response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">                response.getHeaders().add(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把结果写给客户端</span></span><br><span class="line">            <span class="keyword">return</span> response.writeWith(Mono.just(buffer));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;Token不为空 ，放行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果请求头中没有 token ，就返回咩有权限的状态吗。</p><p>使用 <code>buffer = response.bufferFactory().wrap(bytes)</code> 构建响应内容，通过<code>response.writeWith(Mono.just(buffer));</code> 把内容写给客户端。</p><h4 id="Gateway跨域配置">Gateway跨域配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos注册服务地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment">#网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment">#路由id自定义 保证唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment">#路由的目标地址 lb表示负载均衡 后面跟服务名称、</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment">#路由断言也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment">#按照路径匹配只要满足/user/开头就符合要求</span></span><br><span class="line"><span class="comment">#          filters: #路由过滤器</span></span><br><span class="line"><span class="comment">#            - AddRequestHeader=Truth, coderyech is freaking awesome #添加请求头</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://orderservice</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Before=2027-01-20T17:42:47.789-07:00[Asia/Shanghai]</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">coderyech</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome</span> <span class="comment">#添加全局请求头</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://www.leyou.com&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud</title>
      <link href="/posts/42622.html"/>
      <url>/posts/42622.html</url>
      
        <content type="html"><![CDATA[<h1>SpringCloud01</h1><h1>1.认识微服务</h1><p>随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。这些架构之间有怎样的差别呢？</p><h2 id="1-0-学习目标">1.0.学习目标</h2><p>了解微服务架构的优缺点</p><h2 id="1-1-单体架构">1.1.单体架构</h2><p><strong>单体架构</strong>：将业务的所有功能集中在一个项目中开发，打成一个包部署。</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220815223320.png" alt="image-20220815223320782"></p><p>单体架构的优缺点如下：</p><p><strong>优点：</strong></p><ul><li>架构简单</li><li>部署成本低</li></ul><p><strong>缺点：</strong></p><ul><li>耦合度高（维护困难、升级困难）</li></ul><h2 id="1-2-分布式架构">1.2.分布式架构</h2><p><strong>分布式架构</strong>：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220815223336.png" alt="image-20220815223336279"></p><p>分布式架构的优缺点：</p><p><strong>优点：</strong></p><ul><li>降低服务耦合</li><li>有利于服务升级和拓展</li></ul><p><strong>缺点：</strong></p><ul><li>服务调用关系错综复杂</li></ul><p>分布式架构虽然降低了服务耦合，但是服务拆分时也有很多问题需要思考：</p><ul><li>服务拆分的粒度如何界定？</li><li>服务之间如何调用？</li><li>服务的调用关系如何管理？</li></ul><p>人们需要制定一套行之有效的标准来约束分布式架构。</p><h2 id="1-3-微服务">1.3.微服务</h2><p>微服务的架构特征：</p><ul><li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</li><li>自治：团队独立、技术独立、数据独立，独立部署和交付</li><li>面向服务：服务提供统一标准的接口，与语言和技术无关</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li></ul><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220815223355.png" alt="image-20220815223355431"></p><p>微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到高内聚，低耦合。</p><p>因此，可以认为<strong>微服务</strong>是一种经过良好架构设计的<strong>分布式架构方案</strong> 。</p><p>但方案该怎么落地？选用什么样的技术栈？全球的互联网公司都在积极尝试自己的微服务落地方案。</p><p>其中在Java领域最引人注目的就是SpringCloud提供的方案了。</p><h2 id="1-4-SpringCloud">1.4.SpringCloud</h2><p>SpringCloud是目前国内使用最广泛的微服务框架。官网地址：<a href="https://spring.io/projects/spring-cloud%E3%80%82">https://spring.io/projects/spring-cloud。</a></p><p>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</p><p>其中常见的组件包括：</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220815223414.png" alt="image-20220815223414443"></p><p>另外，SpringCloud底层是依赖于SpringBoot的，并且有版本的兼容关系，如下：</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220815223425.png" alt="image-20220815223425246"></p><p>我们课堂学习的版本是 Hoxton.SR10，因此对应的SpringBoot版本是2.3.x版本。</p><h2 id="1-5-总结">1.5.总结</h2><ul><li><p>单体架构：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</p></li><li><p>分布式架构：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东、淘宝</p></li><li><p>微服务：一种良好的分布式架构方案</p><p>①优点：拆分粒度更小、服务更独立、耦合度更低</p><p>②缺点：架构非常复杂，运维、监控、部署难度提高</p></li><li><p>SpringCloud是微服务架构的一站式解决方案，集成了各种优秀微服务功能组件</p></li></ul><h1>2.服务拆分和远程调用</h1><p>任何分布式架构都离不开服务的拆分，微服务也是一样。</p><h2 id="2-1-服务拆分原则">2.1.服务拆分原则</h2><p>这里我总结了微服务拆分时的几个原则：</p><ul><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其它微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li></ul><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220815223439.png" alt="image-20220815223439097"></p><h2 id="2-2-服务拆分示例">2.2.服务拆分示例</h2><p>以课前资料中的微服务cloud-demo为例，其结构如下：</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220815223453.png" alt="image-20220815223453566"></p><p>cloud-demo：父工程，管理依赖</p><ul><li>order-service：订单微服务，负责订单相关业务</li><li>user-service：用户微服务，负责用户相关业务</li></ul><p>要求：</p><ul><li>订单微服务和用户微服务都必须有各自的数据库，相互独立</li><li>订单服务和用户服务都对外暴露Restful的接口</li><li>订单服务如果需要查询用户信息，只能调用用户服务的Restful接口，不能查询用户数据库</li></ul><h3 id="2-2-1-导入Sql语句">2.2.1.导入Sql语句</h3><p>首先，将课前资料提供的<code>cloud-order.sql</code>和<code>cloud-user.sql</code>导入到mysql中：</p><p><img src="assets/image-20210713211417049.png" alt="image-20210713211417049"></p><p>cloud-user表中初始数据如下：</p><p><img src="assets/image-20210713211550169.png" alt="image-20210713211550169"></p><p>cloud-order表中初始数据如下：</p><p><img src="assets/image-20210713211657319.png" alt="image-20210713211657319"></p><p>cloud-order表中持有cloud-user表中的id字段。</p><h3 id="2-2-2-导入demo工程">2.2.2.导入demo工程</h3><p>用IDEA导入课前资料提供的Demo：</p><p><img src="assets/image-20210713211814094.png" alt="image-20210713211814094"></p><p>项目结构如下：</p><p><img src="assets/image-20210713212656887.png" alt="image-20210713212656887"></p><p>导入后，会在IDEA右下角出现弹窗：</p><p><img src="assets/image-20210713212349272.png" alt="image-20210713212349272"></p><p>点击弹窗，然后按下图选择：</p><p><img src="assets/image-20210713212336185.png" alt="image-20210713212336185"></p><p>会出现这样的菜单：</p><p><img src="assets/image-20210713212513324.png" alt="image-20210713212513324"></p><p>配置下项目使用的JDK：</p><p><img src="assets/image-20210713220736408.png" alt="image-20210713220736408"></p><h2 id="2-3-实现远程调用案例">2.3.实现远程调用案例</h2><p>在order-service服务中，有一个根据id查询订单的接口：</p><p><img src="assets/image-20210713212749575.png" alt="image-20210713212749575"></p><p>根据id查询订单，返回值是Order对象，如图：</p><p><img src="assets/image-20210713212901725.png" alt="image-20210713212901725"></p><p>其中的user为null</p><p>在user-service中有一个根据id查询用户的接口：</p><p><img src="assets/image-20210713213146089.png" alt="image-20210713213146089"></p><p>查询的结果如图：</p><p><img src="assets/image-20210713213213075.png" alt="image-20210713213213075"></p><h3 id="2-3-1-案例需求：">2.3.1.案例需求：</h3><p>修改order-service中的根据id查询订单业务，要求在查询订单的同时，根据订单中包含的userId查询出用户信息，一起返回。</p><p><img src="assets/image-20210713213312278.png" alt="image-20210713213312278"></p><p>因此，我们需要在order-service中 向user-service发起一个http的请求，调用http://localhost:8081/user/{userId}这个接口。</p><p>大概的步骤是这样的：</p><ul><li>注册一个RestTemplate的实例到Spring容器</li><li>修改order-service服务中的OrderService类中的queryOrderById方法，根据Order对象中的userId查询User</li><li>将查询的User填充到Order对象，一起返回</li></ul><h3 id="2-3-2-注册RestTemplate">2.3.2.注册RestTemplate</h3><p>首先，我们在order-service服务中的OrderApplication启动类中，注册RestTemplate实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-实现远程调用">2.3.3.实现远程调用</h3><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法：</p><p><img src="assets/image-20210713213959569.png" alt="image-20210713213959569"></p><h2 id="2-4-提供者与消费者">2.4.提供者与消费者</h2><p>在服务调用关系中，会有两个不同的角色：</p><p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</p><p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p><p><img src="assets/image-20210713214404481.png" alt="image-20210713214404481"></p><p>但是，服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言。</p><p>如果服务A调用了服务B，而服务B又调用了服务C，服务B的角色是什么？</p><ul><li>对于A调用B的业务而言：A是服务消费者，B是服务提供者</li><li>对于B调用C的业务而言：B是服务消费者，C是服务提供者</li></ul><p>因此，服务B既可以是服务提供者，也可以是服务消费者。</p><h1>3.Eureka注册中心</h1><p>假如我们的服务提供者user-service部署了多个实例，如图：</p><p><img src="assets/image-20210713214925388.png" alt="image-20210713214925388"></p><p>大家思考几个问题：</p><ul><li>order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？</li><li>有多个user-service实例地址，order-service调用时该如何选择？</li><li>order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</li></ul><h2 id="3-1-Eureka的结构和作用">3.1.Eureka的结构和作用</h2><p>这些问题都需要利用SpringCloud中的注册中心来解决，其中最广为人知的注册中心就是Eureka，其结构如下：</p><p><img src="assets/image-20210713220104956.png" alt="image-20210713220104956"></p><p>回答之前的各个问题。</p><p>问题1：order-service如何得知user-service实例地址？</p><p>获取地址信息的流程如下：</p><ul><li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）。这个叫服务注册</li><li>eureka-server保存服务名称到服务实例地址列表的映射关系</li><li>order-service根据服务名称，拉取实例地址列表。这个叫服务发现或服务拉取</li></ul><p>问题2：order-service如何从多个user-service实例中选择具体的实例？</p><ul><li>order-service从实例列表中利用负载均衡算法选中一个实例地址</li><li>向该实例地址发起远程调用</li></ul><p>问题3：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p><ul><li>user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己状态，称为心跳</li><li>当超过一定时间没有发送心跳时，eureka-server会认为微服务实例故障，将该实例从服务列表中剔除</li><li>order-service拉取服务时，就能将故障实例排除了</li></ul><blockquote><p>注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端</p></blockquote><p>因此，接下来我们动手实践的步骤包括：</p><p><img src="assets/image-20210713220509769.png" alt="image-20210713220509769"></p><h2 id="3-2-搭建eureka-server">3.2.搭建eureka-server</h2><p>首先大家注册中心服务端：eureka-server，这必须是一个独立的微服务</p><h3 id="3-2-1-创建eureka-server服务">3.2.1.创建eureka-server服务</h3><p>在cloud-demo父工程下，创建一个子模块：</p><p><img src="assets/image-20210713220605881.png" alt="image-20210713220605881"></p><p>填写模块信息：</p><p><img src="assets/image-20210713220857396.png" alt="image-20210713220857396"></p><p>然后填写服务信息：</p><p><img src="assets/image-20210713221339022.png" alt="image-20210713221339022"></p><h3 id="3-2-2-引入eureka依赖">3.2.2.引入eureka依赖</h3><p>引入SpringCloud为eureka提供的starter依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-编写启动类">3.2.3.编写启动类</h3><p>给eureka-server服务编写一个启动类，一定要添加一个@EnableEurekaServer注解，开启eureka的注册中心功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.eureka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-编写配置文件">3.2.4.编写配置文件</h3><p>编写一个application.yml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="3-2-5-启动服务">3.2.5.启动服务</h3><p>启动微服务，然后在浏览器访问：<a href="http://127.0.0.1:10086">http://127.0.0.1:10086</a></p><p>看到下面结果应该是成功了：</p><p><img src="assets/image-20210713222157190.png" alt="image-20210713222157190"></p><h2 id="3-3-服务注册">3.3.服务注册</h2><p>下面，我们将user-service注册到eureka-server中去。</p><h3 id="1）引入依赖">1）引入依赖</h3><p>在user-service的pom文件中，引入下面的eureka-client依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）配置文件">2）配置文件</h3><p>在user-service中，修改application.yml文件，添加服务名称、eureka地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="3）启动多个user-service实例">3）启动多个user-service实例</h3><p>为了演示一个服务有多个实例的场景，我们添加一个SpringBoot的启动配置，再启动一个user-service。</p><p>首先，复制原来的user-service启动配置：</p><p><img src="assets/image-20210713222656562.png" alt="image-20210713222656562"></p><p>然后，在弹出的窗口中，填写信息：</p><p><img src="assets/image-20210713222757702.png" alt="image-20210713222757702"></p><p>现在，SpringBoot窗口会出现两个user-service启动配置：</p><p><img src="assets/image-20210713222841951.png" alt="image-20210713222841951"></p><p>不过，第一个是8081端口，第二个是8082端口。</p><p>启动两个user-service实例：</p><p><img src="assets/image-20210713223041491.png" alt="image-20210713223041491"></p><p>查看eureka-server管理页面：</p><p><img src="assets/image-20210713223150650.png" alt="image-20210713223150650"></p><h2 id="3-4-服务发现">3.4.服务发现</h2><p>下面，我们将order-service的逻辑修改：向eureka-server拉取user-service的信息，实现服务发现。</p><h3 id="1）引入依赖-2">1）引入依赖</h3><p>之前说过，服务发现、服务注册统一都封装在eureka-client依赖，因此这一步与服务注册时一致。</p><p>在order-service的pom文件中，引入下面的eureka-client依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）配置文件-2">2）配置文件</h3><p>服务发现也需要知道eureka地址，因此第二步与服务注册一致，都是配置eureka信息：</p><p>在order-service中，修改application.yml文件，添加服务名称、eureka地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="3）服务拉取和负载均衡">3）服务拉取和负载均衡</h3><p>最后，我们要去eureka-server中拉取user-service服务的实例列表，并且实现负载均衡。</p><p>不过这些动作不用我们去做，只需要添加一些注解即可。</p><p>在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解：</p><p><img src="assets/image-20210713224049419.png" alt="image-20210713224049419"></p><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法。修改访问的url路径，用服务名代替ip、端口：</p><p><img src="assets/image-20210713224245731.png" alt="image-20210713224245731"></p><p>spring会自动帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，而后完成负载均衡。</p><h1>4.Ribbon负载均衡</h1><p>上一节中，我们添加了@LoadBalanced注解，即可实现负载均衡功能，这是什么原理呢？</p><h2 id="4-1-负载均衡原理">4.1.负载均衡原理</h2><p>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。</p><p><img src="assets/image-20210713224517686.png" alt="image-20210713224517686"></p><p>那么我们发出的请求明明是http://userservice/user/1，怎么变成了http://localhost:8081的呢？</p><h2 id="4-2-源码跟踪">4.2.源码跟踪</h2><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p><p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p><p>我们进行源码跟踪：</p><h3 id="1）LoadBalancerIntercepor">1）LoadBalancerIntercepor</h3><p><img src="assets/1525620483637.png" alt="1525620483637"></p><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p><ul><li><code>request.getURI()</code>：获取请求uri，本例中就是 <a href="http://user-service/user/8">http://user-service/user/8</a></li><li><code>originalUri.getHost()</code>：获取uri路径的主机名，其实就是服务id，<code>user-service</code></li><li><code>this.loadBalancer.execute()</code>：处理服务id，和用户请求。</li></ul><p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p><h3 id="2）LoadBalancerClient">2）LoadBalancerClient</h3><p>继续跟入execute方法：</p><p><img src="assets/1525620787090.png" alt="1525620787090"></p><p>代码是这样的：</p><ul><li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li><li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务</li></ul><p>放行后，再次访问并跟踪，发现获取的是8081：</p><p><img src="assets/1525620835911.png" alt="1525620835911"></p><p>果然实现了负载均衡。</p><h3 id="3）负载均衡策略IRule">3）负载均衡策略IRule</h3><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法来做负载均衡:</p><p><img src="assets/1525620835911.png" alt="1525620835911"></p><p>我们继续跟入：</p><p><img src="assets/1544361421671.png" alt="1544361421671"></p><p>继续跟踪源码chooseServer方法，发现这么一段代码：</p><p><img src="assets/1525622652849.png" alt="1525622652849"></p><p>我们看看这个rule是谁：</p><p><img src="assets/1525622699666.png" alt="1525622699666"></p><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><p><img src="assets/1525622754316.png" alt="1525622754316"></p><p>这不就是轮询的意思嘛。</p><p>到这里，整个负载均衡的流程我们就清楚了。</p><h3 id="4）总结">4）总结</h3><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p><p><img src="assets/image-20210713224724673.png" alt="image-20210713224724673"></p><p>基本流程如下：</p><ul><li>拦截我们的RestTemplate请求http://userservice/user/1</li><li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li><li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li><li>eureka返回列表，localhost:8081、localhost:8082</li><li>IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081</li><li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到http://localhost:8081/user/1，发起真实请求</li></ul><h2 id="4-3-负载均衡策略">4.3.负载均衡策略</h2><h3 id="4-3-1-负载均衡策略">4.3.1.负载均衡策略</h3><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p><p><img src="assets/image-20210713225653000.png" alt="image-20210713225653000"></p><p>不同规则的含义如下：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p><h3 id="4-3-2-自定义负载均衡策略">4.3.2.自定义负载均衡策略</h3><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><ol><li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span> <span class="comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p></blockquote><h2 id="4-4-饥饿加载">4.4.饥饿加载</h2><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">userservice</span></span><br></pre></td></tr></table></figure><h1>5.Nacos注册中心</h1><p>国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。</p><h2 id="5-1-认识和安装Nacos">5.1.认识和安装Nacos</h2><p><a href="https://nacos.io/">Nacos</a>是阿里巴巴的产品，现在是<a href="https://spring.io/projects/spring-cloud">SpringCloud</a>中的一个组件。相比<a href="https://github.com/Netflix/eureka">Eureka</a>功能更加丰富，在国内受欢迎程度较高。</p><p><img src="assets/image-20210713230444308.png" alt="image-20210713230444308"></p><p>安装方式可以参考课前资料《<a href="http://xn--Nacos-w47hp30co9nr93f.md">Nacos安装指南.md</a>》</p><h2 id="5-2-服务注册到nacos">5.2.服务注册到nacos</h2><p>Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。</p><p>主要差异在于：</p><ul><li>依赖不同</li><li>服务地址不同</li></ul><h3 id="1）引入依赖-3">1）引入依赖</h3><p>在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的依赖。</p></blockquote><h3 id="2）配置nacos地址">2）配置nacos地址</h3><p>在user-service和order-service的application.yml中添加nacos地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的地址</p></blockquote><h3 id="3）重启">3）重启</h3><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p><p><img src="assets/image-20210713231439607.png" alt="image-20210713231439607"></p><h2 id="5-3-服务分级存储模型">5.3.服务分级存储模型</h2><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><p><img src="assets/image-20210713232522531.png" alt="image-20210713232522531"></p><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><p><img src="assets/image-20210713232658928.png" alt="image-20210713232658928"></p><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><h3 id="5-3-1-给user-service配置集群">5.3.1.给user-service配置集群</h3><p>修改user-service的application.yml文件，添加集群配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure><p>重启两个user-service实例后，我们可以在nacos控制台看到下面结果：</p><p><img src="assets/image-20210713232916215.png" alt="image-20210713232916215"></p><p>我们再次复制一个user-service启动配置，添加属性：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dserver.port=8083 -Dspring.cloud.nacos.discovery.cluster-name=SH</span><br></pre></td></tr></table></figure><p>配置如图所示：</p><p><img src="assets/image-20210713233528982.png" alt="image-20210713233528982"></p><p>启动UserApplication3后再次查看nacos控制台：</p><p><img src="assets/image-20210713233727923.png" alt="image-20210713233727923"></p><h3 id="5-3-2-同集群优先的负载均衡">5.3.2.同集群优先的负载均衡</h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><p>1）给order-service配置集群信息</p><p>修改order-service的application.yml文件，添加集群配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:8848</span><br><span class="line">      discovery:</span><br><span class="line">        cluster-name: HZ <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure><p>2）修改负载均衡规则</p><p>修改order-service的application.yml文件，修改负载均衡规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure><h2 id="5-4-权重配置">5.4.权重配置</h2><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p><p><img src="assets/image-20210713235133225.png" alt="image-20210713235133225"></p><p>在弹出的编辑窗口，修改权重：</p><p><img src="assets/image-20210713235235219.png" alt="image-20210713235235219"></p><blockquote><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote><h2 id="5-5-环境隔离">5.5.环境隔离</h2><p>Nacos提供了namespace来实现环境隔离功能。</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><p><img src="assets/image-20210714000101516.png" alt="image-20210714000101516"></p><h3 id="5-5-1-创建namespace">5.5.1.创建namespace</h3><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><p><img src="assets/image-20210714000414781.png" alt="image-20210714000414781"></p><p>我们可以点击页面新增按钮，添加一个namespace：</p><p><img src="assets/image-20210714000440143.png" alt="image-20210714000440143"></p><p>然后，填写表单：</p><p><img src="assets/image-20210714000505928.png" alt="image-20210714000505928"></p><p>就能在页面看到一个新的namespace：</p><p><img src="assets/image-20210714000522913.png" alt="image-20210714000522913"></p><h3 id="5-5-2-给微服务配置namespace">5.5.2.给微服务配置namespace</h3><p>给微服务配置namespace只能通过修改配置来实现。</p><p>例如，修改order-service的application.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="comment"># 命名空间，填ID</span></span><br></pre></td></tr></table></figure><p>重启order-service后，访问控制台，可以看到下面的结果：</p><p><img src="assets/image-20210714000830703.png" alt="image-20210714000830703"></p><p><img src="assets/image-20210714000837140.png" alt="image-20210714000837140"></p><p>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错：</p><p><img src="assets/image-20210714000941256.png" alt="image-20210714000941256"></p><h2 id="5-6-Nacos与Eureka的区别">5.6.Nacos与Eureka的区别</h2><p>Nacos的服务实例分为两种l类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置为非临时实例</span></span><br></pre></td></tr></table></figure><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><p><img src="assets/image-20210714001728017.png" alt="image-20210714001728017"></p><ul><li><p>Nacos与eureka的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos与Eureka的区别</p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot项目中如何使用全局异常处理和自定义业务异常</title>
      <link href="/posts/213a3232.html"/>
      <url>/posts/213a3232.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-统一捕获异常">一. 统一捕获异常</h3><p>统一捕获异常，使用AOP的思想，解决在controller中大量try-catch重复代码。</p><ul><li><code>@RestControllerAdvice</code> ： 贴在类上，<code>@RestControllerAdvice</code>的增强，同时可以在controller执行前后做一些额外逻辑。</li><li><code>@ExceptionHandler(异常类.class)</code> ：贴在方法上，可捕获指定类型的异常。</li></ul><h3 id="二-使用枚举封装返回的异常信息">二. 使用枚举封装返回的异常信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc.enums;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/19 11:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 系统错误异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">YmccSystemError</span> &#123;</span><br><span class="line">    SYSTEM_ERROR(<span class="string">&quot;10010&quot;</span>, <span class="string">&quot;系统错误,正在加班修理中-_-&quot;</span>),</span><br><span class="line">    SYSTEM_OAUTH_ERROR(<span class="string">&quot;10020&quot;</span>, <span class="string">&quot;你没有权限访问!未授权!&quot;</span>),</span><br><span class="line">    SYSTEM_PARAM_ERROR(<span class="string">&quot;10030&quot;</span>, <span class="string">&quot;数据格式错误&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错误码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="comment">// 错误信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    YmccSystemError(String code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-自定义业务异常">三. 自定义业务异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.enums.YmccSystemError;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/19 11:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 自定义业务异常</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> YmccSystemError systemError;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(YmccSystemError systemError)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.systemError = systemError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(String message, String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局异常代码：包含三种全局异常处理">全局异常代码：包含三种全局异常处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.enums.YmccSystemError;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.result.JSONResult;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ObjectError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/19 11:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">// controller全局异常处理</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义需要捕获的业务异常 主动抛出的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JSONResult <span class="title function_">businessException</span><span class="params">(HttpServletResponse response, BusinessException ex)</span> &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;业务异常：&#123;&#125;&quot;</span>, ex.getSystemError().getMessage() + <span class="string">&quot;:&quot;</span> + ex.getSystemError().getCode());</span><br><span class="line">        log.warn(<span class="string">&quot;错误代码：&#123;&#125;&quot;</span>, response.getStatus());</span><br><span class="line">        <span class="keyword">return</span> JSONResult.error(ex.getSystemError());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义需要捕获的系统异常 未知情况下发生的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> JSONResult <span class="title function_">globalException</span><span class="params">(HttpServletResponse response, Exception ex)</span> &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        log.warn(<span class="string">&quot;全局系统异常：&#123;&#125;&quot;</span>, ex.getMessage());</span><br><span class="line">        log.warn(<span class="string">&quot;错误代码：&#123;&#125;&quot;</span>, response.getStatus());</span><br><span class="line">        <span class="keyword">return</span> JSONResult.error(YmccSystemError.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义需要捕获的参数异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JSONResult <span class="title function_">parameterException</span><span class="params">(HttpServletResponse response, MethodArgumentNotValidException ex)</span> &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuffer</span> <span class="variable">paramInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;数据格式错误：&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> List&lt;ObjectError&gt; errors = ex.getBindingResult().getAllErrors();</span><br><span class="line">        errors.forEach(err -&gt; &#123;</span><br><span class="line">            paramInfo.append(err.getDefaultMessage()).append(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 去除末尾分号</span></span><br><span class="line">        paramInfo.deleteCharAt(paramInfo.lastIndexOf(<span class="string">&quot;;&quot;</span>));</span><br><span class="line">        log.warn(<span class="string">&quot;参数异常：&#123;&#125;&quot;</span>, paramInfo.toString());</span><br><span class="line">        log.warn(<span class="string">&quot;错误代码：&#123;&#125;&quot;</span>, response.getStatus());</span><br><span class="line">        <span class="keyword">return</span> JSONResult.error(paramInfo.toString(), YmccSystemError.SYSTEM_PARAM_ERROR.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="统一返回结果类">统一返回结果类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.enums.YmccSystemError;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回JSON结果</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//建造者模式</span></span><br><span class="line"><span class="comment">//@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JSONResult</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误码，用来描述错误类型 ，1000 表示么有错误</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;1000&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回的数据</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建当前实例</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONResult <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JSONResult</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建当前实例</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONResult <span class="title function_">success</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="type">JSONResult</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONResult</span>();</span><br><span class="line">        instance.setData(obj);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONResult <span class="title function_">success</span><span class="params">(Object obj, String code)</span> &#123;</span><br><span class="line">        <span class="type">JSONResult</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONResult</span>();</span><br><span class="line">        instance.setCode(code);</span><br><span class="line">        instance.setData(obj);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建当前实例</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONResult <span class="title function_">error</span><span class="params">(String message, String code)</span> &#123;</span><br><span class="line">        <span class="type">JSONResult</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONResult</span>();</span><br><span class="line">        instance.setMessage(message);</span><br><span class="line">        instance.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        instance.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONResult <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JSONResult</span> <span class="variable">jsonResult</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONResult</span>();</span><br><span class="line">        jsonResult.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> jsonResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建当前实例</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONResult <span class="title function_">error</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> error(message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONResult <span class="title function_">error</span><span class="params">(YmccSystemError ex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> error(ex.getMessage(), ex.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONResult <span class="title function_">error</span><span class="params">(BusinessException ex)</span> &#123;</span><br><span class="line">        <span class="type">JSONResult</span> <span class="variable">jsonResult</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONResult</span>();</span><br><span class="line">        jsonResult.setSuccess(<span class="literal">false</span>);</span><br><span class="line">        jsonResult.setMessage(ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> jsonResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-JSR303校验">四.JSR303校验</h3><ol><li><h4 id="导入依赖">导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="Bean-Validation-中内置的-constraint">Bean Validation 中内置的 constraint</h4></li></ol><p><strong>相关注解</strong></p><table><thead><tr><th style="text-align:left">Constraint</th><th style="text-align:left">详细信息</th></tr></thead><tbody><tr><td style="text-align:left"><code>@Null</code></td><td style="text-align:left">被注释的元素必须为 <code>null</code></td></tr><tr><td style="text-align:left"><code>@NotNull</code></td><td style="text-align:left">被注释的元素必须不为 <code>null</code></td></tr><tr><td style="text-align:left"><code>@AssertTrue</code></td><td style="text-align:left">被注释的元素必须为 <code>true</code></td></tr><tr><td style="text-align:left"><code>@AssertFalse</code></td><td style="text-align:left">被注释的元素必须为 <code>false</code></td></tr><tr><td style="text-align:left"><code>@Min(value)</code></td><td style="text-align:left">被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td style="text-align:left"><code>@Max(value)</code></td><td style="text-align:left">被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td style="text-align:left"><code>@DecimalMin(value)</code></td><td style="text-align:left">被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td style="text-align:left"><code>@DecimalMax(value)</code></td><td style="text-align:left">被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td style="text-align:left"><code>@Size(max, min)</code></td><td style="text-align:left">被注释的元素的大小必须在指定的范围内</td></tr><tr><td style="text-align:left"><code>@Digits (integer, fraction)</code></td><td style="text-align:left">被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td style="text-align:left"><code>@Past</code></td><td style="text-align:left">被注释的元素必须是一个过去的日期</td></tr><tr><td style="text-align:left"><code>@Future</code></td><td style="text-align:left">被注释的元素必须是一个将来的日期</td></tr><tr><td style="text-align:left"><code>@Pattern(value)</code></td><td style="text-align:left">被注释的元素必须符合指定的正则表达式</td></tr></tbody></table><table><thead><tr><th style="text-align:left">Constraint</th><th style="text-align:left">详细信息</th></tr></thead><tbody><tr><td style="text-align:left"><code>@Email</code></td><td style="text-align:left">被注释的元素必须是电子邮箱地址</td></tr><tr><td style="text-align:left"><code>@Length</code></td><td style="text-align:left">被注释的字符串的大小必须在指定的范围内</td></tr><tr><td style="text-align:left"><code>@NotEmpty</code></td><td style="text-align:left">被注释的字符串的必须非空</td></tr><tr><td style="text-align:left"><code>@Range</code></td><td style="text-align:left">被注释的元素必须在合适的范围内</td></tr></tbody></table><ol start="3"><li><h4 id="在参数实体类的字段上注解">在参数实体类的字段上注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotBlank(message = &quot;姓名不允许为空&quot;)</span></span><br><span class="line"><span class="meta">@TableField(&quot;real_name&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String realName;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pattern(regexp = &quot;^1(3\\d|4[5-9]|5[0-35-9]|6[567]|7[0-8]|8\\d|9[0-35-9])\\d&#123;8&#125;$&quot;, message = &quot;手机号格式错误&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String tel;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Email(message = &quot;邮箱格式错误&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure><ol start="4"><li><h4 id="开启校验">开启校验</h4><p>@Valid 或者 @Validated都可以标识该类需要进行校验，在类上也可以加该注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/save&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> JSONResult <span class="title function_">saveOrUpdate</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user.getId() != <span class="literal">null</span>) &#123;</span><br><span class="line">        userService.updateById(user);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        user.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JSONResult.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="五-自定义校验注解">五.自定义校验注解</h3><ol><li><h4 id="定义校验注解">定义校验注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc.anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.validator.PhoneValidator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/19 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = PhoneValidator.class)</span><span class="comment">//此处指定了注解的实现类为PhoneValidator</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Phone &#123;<span class="comment">// 用来校验手机号码的注解</span></span><br><span class="line"></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;无效的手机格式&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="定义校验器">定义校验器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc.validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.anno.Phone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/19 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;Phone, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PHONE_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(17[013678])|(18[0-9]))\\d&#123;8&#125;$&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(Phone constraintAnnotation)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line">        <span class="comment">//对值进行手机号正则判断</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(PHONE_REGEX);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(value);</span><br><span class="line">        <span class="keyword">return</span> m.matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="使用校验注解">使用校验注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 校验手机号</span></span><br><span class="line"><span class="meta">@Phone</span> </span><br><span class="line"><span class="keyword">private</span> String tel;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot使用Quartz定时任务删除redis中的物品</title>
      <link href="/posts/3563b678.html"/>
      <url>/posts/3563b678.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-导入依赖">一. 导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二-模型数据">二. 模型数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/6 10:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsDTO</span> &#123;</span><br><span class="line">    <span class="comment">// 主键</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 商品数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    <span class="comment">// 商品名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 用户</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="comment">// 当前时间</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">time</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>().getTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-自定义redis模板配置">三. 自定义redis模板配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.spring.GenericFastJsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓存的配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory factory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用JSON进行序列化</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//JSON格式序列化</span></span><br><span class="line">        <span class="type">GenericFastJsonRedisSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericFastJsonRedisSerializer</span>();</span><br><span class="line">         <span class="comment">//key的序列化</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">//value的序列化</span></span><br><span class="line">        redisTemplate.setValueSerializer(serializer);</span><br><span class="line">        <span class="comment">//hash结构key的序列化</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">//hash结构value的序列化</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(serializer);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="yml配置">yml配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sue:</span></span><br><span class="line">  <span class="attr">spring:</span></span><br><span class="line">    <span class="attr">quartz:</span></span><br><span class="line">      <span class="attr">cron:</span> <span class="string">&quot;*/10 * * * * ?&quot;</span> <span class="comment"># [秒] [分] [小时] [日] [月] [周] [年] 每隔5秒执行一次</span></span><br></pre></td></tr></table></figure><h3 id="四-Quartz配置">四. Quartz配置</h3><ol><li><p>定时任务代码功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc.quartz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson2.JSON;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.dto.GoodsDTO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/6 11:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzCartJob</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Object, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 每隔10秒执行一次</span></span><br><span class="line">        <span class="comment">// 获取redis中所有的商品</span></span><br><span class="line">        Set&lt;Object&gt; keys = redisTemplate.keys((<span class="string">&quot;cache:goods:*&quot;</span>));<span class="comment">// 获取所有key</span></span><br><span class="line">        <span class="keyword">assert</span> keys != <span class="literal">null</span>;</span><br><span class="line">        keys.forEach(key -&gt; &#123;</span><br><span class="line">            <span class="comment">// 遍历每一个key 获取当前key的所有值</span></span><br><span class="line">            List&lt;Object&gt; values = redisTemplate.opsForHash().values(key);</span><br><span class="line">            List&lt;GoodsDTO&gt; goodsDTOS = JSON.parseArray(JSON.toJSONString(values), GoodsDTO.class);</span><br><span class="line">            <span class="comment">// 遍历货品</span></span><br><span class="line">            goodsDTOS.forEach(goodsDTO -&gt; &#123;</span><br><span class="line">                <span class="comment">// 判断存储时间是否大于一分钟</span></span><br><span class="line">                <span class="keyword">if</span> (System.currentTimeMillis() - goodsDTO.getTime() &gt; <span class="number">1000</span> * <span class="number">60</span>) &#123;</span><br><span class="line">                    <span class="comment">// 删除此物品</span></span><br><span class="line">                    redisTemplate.opsForHash().delete(key, goodsDTO.getId().toString());</span><br><span class="line">                    log.info(<span class="string">&quot;定时删除成功&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(keys);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> (String) context.getJobDetail().getJobDataMap().get(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userName:&quot;</span> + userName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc.quartz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/6 11:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;sue.spring.quartz.cron&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cron;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">quartzCartJobDetail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(QuartzCartJob.class)</span><br><span class="line">                .withIdentity(<span class="string">&quot;quartzCartJobDetail&quot;</span>, <span class="string">&quot;QUARTZ_CART&quot;</span>)</span><br><span class="line">                .usingJobData(<span class="string">&quot;userName&quot;</span>, <span class="string">&quot;coderyeah&quot;</span>)</span><br><span class="line">                .storeDurably()</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> jobDetail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建触发器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">quartzCartJobTrigger</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//每隔5秒执行一次</span></span><br><span class="line">        <span class="type">CronScheduleBuilder</span> <span class="variable">cronScheduleBuilder</span> <span class="operator">=</span> CronScheduleBuilder.cronSchedule(cron);</span><br><span class="line">        <span class="comment">//创建触发器</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .forJob(quartzCartJobDetail())</span><br><span class="line">                .withIdentity(<span class="string">&quot;quartzCartJobTrigger&quot;</span>, <span class="string">&quot;QUARTZ_CART_JOB_TRIGGER&quot;</span>)</span><br><span class="line">                .withSchedule(cronScheduleBuilder)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> trigger;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot的基础使用和thymeleaf</title>
      <link href="/posts/46611.html"/>
      <url>/posts/46611.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是SpringBoot">一. 什么是SpringBoot</h3><ol><li>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring<strong>配置</strong>和<strong>启动</strong>的。</li></ol><h3 id="二-SpringBoot的优势">二. SpringBoot的优势</h3><ul><li>快速启动：Spring Boot内置了Web容器，可以快速启动一个Web项目</li><li>简化配置：Spring Boot提供了一种特殊的方式，使得我们无需再编辑大量的配置文件，提高开发效率</li><li>易上手：Spring Boot在Spring的基础上进行优化，上手非常简单</li><li>无需手动管理依赖jar包的版本<ul><li>Spring Boot把需要使用到的技术的jar包整合为一个Spring Boot Starter，并且每个Spring Boot版本都有定义好的一些默认版本，会随着Spring Boot版本的升级而升级这些技术的Jar包，也可以自定义指定版本但是不推荐。</li><li>springboot 1.x springboot2.x</li><li>常见的Spring Boot Starter<ul><li>spring-boot-starter-web：Web支持，其实就是springmvc简化使用，jar包组</li><li>Spring-boot-starter-jdbc: springboot对jdbc支持</li><li>Spring-boot-starter-data-jpa: springboot对data jpa支持</li><li>Spring-boot-starter-mybatis: springboot对mybatis支持</li><li>Spring-boot-starter-test：springboot对test支持</li></ul></li></ul></li><li>注意：Spring Boot所有简化都与Maven有关，其根本是通过封装Maven方式对Spring应用开发进行进一步的封装和简化。</li></ul><h3 id="三-maven的父子项目">三. maven的父子项目</h3><ul><li>父项目：只负责管理jar包，用于给子模块继承，不写任何代码；</li><li>子模块：<ul><li>如果是公共jar包从父项目中继承，如果是本模块独有的jar包就在本模块中引入</li><li>编写模块对应功能代码</li></ul></li></ul><h3 id="四-创建SpringBoot项目">四. 创建SpringBoot项目</h3><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Spring Boot 父节点依赖,引入这个之后相关的引入就不需要添加version配置，Spring Boot会自动选择最合适的版本进行添加</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加Web依赖</p><ul><li><p>可以添加到父项目，也可以是子模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加spring-boot-starter-web依赖，引入此依赖之后，web相关jar包全部都会引入进来 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- SpringBoot依赖组ID，固定写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 只要是被SpringBoot管理的jar包，那么在引入的时候都是spring-boot-starter-Xxx --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>编写启动类</p><ul><li><p>启动类的位置一定要在域名包下，否则注解扫描失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span><span class="comment">//启动类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>@SpringBootApplication</code></p><ul><li>在启动类中的<code>@SpringBootApplication</code>中有一个组件扫描注解<code>@ComponentScan</code>，此注解会帮助我们扫描启动类同级包以及启动类一下的所有包，所以只要我们的启动类位置放对了，那么所有注解都会扫描到;由spring帮我们管理。</li><li><code>@SpringBootApplication</code>是一个复合注解：此注解中的重要注解<ul><li><code>@SpringBootConfiguration</code>：标注在某个类上，表示这是一个<code>SpringBoot</code>的配置类</li><li><code>@EnableAutoConfiguration</code>：告诉<code>SpringBoot</code>开启自动配置功能</li><li><code>@ComponentScan</code>：组件扫描注解，<code>SpringBoot</code>默认配置就是去扫描启动类包及其以下所有包</li></ul></li></ul></li></ol><h3 id="五-SpringBoot启动的三种方式">五. SpringBoot启动的三种方式</h3><ol><li><p>main方法启动-开发环境；</p></li><li><p>引入插件通过插件启动, 双击插件中的spring-boot-run启动。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringBoot启动插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--fork :  如果没有该项配置，可能devtools不会起作用，即应用不会restart --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220825192206.png" alt="image-20220825192206303"></p></li><li><p>打包运行 - 线上环境jar包位置在<code>cmd</code>窗口执行命令 :<code>java -jar xxx.jar</code></p></li></ol><h3 id="六-SpringBoot热部署">六. SpringBoot热部署</h3><ol><li><p>热部署其实就是动态加载字节码，在我们修改了代码之后无需重启项目即可更改字节码，<code>SpringBoot</code>或者说IDEA默认是没有此功能的。</p></li><li><p>热部署原理</p><ul><li><code>spring-boot-devtools</code> 是一个为开发者服务的一个模块，其中最重要的功能就是自动应用代码更改到最新的<code>App</code>上面去。原理是在发现代码有更改之后，重新启动应用，但是速度比手动停止后再启动还要更快，更快指的不是节省出来的手工操作的时间。</li><li>其深层原理是使用了两个<code>ClassLoader</code>，一个<code>Classloader</code>加载那些不会改变的类（第三方Jar包），另一个<code>ClassLoader</code>加载会更改的类（自己写的），称为  restart <code>ClassLoader</code>,这样在有代码更改的时候，原来的restart <code>ClassLoader</code> 被丢弃，重新创建一个restart <code>ClassLoader</code>，由于需要加载的类相比较少，所以实现了较快的重启时间（5秒以内）。</li></ul></li><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringBoot热部署依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用方式</p><ul><li><p>方式一：修改了代码之后，手动编译一下 ----&gt; ctrl+F9;</p></li><li><p>方式二：修改IDEA配置，让其自动编译</p><ol><li><p>File -&gt; Settings -&gt; Compiler -&gt; Build Project automatically选中，保存</p></li><li><p>Shift+Ctrl+Alt+/ ，选择 “Registry” ，选中打勾 <code>“compiler.automake.allow.when.app.running”</code></p><p>PS：方式二编译时机是IDEA失去焦点时，会自动编译，推荐使用方</p></li></ol></li></ul></li></ol><h3 id="七-SpringBoot配置">七. SpringBoot配置</h3><ol><li><p>配置文件</p><ul><li><code>application.properties</code> - 传统方式，不太优美</li><li><code>application.yml/yam</code>l - 推荐使用</li></ul></li><li><p>配置文件作用</p><ul><li>修改<code>SpringBoot</code>自动配置的默认值</li></ul></li><li><p>多种配置文件都存在时：<code>SpringBoot</code>优先加载<code>yml</code>配置文件，再加载properties配置文件，会被覆盖。properties优先级最高。</p><ul><li>如果配置的内容都相同，那么properties生效；</li><li>如果配置的内容不冲突，那么都生效；</li></ul></li><li><p>简单配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 配置端口号</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment"># 配置上下文路径</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/yml</span></span><br></pre></td></tr></table></figure></li><li><p>两种多模式配置方式</p><ul><li><p>方式一：<code>yml</code>多文档块模式 <strong>多个环境之间需要以 — 隔开</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定启用那个环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">  <span class="comment"># 启用环境的名称</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 配置端口号</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment"># 指定此环境名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 开发环境</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="comment"># 多个环境之间需要以 --- 隔开</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="comment"># 指定此环境的名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 测试环境</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个环境之间需要以 --- 隔开</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="comment"># 指定此环境的名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 线上环境</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br></pre></td></tr></table></figure></li><li><p>方式二：多profile文件模式</p><ul><li>不同的环境写在不同的YML文件中<ul><li>命名规范：application-{profiles}.yml</li></ul></li><li>在主YML文件中进行引用。</li></ul></li></ul></li></ol><h3 id="八-SpringBoot测试">八.  SpringBoot测试</h3><ol><li><p>引入SpringBoot测试包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringBoot测试依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建SpringBoot测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示把JUnit测试运行在Spring容器中，并且SpringBoot无需指定JUnit版本，对任何版本都支持</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="comment">// 被@SpringBootApplication修饰的类不仅是一个启动类，同时也是一个配置类，所以我们只需要告诉SpringBoot测试，我们的启动类是谁即可</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = Application.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyBean myBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(myBean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="九-SpringBoot集成mybatis">九 SpringBoot集成mybatis</h3><ol><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml配置</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///ssm</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.lqs.domain</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/lqs/mapper/*Mapper.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment">#开启驼峰</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.lqs:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">org.mybatis:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="十-SpringBoot事务管理">十. SpringBoot事务管理</h3><ol><li><p>事务：一组操作要么同时成功要么同时失败</p></li><li><p>事务应该管理在Service层，但是<code>SpringBoot</code>默认是没有管理Service层的事务的，所以我们需要手动开启事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span><span class="comment">//开启事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Emp emp)</span> &#123;</span><br><span class="line">        mapper.save(emp);</span><br><span class="line"><span class="comment">//        System.out.println(1/0);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="十一-事务传播机制">十一. 事务传播机制</h3><p>@Transactional配置</p><ul><li><p>@Transactional注解不仅可以加在类上给当前类全局配置，还可以加在方法上，方法@Transactional注解优先级更高</p><ul><li>@Transactional用在类上：类下的所有方法增删改方法  和 查询方法都进行了事务管理</li><li>@Transactional用在方法上：只会在当前方法生效</li></ul></li><li><p>@Transactional的属性</p><ul><li><code>Propagation propagation() default Propagation.REQUIRED</code>; – 事务传播机制</li><li><code>boolean readOnly() default false</code>; – 是否只读，<strong>查询配置true，增删改配置false</strong></li></ul></li><li><p>事务传播机制 参考链接：<a href="https://blog.csdn.net/weixin_44771989/article/details/123967275">https://blog.csdn.net/weixin_44771989/article/details/123967275</a></p><ul><li><p><code>Propagation.REQUIRED</code>：默认，支持当前事务，如果当前没有事务，就创建一个事务，保证一定有事务 – 增删改方法使用</p></li><li><p><code>Propagation.SUPPORTS</code>：支持当前事务，如果当前没有事务，就不使用事务 – 查询方法使用</p></li><li><p><code>Propagation.REQUIRES_NEW</code>：新建事务，如果当前有事务，就挂起 – 不常用</p></li><li><p><code>Propagation.NEVER</code>：不支持事务，如果当前有事务，就抛出异常 – 不常用</p></li><li><p>@Transactional最终配置</p><ul><li><p>因为在真实开发中，一个类中增删改查，查询方法占的比例最多，所以我们会在类上使用查询的全局配置，增删改在方法上单独配置；</p><ul><li>在类上配置：<code>@Transactional(readOnly = true,propagation = Propagation.SUPPORTS)</code> //查询的事务控制方式</li></ul></li><li><p>在方法上配置：<code>@Transactional //默认 readOnly = false,propagation = Propagation.REQUIRED</code></p></li></ul></li></ul></li></ul><h3 id="十二-Thymeleaf">十二.  Thymeleaf</h3><ol><li><p>Thymeleaf是一个模板技术</p><ul><li>其他模板技术：Freemarker、jsp、Velocity等.</li><li>详细语法参考：<a href="https://fanlychie.github.io/post/thymeleaf.html">https://fanlychie.github.io/post/thymeleaf.html</a></li></ul></li><li><p>SpringBoot-Thymeleaf</p><ul><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入thymeleaf模板依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>默认的视图解析器前缀就在根目录下的templates文件夹下，所以我们将html代码放在根目录下的templates文件夹下即可;</p></li><li><p>默认后缀就是.html，所以Thymeleaf是以html文件为模板;</p></li><li><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">.html</span></span><br></pre></td></tr></table></figure></li><li><p>语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">文本显示：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">对象取值：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">超链接：<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/order/details(orderId=$&#123;obj.id&#125;,name=$&#123;obj.name&#125;)&#125;&quot;</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">引入静态资源：</span><br><span class="line">语法：th:[href | src]@&#123;资源在static下的目录&#125;， 如：@&#123;/lib/jquery.js&#125;，不填写默认的static文件夹</span><br><span class="line">例子：<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/index.css&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/jquery-min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">注意：SpringBoot项目静态资源默认要放在src/mian/resources/static/下</span><br><span class="line">判断：</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user.age == 23&#125;&quot;</span>&gt;</span></span><br><span class="line">  青年</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">选中【其中一种】：</span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-append&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;student.sex==&#x27;男&#x27;&#125;&quot;</span> /&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;student.sex==&#x27;女&#x27;&#125;&quot;</span> /&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">循环：</span><br><span class="line"> <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;emp : $&#123;emps&#125;&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.name&#125;&quot;</span>&gt;</span>海<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.age&#125;&quot;</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>servlet和jsp的原理和应用介绍</title>
      <link href="/posts/52478.html"/>
      <url>/posts/52478.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-Servlet的三大职责">一. <code>Servlet</code>的三大职责</h3><ol><li>接受请求参数（封装）；</li><li>调用业务方法处理业务（调用业务service层）；</li><li>响应请求（跳转页面或其他<code>Servlet</code>）</li></ol><h3 id="二-为什么需要共享信息与页面跳转">二. 为什么需要共享信息与页面跳转</h3><ol><li><code>servlet</code>:主要是做动态页面 特点<code>java</code>为主+<code>html</code>为辅；</li><li><code>jsp</code>：主要是做动态页面。<code>html</code>为主 + <code>java</code>为辅(<code>jsp</code>本质上就一个特殊的<code>servlet</code>)</li></ol><h3 id="三-跳转方式">三. 跳转方式</h3><ol><li><p>请求转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求转发的代码：</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">&quot;路径&quot;</span>).forward(request, response);</span><br></pre></td></tr></table></figure><ol><li>1 特点：<u><strong>地址栏不发生改变、一次请求、可以访问WEB/INF的资源、共享数据、不可以跨域访问（比如访问百度）</strong></u></li></ol></li><li><p>重新定位方向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向跳转的方式：</span></span><br><span class="line">resp.sendRedirect(<span class="string">&quot;路径&quot;</span>);<span class="comment">//直接跳转</span></span><br></pre></td></tr></table></figure><p>2.1 特点：<u><strong>地址栏发生改变、多次请求（两次请求）、不可以访问WEB/INF的资源、不共享数据、可以跨域访问（比如访问百度）</strong></u></p></li><li><p>何时使用请求转发和重定向</p><ul><li><p>如果在一次请求中，要共享数据，就使用请求转发；</p></li><li><p>如果要访问WEB- INF下面的资源，请使用请求转发；</p></li><li><p>如果要跨域访问用重定向；</p></li><li><p>新增/修改/删除之后，都要重定向。</p><table><thead><tr><th></th><th style="text-align:center">请求转发(forward)</th><th style="text-align:center">重定向(redirect)</th></tr></thead><tbody><tr><td>访问 WEB-INF</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td>传参数</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td>访问外网</td><td style="text-align:center">×</td><td style="text-align:center">√</td></tr><tr><td>重复提交的问题</td><td style="text-align:center">有</td><td style="text-align:center">无</td></tr><tr><td>路径变化</td><td style="text-align:center">无</td><td style="text-align:center">有</td></tr><tr><td>代码</td><td style="text-align:center"><code>req.getRequestDispatcher(path).forward(req, resp);</code></td><td style="text-align:center"><code>resp.sendRedirect(path)</code></td></tr></tbody></table></li></ul></li></ol><h3 id="四-jsp简介">四. <code>jsp</code>简介</h3><ol><li><code>JSP（java server page）</code>：<code>java</code>服务器端（动态）网页，<code>JSP</code>就是<code>Java</code>中用来做动态网页的技术；</li><li><code>JSP</code>底层就是一个<code>Servlet</code>，在执行的时候先转成<code>Servlet</code>然后同样要经历<code>Servlet</code>的生命周期；</li></ol><h3 id="五-jsp三大指令">五. <code>jsp</code>三大指令</h3><ol><li><p><code>page</code>：页面指令</p><p>1.1 <code>&lt;%@page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; ... &gt;</code></p><ul><li>language=“<code>java</code>”：语言只有<code>java</code></li><li><code>contentType=&quot;text/html; charset=UTF-8&quot;</code>：输出的页面类型，相当于在<code>Servlet</code>里面写：<code>resp.setContentType(&quot;text/html;charset=utf-8&quot;)</code></li><li><code>pageEncoding=&quot;UTF-8&quot;</code></li><li><code>errorPage</code>:如果当前页面出错了，我就跳转到<code>errorPage</code>对应的页面中</li></ul></li><li><p><code>include</code>：包含指令</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">&quot;/include/a.jsp&quot;</span>%&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>taglib</code>：标签指令</p></li><li><p>指令的语法格式&lt;%@ 指令名 属性1=“属性值1” 属性2=“属性值2” …%&gt;</p></li></ol><h3 id="六-jsp九大内置对象">六: <code>jsp</code>九大内置对象</h3><table><thead><tr><th style="text-align:center">内置对象</th><th style="text-align:center">类</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">application</td><td style="text-align:center"><code>ServletContext</code></td><td style="text-align:center">全局对象</td></tr><tr><td style="text-align:center">session</td><td style="text-align:center"><code>HttpSession</code></td><td style="text-align:center">会话对象</td></tr><tr><td style="text-align:center">request</td><td style="text-align:center"><code>HttpServletRequest</code></td><td style="text-align:center">请求对象</td></tr><tr><td style="text-align:center"><code>pageContext</code></td><td style="text-align:center"><code>PageContext</code></td><td style="text-align:center">当前页对象</td></tr><tr><td style="text-align:center">response</td><td style="text-align:center"><code>HttpServletResponse</code></td><td style="text-align:center">响应对象</td></tr><tr><td style="text-align:center">out</td><td style="text-align:center"><code>JspWriter</code></td><td style="text-align:center">输出对象</td></tr><tr><td style="text-align:center">page</td><td style="text-align:center">this</td><td style="text-align:center">当前对象</td></tr><tr><td style="text-align:center"><code>config</code></td><td style="text-align:center"><code>ServletConfig</code></td><td style="text-align:center">配置对象</td></tr><tr><td style="text-align:center">exception</td><td style="text-align:center"></td><td style="text-align:center">异常对象</td></tr></tbody></table><h3 id="七-四大作用域对象">七. 四大作用域对象</h3><table><thead><tr><th>类</th><th>对象（叫法）</th><th>范围</th></tr></thead><tbody><tr><td><code>PageContext</code></td><td><code>pageContext</code></td><td>当前页面（作用不大）  当前页，直接使用就是，根本不需要在放到对象里面</td></tr><tr><td><code>HttpServletRequest</code></td><td>request</td><td>一次请求（必需请求转发）</td></tr><tr><td><code>HttpSession</code></td><td>session（多个对象）</td><td>一次会话</td></tr><tr><td><code>ServletContext</code></td><td>application</td><td>整个应用（有且只有一个对象）</td></tr></tbody></table><ol><li><code>pageContext</code>：每次访问的时候创建，可以有多个；</li><li><code>request</code>：每次请求的时候创建，可以有多个；</li><li><code>session</code>：每次会话的时候创建，不同人打开不同的浏览器，就创建多个，可以有个多个；</li><li><code>application</code>：整个应用有且只有一个对象，tomcat启动的创建，关闭的时候销毁；</li></ol><h3 id="八-作用域对象的使用-添加、修改、查询、删除">八. 作用域对象的使用  添加、修改、查询、删除</h3><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220727114535.png" alt="image-20220727114535164"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis的三种集群方式详解</title>
      <link href="/posts/fcf70996.html"/>
      <url>/posts/fcf70996.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-Redis为甚么要做集群">一.Redis为甚么要做集群</h3><ul><li>采用Redis集群方案解决单点故障问题</li><li>对于高并发读写请求,采用集群方案提升Redis作业能力</li><li>处理大量数据,多个Redis节点实现数据的分布式存储</li></ul><h3 id="二-Redis主从复制">二.Redis主从复制</h3><ol><li><h4 id="什么是主从复制">什么是主从复制</h4><p>Redis有三种集群方案，<strong>主从复制</strong>，<strong>哨兵</strong>，<strong>cluster集群</strong>,主从复制是指将<code>一台Redis服务器的数据，复制到其他的Redis服务器</code>。前者称为<strong>主节点(master)</strong>，后者称为<strong>从节点(slave)</strong>，数据的复制是<strong>单向</strong>的，只能由主节点到从节点。默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p></li><li><h4 id="全量同步">全量同步</h4><p>Redis全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的<strong>所有数据</strong>都复制一份。具体步骤如下：</p><ol><li>从服务器连接主服务器，发送<strong>SYNC</strong>命令；</li><li>主服务器接收到SYNC命名后，开始执行<strong>BGSAVE</strong>命令生成<strong>RDB文件</strong>并使用<strong>缓冲区</strong>记录此后执行的所有写命令；</li><li>主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令；</li><li>从服务器收到快照文件后<strong>丢弃所有旧数据</strong>，载入收到的快照；</li><li>主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令；</li><li>从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令。</li></ol></li><li><h4 id="增量同步">增量同步</h4><p>Redis增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。 增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。</p></li><li><h4 id="主从复制的作用">主从复制的作用</h4><ul><li><code>数据冗余</code>：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式；</li><li><code>故障恢复</code>：当主节点出现问题时可以由从节点提供服务实现快速的故障恢复；实际上是一种服务的冗余；</li><li><code>负载均衡</code>：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li><code>读写分离</code>：可以用于实现读写分离，主库写、从库读，读写分离不仅可以提高服务器的负载能力，同时可根据需求的变化，改变从库的数量。</li><li><code>高可用基石</code>：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ul></li><li><h4 id="主从的缺点">主从的缺点</h4><p><code>不具备自动容错和恢复功能</code> :主从宕机会影响前端的部分请求失败，需要重启机器或者手动切换前端IP才能恢复</p><p><code>主机宕机数据丢失</code>：宕机前部分有部分数据未同步到从机，切换IP后会引入数据不一致降低系统可用性</p><p><code>数据大的问题</code>：数据量特别大一个主是存储不了</p></li></ol><h3 id="三-Redis哨兵模式">三.Redis哨兵模式</h3><ol><li><h4 id="什么是哨兵模式-Redis-Sentinel">什么是哨兵模式(Redis-Sentinel)</h4><p>当主服务器中断服务后，可以将一个从服务器升级为主服务器，以便继续提供服务，但是这个过程需要人工手动来操作。 为此，Redis 2.8中提供了哨兵工具来实现自动化的系统监控和故障恢复功能。</p></li><li><h4 id="Redis-Sentinel">Redis-Sentinel</h4><p>Redis-Sentinel是用于管理Redis集群,该系统执行以下三个任务:</p><p><strong>监控(Monitoring):</strong><br>Sentinel会不断地检查你的主服务器和从服务器是否运作正常;</p><p><strong>提醒(Notification):</strong><br>当被监控的某个Redis服务器出现问题时,Sentinel可以通过API向管理员或者其他应用程序发送通知;</p><p><strong>自动故障迁移(Automatic failover):</strong></p><p>当主服务器不可用，Sentinel会自动选举一个从服务器作为新的主服务器，并让其它的从服务器从新的主服务器复制数据，用户的请求会被变更为新的主服务器。</p></li><li><h4 id="主观下线-客观下线-故障转移">主观下线&amp;客观下线&amp;故障转移</h4><ul><li><p><strong>主观下线</strong></p><p>每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的Master主服务器，Slave从服务器以及其他Sentinel（哨兵）进程发送一个 <strong>PING</strong> 命令。如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel（哨兵）进程标记为<strong>主观下线</strong>（SDOWN）；如果一个Master主服务器被标记为主观下线（SDOWN），则正在监视这个Master主服务器的所有 Sentinel（哨兵）进程要以每秒一次的频率确认Master主服务器的确进入了主观下线状态。</p></li><li><p><strong>客观下线</strong></p><p>当有<strong>足够数量（半数以上）的 Sentinel（哨兵）<strong>进程（大于等于配置文件指定的值）在指定的时间范围内确认Master主服务器进入了主观下线状态（SDOWN）， 则Master主服务器会被标记为</strong>客观下线（ODOWN）</strong>；若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master主服务器的客观下线状态就会被移除。若 Master主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。</p></li><li><p><strong>故障转移</strong></p><p>当前哨兵虽然发现了主数据客观下线，需要故障恢复，但故障恢复需要由<strong>领头哨兵</strong>来完成。这样来保证同一时间只有一个哨兵来执行故障恢复，选出领头哨兵后，领头哨兵将会开始对主数据库进行故障恢复。</p><p>① 首先是从主服务器的从服务器中选出一个从服务器作为新的主服务器。选出之后通过<code>slaveif no ont</code>将该从服务器升为<strong>新主服务器。</strong></p><p>② 所有在线的从数据库中，选择优先级最高的从数据库。优先级通过replica-priority参数设置，优先级相同，则复制的命令偏移量越大(复制越完整)越优先 ， 如果以上都一样，则选择运行ID较小的从数据库。</p><p>③ 选出一个从数据库后，领头哨兵将向从数据库发送<code>SLAVEOF NO ONE</code>命令使其升格为主数据库，而后领头哨兵向其他从数据库发送 <code>SLAVEOF</code>命令来使其成为新主数据库的从数据库，最后一步则是更新内部的记录，将已经停止服务的旧的主数据库更新为新的主数据库的从数据库，使得当其恢复服务时自动以从数据库的身份继续服务。</p></li></ul><h4 id="4-哨兵的优点">4. 哨兵的优点</h4><p>哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。主从可以自动切换，系统更健壮，可用性更高。</p><h4 id="5-哨兵的缺点">5.哨兵的缺点</h4><p>主从服务器的数据要经常进行主从复制，这样造成性能下降。当主服务器宕机后，从服务器切换成主服务器的那段时间，服务是不能用的。Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</p></li></ol><h3 id="四-Redis-Cluster集群">四.Redis-Cluster集群</h3><ol><li><h4 id="为什么要Redis-Cluster">为什么要Redis-Cluster</h4><p>redis的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台redis服务器都存储相同的数据，很浪费内存，所以在redis3.0上加入了cluster模式，<code>实现的redis的分布式存储，也就是说每台redis节点上存储不同的内容</code>。</p></li><li><h4 id="什么是Redis-Cluster">什么是Redis-Cluster</h4><p>Redis-Cluster采用<strong>无中心结构</strong>，集群中的每个节点都是平等的关系，都是对等的，每个节点都保存各自的数据和整个集群的状态。<strong>每个节点都和其他所有节点连接</strong>，而且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据。</p></li><li><h4 id="数据分散存储">数据分散存储</h4><p>Redis 集群没有并使用传统的一致性哈希来分配数据，而是采用另外一种叫做<strong>哈希槽 (hash slot)<strong>的方式来分配的。redis cluster 默认分配了 <strong>16384</strong> 个slot，当我们set一个key 时，会用<code>**CRC16**</code>算法来</strong>取模</strong>得到所属的<code>**slot**</code>，然后将这个key 分到哈希槽区间的节点上，具体算法就是：<code>**CRC16(key) % 16384**</code>。</p></li><li><h4 id="容错机制-投票">容错机制-投票</h4><p>为了防止主节点数据丢失，可以为每个主节点可以准备特点数目的备节点，主节点挂掉从节点可以升级为主节点(哨兵模式) 。</p><p>容错机制指的是,如果半数以上master节点与故障节点通信超过(cluster-node-timeout),认为该节点故障，自动触发故障转移操作.  故障节点对应的从节点自动升级为主节点 ， 如果某个主挂掉，而没有从节点可以使用，那么整个Redis集群进入宕机状态。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis的基本操作和运用</title>
      <link href="/posts/90c1edf.html"/>
      <url>/posts/90c1edf.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是NOSQL">一. 什么是NOSQL?</h3><p>NoSQL(NoSQL = Not Only SQL )，意即“不仅仅是SQL”，它泛指非关系型的数据库。随着互联网2003年之后web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的交友类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。</p><p>关系型数据库：有行有列，能组成二维表的数据库.</p><h3 id="二-Redis">二. Redis</h3><h4 id="1-什么是Redis">1. 什么是Redis</h4><p>Redis 是一个高性能的 开源的、C语言写的Nosql（<strong>非关系型数据库</strong>），数据保存可以存储在<strong>内存</strong>中或者磁盘中。Redis 是以<strong>key-value</strong>形式存储，和传统的关系型数据库不一样。不一定遵循传统数据库的一些基本要求，比如说，不遵循sql标准，事务，表结构等等，redis严格上不是一种数据库，应该是一种数据结构化存储方法的集合。</p><h4 id="2-Redis的特点">2. Redis的特点</h4><ul><li>数据保存在内存，存取速度快，并发能力强。</li><li>它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、 zset(sorted set --有序集合)和hash（哈希类型）。</li><li>redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部分场合可以对关系数据库（如MySQL）起到很好的补充作用。</li><li>提供了Java，C/C++，C#，PHP，JavaScript等客户端，使用很方便。</li><li>Redis支持集群（主从同步）。数据可以主服务器向任意数量从的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。<ul><li>支持订阅/发布（subscribe/publish）</li><li>支持事务</li></ul></li></ul><h4 id="3-Redis和Mysql比较">3. Redis和Mysql比较</h4><table><thead><tr><th></th><th>mysql</th><th>redis</th></tr></thead><tbody><tr><td>类型</td><td>关系型</td><td>非关系型</td></tr><tr><td>存储位置</td><td>磁盘</td><td>磁盘和内存</td></tr><tr><td>存储过期</td><td>不支持</td><td>支持</td></tr><tr><td>读写性能</td><td>低</td><td>非常高</td></tr></tbody></table><h4 id="4-Redis的使用场景">4. Redis的使用场景</h4><ul><li><p><strong>缓存（以空间换时间）</strong></p><p>经常查询数据，放到读速度很快的空间(内存)，以便下次访问减少时间。减轻数据库压力，减少访问时间.而redis就是存放在内存中的。就如同：Mybatis 二级缓存 , ehcache框架 缓存。</p></li><li><p>计数器</p><p>网站通常需要统计注册用户数，网站总浏览次数等等 ，新浪微博转发数、点赞数。</p></li><li><p>实时防攻击系统。</p><p>防止暴力破解，如使用工具不间断尝试各种密码进行登录。解决方案使用Redis记录某ip一秒访问到达10次以后自动锁定IP,30分钟后解锁。</p></li><li><p>设定有效期的应用</p><p>设定一个数据，到一定的时间失效。验证码，登录过期， 自动解锁，购物券，红包。</p></li><li><p>自动去重应用</p><p>Uniq操作，获取某段时间所有数据排重值 这个使用 Redis 的 <strong>set</strong> 数据结构最合适了，只需要不断地将数据往 set 中扔就行了，set 意为 集合，所以会自动排重。</p></li><li><p><strong>队列</strong></p><p>构建队列系统 使用 <strong>list</strong> 可以构建队列系统，使用 sorted set 甚至可以构建有优先级的队列系统。</p><p>秒杀：可以把名额放到内存队列（redis）,内存就能处理高并发访问。</p></li><li><p><strong>分布式锁</strong></p></li></ul><h3 id="三-Redis的安装">三. Redis的安装</h3><h4 id="1-下载地址：windows版，解压即安装">1. 下载地址：windows版，解压即安装</h4><ul><li><h4 id="https-redis-io-download"><a href="https://redis.io/download/">https://redis.io/download/</a></h4></li><li><p><a href="http://redis.cn/">http://redis.cn/</a></p></li></ul><h4 id="2-Redis目录介绍">2. Redis目录介绍</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis.windows.conf    #【重要】reids配置文件</span><br><span class="line"></span><br><span class="line">redis-benchmark.exe   #reids压测工具</span><br><span class="line"></span><br><span class="line">redis-check-aof.exe    #aof文件校验、修复功能</span><br><span class="line"></span><br><span class="line">redis-check-dump.exe    #rdb文件校验、修复功能</span><br><span class="line"></span><br><span class="line">redis-cli.exe    #【重要】命令行客户端，连接Redis服务端可对Redis进行相关操作</span><br><span class="line"></span><br><span class="line">redis-server.exe  #【重要】Redis服务器,启动Redis</span><br></pre></td></tr></table></figure><h4 id="3-Redis启动和测试">3. Redis启动和测试</h4><ul><li><p>进入到Redis安装目录 ，虽然双击也可以启动，但是建议使用CMD执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure></li><li><p>启动redis-client</p><p>连接本机Redis直接双击 redis-cli.exe 或者执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe   </span><br></pre></td></tr></table></figure></li><li><p>如果连接其他服务的Redis需要跟上 -h参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h ip -p 端口   # 如  redis-client.exe -h 192.168.0.11 -p 6379</span><br></pre></td></tr></table></figure></li><li><p>测试redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set name lqs# 设置数据</span><br><span class="line"></span><br><span class="line">get name lqs# 获取数据</span><br></pre></td></tr></table></figure></li></ul><h3 id="四-redis的常用命令">四. redis的常用命令</h3><h4 id="1-String的操作">1. String的操作</h4><ul><li><p><code>set key value</code> 将单个字符串值value关联到key,存储到Redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set name zs# key为 name， 值为zs </span><br><span class="line">set age  21</span><br></pre></td></tr></table></figure></li><li><p><code>get key</code>返回key关联的字符串值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get name            # 获取值，key为 name</span><br></pre></td></tr></table></figure></li><li><p><code>mset key value key value</code>同时设置一个或多个 key-value 对</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mset email 12306@qq.com phone 10086  # 设置了两对key ，email=12306@qq.com; phone=10086 </span><br></pre></td></tr></table></figure></li><li><p><code>mget key key</code>获取多个值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mget name email  # 获取key为name和email的数据的值</span><br></pre></td></tr></table></figure></li><li><p><code>incr key</code>将 key 中储存的数字值增1(key不存在,则初始化为0,再加1)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incr age# age的值增加1</span><br></pre></td></tr></table></figure></li><li><p><code>decr key</code>将 key 中储存的数字值减1(key不存在,则初始化为0,再减1)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decr age# 将age的值减去1</span><br></pre></td></tr></table></figure></li><li><p><code>incrby key number</code>将 key 中储存的数字值增加指定数字number</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incrby age2   # 在age的值的基础上增加2</span><br></pre></td></tr></table></figure></li><li><p><code>decrby by number</code>将 key 中储存的数字值减少指定数字number</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decrby age2# 在age的值的基础上减去2</span><br></pre></td></tr></table></figure></li><li><p><code>setex key seconds  value</code>设置key-value，并设置过期时间seconds (单位是秒)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setex mykey 10 &quot;Hello&quot;  # 设置 mykey的值为“hello” ,过期时间为 10s ,是set和expire的组合命令，且是原子性的</span><br></pre></td></tr></table></figure></li><li><p><code>setnx key value</code>设置一个key-value,如果这个key不存在则设置成功返回1，否则设置不成功，返回0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setnx name zs</span><br></pre></td></tr></table></figure></li><li><p><code>setget key value</code>设置一个key-value，把这个key<strong>以前的值</strong>返回</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getset name coderyeah</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-key的操作">2. key的操作</h4><ul><li><p><code>keys *</code>查看所有key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure></li><li><p><code>del key</code>删除指定的某个key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del email# 删除key为email的数据</span><br></pre></td></tr></table></figure></li><li><p><code>expire key seconds</code>设置key的过期时间(secnods秒后过期)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expire name 10 # 设置name的过期时间10s</span><br></pre></td></tr></table></figure></li><li><p><code>ttl key</code> 查看key的过期时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ttl name# 查看name的过期时间</span><br></pre></td></tr></table></figure></li><li><p><code>flushall</code>清空整个redis服务器数据，所有的数据库全部清空</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure></li><li><p><code>flushdb</code>清除当前库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flushdb</span><br></pre></td></tr></table></figure></li><li><p><code>select index</code>选择数据库,redis中默认有16个数据库，名称分别为0,1,2,15 ， index数据库索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1# 选择第2个数据库</span><br></pre></td></tr></table></figure></li><li><p><code>exists key</code>查询key是否存在存在返回1，不存在返回0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exists name</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-List的操作">3. List的操作</h4><p>list集合可以看成是一个左右排列的队列(列表)</p><table><thead><tr><th>key</th><th>value</th><th>value</th><th>value</th></tr></thead><tbody><tr><td>names</td><td>zs</td><td>ls</td><td>ls</td></tr><tr><td>ages</td><td>11</td><td>18</td><td>20</td></tr></tbody></table><ul><li><p><code>lpush key value1 value2...</code> 将一个或多个值 value 插入到列表 key 的表头(最左边)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpush names zs ls# 往key为 names 的list左边添加值“zs”和“ls”</span><br></pre></td></tr></table></figure></li><li><p><code>lrange key names start stop</code>返回列表 key 中指定区间内的元素，查询所有的stop为-1即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrange names 0 -1# 查看names的所有元素</span><br></pre></td></tr></table></figure></li><li><p><code>rpush key value1 value2...</code>将一个或多个值 value 插入到列表 key 的表尾(最右边)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpush names zl cq#往key为 names 的list右边添加值“zl”和“cq”</span><br></pre></td></tr></table></figure></li><li><p><code>lpop key</code> 移除并返回列表 key 的头(最左边)元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpop names# 移除并返回names列表的头（最左边）元素</span><br></pre></td></tr></table></figure></li><li><p><code>rpop key</code>移除并返回列表 key 的尾(最右边)元素。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpop names# 移除并返回names列表的尾(最右边)元素。</span><br></pre></td></tr></table></figure></li><li><p><code>lrem key count value</code> 根据count值移除列表key中与参数 value 相等的元素count  0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count 。count &lt; 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值。count = 0 : 移除表中所有与 value 相等的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lrem names 1 zs# 删除names列表中左边第1个“zs” </span><br><span class="line">lrem names 0 ls# 删除names列表中所有的“ls”</span><br><span class="line">lrem names -1 cq# 删除names列表中右边第1个“cq”</span><br></pre></td></tr></table></figure></li><li><p><code>lindex key index</code>返回列表 key 中，下标为 index 的元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lindex names 2# 取names列表中索引为 2 的元素</span><br></pre></td></tr></table></figure></li><li><p><code>ltrim key start stop</code> 对一个列表进行修剪 ，保留范围内的，范围外的删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ltrim names 2 4# 删除names列表中索引为 2 - 4 以外的元素</span><br></pre></td></tr></table></figure></li><li><p><code>dbsize</code>或 <code>info keyspace</code> 查询当前数据库key数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dbsize</span><br><span class="line">info keyspace</span><br></pre></td></tr></table></figure></li><li><h3 id="Redis中如何实现栈和队列"><strong>Redis中如何实现栈和队列</strong></h3><ul><li>list控制<strong>同一边进,同一边出就是栈</strong></li><li>list控制<strong>一边进,另一边出就是队列</strong></li></ul></li></ul><h4 id="4-Set的操作">4. Set的操作</h4><p>set集合是一个<strong>无序</strong>的<strong>不含重复值</strong>的队列</p><table><thead><tr><th>key</th><th>value</th><th>value</th><th>value</th></tr></thead><tbody><tr><td>idcards</td><td>110</td><td>120</td><td>130</td></tr><tr><td>phones</td><td>182</td><td>135</td><td>136</td></tr></tbody></table><ul><li><p><code>sadd key value1 value2...</code> 将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sadd colors red green yellow blue# 往colors这个set集合中存放元素： red,green,yellow,blue</span><br></pre></td></tr></table></figure></li><li><p><code>smembers key</code>返回集合 key 中的所有成员。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smembers colors</span><br></pre></td></tr></table></figure></li><li><p><code>srem key member </code>移除集合 key 中的一个或多个 member 元素，不存在的 member 元素会被忽略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srem colors red# 删除colors中的 red元素</span><br></pre></td></tr></table></figure></li><li><h3 id="scard-key-返回集合存储的key的基数-集合元素的数量-如果key不存在-则返回"><code>scard key</code>  返回集合存储的key的基数 (集合元素的数量).如果key不存在,则返回</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scard colors</span><br></pre></td></tr></table></figure></li><li><p><code>sdiff key key</code> 返回一个集合与给定集合的差集的元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdiff colors names</span><br></pre></td></tr></table></figure></li><li><p><code>sismember key member</code></p><ul><li><p>返回成员 member 是否是存储的集合 key的成员.</p></li><li><p>如果member元素是集合key的成员，则返回1</p></li><li><p>如果member元素不是key的成员，或者集合key不存在，则返回0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sismember names zs# 判断names中是否包含 zs</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>五. Zset的操作</p><p>ZSet(sorted sets)在Set基础上增加了“分数”，让set集合有了排序功能</p><table><thead><tr><th>key</th><th>value(score)</th><th>value(score)</th><th>value(score)</th></tr></thead><tbody><tr><td>names</td><td>zs(10)</td><td>ls(20)</td><td>ww(30)</td></tr></tbody></table><ul><li><p><code>zadd key score value score value</code> 将所有指定成员添加到键为<code>key</code>有序集合（sorted set）里面，如果指定添加的成员已经是有序集合里面的成员，则会更新改成员的分数（scrore）并更新到正确的排序位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd heights   150 zs 160 ls#有序集合heights中zs的分数为150 ，ls的分数是 160</span><br></pre></td></tr></table></figure></li><li><p><code>zcard key</code>返回key的有序集元素个数。key存在的时候，返回有序集的元素个数，否则返回0。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcard heights</span><br></pre></td></tr></table></figure></li><li><p><code>zcount key min max</code>返回有序集key中，score值在min和max之间(默认包括score值等于min或max)的成员。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcount heights 150 160# 获取heignhts中分数为 150到160的元素数量</span><br></pre></td></tr></table></figure></li><li><p><code>zpopmax key count</code>删除并返回有序集合<code>key</code>中的最多<code>count</code>个具有最高得分的成员。如未指定，<code>count</code>的默认值为1。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zpopmax heights 2# 删除最高分数的前2个元素</span><br></pre></td></tr></table></figure></li><li><p><code>zpopmin key count</code>删除并返回有序集合<code>key</code>中的最多<code>count</code>个具有最低得分的成员。如未指定，<code>count</code>的默认值为1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zpopmin heights 2# 删除最低分数的前2个元素</span><br></pre></td></tr></table></figure></li><li><p><code>zrange key start stop WITHSCORES</code> 返回存储在有序集合<code>key</code>中的指定范围的元素。 返回的元素可以认为是按得分从最低到最高排列。 如果得分相同，将按字典排序。返回给定范围内的元素列表（如果指定了<code>WITHSCORES</code>选项，将同时返回它们的得分）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrange heights 0 10 WITHSCORES# 返回heights中索引 0 到 10 的元素和其分数</span><br></pre></td></tr></table></figure></li><li><p><code>zrank key member</code> 返回有序集key中成员member的排名。其中有序集成员按score值递增(从小到大)顺序排列。排名以0为底，也就是说，score值最小的成员排名为0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrank heights zs# 返回 zs在heights的分数从小到大排名</span><br></pre></td></tr></table></figure></li><li><p><code>zreverank</code> 返回有序集key中成员member的排名，其中有序集成员按score值从大到小排列。排名以0为底，也就是说，score值最大的成员排名为0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zreverank heights zs# 返回 zs在heights的分数从大到小排名</span><br></pre></td></tr></table></figure></li><li><p><code>zscore</code> 返回有序集key中，成员member的score值。如果member元素不是有序集key的成员，或key不存在，返回nil。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zscore heights zs#返回 zs的分数</span><br></pre></td></tr></table></figure></li><li><p><code>ZREVRANGE key start stop [WITHSCORES]</code> 返回有序集key中，指定区间内的成员。其中成员的位置按score值递减(从大到小)来排列。具有相同score值的成员按字典序的反序排列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZREVRANGE heights 12WITHSCORES#返回索引1 - 2 的成员，按分数大到小排序</span><br></pre></td></tr></table></figure></li><li><p><code>ZRANGEBYSCORE key min max WITHSCORES LIMIT offset count</code> 返回有序集合中指定分数区间内的成员，分数由低到高排序,LIMIT控制分页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZRANGEBYSCOREkey heights 0 170 WITHSCORES LIMIT 0 10#查询heights中0-170分之间的元素，低到高排序，0条   #开始查询，每页10条</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-Hash的操作">5. Hash的操作</h4><p>Hash类似于jdk中的Map,一个key下面以键值对的方式存储数据</p><ul><li><p><code>HSET key field value</code>设置 key 指定的哈希集中指定字段的值。如果 key 指定的哈希集不存在，会创建一个新的哈希集并与 key 关联。如果字段在哈希集中存在，它将被重写。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hset user:1 name zs# 给&quot;user:1&quot;这个key设置name=zs键值对</span><br></pre></td></tr></table></figure></li><li><h3 id="hget-key-field-获取hash类型的name键对应的值"><code>hget key field</code> 获取hash类型的name键对应的值</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hget user:1 name#获取user:1总的name字段</span><br></pre></td></tr></table></figure></li><li><p>批量添加name=value键值对到key这个hash类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmset user:2 name zs age 18#给&quot;user:2&quot;这个key设置name=zs键值对和age=18键值对</span><br></pre></td></tr></table></figure></li><li><p>批量获取hash类型的键对应的值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmget user:2 name age# 获取user:2总的name和age字段</span><br></pre></td></tr></table></figure></li><li><p>返回哈希表 key 中的所有键</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hkeys user:2#返回user:2总的所有字段</span><br></pre></td></tr></table></figure></li><li><p>返回哈希表 key 中的所有值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hvals user:2#返回user:2中的所有值</span><br></pre></td></tr></table></figure></li><li><p>返回哈希表 key 中，所有的键和值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgetall user:2#返回user:2中所有key和value</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-1-存储对象的两种方式">5.1 存储对象的两种方式</h5><ul><li><p>使用string结构</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">user</span>:<span class="number">1</span> &#123;id:<span class="number">1</span>,<span class="type">name</span>:zs&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Hash</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hset</span> user:<span class="number">2</span> &#123;id:<span class="number">2</span>,name:ls&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-2-sort-key">5.2 sort key</h5><p>对 list ,set ,zset进行排序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SORT ages #对年龄集合进行排序 </span><br><span class="line">SORT ages DESC #对年龄集合进行排序,倒排</span><br><span class="line">SORT names ALPHA  #对姓名集合进行字典顺序排序</span><br><span class="line">SORT names LIMIT 0 10 # 取names集合中，从第 0 个元素，往后取10个元素</span><br><span class="line">SORT names LIMIT 0 5  ALPHA DESC # 取集合中前5个元素，按字典顺序倒排</span><br></pre></td></tr></table></figure><h3 id="五-Redis设置密码">五. Redis设置密码</h3><ul><li><p>CONFIG SET 命令可以动态地调整 Redis 服务器的配置而无须重启,重启后失效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG SET requirepass 123456 #临时生效</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件 <code>redis.widows.conf</code> ，增加代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass 123456 #永久修改</span><br></pre></td></tr></table></figure></li><li><p>Auth认证：启动redis-cli.exe ,执行auth命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth 123456</span><br></pre></td></tr></table></figure></li></ul><h3 id="六-Java集成jedis">六. Java集成jedis</h3><ul><li><p>开始在 Java 中使用 Redis 前， 我们需要确保已经安装并启动 redis 服务及 Java redis 驱动，且你的机器上能正常使用 Java。可以取Maven仓库下载驱动包 <a href="https://mvnrepository.com/artifact/redis.clients/jedis"><strong>下载 jedis.jar</strong></a></p></li><li><p>导入依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">commons-pool2-2.2.jar#连接池</span><br><span class="line">jedis-2.5.2.jar    #Jedis核心包</span><br></pre></td></tr></table></figure></li><li><p>通过Jedis客户端对象连接Redis，调用API进行Redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJedis</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建连接</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span><span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="comment">//端口</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">6379</span>;</span><br><span class="line"><span class="comment">//超时时间,1秒超时</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">//jedis客户端</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(host,port,timeout);</span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    jedis.auth(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="comment">//执行操作,保存值</span></span><br><span class="line">    jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;wang da cui&quot;</span>);</span><br><span class="line">    <span class="comment">//获取值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    System.out.print(result);</span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>连接池：如果直接使用 <code>Jedis</code>连接Redis会造成频繁的Jedis对象创建和销毁，对性能会有很大的影响，所以我们会选择使用连接池来链接性能。原理同Mysql连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//1 创建jedispool配置对象</span></span><br><span class="line">    <span class="type">JedisPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">    <span class="comment">//2 做配置</span></span><br><span class="line">    <span class="comment">//最大空闲连接数</span></span><br><span class="line">    config.setMaxIdle(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//最大链接对象数</span></span><br><span class="line">    config.setMaxTotal(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//链接超时时间</span></span><br><span class="line">    config.setMaxWaitMillis(<span class="number">1</span>*<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">//获取连接是测试连接是否畅通</span></span><br><span class="line">    config.setTestOnBorrow(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//3 创建jedispool连接池对戏</span></span><br><span class="line">    <span class="comment">//参数：配置对象，redis主机地址 ，超时时间，密码</span></span><br><span class="line">    <span class="type">JedisPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(config,<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>,<span class="number">1</span>*<span class="number">1000</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="comment">//4 通过jedispool获取连接</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> pool.getResource();</span><br><span class="line">    <span class="comment">//5 执行操作</span></span><br><span class="line">    jedis.set(<span class="string">&quot;age&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">    <span class="comment">// 6 释放连接 , 底层做了兼容,如果是连接池操作就是释放,如果是连接操作就是关闭</span></span><br><span class="line">    jedis.close(); </span><br><span class="line">    <span class="comment">// 7 摧毁连接池-如果是真正项目中它应该是一个受spring管理的单例</span></span><br><span class="line">    pool.destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="七-发布订阅">七. 发布订阅</h3><ul><li><p>什么是发布订阅</p><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。Redis 客户端可以订阅任意数量的频道。没订阅的接受者当然是接受不到消息的，(pub/sub)是一种广播模式，及会把消息发送给所有的订阅者。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSCRIBE cctv#cctv作为订阅的频道，可以任意定义名字</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH cctv &#x27;我是消息，发往cctv频道，over&#x27;</span><br></pre></td></tr></table></figure></li></ul><h3 id="八-SpringBoot集成Redis">八. SpringBoot集成Redis</h3><ol><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spirngboot springdata对redis支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">2000ms</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = App.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootDataRedisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="九-Redis的持久化配置">九. Redis的持久化配置</h3><ol><li><p>什么是Redis持久化</p><p>因为Redis数据基于内存读写，为了防止Redis服务器关闭或者宕机造成数据丢失，我们通常需要对Redis做持久化化，即：把内从中的数据(命令)保存一份到磁盘做一个备份，当Redis服务关闭或者宕机,在Redis服务器重启的时候会从磁盘重新加载备份的数据，不至于数据丢失。 Redis 提供了两种不同级别的持久化方式：<strong>RDB</strong>和<strong>AOF</strong>,可以通过修改redis.conf来进行配置。</p><p>开启持久配置后，对Redis进行写操作，在Redis安装目录将会看到持久文件：“appendonly.aof”和“ dump.rdb”。</p></li><li><p>Redis如何保存数据</p><p>redis为了考虑效率,保存数据在内容中.并且考虑数据安全性,还做数据持久化,如果满足保存策略，就会把内存的数据保存到数据<strong>rdb</strong>文件，还来不及保存那部分数据存放到<strong>aof更新日志</strong>中。在加载时，把两个数据做一个并集。</p></li><li><p>Redis持久化-RDB</p><ul><li><p>RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照,默认开启该模式</p></li><li><p>如何关闭 rdb 模式?修改配置文件注释如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">save &quot;&quot;            # 关闭RDB</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">save 900 1        <span class="comment">#至少在900秒的时间段内至少有一次改变存储同步一次</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">save 300 10</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">save 60 10000</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Redis持久化-AOF</p><ul><li><p>AOF 持久化记录服务器执行的所有<code>写操作命令</code>，并在服务器启动时，通过重新执行这些命令来还原数据集,默认关闭该模式。</p></li><li><p>如何开启aof模式?修改配置文件如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes        #yes 开启,no 关闭</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appendfsync always  <span class="comment">#每次有新命令时就执行一次fsync</span></span> </span><br><span class="line"></span><br><span class="line">appendfsync everysec  #每秒 fsync 一次 ,这里我们启用 everysec</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appendfsync no      <span class="comment">#从不fsync(交给操作系统来处理,可能很久才执行一次fsync)</span></span></span><br><span class="line">#其它的参数请大家看redis.conf配置文件详解</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220907232850.png" alt="image-20220907232850241"></p></li></ul></li><li><p>RDB和AOF区别</p><ul><li><p>RDB</p><p>RDB持久化是指在<code>指定的时间间隔</code>内将内存中的<code>数据集快照</code>写入磁盘，实际操作过程是<code>fork一个子进程</code>，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">RDB：记录数据快照</span><br><span class="line"> </span><br><span class="line">   优点：  </span><br><span class="line">       1.产生一个持久化文件，方便文件备份 ， 灾难恢复RDB是非常不错的选择</span><br><span class="line">       2.Fork子进程去持久化， 性能比AOF好，文件体积更小，启动时恢复速度快</span><br><span class="line">   缺点：</span><br><span class="line">      1.没办法100%s数据不丢失</span><br><span class="line">      2.数据集大，FORk子进程持久化时会服务器卡顿</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AOF: 记录写命令</span><br><span class="line">   优点：  </span><br><span class="line">     1.数据更安全</span><br><span class="line">     2.采用Append，即使持久的时候宕机，也不影响已经持久的数据</span><br><span class="line">     3.日志过大，可以rewrite重写</span><br><span class="line">     4.AOF日志格式清晰，容易理解  </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">   缺点：</span><br><span class="line">      1.AOF文件通常要大于RDB文件</span><br><span class="line">      2.AOF数据恢复比RDB慢</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">最佳实践：二者结合 ，RDB来数据备份，迁移，容灾  。 AOF持久化保证数据不丢失。</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="十-Redis的淘汰策略">十. Redis的淘汰策略</h3><ol><li><p>为什么要淘汰</p><p>Redis的数据读写基于内存，Redis虽然快，但是内存成本还是比较高的，而且基于内存Redis不适合存储太大量的数据。Redis可以使用电脑物理最大内存，当然我们通常会通过设置<code>maxmemory</code>参数现在Redis内存的使用， 为了让有限的内存空间存储更多的有效数据，我们可以设置淘汰策略，让Redis自动淘汰那些老旧的，或者不怎么被使用的数据。</p><p>redis 确定驱逐某个键值对后，会删除这个数据并将这个数据变更消息发布到本地（AOF 持久化）和从机（主从连接）。</p><p><img src="C:/Users/coderyeah/AppData/Roaming/Typora/typora-user-images/image-20220907233503947.png" alt="image-20220907233503947"></p></li><li><p>策略</p><p>1.noeviction<br>不进行数据淘汰，也是Redis的默认配置。这时，当缓存被写满时，再有写请求进来，Redis不再提供服务，直接返回错误。<br>2.volatile-random<br>缓存满了之后，在设置了过期时间的键值对中进行随机删除。<br>3.volatile-ttl<br>缓存满了之后，会针对设置了过期时间的键值对中，根据过期时间的先后顺序进行删除,越早过期的越先被删除。<br>4.volatile-lru<br>缓存满了之后，针对设置了过期时间的键值对，采用LRU算法进行淘汰。<br>5.volatile-lfu<br>缓存满了之后，针对设置了过期时间的键值对，采用LFU的算法进行淘汰。<br>6.allkeys-random<br>缓存满了之后，从所有键值对中随机选择并删除数据。<br>7.allkeys-lru<br>缓存满之后，使用LRU算法在所有的数据中进行筛选删除。<br>8.allkeys-lfu<br>缓存满了之后，使用LFU算法在所有的数据中进行筛选删除。</p></li></ol><h3 id="十-面试题-https-blog-csdn-net-wchengsheng-article-details-79925654">十. 面试题======https://blog.csdn.net/wchengsheng/article/details/79925654</h3><ol><li><h4 id="Redis有哪些数据结构">Redis有哪些数据结构</h4><p>1、String字符串类型；2、hash哈希；3、链表；4、set集合；5、zset有序集合。其中，String字符串是一种动态字符串，是Redis中最基础的数据存储类型，它在Redis中是二进制安全的，这便意味着该类型可以接受任何格式的数据，使用者可以进行修改。<br>如果你是Redis中高级用户，还需要加上下面几种数据结构HyperLogLog、Geo、Pub/Sub，BitMap.</p></li><li><h4 id="使用过Redis分布式锁么，它是什么回事？">使用过Redis分布式锁么，它是什么回事？</h4><p>先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。<br>这时候对方会告诉你说你回答得不错，然后接着问如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？<br>这时候你要给予惊讶的反馈：唉，是喔，这个锁就永远得不到释放了。紧接着你需要抓一抓自己得脑袋，故作思考片刻，好像接下来的结果是你主动思考出来的，然后回答：我记得set指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！</p></li><li><h4 id="Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？">Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？</h4><p>使用keys指令可以扫出指定模式的key列表。<br>对方接着追问：如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？<br>这个时候你要回答redis关键的一个特性：<strong>redis是单线程的</strong>。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用scan指令，scan指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。</p></li><li><h4 id="如果有大量的key需要设置同一时间过期，一般需要注意什么？">如果有大量的key需要设置同一时间过期，一般需要注意什么？</h4><p>如果大量的key过期时间设置的过于集中，到过期的那个时间点，redis可能会出现短暂的卡顿现象。一般需要在时间上加一个随机值，使得过期时间分散一些。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis安装说明</title>
      <link href="/posts/22128.html"/>
      <url>/posts/22128.html</url>
      
        <content type="html"><![CDATA[<h1>Redis安装说明</h1><p>大多数企业都是基于Linux服务器来部署项目，而且Redis官方也没有提供Windows版本的安装包。因此课程中我们会基于Linux系统来安装Redis.</p><p>此处选择的Linux版本为CentOS 7.</p><p>Redis的官方网站地址：<a href="https://redis.io/">https://redis.io/</a></p><h1>1.单机安装Redis</h1><h2 id="1-1-安装Redis依赖">1.1.安装Redis依赖</h2><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc tcl</span><br></pre></td></tr></table></figure><h2 id="1-2-上传安装包并解压">1.2.上传安装包并解压</h2><p>然后将课前资料提供的Redis安装包上传到虚拟机的任意目录：</p><p><img src="assets/image-20211211071712536.png" alt="image-20211211071712536"></p><p>例如，我放到了/usr/local/src 目录：</p><p><img src="assets/image-20211211080151539.png" alt="image-20211211080151539"></p><p>解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure><p>解压后：</p><p><img src="assets/image-20211211080339076.png" alt="image-20211211080339076"></p><p>进入redis目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-6.2.6</span><br></pre></td></tr></table></figure><p>运行编译命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>默认的安装路径是在 <code>/usr/local/bin</code>目录下：</p><p><img src="assets/image-20211211080603710.png" alt="image-20211211080603710"></p><p>该目录以及默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h2 id="1-3-启动">1.3.启动</h2><p>redis的启动方式有很多种，例如：</p><ul><li>默认启动</li><li>指定配置启动</li><li>开机自启</li></ul><h3 id="1-3-1-默认启动">1.3.1.默认启动</h3><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="assets/image-20211211081716167.png" alt="image-20211211081716167"></p><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h3 id="1-3-2-指定配置启动">1.3.2.指定配置启动</h3><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫redis.conf：</p><p><img src="assets/image-20211211082225509.png" alt="image-20211211082225509"></p><p>我们先将这个配置文件备份一份：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cp</span> redis.<span class="keyword">conf</span> redis.<span class="keyword">conf</span>.bck</span><br></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># 守护进程，修改为yes后即可后台运行</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes </span></span><br><span class="line"><span class="comment"># 密码，设置后访问Redis必须输入密码</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">123321</span></span><br></pre></td></tr></table></figure><p>Redis的其它常见配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听的端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">.</span></span><br><span class="line"><span class="comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存</span></span><br><span class="line"><span class="attr">maxmemory</span> <span class="string">512mb</span></span><br><span class="line"><span class="comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;redis.log&quot;</span></span><br></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入redis安装目录 </span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src/redis-6.2.6</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure><p>停止服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><br><span class="line"><span class="comment"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span></span><br><span class="line">redis-cli -u 123321 shutdown</span><br></pre></td></tr></table></figure><h3 id="1-3-3-开机自启">1.3.3.开机自启</h3><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后重载系统服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>现在，我们可以用下面这组命令来操作redis了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start redis</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart redis</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> redis</span><br></pre></td></tr></table></figure><h1>2.Redis客户端</h1><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p><ul><li>命令行客户端</li><li>图形化桌面客户端</li><li>编程客户端</li></ul><h2 id="2-1-Redis命令行客户端">2.1.Redis命令行客户端</h2><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码</li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p><img src="assets/image-20211211110439353.png" alt="image-20211211110439353"></p><h2 id="2-2-图形化桌面客户端">2.2.图形化桌面客户端</h2><p>GitHub上的大神编写了Redis的图形化桌面客户端，地址：<a href="https://github.com/uglide/RedisDesktopManager">https://github.com/uglide/RedisDesktopManager</a></p><p>不过该仓库提供的是RedisDesktopManager的源码，并未提供windows安装包。</p><p>在下面这个仓库可以找到安装包：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a></p><p><img src="assets/image-20211211111351885.png" alt="image-20211211111351885"></p><h3 id="2-2-1-安装">2.2.1.安装</h3><p>在课前资料中可以找到Redis的图形化桌面客户端：</p><p><img src="assets/image-20211214154938770.png" alt="image-20211214154938770"></p><p>解压缩后，运行安装程序即可安装：</p><p><img src="assets/image-20211214155123841.png" alt="image-20211214155123841"></p><p>此处略。</p><p>安装完成后，在安装目录下找到rdm.exe文件：</p><p><img src="assets/image-20211211110935819.png" alt="image-20211211110935819"></p><p>双击即可运行：</p><p><img src="assets/image-20211214155406692.png" alt="image-20211214155406692"></p><h3 id="2-2-2-建立连接">2.2.2.建立连接</h3><p>点击左上角的<code>连接到Redis服务器</code>按钮：</p><p><img src="assets/image-20211214155424842.png" alt="image-20211214155424842"></p><p>在弹出的窗口中填写Redis服务信息：</p><p><img src="assets/image-20211211111614483.png" alt="image-20211211111614483"></p><p>点击确定后，在左侧菜单会出现这个链接：</p><p><img src="assets/image-20211214155804523.png" alt="image-20211214155804523"></p><p>点击即可建立连接了：</p><p><img src="assets/image-20211214155849495.png" alt="image-20211214155849495"></p><p>Redis默认有16个仓库，编号从0至15.  通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。</p><p>如果是基于redis-cli连接Redis服务，可以通过select命令来选择数据库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择 0号库</span></span><br><span class="line"><span class="keyword">select</span> 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1>RabbitMQ</h1><h1>1.初识MQ</h1><h2 id="1-1-同步和异步通讯">1.1.同步和异步通讯</h2><p>微服务间通讯有同步和异步两种方式：</p><p>同步通讯：就像打电话，需要实时响应。</p><p>异步通讯：就像发邮件，不需要马上回复。</p><p><img src="assets/image-20210717161939695.png" alt="image-20210717161939695"></p><p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟。</p><h3 id="1-1-1-同步通讯">1.1.1.同步通讯</h3><p>我们之前学习的Feign调用就属于同步方式，虽然调用可以实时得到结果，但存在下面的问题：</p><p><img src="assets/image-20210717162004285.png" alt="image-20210717162004285"></p><p>总结：</p><p>同步调用的优点：</p><ul><li>时效性较强，可以立即得到结果</li></ul><p>同步调用的问题：</p><ul><li>耦合度高</li><li>性能和吞吐能力下降</li><li>有额外的资源消耗</li><li>有级联失败问题</li></ul><h3 id="1-1-2-异步通讯">1.1.2.异步通讯</h3><p>异步调用则可以避免上述问题：</p><p>我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。</p><p>在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。</p><p>订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。</p><p>为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。</p><p><img src="assets/image-20210422095356088.png" alt="image-20210422095356088"></p><p>Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。</p><p>好处：</p><ul><li><p>吞吐量提升：无需等待订阅者处理完成，响应更快速</p></li><li><p>故障隔离：服务没有直接调用，不存在级联失败问题</p></li><li><p>调用间没有阻塞，不会造成无效的资源占用</p></li><li><p>耦合度极低，每个服务都可以灵活插拔，可替换</p></li><li><p>流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件</p></li></ul><p>缺点：</p><ul><li>架构复杂了，业务没有明显的流程线，不好管理</li><li>需要依赖于Broker的可靠、安全、性能</li></ul><p>好在现在开源软件或云平台上 Broker 的软件是非常成熟的，比较常见的一种就是我们今天要学习的MQ技术。</p><h2 id="1-2-技术对比：">1.2.技术对比：</h2><p>MQ，中文是消息队列（MessageQueue），字面来看就是存放消息的队列。也就是事件驱动架构中的Broker。</p><p>比较常见的MQ实现：</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RocketMQ</li><li>Kafka</li></ul><p>几种常见MQ的对比：</p><table><thead><tr><th></th><th><strong>RabbitMQ</strong></th><th><strong>ActiveMQ</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td>公司/社区</td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td>协议支持</td><td>AMQP，XMPP，SMTP，STOMP</td><td>OpenWire,STOMP，REST,XMPP,AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td>可用性</td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td>消息延迟</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p><p>追求可靠性：RabbitMQ、RocketMQ</p><p>追求吞吐能力：RocketMQ、Kafka</p><p>追求消息低延迟：RabbitMQ、Kafka</p><h1>2.快速入门</h1><h2 id="2-1-安装RabbitMQ">2.1.安装RabbitMQ</h2><p>安装RabbitMQ，参考课前资料：</p><p><img src="assets/image-20210717162628635.png" alt="image-20210717162628635"></p><p>MQ的基本结构：</p><p><img src="assets/image-20210717162752376.png" alt="image-20210717162752376"></p><p>RabbitMQ中的一些角色：</p><ul><li>publisher：生产者</li><li>consumer：消费者</li><li>exchange个：交换机，负责消息路由</li><li>queue：队列，存储消息</li><li>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离</li></ul><h2 id="2-2-RabbitMQ消息模型">2.2.RabbitMQ消息模型</h2><p>RabbitMQ官方提供了5个不同的Demo示例，对应了不同的消息模型：</p><p><img src="assets/image-20210717163332646.png" alt="image-20210717163332646"></p><h2 id="2-3-导入Demo工程">2.3.导入Demo工程</h2><p>课前资料提供了一个Demo工程，mq-demo:</p><p><img src="assets/image-20210717163253264.png" alt="image-20210717163253264"></p><p>导入后可以看到结构如下：</p><p><img src="assets/image-20210717163604330.png" alt="image-20210717163604330"></p><p>包括三部分：</p><ul><li>mq-demo：父工程，管理项目依赖</li><li>publisher：消息的发送者</li><li>consumer：消息的消费者</li></ul><h2 id="2-4-入门案例">2.4.入门案例</h2><p>简单队列模式的模型图：</p><p><img src="assets/image-20210717163434647.png" alt="image-20210717163434647"></p><p>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：</p><ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接受并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul><h3 id="2-4-1-publisher实现">2.4.1.publisher实现</h3><p>思路：</p><ul><li>建立连接</li><li>创建Channel</li><li>声明队列</li><li>发送消息</li><li>关闭连接和channel</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, rabbitmq!&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息成功：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-consumer实现">2.4.2.consumer实现</h3><p>代码思路：</p><ul><li>建立连接</li><li>创建Channel</li><li>声明队列</li><li>订阅消息</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.订阅消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span><br><span class="line"><span class="params">                                       AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="comment">// 5.处理消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-总结">2.5.总结</h2><p>基本消息队列的消息发送流程：</p><ol><li><p>建立connection</p></li><li><p>创建channel</p></li><li><p>利用channel声明队列</p></li><li><p>利用channel向队列发送消息</p></li></ol><p>基本消息队列的消息接收流程：</p><ol><li><p>建立connection</p></li><li><p>创建channel</p></li><li><p>利用channel声明队列</p></li><li><p>定义consumer的消费行为handleDelivery()</p></li><li><p>利用channel将消费者与队列绑定</p></li></ol><h1>3.SpringAMQP</h1><p>SpringAMQP是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。</p><p>SpringAmqp的官方地址：<a href="https://spring.io/projects/spring-amqp">https://spring.io/projects/spring-amqp</a></p><p><img src="assets/image-20210717164024967.png" alt="image-20210717164024967"></p><p><img src="assets/image-20210717164038678.png" alt="image-20210717164038678"></p><p>SpringAMQP提供了三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息</li></ul><h2 id="3-1-Basic-Queue-简单队列模型">3.1.Basic Queue 简单队列模型</h2><p>在父工程mq-demo中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-1-1-消息发送">3.1.1.消息发送</h3><p>首先配置MQ地址，在publisher服务的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><p>然后在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-消息接收">3.1.2.消息接收</h3><p>首先配置MQ地址，在consumer服务的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><p>然后在consumer服务的<code>cn.itcast.mq.listener</code>包中新建一个类SpringRabbitListener，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-测试">3.1.3.测试</h3><p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息</p><h2 id="3-2-WorkQueue">3.2.WorkQueue</h2><p>Work queues，也被称为（Task queues），任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p><p><img src="assets/image-20210717164238910.png" alt="image-20210717164238910"></p><p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p><p>此时就可以使用work 模型，多个消费者共同处理消息处理，速度就能大大提高了。</p><h3 id="3-2-1-消息发送">3.2.1.消息发送</h3><p>这次我们循环发送，模拟大量消息堆积现象。</p><p>在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * workQueue</span></span><br><span class="line"><span class="comment">     * 向队列中不停发送消息，模拟消息堆积。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, message_&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-消息接收">3.2.2.消息接收</h3><p>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这个消费者sleep了1000秒，模拟任务耗时。</p><h3 id="3-2-3-测试">3.2.3.测试</h3><p>启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。</p><p>可以看到消费者1很快完成了自己的25条消息。消费者2却在缓慢的处理自己的25条消息。</p><p>也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。这样显然是有问题的。</p><h3 id="3-2-4-能者多劳">3.2.4.能者多劳</h3><p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure><h3 id="3-2-5-总结">3.2.5.总结</h3><p>Work模型的使用：</p><ul><li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li><li>通过设置prefetch来控制消费者预取的消息数量</li></ul><h2 id="3-3-发布-订阅">3.3.发布/订阅</h2><p>发布订阅的模型如图：</p><p><img src="assets/image-20210717165309625.png" alt="image-20210717165309625"></p><p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li><li>Consumer：消费者，与以前一样，订阅队列，没有变化</li><li>Queue：消息队列也与以前一样，接收消息、缓存消息。</li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="3-4-Fanout">3.4.Fanout</h2><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。</p><p><img src="assets/image-20210717165438225.png" alt="image-20210717165438225"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>1）  可以有多个队列</li><li>2）  每个队列都要绑定到Exchange（交换机）</li><li>3）  生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li><li>4）  交换机把消息发送给绑定过的所有队列</li><li>5）  订阅队列的消费者都能拿到消息</li></ul><p>我们的计划是这样的：</p><ul><li>创建一个交换机 itcast.fanout，类型是Fanout</li><li>创建两个队列fanout.queue1和fanout.queue2，绑定到交换机itcast.fanout</li></ul><p><img src="assets/image-20210717165509466.png" alt="image-20210717165509466"></p><h3 id="3-4-1-声明队列和交换机">3.4.1.声明队列和交换机</h3><p>Spring提供了一个接口Exchange，来表示所有不同类型的交换机：</p><p><img src="assets/image-20210717165552676.png" alt="image-20210717165552676"></p><p>在consumer中创建一个类，声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;itcast.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-消息发送">3.4.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.fanout&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, everyone!&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-消息接收">3.4.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-总结">3.4.4.总结</h3><p>交换机的作用是什么？</p><ul><li>接收publisher发送的消息</li><li>将消息按照规则路由到与之绑定的队列</li><li>不能缓存消息，路由失败，消息丢失</li><li>FanoutExchange的会将消息路由到每个绑定的队列</li></ul><p>声明队列、交换机、绑定关系的Bean是什么？</p><ul><li>Queue</li><li>FanoutExchange</li><li>Binding</li></ul><h2 id="3-5-Direct">3.5.Direct</h2><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p><p><img src="assets/image-20210717170041447.png" alt="image-20210717170041447"></p><p>在Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p><strong>案例需求如下</strong>：</p><ol><li><p>利用@RabbitListener声明Exchange、Queue、RoutingKey</p></li><li><p>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</p></li><li><p>在publisher中编写测试方法，向itcast. direct发送消息</p></li></ol><p><img src="assets/image-20210717170223317.png" alt="image-20210717170223317"></p><h3 id="3-5-1-基于注解声明队列和交换机">3.5.1.基于注解声明队列和交换机</h3><p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。</p><p>在consumer的SpringRabbitListener中添加两个消费者，同时基于注解来声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-消息发送">3.5.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-总结">3.5.3.总结</h3><p>描述下Direct交换机与Fanout交换机的差异？</p><ul><li>Fanout交换机将消息路由给每一个与之绑定的队列</li><li>Direct交换机根据RoutingKey判断路由给哪个队列</li><li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li></ul><p>基于@RabbitListener注解声明队列和交换机有哪些常见注解？</p><ul><li>@Queue</li><li>@Exchange</li></ul><h2 id="3-6-Topic">3.6.Topic</h2><h3 id="3-6-1-说明">3.6.1.说明</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p>通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p><p><code>item.*</code>：只能匹配<code>item.spu</code></p><p>​</p><p>图示：</p><p><img src="assets/image-20210717170705380.png" alt="image-20210717170705380"></p><p>解释：</p><ul><li>Queue1：绑定的是<code>china.#</code> ，因此凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到。包括china.news和china.weather</li><li>Queue2：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括china.news和japan.news</li></ul><p>案例需求：</p><p>实现思路如下：</p><ol><li><p>并利用@RabbitListener声明Exchange、Queue、RoutingKey</p></li><li><p>在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2</p></li><li><p>在publisher中编写测试方法，向itcast. topic发送消息</p></li></ol><p><img src="assets/image-20210717170829229.png" alt="image-20210717170829229"></p><h3 id="3-6-2-消息发送">3.6.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * topicExchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-3-消息接收">3.6.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-4-总结">3.6.4.总结</h3><p>描述下Direct交换机与Topic交换机的差异？</p><ul><li>Topic交换机接收的消息RoutingKey必须是多个单词，以 <code>**.**</code> 分割</li><li>Topic交换机与队列绑定时的bindingKey可以指定通配符</li><li><code>#</code>：代表0个或多个词</li><li><code>*</code>：代表1个词</li></ul><h2 id="3-7-消息转换器">3.7.消息转换器</h2><p>之前说过，Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p><p><img src="assets/image-20200525170410401.png" alt="image-20200525170410401"></p><p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>我们来测试一下。</p><h3 id="3-7-1-测试默认转换器">3.7.1.测试默认转换器</h3><p>我们修改消息发送的代码，发送一个Map对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 准备消息</span></span><br><span class="line">    Map&lt;String,Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;simple.queue&quot;</span>,<span class="string">&quot;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>停止consumer服务</p><p>发送消息后查看控制台：</p><p><img src="assets/image-20210422232835363.png" alt="image-20210422232835363"></p><h3 id="3-7-2-配置JSON转换器">3.7.2.配置JSON转换器</h3><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p><p>在publisher和consumer两个服务中都引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置消息转换器。</p><p>在启动类中添加一个Bean即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL学习笔记-postgres(用户名)</title>
      <link href="/posts/2636fab1.html"/>
      <url>/posts/2636fab1.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-PostgreSQL-创建数据库">一.PostgreSQL 创建数据库</h3><ol><li><h5 id="CREATE-DATABASE-创建数据库">CREATE DATABASE 创建数据库</h5></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE dbname;</span><br></pre></td></tr></table></figure><ol start="2"><li><h5 id="createdb-命令创建数据库-createdb-是一个-SQL-命令-CREATE-DATABASE-的封装。">createdb 命令创建数据库( createdb 是一个 SQL 命令 CREATE DATABASE 的封装。)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">createdb [option...] [dbname [description]]</span><br><span class="line">createdb <span class="operator">-</span>h localhost <span class="operator">-</span>p <span class="number">5432</span> <span class="operator">-</span>U postgres runoobdb</span><br></pre></td></tr></table></figure><p><strong>dbname</strong>：要创建的数据库名。</p><p><strong>description</strong>：关于新创建的数据库相关的说明。</p><p><strong>options</strong>：参数可选项(-h:主机名、-p:端口、-U:连接数据库的用户名)</p></li><li><h5 id="pgAdmin-工具创建数据库">pgAdmin 工具创建数据库</h5><p><img src="img/image-20230309161839625.png" alt="image-20230309161839625"></p></li></ol><h3 id="二-PostgreSQL-选择数据库">二.PostgreSQL 选择数据库</h3><ol><li><h5 id="使用-l-用于查看已经存在的数据库：">使用  \l 用于查看已经存在的数据库：</h5><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres=# \l</span><br></pre></td></tr></table></figure></li><li><h5 id="使用-c-数据库名-来进入数据库">使用 \c + 数据库名 来进入数据库:</h5><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">postgres=# \c test</span><br><span class="line">You are now connected <span class="keyword">to</span> <span class="keyword">database</span> &quot;test&quot; <span class="keyword">as</span> <span class="keyword">user</span> &quot;postgres&quot;.</span><br><span class="line">test=# </span><br></pre></td></tr></table></figure></li></ol><h3 id="三-PostgreSQL-删除数据库">三.PostgreSQL 删除数据库</h3><ol><li><h5 id="DROP-DATABASE-删除数据库">DROP DATABASE 删除数据库</h5><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> [ <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ] <span class="type">name</span></span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><strong>IF EXISTS</strong>：如果数据库不存在则发出提示信息，而不是错误信息。</li><li><strong>name</strong>：要删除的数据库的名称。</li></ul><p>例如，我们删除一个 test 的数据库：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres=# <span class="keyword">DROP</span> <span class="keyword">DATABASE</span> test;</span><br></pre></td></tr></table></figure></li><li><h5 id="dropdb-命令删除数据库">dropdb 命令删除数据库</h5><p>dropdb 是 DROP DATABASE 的包装器。</p><p>dropdb 用于删除 PostgreSQL 数据库。</p><p>dropdb 命令只能由超级管理员或数据库拥有者执行。</p><p>dropdb 命令语法格式如下：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dropdb [<span class="keyword">connection</span>-<span class="keyword">option</span>...] [<span class="keyword">option</span>...] dbname</span><br></pre></td></tr></table></figure><p><strong>dbname</strong>：要删除的数据库名。</p><p><strong>options</strong>：参数可选项.</p><p>打开一个命令窗口，进入到 PostgreSQL 的安装目录，并进入到 bin 目录，dropdb 名位于 <strong>PostgreSQL安装目录/bin</strong> 下，执行删除数据库的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /Library/PostgreSQL/11/bin/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">dropdb -h localhost -p 5432 -U postgres <span class="built_in">test</span></span></span><br><span class="line">password ******</span><br></pre></td></tr></table></figure><p>以上命令我们使用了超级用户 postgres 登录到主机地址为 localhost，端口号为 5432 的  PostgreSQL 数据库中并删除 test数据库。</p></li></ol><h3 id="四-PostgreSQL-创建表格">四.PostgreSQL 创建表格</h3><ol><li><p>PostgreSQL 使用 CREATE TABLE 语句来创建数据库表格。</p><p>语法:</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="built_in">table_name</span>(</span><br><span class="line">   column1 datatype,</span><br><span class="line">   column2 datatype,</span><br><span class="line">   column3 datatype,</span><br><span class="line">   .....</span><br><span class="line">   columnN datatype,</span><br><span class="line">   <span class="keyword">PRIMARY KEY</span>( 一个或多个列 )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>以下创建了一个表，表名为 <strong>COMPANY</strong> 表格，主键为 <strong>ID</strong>，<strong>NOT NULL</strong> 表示字段不允许包含 <strong>NULL</strong> 值：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> COMPANY(</span><br><span class="line">   ID <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="type">NAME</span>           <span class="type">TEXT</span>    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   AGE            <span class="type">INT</span>     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   ADDRESS        <span class="type">CHAR</span>(<span class="number">50</span>),</span><br><span class="line">   SALARY         <span class="type">REAL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DEPARTMENT(</span><br><span class="line">   ID <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   DEPT           <span class="type">CHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   EMP_ID         <span class="type">INT</span>      <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>使用 \d 命令来查看表格是否创建成功：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test=# \d</span><br></pre></td></tr></table></figure><p>\d tablename 查看表格信息：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test=# \d company</span><br></pre></td></tr></table></figure></li></ol><h3 id="五-PostgreSQL-删除表格">五.PostgreSQL 删除表格</h3><p>PostgreSQL 使用 DROP TABLE 语句来删除表格，包含表格数据、规则、触发器等，所以删除表格要慎重，删除后所有信息就消失了。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="built_in">table_name</span>;</span><br></pre></td></tr></table></figure><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test=# <span class="keyword">drop</span> <span class="keyword">table</span> department, company;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br></pre></td></tr></table></figure><h3 id="六-PostgreSQL-模式（SCHEMA）">六.PostgreSQL 模式（SCHEMA）</h3><p>PostgreSQL 模式（SCHEMA）可以看着是一个表的集合。一个模式可以包含视图、索引、数据类型、函数和操作符等。</p><p>使用 <strong>CREATE SCHEMA</strong>  语句来创建模式，语法格式如下：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> myschema.mytable (</span><br><span class="line">...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test=# <span class="keyword">create</span> <span class="keyword">schema</span> myschema;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span></span><br></pre></td></tr></table></figure><p>输出结果  “CREATE SCHEMA”  就代表模式创建成功。</p><ul><li><h5 id="创建表格">创建表格</h5><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test=# <span class="keyword">create</span> <span class="keyword">table</span> myschema.company(</span><br><span class="line">   ID   <span class="type">INT</span>              <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="type">NAME</span> <span class="type">VARCHAR</span> (<span class="number">20</span>)     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   AGE  <span class="type">INT</span>              <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   ADDRESS  <span class="type">CHAR</span> (<span class="number">25</span>),</span><br><span class="line">   SALARY   <span class="type">DECIMAL</span> (<span class="number">18</span>, <span class="number">2</span>),</span><br><span class="line">   <span class="keyword">PRIMARY KEY</span> (ID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><h3 id="删除模式">删除模式</h3><p>删除一个为空的模式（其中的所有对象已经被删除）：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">SCHEMA</span> myschema;</span><br></pre></td></tr></table></figure></li><li><p>删除一个模式以及其中包含的所有对象：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">SCHEMA</span> myschema <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="七-PostgreSQL-INSERT-INTO-语句">七.PostgreSQL INSERT INTO 语句</h3><p>PostgreSQL INSERT INTO 语句用于向表中插入新记录。我们可以插入一行也可以同时插入多行。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="built_in">TABLE_NAME</span> (column1, column2, column3,...columnN)</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3,...valueN);</span><br></pre></td></tr></table></figure><p>在使用 INSERT INTO 语句时，字段列必须和数据值数量相同，且顺序也要对应。</p><p>如果我们向表中的所有字段插入值，则可以不需要指定字段，只需要指定插入的值即可：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="built_in">TABLE_NAME</span> <span class="keyword">VALUES</span> (value1,value2,value3,...valueN);</span><br></pre></td></tr></table></figure><p>下表列出执行插入后返回结果的说明：</p><table><thead><tr><th>序号</th><th style="text-align:center">输出信息 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center"><strong>INSERT oid 1</strong> 只插入一行并且目标表具有 OID的返回信息， 那么 oid 是分配给被插入行的 OID。</td></tr><tr><td>2</td><td style="text-align:center"><strong>INSERT 0 #</strong> 插入多行返回的信息， # 为插入的行数。</td></tr></tbody></table><p>在 COMPANY 表中插入以下数据：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test=# <span class="keyword">INSERT</span> <span class="keyword">INTO</span> COMPANY (ID,<span class="type">NAME</span>,AGE,ADDRESS,SALARY,JOIN_DATE) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Paul&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;California&#x27;</span>, <span class="number">20000.00</span>,<span class="string">&#x27;2001-07-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>插入多行：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test=# <span class="keyword">INSERT</span> <span class="keyword">INTO</span> COMPANY (ID,<span class="type">NAME</span>,AGE,ADDRESS,SALARY,JOIN_DATE) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;Mark&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;Rich-Mond &#x27;</span>, <span class="number">65000.00</span>, <span class="string">&#x27;2007-12-13&#x27;</span> ), (<span class="number">5</span>, <span class="string">&#x27;David&#x27;</span>, <span class="number">27</span>, <span class="string">&#x27;Texas&#x27;</span>, <span class="number">85000.00</span>, <span class="string">&#x27;2007-12-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="number">0</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="八-PostgreSQL-SELECT-语句">八.PostgreSQL SELECT 语句</h3><p>PostgreSQL SELECT 语句用于从数据库中选取数据。结果被存储在一个结果表中，称为结果集。</p><ul><li><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">SELECT</span> column1, column2,..<span class="selector-class">.columnN</span> <span class="selector-tag">FROM</span> table_name;</span><br></pre></td></tr></table></figure><ul><li>column1, column2,…columnN 为表中字段名。</li><li>table_name 为表名。</li></ul></li></ul><h3 id="九-PostgreSQL-运算符">九.PostgreSQL 运算符</h3><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。PostgreSQL 运算符是一个保留关键字或字符，一般用在 WHERE 语句中，作为过滤条件。</p><h4 id="1-算术运算符">1.算术运算符</h4><p>假设变量 a 为 2，变量 b 为 3，则：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td style="text-align:center">a + b 结果为 5</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td style="text-align:center">a - b 结果为 -1</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td style="text-align:center">a * b 结果为 6</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td style="text-align:center">b / a 结果为 1</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">模（取余）</td><td style="text-align:center">b % a 结果为 1</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">指数</td><td style="text-align:center">a ^ b 结果为 8</td></tr><tr><td style="text-align:center">|/</td><td style="text-align:center">平方根</td><td style="text-align:center">|/ 25.0 结果为 5</td></tr><tr><td style="text-align:center">||/</td><td style="text-align:center">立方根</td><td style="text-align:center">||/ 27.0 结果为 3</td></tr><tr><td style="text-align:center">!</td><td style="text-align:center">阶乘</td><td style="text-align:center">5 ! 结果为 120</td></tr><tr><td style="text-align:center">!!</td><td style="text-align:center">阶乘（前缀操作符）</td><td style="text-align:center">!! 5 结果为 120</td></tr></tbody></table><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">2</span>+<span class="number">3</span>;</span><br></pre></td></tr></table></figure><h4 id="2-比较运算符">2.比较运算符</h4><p>假设变量 a 为 10，变量 b 为 20，则：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">等于</td><td style="text-align:center">(a = b) 为 false。</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">不等于</td><td style="text-align:center">(a != b) 为 true。</td></tr><tr><td style="text-align:center">&lt;&gt;</td><td style="text-align:center">不等于</td><td style="text-align:center">(a &lt;&gt; b) 为 true。</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center">(a &gt; b) 为 false。</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center">(a &lt; b) 为 true。</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大于等于</td><td style="text-align:center">(a &gt;= b) 为 false。</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小于等于</td><td style="text-align:center">(a &lt;= b) 为 true。</td></tr></tbody></table><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COMPANY <span class="keyword">WHERE</span> SALARY &gt; <span class="number">50000</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-PLM解决方案概述-西门子">title:PLM解决方案概述-西门子</h2><h3 id="一-数字化企业">一.数字化企业</h3><ol><li>西门子数字化企业软件套件<ul><li>Design</li><li>Program</li><li>Simulate</li><li>Build</li><li>IOT(Internet of Things) 物联网，Cloud-Services</li><li>Execute</li><li>Automate</li><li>Service</li><li>Analyze</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenFeign的使用--Hystrix的使用--Zuul网关的使用</title>
      <link href="/posts/2c37d177.html"/>
      <url>/posts/2c37d177.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是Feign">一. 什么是Feign</h3><p>Feign是一个声明式的http客户端，使用Feign可以实现声明式REST调用，它的目的就是让Web Service调用更加简单。Feign整合了<strong>Ribbon</strong>和<strong>SpringMvc</strong>注解，这让Feign的客户端接口看起来就像一个Controller。Feign提供了HTTP请求的模板，<code>通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息</code>。而Feign则会完全代理HTTP请求，我们只需要像调用方法一样调用它就可以完成服务请求及相关处理。同时Feign整合了Hystrix，可以很容易的实现服务熔断和降级。</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221013184847.png" alt="image-20221013184846981"></p><h3 id="二-实例">二.实例</h3><ol><li><p>创建一个springboot模块，并导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lqs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-entity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置类如下</p><p>主配置类增加<code>@EnableFeignClients</code>标签 , 其value属性可以指定Feign的客户端接口的包,当然也可以省略value属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/`</span><br><span class="line"> * 支付的启动类</span><br><span class="line"> * <span class="meta">@EnableFeignClients</span> :开启Feign支持</span><br><span class="line"> */</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients(value=&quot;com.lqs.feignclient&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayServerApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">    &#123;</span><br><span class="line">        SpringApplication.run(PayServerApp.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>yml配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8089</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">pay-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">pay-server:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">user-server:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line"><span class="comment">#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">3000</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">6000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.lqs:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启hystrix熔断</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">SocketTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">4000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写Feign的客户端接口</p><p>Feign的客户端接口是用来调用微服务的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-server&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserServerClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getByUserId</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>解释</code><br>@FeignClient(“user-server”) : user-server是用户服务的服务名字，Feign根据服务名能够在注册中心找到目标服务的通信地址</p><p>其实Feign就是通过客户端接口里面的方法，来决定目标服务的资源路径url，参数以及返回值，这里我们可以直接把要调用的目标服务的controller方法拷贝过来，然后去掉方法体即可。</p><p>Feign可以根据@FeignClient(“user-server”)找到用户服务，根据方法上的 @GetMapping(“/user/{id}”)找到目标服务的controller的方法 ，我们在使用Feign接口时传入的参数就会作为目标服务controller方法的参数，而返回值就是目标服务controller方法的返回值。</p><p>即：服务名要一致 ， url路径要一致 ， 参数要一致 ， 返回值类型要一致。</p><ol start="5"><li><p>编写Controller使用Feign接口</p><p>通过注入UserFeignClient ，直接发起调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/pay&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayBillController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServerClient userServerClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PayBiIl <span class="title function_">getBillById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userServerClient.getByUserId(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PayBiIl</span>(<span class="number">1L</span>, <span class="string">&quot;202210131137&quot;</span>, user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-理解Feign的工作原理">三.理解Feign的工作原理</h3><p>要使用Feign，我们除了导入依赖之外，需要主配置类通过<code>@EnableFeignClients(value=&quot;&quot;)</code>注解开启Feign,也可以通过value属性指定了Feign的扫描包。同时我们需要为Feign编写客户端接口，接口上需要注解<code>@FeignClient</code>标签。 当程序启动，注解了<code>@FeignClient的接口将会被扫描到然后交给Spring管理</code>。</p><p>当请求发起，会使用<strong>jdk的动态代理</strong>方式代理接口，生成相应的<code>RequestTemplate</code>，Feign会为<code>每个方法生成一个RequestTemplate同时封装好http信息，如：url，请求参数等等</code></p><p>最终RequestTemplate生成request请求，交给<code>Http客户端</code>(UrlConnection ,HttpClient,OkHttp)。然后Http客户端会交给LoadBalancerClient，使用Ribbon的负载均衡发起调用。</p><h3 id="四-Feign的参数配置">四.Feign的参数配置</h3><ol><li><h4 id="负载均衡配置">负载均衡配置</h4><p>Feign已经集成了Ribbon，所以它的负载均衡配置基于Ribbon配置即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-server:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure></li><li><h4 id="Feign的超时配置">Feign的超时配置</h4><p>如果在服务调用时出现了 “feign.RetryableException : Read timed out…”错误日志，说明Ribbon处理超时 ，我们可以配置Ribbon的超时时间：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">ConnectTimeout:</span> <span class="number">3000</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">6000</span></span><br></pre></td></tr></table></figure><p>如果服务调用出现“com.netflix.hystrix.exception.HystrixRuntimeException：… timed - out and no fallback available” 错误日志，是因为<strong>Hystrix</strong>超时，默认Feign集成了Hystrix，但是高版本是关闭了Hystrix，我们可以配置Hystrix超时时间：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">   <span class="attr">hystrix:</span></span><br><span class="line">       <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启熔断支持</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">execution:</span></span><br><span class="line">          <span class="attr">isolation:</span></span><br><span class="line">            <span class="attr">thread:</span></span><br><span class="line">              <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span>   <span class="comment">#hystrix超时时间</span></span><br></pre></td></tr></table></figure></li><li><h4 id="配置Feign日志打印内容">配置Feign日志打印内容</h4><p>有的时候我们需要看到Feign的调用过程中的参数及相应，我们可以对Feign的日志进行配置，Feign支持如下几种日志模式来决定日志记录内容多少：</p><ul><li>NONE，不记录（DEFAULT）。</li><li>BASIC，仅记录请求方法和URL以及响应状态代码和执行时间。</li><li>HEADERS，记录基本信息以及请求和响应标头。</li><li>FULL，记录请求和响应的标题，正文和元数据。</li></ul><p><code>创建Feign配置类</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;<span class="comment">//打印Feign的所有日志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.lqs:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="五-Hystrix熔断器">五.Hystrix熔断器</h3><ol><li><h4 id="Hystrix介绍">Hystrix介绍</h4><p>Hystrix是国外知名的视频网站Netflix所开源的非常流行的高可用架构框架。Hystrix能够完美的解决分布式系统架构中打造高可用服务面临的一系列技术难题，如雪崩。</p><p>Hystrix是处理依赖隔离的框架,将出现<code>故障的服务通过熔断、降级等手段隔离开来</code>，这样不影响整个系统的主业务(比如你得了传染病是不是要把你关起来隔离呢),同时也是可以帮我们做服务的<code>治理和监控</code>。</p><p>Hystrix的英文是豪猪，中文翻译为 熔断器，其思想来源于我们家里的保险开关，当家里出现短路，保险开关及时切掉电路，保证家里人员的安全，其目的就是起保护作用。</p><p>Hystrix其设计原则如下：</p><ol><li>防止单个服务异常导致整个微服务故障。</li><li>快速失败，如果服务出现故障，服务的请求快速失败，线程不会等待。</li><li>服务降级，请求故障可以返回设定好的二手方案数据（兜底数据）。</li><li>熔断机制，防止故障的扩散，导致整个服务瘫痪。</li><li>服务监控，提供了Hystrix Bashboard仪表盘，实时监控熔断器状态</li></ol></li></ol><p>微服务系统中，Hystrix 能够帮助我们实现以下目标：</p><ul><li><strong>保护线程资源</strong>：防止单个服务的故障耗尽系统中的所有线程资源。</li><li><strong>快速失败机制</strong>：当某个服务发生了故障，不让服务调用方一直等待，而是直接返回请求失败。</li><li><strong>提供降级（FallBack）方案</strong>：在请求失败后，提供一个设计好的降级方案，通常是一个<strong>兜底方法</strong>，当请求失败后即调用该方法。</li><li><strong>防止故障扩散</strong>：使用熔断机制，防止故障扩散到其他服务。</li><li><strong>监控功能</strong>：提供熔断器故障监控组件 Hystrix Dashboard，随时监控熔断器的状态。</li></ul><ol start="2"><li><h4 id="Hystrix工作机制">Hystrix工作机制</h4><p>正常情况下，断路器处于关闭状态(Closed)，如果调用持续出错或者超时达到设定阈值，电路被打开进入熔断状态(Open)，这时请求这个服务会触发快速失败（立马返回兜底数据不要让线程死等），后续一段时间内的所有调用都会被拒绝(Fail Fast)，一段时间以后（withCircuitBreakerSleepWindowInMilliseconds=5s），保护器会尝试进入半熔断状态(Half-Open)，允许少量请求进来尝试，如果调用仍然失败，则回到熔断状态，如果调用成功，则回到电路闭合状态;</p></li></ol><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221013192148.png" alt="image-20221013192148794"></p><h3 id="六-Hystrix的使用">六.Hystrix的使用</h3><ol><li><h4 id="导入依赖">导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="配置类开启Hystrix">配置类开启Hystrix</h4><p>主配置类通过 <code>@EnableCircuitBreaker</code> 标签开启熔断功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">// 开启Hystrix熔断</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServerApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderServerApp.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">// 实现负载均衡</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span> &#123;<span class="comment">// 实现服务之间的通信</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置随机的负载均衡算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> RandomRule</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RandomRule <span class="title function_">randomRule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="方法熔断">方法熔断</h4><p>通过 <code>@HystrixCommand</code> 标签标记方法熔断，标签的<code>fallbackMethod</code>属性指定兜底方法。那么当该方法在像远程服务发起调用出现异常，或是方法本身出现异常都会触发托底方法的执行，最终结果是托底方法的返回结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">   </span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackGetOrderById&quot;)</span><span class="comment">// 兜底方法</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">getOrderById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 发送的http请求</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://user-server/user/&quot;</span> + id;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">1L</span>, <span class="number">88L</span>, <span class="string">&quot;芋泥啵啵奶茶&quot;</span>, <span class="number">2</span>, <span class="number">1L</span>, user);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">fallbackGetOrderById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(-<span class="number">1L</span>, <span class="string">&quot;返回数据错误！！！&quot;</span>, <span class="string">&quot;返回数据错误！！！&quot;</span>, <span class="string">&quot;请稍后再试！！！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">1L</span>, <span class="number">88L</span>, <span class="string">&quot;芋泥啵啵奶茶&quot;</span>, <span class="number">2</span>, <span class="number">1L</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在每个方法上打@HystrixCommand(fallbackMethod = “fallbackMethod”)   标签进行方法单独熔断，也可以在Controller使用 @DefaultProperties做统一配置，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback =&quot;fallbackMethod&quot;)</span><span class="comment">//统一降级配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HystrixCommand</span>   <span class="comment">//方法熔断</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/order/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span></span><br><span class="line"><span class="comment">//...省略...</span></span><br></pre></td></tr></table></figure></li><li><h4 id="OpenFeign使用Hystrix">OpenFeign使用Hystrix</h4><p>通过<code>feign.hystrix.enabled=true</code>开启Hystrix</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启熔断支持</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">SocketTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">4000</span></span><br></pre></td></tr></table></figure><p>Fiegn接口熔断-fallback方式</p><p>服务通过Feign接口调用异常或超时需要触发降级，返回托底数据。这里有两种方式，分别是通过@FeignClient(fallback=…) ,以及@FeignClient(fallbackFactory=…) 来指定托底类，区别在于通过fallback的方式编写的托底是没办法打印出异常日志的 ，而fallbackFactory方式是可以打印出异常日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-server&quot;,fallback = UserFeignClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserFeignClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单服务来调用这个方法      http://localhost:1020/user/10</span></span><br><span class="line">    <span class="comment">// @GetMapping(value = &quot;/user/&#123;id&#125;&quot; )</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    User <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>托底实现类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让Spring扫描到该托底类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFeignClientFallback</span> <span class="keyword">implements</span> <span class="title class_">UserFeignClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志打印器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(UserFeignClientFallback.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;用户服务不可用&quot;</span>);</span><br><span class="line">        <span class="comment">//托底数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(-<span class="number">1l</span>,<span class="string">&quot;无此用户&quot;</span>,<span class="string">&quot;用户服务不可用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>提示：注意，这里托底类需要交给Spirng管理，类上需要打 <code>@Component</code> 注解 ， 拖地类需要实现 Feign接口，复写接口中的方法作为托底方法返回拖地数据。当Fiegn调用失败就会以拖地方法返回的结果返回给用户</p><h3 id="七-Fiegn接口熔断-fallbackFactory方式-常用">七.Fiegn接口熔断-fallbackFactory方式(常用)</h3><p>使用fallbackFactory属性，使用工厂方式指定托底</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-server&quot;,fallbackFactory = UserFeignClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserServerClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getByUserId</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写托底类</strong><br>工程方式的托底类需要去实现 FallbackFactory接口 ，并指定泛型为“”Feign客户端接口(UserFeignClient )。FallbackFactory的create方法返回了Feign客户端接口的实例，该方法的throwable是参数是Feign调用失败的异常信息，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFeignClientFallback</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;UserServerClient&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserServerClient <span class="title function_">create</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id -&gt; &#123;</span><br><span class="line">            System.err.println(throwable.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(-<span class="number">1L</span>, <span class="string">&quot;返回数据错误！！！&quot;</span>, <span class="string">&quot;返回数据错误！！！&quot;</span>, <span class="string">&quot;请稍后再试-_-！！！&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八-服务网关-spring-cloud-zuul">八.服务网关-spring cloud zuul</h3><ol><li><h4 id="为什么要zuul">为什么要zuul</h4><p>试想一下如果我们有很多的微服务，他们都需要登录之后才能访问，那么我需要在每个微服务都去做一套登录检查逻辑，这样是不是会存在大量重复的代码和工作量，我们希望的是把登录检查这种公共的逻辑进行统一的抽取，只需要做一套检查逻辑即可，而zuul就可以用来干这类事情，我们可以把zuul看做是微服务的大门，所有的请求都需要通过zuul将请求分发到其他微服务，根据这一特性我们就可以在zuul做统一的登录检查，下游的微服务不再处理登录检查逻辑。</p></li><li><h4 id="什么是zuul">什么是zuul</h4><p>Zuul 是netflix开源的一个API Gateway 服务器, 本质上是一个web servlet(filter)应用。Zuul 在云平台上提供动态路由(请求分发)，监控，弹性，安全等边缘服务的框架。Zuul 相当于是设备和 Netflix 流应用的 Web 网站后端所有请求的前门，也要注册入Eureka，用一张图来理解zuul在架构中的的角色：</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221013193448.png" alt="image-20221013193448394"></p></li></ol><p>需要注意的是，zuul本身是一个独立的服务，默认集成了Ribbon，zuul通过Ribbon将客户端的请求分发到下游的微服务，所以zuul需要通过Eureka做服务发行，同时zuul也集成了Hystrix。</p><p>根据上图理解 ，我们需要建立独立的工程去搭建Zuul服务，同时需要把Zuul注册到EurekaServer,因为当请求过来时，zuul需要通过EurekaServer获取下游的微服务通信地址，使用Ribbon发起调用。</p><ol start="3"><li><h4 id="新建服务模块导入依赖">新建服务模块导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--服务网关--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="配置类开启Zuul">配置类开启Zuul</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableEurekaClient</span>： 标记该应用是 Eureka客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableZuulProxy</span> ： 开启zuul 可以看做是 <span class="doctag">@EnableZuulServer</span> 的增强版 ，一般用这个</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableZuulServer</span> : 这个标签也可以开启zuul，但是这个标签开启的Filter更少</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZuulServerApp</span> &#123;<span class="comment">// 服务网关</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ZuulServerApp.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><h4 id="配置文件配置zuul">配置文件配置zuul</h4></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8848</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zuul-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">zuul-server:$&#123;server.port&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">&quot;/servers&quot;</span>  <span class="comment">#统一访问前缀</span></span><br><span class="line">  <span class="attr">ignoredServices:</span> <span class="string">&quot;*&quot;</span>  <span class="comment">#禁用掉使用浏览器通过服务名的方式访问服务</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">pay-server:</span> <span class="string">&quot;/pay/**&quot;</span>   <span class="comment">#指定pay-server这个服务使用 /pay路径来访问  - 别名</span></span><br><span class="line">    <span class="attr">order-server:</span> <span class="string">&quot;/order/**&quot;</span>   <span class="comment">#指定order-server这个服务使用 /order路径来访问</span></span><br><span class="line">    <span class="attr">user-server:</span> <span class="string">&quot;/user/**&quot;</span></span><br></pre></td></tr></table></figure><ul><li>zuul.prefix  ： 作为统一的前缀，在浏览器访问的时候需要加上该前缀</li><li>zuul.ignoredServices ： 忽略使用服务名方式访问服务，而是通过routes指定的路径进行访问</li><li>zuul.routes :  配置服务的访问路径</li></ul><p>注意：在么有使用zuul之前我们是通过 <a href="http://localhost:8089/pay/1">http://localhost:8089/pay/1</a> 来直接访问支付服务，现在需要通过zuul来访问，格式如下：http:// zuul的ip : zuul的port /zuul前缀 / 服务路径 /服务的controller路径 ，即：</p><p><a href="http://localhost:8848/servers/pay/pay/1">http://localhost:8848/servers/pay/pay/1</a></p><ol start="6"><li><h4 id="自定义zuul的Filter">自定义zuul的Filter</h4><p>Zuul提供了一个抽象的Filter:ZuulFilter我们可以通过该抽象类来自定义Filter，该Filter有四个核心方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ZuulFilter</span> <span class="keyword">implements</span> <span class="title class_">IZuulFilter</span>&#123;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title function_">filterType</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">filterOrder</span><span class="params">()</span>;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面两个方法是 IZuulFilter 提供的 </span></span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">shouldFilter</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>filterType ：是用来指定filter的类型的（类型见常量类：FilterConstants）</li><li>filterOrder ：是filter的执行顺序，越小越先执行</li><li>shouldFilter ：是其父接口IZuulFilter的方法，用来决定run方法是否要被执行</li><li>run ：是其父接口IZuulFilter的方法，该方法是Filter的核心业务方法</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/15 9:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">ZuulFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回过滤类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">filterType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回过滤器执行顺序 值越小越优先</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">filterOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否执行run方法 开启过滤</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// /static/**  ，/login , /register 不需要做登录检查，返回false</span></span><br><span class="line">        <span class="comment">//1.获取request对象 ， 获取请求中的uri</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> RequestContext.getCurrentContext().getRequest();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="keyword">if</span> (uri.endsWith(<span class="string">&quot;/login&quot;</span>) || uri.endsWith(<span class="string">&quot;/register&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要做登录检查的返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 过滤逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException &#123;</span><br><span class="line">        <span class="comment">//1.获取请求对象</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> RequestContext.getCurrentContext().getRequest();</span><br><span class="line">        <span class="comment">//响应对象</span></span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> RequestContext.getCurrentContext().getResponse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取请求头中的 token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;登录检查失败，请重新登录&quot;</span>);</span><br><span class="line">            <span class="comment">//中文编码</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">//把map转成json字符串，写到浏览器</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(map);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.getWriter().println(jsonStr);</span><br><span class="line">                response.setStatus(HttpStatus.SC_UNAUTHORIZED);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 阻止filter继续往后执行</span></span><br><span class="line">            RequestContext.getCurrentContext().setSendZuulResponse(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nacos安装指南</title>
      <link href="/posts/40975.html"/>
      <url>/posts/40975.html</url>
      
        <content type="html"><![CDATA[<h1>Nacos安装指南</h1><h1>1.Windows安装</h1><p>开发阶段采用单机安装即可。</p><h2 id="1-1-下载安装包">1.1.下载安装包</h2><p>在Nacos的GitHub页面，提供有下载链接，可以下载编译好的Nacos服务端或者源代码：</p><p>GitHub主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>如图：</p><p><img src="assets/image-20210402161102887.png" alt="image-20210402161102887"></p><p>本课程采用1.4.1.版本的Nacos，课前资料已经准备了安装包：</p><p><img src="assets/image-20210402161130261.png" alt="image-20210402161130261"></p><p>windows版本使用<code>nacos-server-1.4.1.zip</code>包即可。</p><h2 id="1-2-解压">1.2.解压</h2><p>将这个包解压到任意非中文目录下，如图：</p><p><img src="assets/image-20210402161843337.png" alt="image-20210402161843337"></p><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><h2 id="1-3-端口配置">1.3.端口配置</h2><p>Nacos的默认端口是8848，如果你电脑上的其它进程占用了8848端口，请先尝试关闭该进程。</p><p><strong>如果无法关闭占用8848端口的进程</strong>，也可以进入nacos的conf目录，修改配置文件中的端口：</p><p><img src="assets/image-20210402162008280.png" alt="image-20210402162008280"></p><p>修改其中的内容：</p><p><img src="assets/image-20210402162251093.png" alt="image-20210402162251093"></p><h2 id="1-4-启动">1.4.启动</h2><p>启动非常简单，进入bin目录，结构如下：</p><p><img src="assets/image-20210402162350977.png" alt="image-20210402162350977"></p><p>然后执行命令即可：</p><ul><li><p>windows命令：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.<span class="built_in">cmd</span> -m standalone</span><br></pre></td></tr></table></figure></li></ul><p>执行后的效果如图：</p><p><img src="assets/image-20210402162526774.png" alt="image-20210402162526774"></p><h2 id="1-5-访问">1.5.访问</h2><p>在浏览器输入地址：<a href="http://127.0.0.1:8848/nacos%E5%8D%B3%E5%8F%AF%EF%BC%9A">http://127.0.0.1:8848/nacos即可：</a></p><p><img src="assets/image-20210402162630427.png" alt="image-20210402162630427"></p><p>默认的账号和密码都是nacos，进入后：</p><p><img src="assets/image-20210402162709515.png" alt="image-20210402162709515"></p><h1>2.Linux安装</h1><p>Linux或者Mac安装方式与Windows类似。</p><h2 id="2-1-安装JDK">2.1.安装JDK</h2><p>Nacos依赖于JDK运行，索引Linux上也需要安装JDK才行。</p><p>上传jdk安装包：</p><p><img src="assets/image-20210402172334810.png" alt="image-20210402172334810"></p><p>上传到某个目录，例如：<code>/usr/local/</code></p><p>然后解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf jdk-8u144-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>然后重命名为java</p><p>配置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>设置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h2 id="2-2-上传安装包">2.2.上传安装包</h2><p>如图：</p><p><img src="assets/image-20210402161102887.png" alt="image-20210402161102887"></p><p>也可以直接使用课前资料中的tar.gz：</p><p><img src="assets/image-20210402161130261.png" alt="image-20210402161130261"></p><p>上传到Linux服务器的某个目录，例如<code>/usr/local/src</code>目录下：</p><p><img src="assets/image-20210402163715580.png" alt="image-20210402163715580"></p><h2 id="2-3-解压">2.3.解压</h2><p>命令解压缩安装包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf nacos-server-1.4.1.tar.gz</span><br></pre></td></tr></table></figure><p>然后删除安装包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf nacos-server-1.4.1.tar.gz</span><br></pre></td></tr></table></figure><p>目录中最终样式：</p><p><img src="assets/image-20210402163858429.png" alt="image-20210402163858429"></p><p>目录内部：</p><p><img src="assets/image-20210402164414827.png" alt="image-20210402164414827"></p><h2 id="2-4-端口配置">2.4.端口配置</h2><p>与windows中类似</p><h2 id="2-5-启动">2.5.启动</h2><p>在nacos/bin目录中，输入命令启动Nacos：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure><h1>3.Nacos的依赖</h1><p>父工程：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的锁和Redis的分布式锁的详细介绍</title>
      <link href="/posts/27ba0169.html"/>
      <url>/posts/27ba0169.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-为什么需要锁">一. 为什么需要锁</h3><p>当多个事务[<strong>并发</strong>]操作同一批数据的时候，如果不加锁，就无法保证事务的隔离性，最后导致数据错乱。加锁是为了保证并发操作下数据的正确性。</p><h3 id="二-MySQL中有哪些锁">二. MySQL中有哪些锁</h3><ul><li>按加锁机制可分为：乐观锁、悲观锁</li><li>基于锁的属性分类:共享锁（读锁）又称S锁、排他锁（写锁）又称X锁</li><li>基于锁的粒度分类(范围大小):行级锁（(innodb )、表级锁（ innodb、myisam)、页级锁（ innodb引擎)、记录锁、间隙锁、临键锁</li><li>基于锁的状态分类:意向共享锁、意向排它锁（一般不用）</li></ul><h3 id="三-什么是共享锁和排他锁">三. 什么是共享锁和排他锁</h3><ul><li><p>什么是共享锁（share  Lock）:允许事务读一行数据，具有锁兼容性质，允许多个事务同时获得该锁。<strong>共享锁(share lock):共享锁又称读锁，简称S锁</strong>;<code>**当一个事务为数据加上读锁之后，其他事务只能对该数据加读锁，而不能对数据加写锁，直到所有的读锁释放之后其他事务才能对其进行加持写锁**</code>。共享锁的特性主要是为了支持[并发]的读取数据，读取数据的时候不支持修改，避免出现重复读的问题。<code>在select语句末尾加上lock in share mode关键字</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 共享锁</span><br><span class="line">select * from tb_user for share;</span><br><span class="line">select * from tb_user lock in share mode ;</span><br></pre></td></tr></table></figure></li><li><p>什么是排它锁（exclusive  Lock）:排他锁又称写锁，简称×锁;当<code>**一个事务为数据加上写锁时，其他请求将不能再为数据加任何锁，直到该锁释放之后，其他事务才能对数据进行加锁**</code>。排他锁的目的是在<code>数据修改时候，不允许其他人同时修改</code>，也不允许其他人读取，<code>避免了出现脏数据和脏读的问题</code>。 在select语句末尾加上<code>for update</code>关键字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 排他锁</span><br><span class="line">select * from tb_user where id = 6 for update;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Mysql innodb引擎锁的默认操作： 当我们对某一行数据进行查询是会默认使用S锁加锁</strong></p><h3 id="四-按粒度分类有哪些锁">四.按粒度分类有哪些锁</h3><ol><li>行锁：行锁是指上锁的时候<code>**锁住的是表的某一行或多行记录**</code>，其他事务访问同一张表时，只有被锁住的记录不能访问，其他的记录可正常访问，<strong>特点:粒度小，加锁比表锁麻烦，不容易冲突，相比表锁支持的并发要高，产生死锁。</strong></li><li>表锁：表锁是指上锁的时候<code>**锁住的是整个表**</code>，当下一个事务访问该表的时候，必须等前一个事务释放了锁才能进行对表进行访问;特点:粒度大，加锁简单，容易冲突，不产生死锁，<strong>并发度低</strong>;</li><li>页锁：页级锁是MySQL中锁定粒度<code>**介于行级锁和表级锁中间的一种锁**</code>．表级锁速度快，但冲突多，行级冲突少，但速度慢。<code>所以取了折衷的页级</code>，一次<code>锁定相邻的一组记录</code>。特点:开销和加锁时间界于表锁和行锁之间，会出现死锁;锁定粒度界于表锁和行锁之间，<strong>并发度一般</strong>。</li><li>记录锁：</li><li>记录锁：也属于行锁中的一种，只不过记录<code>**锁的范围只是表中的某一条记录**</code>，记录锁是说<code>事务在加锁后锁住的只是表的某一条记录</code>，加了记录锁之后数据可以避免数据在查询的时候被修改的重复读问题，也避免了在修改的事务未提交前被其他事务读取的脏读问题。</li></ol><h3 id="五-什么是悲观锁">五.什么是悲观锁</h3><p>悲观锁的设计理念是悲观的，认为总是有线程并发问题导致数据不安全，所以在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制。通常是在 select语句后面增加   <code>for update</code> 来锁定数据。</p><p>注：要使用悲观锁，我们必须关闭mysql数据库的<strong>自动提交属性</strong>，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。可以使用命令设置MySQL为非autocommit模式<code>：set autocommit=0</code>。</p><h3 id="六-什么是乐观锁">六.什么是乐观锁</h3><p>乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况下不会造成冲突，在数据处理的过程中会不加锁，在数据进行提交更新的时候，才会正式<code>对数据的冲突与否进行检测</code>，如果发现冲突了，则返回给用户<code>错误</code>的信息，让<code>用户决定如何去做</code>。</p><h4 id="乐观锁如何使用">乐观锁如何使用</h4><p>直接用:表中添加一个时间戳或者版本号的字段来实现，<code>update account set version = version + 1 where id = #&#123;id&#125; and version = #&#123;oldVersion&#125;</code> 当更新不成功，客户端重试，重新读取最新的版本号或时间戳，再次尝试更新，类似 CAS 机制，推荐使用。</p><p>伪代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Resrouce</span> <span class="variable">resource</span> <span class="operator">=</span> exeSql(<span class="string">&quot;select * from resource where resource_name = xxx&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">succ</span> <span class="operator">=</span> exeSql(<span class="string">&quot;update resource set version= version + 1 where resource_name = xxx and version =#&#123;version&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!succ) &#123;</span><br><span class="line">    <span class="comment">// 发起重试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际代码中可以写个while循环不断重试，版本号不一致，更新失败，重新获取新的版本号，直到更新成功。</p><h3 id="七-分布式锁">七.分布式锁</h3><ol><li><h4 id="什么是分布式锁">什么是分布式锁</h4><p>就是在在<strong>分布式/集群</strong> 环境下，保证某个公共资源只能在同一时间被多进程应用的某个进程的某一个线程访问时使用锁。</p></li><li><h4 id="分布式锁有哪些方案">分布式锁有哪些方案</h4><ul><li><p>基于数据库操作(基于主键或唯一索引)</p></li><li><p>基于redis缓存(setnx)</p></li><li><p>基于zookeeper 临时顺序节点+watch</p></li></ul><p>基于数据库基本不用，zk或redis要根据项目情况来决定，如果你项目本来就用到zk，就使用zk，否则redis。</p></li></ol><h3 id="八-基于Redis实现分布式锁">八.基于Redis实现分布式锁</h3><ol><li><h4 id="加锁和释放锁">加锁和释放锁</h4><p>Redis提供了一个命令<code>setnx</code> 可以来实现分布式锁，该命令只在键 <code>key</code> 不存在的情况下 将键 <code>key</code> 的值设置为 <code>value</code> ，若键 <code>key</code> 已经存在， 则 <code>SETNX</code> 命令不做任何动作。根据这一特性我们就可以制定Redis实现分布式锁的方案了。</p></li><li><h4 id="锁超时问题">锁超时问题</h4><p>如果获取到锁的服务在<strong>释放锁</strong>的时候宕机了，那么Redis中lock-stock就永远存在，那锁就不能被释放不了，别的服务也就没办法获取到锁，就造成了死锁，为了解决这个问题，我们需要设置锁的自动超时也就是Key的超时自动删除，即使服务宕机没有调用del释放锁，那么锁本身也有超时时间，可以自动删除锁，别的服务就可以获取锁了，Redis中Key的过期时间可以使用Redis的 expire（lock_stock，30）命令实现。</p></li><li><h4 id="原子性问题">原子性问题</h4><p>使用<code>setnx</code>获取锁和expire不是原子性操作，假设有一极端情况，当线程通过<code>setnx（lock_stock，30）</code>获取到锁，还没来得及执行expire（lock_stock，30）设置锁的过期时间，服务就宕机了，那是不是锁也永远得不到释放呢？？？又变成了死锁，这个问题可以使用set命令解决，我们先来看一下这个命令的语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value [EX seconds] [PX milliseconds] [NX|XX]</span><br></pre></td></tr></table></figure><p><code>EX seconds</code> ： 将键的过期时间设置为 seconds 秒。 执行 <code>SET key value EX seconds</code> 的效果等同于执行 <code>SETEX key seconds value</code> 。<br><code>PX milliseconds</code> ： 将键的过期时间设置为 <code>milliseconds</code> 毫秒。 执行 <code>SET key value PX milliseconds</code> 的效果等同于执行 <code>PSETEX key milliseconds value 。</code><br><code>NX</code> ： 只在键不存在时， 才对键进行设置操作。 执行 SET key value NX 的效果等同于执行 SETNX key value 。<br><code>XX</code> ： 只在键已经存在时， 才对键进行设置操作。<br><strong>就是说该命令可以当做<code>setnx</code>和<code>expire</code>的组合命令来使用，而且是原子性的</strong></p></li><li><h4 id="锁的误删除问题">锁的误删除问题</h4><p>就是在<code>del</code>释放锁的时候可能会误删除别人加的锁，例如服务A获取到锁lock_stock，过期时间为 10s，如果在服务A执行业务逻辑的这一段时间内，锁到期自动删除，且别的服务获取到了锁lock_stock，那么服务A业务执行完成执行<code>del(lock_stock)</code>就会把别人的锁给删除掉。</p><p><strong>解决</strong>：</p><ul><li><p>可以在删除锁的时候先判断一下要删除的锁是不是自己上的锁，比如可以把锁的值使用一个<strong>UUID</strong>，在释放锁的时候先获取一下锁的值和当前业务中创建的<strong>UUID</strong>是不是同一个，如果是才执行·<code>del</code>删除锁，当然也可以使用<strong>线程的ID</strong>替代UUID。</p></li><li><h5 id="Lua脚本保证原子性">Lua脚本保证原子性</h5><p>但是依然有问题，就是<strong>判断锁的代码和删除锁的代码也不是原子性</strong>的，依然可能会导致锁的误删除问题，比如服务A在判断锁成功准备删除锁时，锁自动过期，别的服务B获取到了锁，然后服务A执行DEL就可能会把服务B的锁给删除掉，所以，我们必须保证 <strong>获取锁 -&gt; 判断锁 -&gt; 删除锁</strong> 的操作是原子性的才可以，解决方案可以使用<strong>Redis+Lua脚本</strong>来解决一致性问题。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] </span></span><br><span class="line"><span class="string">then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br></pre></td></tr></table></figure><p>上面是一段<code>Lua</code>脚本，可以保证多个命令的原子性</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis.call(‘get’, KEYS[<span class="number">1</span>]) ：是调用redis的get命令，key可以通过参数传入</span><br><span class="line">== ARGV[<span class="number">1</span>] ：意思是是否和 某个值相等，这里的值也可以参数传入</span><br><span class="line"><span class="keyword">then</span> <span class="keyword">return</span> redis.call(‘del’, KEYS[<span class="number">1</span>]) ：如果相等就执行 redis.call(<span class="string">&#x27;del&#x27;</span>, KEYS[<span class="number">1</span>]) 删除操作</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">end</span> ：否则就返回 <span class="number">0</span></span><br></pre></td></tr></table></figure><p>例如把数据带入KEYS[1]的值为“lock_stock”,ARGV[1]的值为ThreadID如“111”，所以大概的含义是如果调用get(“lock_stock”)获取到的值 等于 “111” ,那就调用 del(“lock_stock”)，否则就返回 0 。 说白了就是把我们上面的判断锁和删除锁的动作使用Lua脚本去执行而已，现在代码可以这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line"><span class="keyword">if</span>（jedis.set(lock_stock,threadId,<span class="string">&quot;NX&quot;</span>,<span class="string">&quot;EX&quot;</span>,<span class="number">5</span>) == <span class="number">1</span>）&#123;<span class="comment">//获取锁并设置超时</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        业务代码</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//lua脚本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">        <span class="comment">//执行脚本</span></span><br><span class="line">        jedis.eval(script, Collections.singletonList(<span class="string">&quot;lock_stock&quot;</span>),Collections.singletonList(threadId));<span class="comment">// 集合表示传值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Collections.singletonList(&quot;lock_stock&quot;)</code>传给 <code>KEYS[1]</code></li><li><code>Collections.singletonList(threadId)</code>转给 <code>ARGV[1]</code></li></ul></li></ul></li><li><h4 id="可重入锁">可重入锁</h4><p>上面的代码是不完整的，如果某个线程没有获取到锁是不是就不会进入 IF 呢？如果是这样的话未获取到锁的线程就执行失败了，啥也没做，这是不可行的，需要让未获取到锁的线程等待片刻之后再次尝试获取锁呢？如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line"><span class="keyword">if</span>（jedis.set(lock_stock,threadId,<span class="string">&quot;NX&quot;</span>,<span class="string">&quot;EX&quot;</span>,<span class="number">5</span>) == <span class="number">1</span>）&#123;<span class="comment">//获取锁并设置超时</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        业务代码</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//lua脚本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">        <span class="comment">//执行脚本</span></span><br><span class="line">        jedis.eval(script, Collections.singletonList(<span class="string">&quot;lock_stock&quot;</span>),Collections.singletonList(threadId));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//休眠一会儿，重入方法，尝试获取锁</span></span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">method();<span class="comment">//自旋，重新进入方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码增加了else获取锁失败的逻辑，休眠一会儿后<code>重入方法尝试重新获取锁</code>，休眠时间结合业务逻辑的执行时间设定</p></li></ol><h3 id="九-Redisson实现分布式锁">九.Redisson实现分布式锁</h3><ol><li><h4 id="什么是Redisson">什么是Redisson</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redisson是一个实现的Java操作Redis的工具包，它不仅提供了一系列常用的操作Redis的API，还提供了许多分布式服务。其中包括(BitSet, Set, Multimap, SortedSet, Map, List, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, AtomicLong, CountDownLatch, Publish / Subscribe, Bloom filter, Remote service, Spring cache, Executor service, Live Object service, Scheduler service) Redisson提供了使用Redis的最简单和最便捷的方法，Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。</span><br></pre></td></tr></table></figure></li><li><h4 id="Redisson的集成">Redisson的集成</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="配置一个单机Redis">配置一个单机Redis</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建客户端</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>);<span class="comment">//.setPassword(&quot;123456&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="分布式锁定义">分布式锁定义</h4><ul><li><code>Redisson</code>加锁自动有过期时间<strong>30s</strong>，监控锁的<strong>看门狗</strong>发现业务没执行完，会<strong>自动进行锁的续期(重回30s)</strong>，这样做的好处是防止在程序执行期间锁自动过期被删除问题</li><li>当业务执行完成不再给锁续期，即使没有手动释放锁，锁的过期时间到了也会自动释放锁</li></ul></li><li><h4 id="可重入锁（Reentrant-Lock）">可重入锁（Reentrant Lock）</h4><p>基于Redis的Redisson分布式可重入锁RLock Java对象实现了<code>java.util.concurrent.locks.Lock</code>接口。同时还提供了异步（Async）、反射式（Reactive）和RxJava2标准的接口</p><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLock1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;lock_stock&quot;</span>);</span><br><span class="line">    rLock.lock();<span class="comment">//阻塞式等待，过期时间30s</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加锁成功....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;执行业务....&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        rLock.unlock();</span><br><span class="line">        System.out.println(<span class="string">&quot;释放锁....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外Redisson还通过加锁的方法提供了leaseTime的参数来指定加锁的时间。超过这个时间后锁便自动解开了，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLock2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;lock_stock&quot;</span>);</span><br><span class="line"><span class="comment">// 加锁以后10秒钟自动解锁</span></span><br><span class="line"><span class="comment">// 无需调用unlock方法手动解锁</span></span><br><span class="line">rLock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加锁成功....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;执行业务....&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        rLock.unlock();</span><br><span class="line">        System.out.println(<span class="string">&quot;释放锁....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="工作原理">工作原理</h4><p>如果没有设置过期时间，<code>Redisson</code>以 30s 作为锁的默认过期时间，获取锁成功后(底层也用到了<code>Lua</code>脚本保证原子性)会开启一个<strong>定时任务</strong>定时进行锁过期时间续约，即每次都把<strong>过期时间设置成 30s</strong>，<strong>定时任务 10s执行一次(看门狗)</strong><br>如果设置了过期时间，直接把设定的过期时间作为锁的过期时间，然后使用Lua脚本获取锁，没获取到锁的线程会<strong>while</strong>自旋重入不停地尝试获取锁。</p><p><strong>注意:</strong>，<code>rLock.lock(10, TimeUnit.SECONDS)</code>指定了解锁时间，<code>Redisson</code>就不会再自动续期，那么如果在线程A业务还没执行完就自动解锁了，这时候线程B获取到锁，继续执行业务，那么等线程A业务执行完释放锁就可能会把线程B的锁删除，当然这种情况Redisson会报异常，但是这种情况是没有把所有线程都锁住的，所以如果要手动设定过期时间需要让过期时间比业务逻辑执行的时间长才对。</p></li><li><h4 id="公平锁（Fair-Lock）">公平锁（Fair Lock）</h4><p>基于Redis的Redisson分布式可重入公平锁也是实现了java.util.concurrent.locks.Lock接口的一种RLock对象。同时还提供了异步（Async）、反射式（Reactive）和RxJava2标准的接口。它保证了当多个Redisson客户端线程同时请求加锁时，<strong>优先分配给先发出请求的线程</strong>。<strong>所有请求线程会在一个队列中排队</strong>，当某个线程出现宕机时，Redisson会等待5秒后继续下一个线程，也就是说如果前面有5个线程都处于等待状态，那么后面的线程会等待至少25秒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFairLock</span><span class="params">()</span> &#123;</span><br><span class="line">     RLock fairLock= redissonClient.getFairLock(<span class="string">&quot;anyLock&quot;</span>);</span><br><span class="line">     <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="comment">// 最常见的使用方法</span></span><br><span class="line">         fairLock.lock();</span><br><span class="line">     &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">         fairLock.unlock();</span><br><span class="line">         System.out.println(<span class="string">&quot;释放锁....&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外Redisson还通过加锁的方法提供了leaseTime的参数来指定加锁的时间。超过这个时间后锁便自动解开了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 10秒钟以后自动解锁</span></span><br><span class="line"><span class="comment">// 无需调用unlock方法手动解锁</span></span><br><span class="line">fairLock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试加锁，最多等待100秒，上锁以后10秒自动解锁</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> fairLock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">...</span><br><span class="line">fairLock.unlock();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="联锁（MultiLock）">联锁（MultiLock）</h4><p>基于Redis的Redisson分布式联锁RedissonMultiLock对象可以将多个RLock对象关联为一个联锁，每个RLock对象实例可以来自于不同的Redisson实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">lock1</span> <span class="operator">=</span> redissonInstance1.getLock(<span class="string">&quot;lock1&quot;</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock2</span> <span class="operator">=</span> redissonInstance2.getLock(<span class="string">&quot;lock2&quot;</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock3</span> <span class="operator">=</span> redissonInstance3.getLock(<span class="string">&quot;lock3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">RedissonMultiLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedissonMultiLock</span>(lock1, lock2, lock3);</span><br><span class="line"><span class="comment">// 同时加锁：lock1 lock2 lock3</span></span><br><span class="line"><span class="comment">// 所有的锁都上锁成功才算成功。</span></span><br><span class="line">lock.lock();</span><br><span class="line">...</span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure></li><li><h4 id="红锁（RedLock）">红锁（RedLock）</h4><p>Redis常用的方式有单节点、主从模式、哨兵模式、集群模式，在后三种模式中可能会出现 ，异步数据丢失，脑裂问题，Redis官方提供了解决方案：RedLock, RedLock是基于redis实现的分布式<br>锁，它能够保证以下特性：</p><pre><code>容错性：只要多数节点的redis实例正常运行就能够对外提供服务,加锁释放锁互斥性：只能有一个客户端能获取锁，即使发生了网络分区或者客户端宕机，也不会发生死锁</code></pre><p>基于Redis的Redisson红锁<code>RedissonRedLock</code>对象实现了Redlock介绍的加锁算法。该对象也可以用来将多个RLock对象关联为一个红锁，每个RLock对象实例可以来自于不同的Redisson实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RLock</span> <span class="variable">lock1</span> <span class="operator">=</span> redissonInstance1.getLock(<span class="string">&quot;lock1&quot;</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock2</span> <span class="operator">=</span> redissonInstance2.getLock(<span class="string">&quot;lock2&quot;</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock3</span> <span class="operator">=</span> redissonInstance3.getLock(<span class="string">&quot;lock3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">RedissonRedLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedissonRedLock</span>(lock1, lock2, lock3);</span><br><span class="line"><span class="comment">// 同时加锁：lock1 lock2 lock3</span></span><br><span class="line"><span class="comment">// 红锁在大部分节点上加锁成功就算成功。</span></span><br><span class="line">lock.lock();</span><br><span class="line">...</span><br><span class="line">lock.unlock();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="信号量（Semaphore）">信号量（Semaphore）</h4><p>基于Redis的Redisson的分布式信号量（Semaphore）Java对象RSemaphore采用了与java.util.concurrent.Semaphore相似的接口和用法。同时还提供了异步（Async）、反射式（Reactive）和RxJava2标准的接口。</p><p>信号量可以看做是在Redis中保存了一个数字，然后可以实现原子性的加或者减，比如说有一商品需要拿100个做秒杀，我们就可以把这个库存数量做成信号量，然后实现原子性加减操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReadLock5</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//获得到一个信号量</span></span><br><span class="line">    <span class="type">RSemaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> redissonClient.getSemaphore(<span class="string">&quot;semaphore&quot;</span>);</span><br><span class="line">    <span class="comment">//设置信号量的值</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">setPermits</span> <span class="operator">=</span> semaphore.trySetPermits(<span class="number">1000</span>);</span><br><span class="line">    System.out.println(setPermits);</span><br><span class="line">    System.out.println(<span class="string">&quot;可用数量：&quot;</span>+semaphore.availablePermits());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReadLock6</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//获得到一个信号量</span></span><br><span class="line">    <span class="type">RSemaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> redissonClient.getSemaphore(<span class="string">&quot;semaphore&quot;</span>);</span><br><span class="line">    <span class="comment">//获取 2 个信号量 ， 值会减去 2 ， 如果获取不到，方法会阻塞</span></span><br><span class="line">    semaphore.acquire(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;可用数量：&quot;</span>+semaphore.availablePermits());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尝试获取 2 个信号量 ， 值会减去 2 ， 如果获取不到，方法不会</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">tryAccquireSuccess</span> <span class="operator">=</span> semaphore.tryAcquire(<span class="number">2</span>);</span><br><span class="line">    System.out.println(tryAccquireSuccess);</span><br><span class="line">    System.out.println(<span class="string">&quot;可用数量：&quot;</span>+semaphore.availablePermits());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReadLock7</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//获得到一个信号量</span></span><br><span class="line">    <span class="type">RSemaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> redissonClient.getSemaphore(<span class="string">&quot;semaphore&quot;</span>);</span><br><span class="line">    <span class="comment">//释放2个值，数量会加回去</span></span><br><span class="line">    semaphore.release(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;可用数量：&quot;</span>+semaphore.availablePermits());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="闭锁（CountDownLatch）">闭锁（CountDownLatch）</h4><p>基于Redisson的Redisson分布式闭锁（<code>CountDownLatch</code>）Java对象RCountDownLatch采用了与java.util.concurrent.CountDownLatch相似的接口和用法。<br><strong>闭锁可以实现多个线程都执行完才是完成的效果，否则闭锁会等待。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RCountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;anyCountDownLatch&quot;</span>);</span><br><span class="line"><span class="comment">//设置2个数量</span></span><br><span class="line">latch.trySetCount(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//await方法会等待，等待其他线程 countDown 完成所有的trySetCount(2)次就结束闭锁</span></span><br><span class="line">latch.await();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他线程或其他JVM里</span></span><br><span class="line"><span class="type">RCountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;anyCountDownLatch&quot;</span>);</span><br><span class="line"><span class="comment">//完成第1个</span></span><br><span class="line">latch.countDown();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他线程或其他JVM里</span></span><br><span class="line"><span class="type">RCountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;anyCountDownLatch&quot;</span>);</span><br><span class="line"><span class="comment">//完成第2个 ， 闭锁完成</span></span><br><span class="line">latch.countDown();</span><br></pre></td></tr></table></figure></li></ol><h3 id="十-基于Zookeeper的分布式锁">十.基于Zookeeper的分布式锁</h3><ol><li><h4 id="节点分类">节点分类</h4><p>ZooKeeper 节点是有生命周期的这取决于节点的类型，在 ZooKeeper 中，节点类型可以分为<strong>持久节点（PERSISTENT ）</strong>、<strong>临时节点（EPHEMERAL），以及时序节点（SEQUENTIAL ）</strong>，具体在节点创建过程中，一般是组合使用，可以生成以下 4 种节点类型。</p><ul><li><p><strong>持久节点（PERSISTENT）</strong><br>所谓持久节点，是指在节点创建后，就一直存在，直到有删除操作来主动清除这个节点——不会因为创建该节点的客户端会话失效而消失。</p></li><li><p><strong>持久顺序节点（PERSISTENT_SEQUENTIAL）</strong><br>这类节点的基本特性和上面的节点类型是一致的。额外的特性是，在ZK中，每个父节点会为他的第一级子节点维护一份时序，会记录每个子节点创建的先后顺序。基于这个特性，在创建子节点的时候，可以设置这个属性，那么在创建节点过程中，ZK会自动为给定节点名加上一个数字后缀，作为新的节点名。这个数字后缀的范围是整型的最大值。</p></li><li><p><strong>临时节点（EPHEMERAL）</strong><br>和持久节点不同的是，临时节点的生命周期和客户端会话绑定。也就是说，如果客户端会话失效，那么这个节点就会自动被清除掉。注意，这里提到的是会话失效，而非连接断开。另外，在临时节点下面不能创建子节点。</p></li><li><p><strong>临时顺序节点（EPHEMERAL_SEQUENTIAL）</strong><br>在临时几点的基础上增加了顺序，可以用来实现分布式锁</p></li></ul><p>顺序节点可以用来为所有的事件进行全局排序，这样客户端可以通过序号推断事件的顺序。</p></li><li><h4 id="锁实现">锁实现</h4><ul><li><p><strong>临时节点+重试</strong>：根据Zookeeper的临时节点的特性实现分布式锁，先执行的线程在zookeeper创建一个<strong>临时节点</strong>，代表获取到锁，后执行的线程需要等待，直到临时节点被删除说明锁被释放，第二个线程可以尝试获取锁。</p></li><li><p><strong>临时顺序节点+watch</strong>：</p><p>1.每个要获取锁的线程都创建顺序临时节点，第一个节点获取锁；<br>2.其他不是第一个节点的节点拿不到锁，需要监听上一个节点;<br>3.获取到锁后，当业务执行成功，释放锁，第一个节点被删除;<br>4.第二个节点会监听到第一个节点被删除，成为第一个节点，获取锁;<br>5.后面的节点以此类推。</p></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mybatis的介绍和使用</title>
      <link href="/posts/23883.html"/>
      <url>/posts/23883.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-mybatis是什么？">一. mybatis是什么？</h3><ol><li>MyBatis是一个ORM的数据库持久化框架；</li><li>Mybatis底层还是原生的JDBC代码，对JDBC代码的封装。</li></ol><h3 id="二-什么是ORM">二. 什么是ORM</h3><ol><li><p>ORM：对象关系映射（Object Relational Mapping，简称ORM）：是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术；</p></li><li><p>ORM原理：</p><ul><li><p>以一定的映射方式，把实体模型和数据库关系进行映射；</p></li><li><p>ORM框架启动时加载这些映射和数据库配置文件连接数据库；</p></li><li><p>ORM通过对最原生jdbc的封装，并提供更加便利的操作API；</p></li><li><p>Dao通过ORM提供的便捷API以对象的方式操作数据库关系。</p></li></ul></li></ol><h3 id="三-实现步骤">三. 实现步骤</h3><ol><li>使用文档：<a href="https://mybatis.net.cn/">文档使用地址</a>; mybatis需要的jar包----》<a href="https://gitee.com/coderyeah/layui-module/tree/master/lib(%E5%9C%B0%E5%9D%80)%EF%BC%9B">https://gitee.com/coderyeah/layui-module/tree/master/lib(地址)；</a></li><li>先说一个核心对象：SqlSessionFactory，接下来，咱们就是要想方设法拿到这个核心对象；</li><li>要获取SqlSessionFactory，我们需要准备一个核心的Mybatis-config.xml文件，然后通过SqlSessionFactoryBuilder来创建，所以步骤：<ul><li>创建Mybatis核心配置文件（Mybatis-config.xml），并配置环境；</li><li>加载核心配置文件；</li><li>创建一个SqlSessionFactoryBuilder对象；</li><li>通过SqlSessionFactoryBuilder对象构建一个SqlSessionFactory对象；</li><li>创建Mapper映射文件，并配置；</li><li>通过SqlSessionFactory获取SqlSession执行映射SQL。</li></ul></li></ol><h3 id="四-核心配置文件：MyBatis-Config-xml">四. 核心配置文件：MyBatis-Config.xml</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;configuration&gt;</span></span><br><span class="line"> <span class="attr">&lt;typeAliases&gt;</span></span><br><span class="line">        <span class="attr">&lt;typeAlias</span> <span class="string">type=&quot;com.lqs.domain.User&quot; alias=&quot;User&quot;/&gt;</span></span><br><span class="line">        <span class="attr">&lt;package</span> <span class="string">name=&quot;com.lqs.domain&quot;/&gt;</span></span><br><span class="line">    <span class="attr">&lt;/typeAliases&gt;</span></span><br><span class="line">    <span class="attr">&lt;!--</span> <span class="string">引入配置文件信息,这里不能加classpath:。</span></span><br><span class="line"><span class="attr">resource</span>:<span class="string">引入类路径下的资源,即classpath，所以不需要写classpath:</span></span><br><span class="line"><span class="attr">url</span>:<span class="string">引入网络路径或磁盘路径下的资源 </span></span><br><span class="line"><span class="attr">--&gt;</span></span><br><span class="line"><span class="attr">&lt;properties</span> <span class="string">resource=&quot;db.properties&quot;&gt;&lt;/properties&gt;</span></span><br><span class="line"><span class="attr">&lt;!--</span> <span class="string">环境们 (很多环境的意思)</span></span><br><span class="line"><span class="attr">default：默认使用哪一个环境(必需对应一个环境的id)</span></span><br><span class="line"> <span class="attr">--&gt;</span></span><br><span class="line"><span class="attr">&lt;environments</span> <span class="string">default=&quot;development&quot;&gt;</span></span><br><span class="line"><span class="attr">&lt;!--</span> <span class="string">一个环境  id:为这个环境取唯一一个id名称 --&gt;</span></span><br><span class="line"><span class="attr">&lt;environment</span> <span class="string">id=&quot;development&quot;&gt;</span></span><br><span class="line"><span class="attr">&lt;!--</span> <span class="string">事务管理   type:JDBC(支持事务)/MANAGED(什么都不做) --&gt;</span></span><br><span class="line"><span class="attr">&lt;transactionManager</span> <span class="string">type=&quot;JDBC&quot; /&gt;</span></span><br><span class="line"><span class="attr">&lt;!--</span> <span class="string">数据源, 连接池  type(POOLED):MyBatis自带的连接池 --&gt;</span></span><br><span class="line"><span class="attr">&lt;dataSource</span> <span class="string">type=&quot;POOLED&quot;&gt;</span></span><br><span class="line"><span class="attr">&lt;!--</span> <span class="string">连接数据库的参数：直接写死的方式 --&gt;</span></span><br><span class="line">                <span class="attr">&lt;!--</span></span><br><span class="line"><span class="attr">&lt;property</span> <span class="string">name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span></span><br><span class="line"><span class="attr">&lt;property</span> <span class="string">name=&quot;url&quot; value=&quot;jdbc:mysql:///mydb&quot; /&gt;</span></span><br><span class="line"><span class="attr">&lt;property</span> <span class="string">name=&quot;username&quot; value=&quot;root&quot; /&gt;</span></span><br><span class="line"><span class="attr">&lt;property</span> <span class="string">name=&quot;password&quot; value=&quot;admin&quot; /&gt;</span></span><br><span class="line">                 <span class="attr">--&gt;</span></span><br><span class="line">                <span class="attr">&lt;!--</span> <span class="string">连接数据库的参数：使用属性文件的方式 --&gt;</span></span><br><span class="line">                <span class="attr">&lt;property</span> <span class="string">name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span></span><br><span class="line">                <span class="attr">&lt;property</span> <span class="string">name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span></span><br><span class="line">                <span class="attr">&lt;property</span> <span class="string">name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span></span><br><span class="line">                <span class="attr">&lt;property</span> <span class="string">name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span></span><br><span class="line"><span class="attr">&lt;/dataSource&gt;</span></span><br><span class="line"><span class="attr">&lt;/environment&gt;</span></span><br><span class="line"><span class="attr">&lt;/environments&gt;</span></span><br><span class="line">   <span class="attr">&lt;!--</span> <span class="string">这个mappers代表的是相应的ORM映射文件 --&gt;</span></span><br><span class="line"><span class="attr">&lt;mappers&gt;</span> <span class="string"></span></span><br><span class="line">        <span class="attr">&lt;mapper</span> <span class="string">resource=&quot;com/lqs/mapper/UserMapper.xml&quot;/&gt;</span></span><br><span class="line">        <span class="attr">&lt;!--</span> <span class="string">将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line">        <span class="attr">&lt;package</span> <span class="string">name=&quot;com.lqs.mapper&quot;/&gt;</span></span><br><span class="line"><span class="attr">&lt;/mappers&gt;</span> <span class="string"></span></span><br><span class="line"><span class="attr">&lt;/configuration&gt;</span> <span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="五-属性文件：db-properties">五. 属性文件：db.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///jdbc</span></span><br></pre></td></tr></table></figure><p>项目目录：</p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220721172939.png" alt="image-20220721172938977" style="zoom:50%;" /><h3 id="六-具体代码实现">六. 具体代码实现</h3><ol><li><p>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.Alias;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span><span class="comment">//别名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> sex;</span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>自定义mybatis工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="keyword">final</span> <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">            sqlSession = factory.openSession(<span class="literal">true</span>);<span class="comment">//自动提交</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lqs.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询一个用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">queryOne</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除一个用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id更新用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lqs.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.lqs.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.lqs.utils.MybatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">IUserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> MybatisUtil.getSqlSession().getMapper(IUserDao.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryOne</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.queryOne(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        mapper.add(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        mapper.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        mapper.update(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>UserMaper.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--完全限定名 将xml和接口进行了映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lqs.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  返回主键  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user (name, age, sex, hobby)</span><br><span class="line">        VALUES (#&#123;name&#125;, #&#123;age&#125;, #&#123;sex&#125;, #&#123;hobby&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">        update t_user</span><br><span class="line">        set name=#&#123;name&#125;,</span><br><span class="line">            age=#&#123;age&#125;,</span><br><span class="line">            sex= #&#123;sex&#125;,</span><br><span class="line">            hobby= #&#123;hobby&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        update t_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                name=#&#123;name&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span></span><br><span class="line">                age=#&#123;age&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;hobby != null&quot;</span>&gt;</span></span><br><span class="line">                hobby= #&#123;hobby&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from t_user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from t_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;select id=&quot;queryOne&quot; resultType=&quot;User&quot; parameterType=&quot;Long&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        select *--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        from t_user--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        where id = #&#123;id&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;/select&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>一下是测试类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//       创建 sql会话工厂 SqlSessionFactory</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        System.out.println(build);</span><br><span class="line">        <span class="comment">//获取sqlSession 对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> build.openSession();</span><br><span class="line">        System.out.println(sqlSession);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">IUserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(IUserDao.class);</span><br><span class="line">        <span class="keyword">final</span> List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;queryAll&quot;</span>);<span class="comment">//写方法名</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"><span class="comment">//        final List&lt;User&gt; users = mapper.queryAll();</span></span><br><span class="line">        System.out.println(users.get(<span class="number">0</span>).getName());</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一个</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> build.openSession();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">IUserDao</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(IUserDao.class);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryOne(<span class="number">6L</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> build.openSession();</span><br><span class="line"><span class="comment">//        final SqlSession sqlSession = build.openSession(true);//自动提交</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">User</span> <span class="variable">coderyeah</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;coderyeah&quot;</span>, <span class="number">21</span>, <span class="literal">true</span>, <span class="string">&quot;写代码&quot;</span>);</span><br><span class="line">        sqlSession.getMapper(IUserDao.class).add(coderyeah);</span><br><span class="line">        <span class="comment">//手动提交</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span> + coderyeah.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> build.openSession();</span><br><span class="line"><span class="comment">//        final SqlSession sqlSession = build.openSession(true);//自动提交</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">User</span> <span class="variable">coderyeah</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">8L</span>, <span class="string">&quot;coderyeah&quot;</span>, <span class="number">22</span>, <span class="literal">false</span>, <span class="string">&quot;写代码,打游戏&quot;</span>);</span><br><span class="line">        sqlSession.getMapper(IUserDao.class).update(coderyeah);</span><br><span class="line">        <span class="comment">//手动提交</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> build.openSession();</span><br><span class="line"><span class="comment">//        final SqlSession sqlSession = build.openSession(true);//自动提交</span></span><br><span class="line"></span><br><span class="line">        sqlSession.getMapper(IUserDao.class).delete(<span class="number">9L</span>);</span><br><span class="line">        <span class="comment">//手动提交</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">IUserDao</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAll</span><span class="params">()</span> &#123;</span><br><span class="line">        dao.queryAll().forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">        System.out.println(dao.queryOne(<span class="number">8L</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;乔纳森.乔斯达&quot;</span>, <span class="number">25</span>, <span class="literal">true</span>, <span class="string">&quot;冒险&quot;</span>);</span><br><span class="line">        dao.add(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------添加成功--------------&quot;</span>+user.getId());</span><br><span class="line"><span class="comment">//        dao.delete(10L);</span></span><br><span class="line"><span class="comment">//        dao.update(new User(11L,&quot;JOJO&quot;, 19, true, &quot;冒险,星尘十字军&quot;));</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="七-Log4j日记实现">七. Log4j日记实现</h3><ol><li><p>Log4j主要用于日志信息的输出。可以将信息分级别（严重fatal、错误error、警告warn、调式debug、信息info）按不同方式（控制台、文件、数据库）和格式输出。</p></li><li><p>实现步骤：</p><p>(1)导入log4j的jar包（3个）；</p><p>(2) 在resources下添加log4j.properties【名字不能改】；</p><p>(3) 日志级别：debug（调试时用）、info、warn、error（运行时用）;</p><p>(4) 在日志中我们可以看到执行的SQL语句，可以看到我们传递的参数。</p></li><li><p>Log4j主要有以下3部分组件构成：</p><p>(1) 日志器（Logger）：负责消息输出，提供了各种不同级别的输出方法；</p><p>(2) 输出器（Appender）：负责控制消息输出的方式，例如输出到控制台、文件输出等；</p><p>(3) 布局器（格式器，Layout）：负责控制消息的输出格式。</p><p>(模板)：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#日志器logger #輸出器appender #布局器layout</span></span><br><span class="line"><span class="comment">#1.控制台输出</span></span><br><span class="line"><span class="comment">#指定日志器的输出级别和日志器的名称</span></span><br><span class="line"><span class="comment">#log4j.rootLogger=info,myconsole</span></span><br><span class="line"><span class="comment">#指定输出器</span></span><br><span class="line"><span class="comment">#log4j.appender.myconsole=org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="comment">#指定布局器</span></span><br><span class="line"><span class="comment">#log4j.appender.myconsole.layout=org.apache.log4j.SimpleLayout</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#2.文件输出.txt</span></span><br><span class="line"><span class="comment">#指定日志器的输出级别和日志器的名称</span></span><br><span class="line"><span class="comment">#log4j.rootLogger=error,myfile</span></span><br><span class="line"><span class="comment">#指定输出器</span></span><br><span class="line"><span class="comment">#log4j.appender.myfile=org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="comment">#log4j.appender.myfile.File=E:\\log4j.txt</span></span><br><span class="line"><span class="comment">#指定布局器(普通布局表示文本输出)</span></span><br><span class="line"><span class="comment">#log4j.appender.myfile.layout=org.apache.log4j.SimpleLayout</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#3.文件输出.html</span></span><br><span class="line"><span class="comment">#指定日志器的输出级别和日志器的名称</span></span><br><span class="line"><span class="comment">#log4j.rootLogger=error,myhtml</span></span><br><span class="line"><span class="comment">#指定输出器</span></span><br><span class="line"><span class="comment">#log4j.appender.myhtml=org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="comment">#log4j.appender.myhtml.File=D:\\log4j.html</span></span><br><span class="line"><span class="comment">#指定布局器(网页布局)</span></span><br><span class="line"><span class="comment">#log4j.appender.myhtml.layout=org.apache.log4j.HTMLLayout</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#4.控制台输出+文件输出.txt</span></span><br><span class="line"><span class="comment">#指定日志器的输出级别和日志器的名称</span></span><br><span class="line"><span class="comment">#log4j.rootLogger=error,con,file</span></span><br><span class="line"><span class="comment">#指定输出器</span></span><br><span class="line"><span class="comment">#log4j.appender.con=org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="comment">#log4j.appender.file=org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="comment">#log4j.appender.file.File=D\:\\log4j.txt</span></span><br><span class="line"><span class="comment">#指定布局器(网页布局)</span></span><br><span class="line"><span class="comment">#log4j.appender.con.layout=org.apache.log4j.SimpleLayout</span></span><br><span class="line"><span class="comment">#log4j.appender.file.layout=org.apache.log4j.SimpleLayout</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#5.控制台输出+自定义布局</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,my</span></span><br><span class="line"><span class="comment">#指定输出器</span></span><br><span class="line"><span class="attr">log4j.appender.my</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="comment">#指定布局器(自定义布局)</span></span><br><span class="line"><span class="comment">#指定布局为自定义布局</span></span><br><span class="line"><span class="attr">log4j.appender.my.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment">#指定在自定义布局的格式，%d -- 表示当前系统时间，%t -- 执行该业务的线程名称，%p -- 日记器的级别，-5 -- 5表示输出字符的个数，符号表示右对齐</span></span><br><span class="line"><span class="comment">#%c -- 表示指定业务所在的类的完全限定名(包名.类名)，%m -- 输出额外信息，%n -- 表示换行</span></span><br><span class="line"><span class="attr">log4j.appender.my.layout.ConversionPattern</span>=<span class="string">%d [%t] %-5p [%c] - %m%n</span></span><br><span class="line"><span class="comment">#设置package（可以是自定义的包也可以是api的包）输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.springframework</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">log4j.logger.com.lqs</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="八-面试题-与-区别">八. 面试题 #与$区别</h3><ol><li><p>#{OGNL表达式}：底层采用PreparedStatement实现，安全，预防sql注入，预编译，不会改变sql结构。</p><p>MyBatis会把这个表达式使用?(占位符)替换，作为一个sql参数使用：推荐使用。比如name的值为:</p><p>定义SQL: select * from t_user where name = #{name}</p><p>最终SQL: select * from t_user where name = ?</p></li><li><p>${OGNL表达式}：底层采用Statement实现，sql字符串拼接方式，可能发生sql注入问题，会改变sql结构。</p><ol><li><p>MyBatis会把这个表达式的值替换到sql中，作为sql的组成部分。把获取到值直接拼接到SQL中；</p></li><li><p>如果sql中使用${OGNL}，并且参数的类型是（integer、string…）那么OGNL表达式可以写成任意形式。</p></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven的介绍环境安装</title>
      <link href="/posts/42677.html"/>
      <url>/posts/42677.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是maven？">一. 什么是maven？</h3><ol><li>maven: 是专门用于构建和管理Java相关项目的工具;</li><li>构建：指自动构建，项目从开发到上线的一系列步骤;</li><li>管理：指管理项目包架构。</li></ol><h3 id="二-maven的安装">二. maven的安装</h3><ol><li><p>Maven 是一个基于 Java 的工具，所以要使用Maven首先保证电脑的Java环境可用；</p></li><li><p>从网上下载 Maven：<a href="http://maven.apache.org/download.html%EF%BC%9B">http://maven.apache.org/download.html；</a></p></li><li><p>绿色安装指解压即可用；</p></li><li><p>系统环境变量配置：找到自己的解压安装目录</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220821205625.png" alt="image-20220821205625375"></p></li><li><p>配置Path：%MAVEN_HOME\bin%</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220821210545.png" alt="image-20220821210545648"></p></li><li><p>检查是否配置成功</p><p><code>mvn -v</code></p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220821210611.png" alt="image-20220821210611693"></p></li></ol><h3 id="三-配置镜像和本地仓库">三.  配置镜像和本地仓库</h3><ol><li><p>在maven的<code>settings.xml</code>文件里的mirrors节点，添加如下子节点，代表使用阿里的镜像仓库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在maven安装目录下新建localRepository文件夹，在配置文件中增加<code>&lt;localRepository&gt;D:/maven/localRepository&lt;/localRepository&gt;</code></p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220821210508.png" alt="image-20220821210508608"></p></li></ol><h3 id="四-maven的常用命令">四. maven的常用命令</h3><ol><li><code>mvn compile</code>命令：编译项目，生成编译文件</li><li><code>mvn clean</code>命令：清除项目编译文件</li><li><code>mvn clean compile</code>命令：先清除，后编译</li><li><code>mvn clean test</code>：测试命令，会自动找到 <code>src/test/java</code>下的测试类执行</li><li><code>mvn clean package</code>：打包命令，把当前项目打成jar包</li><li><code>mvn source:jar</code>：打源码包命令</li><li><code>mvn install</code>：将项目打成jar包，放到本地仓库</li><li><code>mvn package -Dmaven.test.skip=true：maven</code>打包不执行测试用例的命令</li></ol><h3 id="五-pom-xml">五. pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 模型版本，创建pom配置文件就有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- GAV座标 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组id：一般都是公司域名反写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itsource.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模块名：和工程名一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 项目项目版本 </span></span><br><span class="line"><span class="comment">SNAPSHOT快照，不稳定，随时都在修改bug</span></span><br><span class="line"><span class="comment">RELEASE 释放，稳定版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- 项目名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- jar文件依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只能在测试里面使用src/test/java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-Linux部署java项目">title:Linux部署java项目</h2><p>如何将前端 + 后端项目，<strong>使用 Shell 脚本</strong>，部署到 dev 开发环境下的一台 Linux 服务器上。如下图所示：</p><p><img src="../blog/coderyeah/source/_posts/img/01.png" alt="Linux 部署"></p><h3 id="一、-安装-MySQL">一、 安装 MySQL</h3><p>① 执行如下命令，进行 MySQL 的安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## ① 安装 MySQL 5.7 版本的软件源 https://dev.mysql.com/downloads/repo/yum/</span></span><br><span class="line">rpm -Uvh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">## ② 安装 MySQL Server 5.7 版本</span></span><br><span class="line">yum install mysql-server --nogpgcheck</span><br><span class="line"></span><br><span class="line"><span class="comment">## ③ 查看 MySQL 的安装版本。结果是 mysqld  Ver 5.7.37 for Linux on x86_64 (MySQL Community Server (GPL))</span></span><br><span class="line">mysqld --version</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>② 修改 <code>/etc/my.cnf</code> 文件，在文末加上 <code>lower_case_table_names=1</code> 和 <code>validate_password=off</code> 配置，执行 <code>systemctl restart mysqld</code> 命令重启。</p><p>③ 执行 <code>grep password /var/log/mysqld.log</code> 命令，获得 MySQL 临时密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023-11-23T09:31:17.365086Z 1 [cc] A temporary password is generated <span class="keyword">for</span> root@localhost: OKLUaehW2e.e</span><br></pre></td></tr></table></figure><p>④ 执行如下命令，修改 MySQL 的密码，设置允许远程连接。然后通过软件连接进行数据库操作即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## ① 连接 MySQL Server 服务，并输入临时密码 OKLUaehW2e.e</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment">## ② 修改密码，123456 可改成你想要的密码</span></span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">## ③ 设置允许远程连接</span></span><br><span class="line">use mysql;</span><br><span class="line">update user <span class="built_in">set</span> host = <span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="二、配置-Redis">二、配置 Redis</h3><p>执行如下命令，进行 Redis 的安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## ① 安装 remi 软件源</span></span><br><span class="line">yum install http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">## ② 安装最新 Redis 版本。如果想要安装指定版本，可使用 yum --enablerepo=remi install redis-6.0.6 -y 命令</span></span><br><span class="line">yum --enablerepo=remi install redis </span><br><span class="line"></span><br><span class="line"><span class="comment">## ③ 查看 Redis 的安装版本。结果是 Redis server v=6.2.6 sha=00000000:0 malloc=jemalloc-5.1.0 bits=64 build=4ab9a06393930489</span></span><br><span class="line">redis-server --version</span><br><span class="line"></span><br><span class="line"><span class="comment">## ④ 启动 Redis 服务</span></span><br><span class="line">systemctl restart redis</span><br></pre></td></tr></table></figure><ul><li>端口是 6379，密码未设置</li></ul><h3 id="三、部署后端">三、部署后端</h3><p>后端 dev 开发环境对应的是application-dev.yaml配置文件，主要是修改 MySQL 和 Redis 为你的服务器地址。</p><p>在项目的根目录下，执行 <code>mvn clean package -Dmaven.test.skip=true</code> 命令，编译后端项目，构建出它的 Jar 包。如下图所示：</p><p><img src="../blog/coderyeah/source/_posts/img/image-20231123103939480.png" alt="image-20231123103939480"></p><p>-Dmaven.test.skip=true 是什么意思？</p><p>跳过单元测试的执行。如果单元测试写的不错，建议使用 <code>mvn clean package</code> 命令，执行单元测试，保证交付的质量。</p><ol><li><h3 id="上传-Jar-包">上传 Jar 包</h3><ul><li>在 Linux 服务器上创建 <code>/work/projects/yudao-server</code> 目录，使用 <code>scp</code> 命令或者 FTP 工具，将 <code>yudao-server.jar</code> 上传到该目录下</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM常见面试题</title>
      <link href="/posts/f7c2625f.html"/>
      <url>/posts/f7c2625f.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-jvm内存区域划分">一.jvm内存区域划分</h3><p>PS:类加载子系统，本地方法库，执行引擎，运行时数据区。</p><ul><li>类加载器子系统 ：字节码加载</li><li>运行时数据区 : 线程运行涉及到的区域</li><li>执行引擎 ：程序执行的引擎</li><li>本地方法库 ：接入其他语言lib库</li></ul><ol><li><h4 id="程序计数器">程序计数器</h4><p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是<strong>当前线程所执行的字节码的行号指示器</strong>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于Java虚拟机的多线程是通过线程轮流切换、分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</span><br></pre></td></tr></table></figure></li><li><h4 id="虚拟机栈">虚拟机栈</h4><p>与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stack）也是线程私有的，它的生命周期与线程相同。</p><p>每个方法被执行的时候，Java虚拟机都会同步创建一个<strong>栈帧</strong>（Stack Frame）用于<strong>存储局部变量表、操作数栈、动态连接、方法出口</strong>等信息。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">局部变量表存放了编译期可知的各种Java虚拟机基本数据类型（<span class="type">boolean</span>、<span class="type">byte</span>、<span class="type">char</span>、<span class="type">short</span>、<span class="type">int</span>、<span class="type">float</span>、<span class="type">long</span>、<span class="type">double</span>）、对象引用（reference类型，它并不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他与此对象相关的位置）和<span class="keyword">return</span> Address类型（指向了一条字节码指令的地址）。</span><br></pre></td></tr></table></figure></li><li><h4 id="本地方法栈">本地方法栈</h4><p>本地方法栈（Native Method Stacks）也是<strong>线程私有</strong>的，其与虚拟机栈所发挥的作用是非常相似的。区别只是虚拟机栈为虚拟机执行<strong>Java方法</strong>（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的<strong>本地（Native）方法</strong>服务。</p></li><li><h4 id="堆">堆</h4><p>对于Java应用程序来说，Java堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java堆是被<strong>所有线程共享</strong>的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是<strong>存放对象实例</strong>。</p></li><li><h4 id="方法区">方法区</h4><p>方法区（Method Area）与Java堆一样，是<strong>各个线程共享</strong>的内存区域，它用于存储已被虚拟机加载的<strong>类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据</strong>。</p></li><li><h4 id="运行时常量池">运行时常量池</h4><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表（Constant Pool Table），用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</p></li></ol><h3 id="二-jvm内存模型1-7与1-8之后有什么变化">二.jvm内存模型1.7与1.8之后有什么变化</h3><ol><li>1.8版本之后，使用<strong>元数据区</strong>实现了方法区，之前是使用<strong>永久代</strong>来实现方法区，大小是启动时固定好的；</li><li><strong>元空间不在虚拟机中，而是使用本地内存</strong>，并且大小可以自动增长，减少了OOM（内存溢出）的几率。</li></ol><h3 id="三-堆与元空间中分别存的是什么">三.堆与元空间中分别存的是什么?</h3><ol><li>堆中存放的是对象和数组。</li><li>栈中存放的是基本数据类型和堆中对象的引用。</li><li>元空间存储了类信息和编译代码。</li></ol><h3 id="四-java类加载过程">四.java类加载过程</h3><ol><li>加载</li></ol><p>​    加载是类加载的第一个过程，在这个阶段，将完成以下三件事情：</p><ul><li>通过一个类的全限定名获取该类的二进制流。</li><li>将该二进制流中的静态存储结构转化为方法去运行时数据结构。</li><li>在内存中生成该类的Class对象，作为该类的数据访问入口。</li></ul><ol start="2"><li><p>验证</p><p>验证目的是为了确保Class文件的字节流中的信息不会危害到虚拟机，在该阶段主要完成以下四种验证：</p><pre><code>文件格式验证：验证字节流是否符合Class文件的规范，如主次版本号是否在当前虚拟机范围内，常量池中的常量是否有不被支持的类型。元数据验证：对字节码描述的信息进行语义分析，如这个类中是否有父类，是否集成了不被继承的类等。字节码验证：是整个验证过程中最复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如：方法中的类型转换是否正确，跳转指令是否正确等。符号引用验证：这个动作在后面的解析过程中发生，主要是为了确保解析动作能正确执行。</code></pre></li><li><p>准备</p><p>准备阶段是为类的静态变量分配内存并将其初始化为默认值，这些内存都将在方法区中进行分配。准备阶段不分配类中的实例变量的内存，实例变量将会在对象实例化时随着对象一起分配在Java堆中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> value=<span class="number">123</span>;<span class="comment">//在准备阶段value初始值为0，初始化阶段才变为123。</span></span><br></pre></td></tr></table></figure></li><li><p>解析</p><p>该阶段主要完成符号引用到直接引用的转换动作。解析动作并不一定在初始化动作完成之前，也有可能在初始化之后。</p></li><li><p>初始化</p><p>初始化时类加载的最后一步，前面的类加载过程，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。</p></li><li><p>使用</p></li><li><p>卸载</p></li></ol><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221206150421.png" alt="image-20221206150421020"></p><h3 id="五-java类加载机制">五.java类加载机制</h3><h4 id="类加载器">类加载器</h4><ol><li><p>启动类加载器（Bootstrap  ClassLoader）：负责将存放在&lt;JAVA_HOME&gt;\lib目录中，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的类库加载到虚拟机内存中。（注：仅按照文件名识别，如rt.jar，名字不符合的类库即使放在lib目录中也不会被加载）</p></li><li><p>扩展类加载器（Extension ClassLoader）：负责加载&lt;JAVA_HOME&gt;\lib\ext目录中的，或被java.ext.dirs系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。</p></li><li><p>应用程序类加载器（Application ClassLoader）：负责加载用户路径（ClassPath)上所指定的类库，开发者可以直接使用这个类加载器，一般情况下该类加载是程序中默认的类加载器。</p></li><li><p>执行顺序</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221206151140.png" alt="image-20221206151140637"></p></li></ol><h4 id="双亲委派模型">双亲委派模型</h4><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221206151210.png" alt="image-20221206151210033"></p><p>双亲委派模型要求除了顶层的启动类加载器外，其他的类加载器都应有自己的父类加载器。</p><p><strong>好处</strong>：</p><ol><li>避免重复加载同一个类；</li><li>防止用户任意修改java中的类；</li></ol><p>双亲委派：如果一个类加载器收到类加载的请求，他首先不会自己去尝试加载这个类，而是把请求委派给父类加载器去完成，每一层次的类加载器都是这样，因此所有的加载请求最终都应该传送到底层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试去加载。</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221206151449.png" alt="image-20221206151449405"></p><h4 id="自定义类加载器">自定义类加载器</h4><p>自定义类加载器？有以下两种方式：</p><p>1、如果我们自定义的加载器不想破坏双亲委派，继承 java.lang.ClassLoader 类并重写 findClass 方法。</p><p>2、如果使用我们自定义的加载器破坏双亲委派，继承 java.lang.ClassLoader 类并重写loadClass(java.lang.String) 方法</p><h3 id="六-java值传递与引用传递的区别">六.java值传递与引用传递的区别</h3><ol><li><strong>值传递</strong>是指在调用函数时将实际参数<strong>复制</strong>一份传递到函数中，这样在函数中如果对参数进行修改，将<strong>不会影响到实际参数</strong>。</li><li><strong>引用传递</strong>是指在调用函数时将实际参数的<strong>地址</strong>直接传递到函数中，那么在函数中对参数所进行的修改，将<strong>影响到实际参数</strong>。</li></ol><table><thead><tr><th></th><th>值传递</th><th>引用传递</th></tr></thead><tbody><tr><td>根本区别</td><td>会创建副本 copy</td><td>不创建副本</td></tr><tr><td>所有</td><td>函数中无法改变原始对象</td><td>函数中可以改变原始对象</td></tr></tbody></table><h3 id="七-强引用-弱引用-软引用-虚引用的区别">七.强引用,弱引用,软引用,虚引用的区别</h3><ol><li><h4 id="强引用">强引用</h4></li></ol><p>强引用就是指在程序代码之中普遍存在的，类似<code>“Object obj = new Object()”</code>这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</p><ol start="2"><li><h4 id="软引用">软引用</h4><p>软引用是用来描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK 1.2之后，提供了SoftReference类来实现软引用。</p></li><li><h4 id="弱引用">弱引用</h4><p>弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2之后，提供了WeakReference类来实现弱引用。</p></li><li><h4 id="虚应用">虚应用</h4><p>虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2之后，提供了PhantomReference类来实现虚引用。</p></li></ol><h3 id="八-JVM调优参数">八.JVM调优参数</h3><ul><li>-Xms10g ：JVM启动时申请的初始堆内存值</li><li>-Xmx20G ：JVM可申请的最大Heap值</li><li>-Xmn3g ： 新生代大小</li><li>-Xss ：Java每个线程的Stack大小</li><li>-XX:PermSize ：持久代（方法区）的初始内存大小</li><li>-XX:MaxPermSize ： 持久代（方法区）的最大内存大小</li><li>-XX:SurvivorRatio ： 设置新生代eden空间和from/to空间的比例关系，关系(eden/from=eden/to)</li><li>-XX:NewRatio ： 设置新生代和老年代的比例老年代/新生代</li></ul><h3 id="九-jvm分析工具有哪些">九.jvm分析工具有哪些?</h3><ol><li><h3 id="jconsole">jconsole</h3><p>Java内置的JVM性能监控工具，在熟悉上述的命令行工具之后，对于该可视化工具的使用不会太陌生，在命令中可以查看到的默认参数或者应用自定义配置，在该工具中也可以找到，并且以图形化的方式呈现；</p></li><li><h3 id="visualvm">visualvm</h3></li></ol><h3 id="十-jvm常见的垃圾收集器-Java11的默认垃圾收集器是什么？">十.jvm常见的垃圾收集器,Java11的默认垃圾收集器是什么？</h3><ol><li><p>Serial 收集器</p><p>垃圾收集器的原始实现，使用单线程。当垃圾收集器运行时，会停止应用程序（通常称为“stop the world”事件）。适用于能够承受短暂停顿的应用程序。该垃圾收集器占用内存空间比较小，因此这是嵌入式应用程序的首选垃圾收集器类型。在运行时使用以下命令启用该垃圾收集器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -XX:+UseSerialGC</span><br></pre></td></tr></table></figure></li><li><p>Parallel 收集器</p><p>像 Serial 收集器一样，Parallel 收集器也使用“stop the world”方法。这意味着，当垃圾收集器运行时，应用程序线程会停止。但是不同的是，Parallel 收集器运行时有多个线程执行垃圾收集操作。这种类型的垃圾收集器适用于在多线程和多处理器环境中运行中到大型数据集的应用程序。</p></li><li><p>Concurrent Mark Sweep（CMS）收集器</p><p>Concurrent Mark Sweep（CMS）垃圾收集器与应用程序并行运行。对于新生代和老年代都使用了多线程。在 CMS 垃圾收集器删除无用对象后，不会对存活对象进行内存压缩。该垃圾收集器和应用程序并行运行，会降低应用程序的响应时间，适用于停顿时间较短的应用程序。这个收集器在 Java8 已过时，并在 Java14 中被移除。</p></li><li><p>G1 收集器</p><p>G1 垃圾收集器旨在替代 GMS。G1 垃圾收集器具备并行、并发以及增量压缩，且暂停时间较短。与 CMS 收集器使用的内存布局不同，G1 收集器将堆内存划分为大小相同的区域，通过多个线程触发全局标记阶段。标记阶段完成后，G1 知道哪个区域可能大部分是空的，并首选该区域作为清除/删除阶段。</p><p>在 G1 收集器中，一个对象如果大小超过半个区域容量会被认为是一个“大对象” 。这些对象被放置在老年代中，在一个被称为“humongous region”的区域中。 启用 G1 收集器的命令如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>java -<span class="variable constant_">XX</span><span class="symbol">:+UseG1GC</span></span><br></pre></td></tr></table></figure></li><li><p>Epsilon 收集器</p><p>该垃圾收集器是在 Java11 中引入的，是一个 no-op （无操作）收集器。它不做任何实际的内存回收，只负责管理内存分配。Epsilon 只在当你知道应用程序的确切内存占用情况并且不需要垃圾回收时使用。</p></li></ol><h3 id="十一-jvm怎么判断对象已死">十一.jvm怎么判断对象已死?</h3><ol><li><h4 id="引用计数算法">引用计数算法</h4><p>给对象添加一个引用计数器，每当一个地方引用它时候，计数器就加1，当引用失效，计数器就减1；任何时刻计数器为0的对象就是不可能再被使用了。</p></li><li><h4 id="可达性分析算法">可达性分析算法</h4><p>这个算法的基本思路是通过一系列称为“GC Roots”（一组必须活跃的引用）作为起始点，从这些节点开始向下搜索，搜索走过的路径称为引用链，当一个对象到GC Roots没有任何引用链时候，那么证明此对象是不可用的。</p><p>在Java语言中，做作为GC Roots的对象包括以下几种：</p><p>1）虚拟机栈（栈帧中的本地变量表）中引用的对象。</p><p>2）方法区中类静态属性引用的对象。</p><p>3）方法区中常量引用的对象。</p></li></ol><h3 id="十二-jvm垃圾回收算法">十二.jvm垃圾回收算法</h3><p>1、“标记–清除”算法；首先标记出所有需要被回收的对象，然后在标记完成后统一回收掉所有被标记的对象。</p><p><strong>执行步骤：</strong></p><ul><li>标记：遍历内存区域，对需要回收的对象打上标记。</li><li>清除：再次遍历内存，对已经标记过的内存进行回收。</li></ul><p>2、复制算法；将内存划分为等大的两块，每次只使用其中的一块。</p><p>将内存划分为等大的两块，每次只使用其中的一块。当一块用完了，触发GC时，将该块中存活的对象复制到另一块区域，然后一次性清理掉这块没有用的内存。下次触发GC时将那块中存活的的又复制到这块，然后抹掉那块，循环往复。</p><p>3、“标记–整理”算法；</p><p><strong>执行步骤：</strong></p><ul><li>标记：对需要回收的进行标记</li><li>整理：让存活的对象，向内存的一端移动，然后直接清理掉没有用的内存。</li></ul><p>4、分代收集算法。</p><p>当前大多商用虚拟机都采用这种分代收集算法，这个算法并没有新的内容，只是根据对象的存活的时间的长短，将内存分为了新生代和老年代，这样就可以针对不同的区域，采取对应的算法。如：</p><ul><li>新生代，每次都有大量对象死亡，有老年代作为内存担保，采取复制算法。</li><li>老年代，对象存活时间长，采用标记整理，或者标记清理算法都可。</li></ul><h3 id="十三-内存泄漏与内存溢出的区别">十三.内存泄漏与内存溢出的区别?</h3><ol><li><p>内存泄漏(Memory Leak)：是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄漏似乎不会有大的影响，但内存泄漏堆积后的后果就是内存溢出。</p></li><li><p>内存溢出(Memory Overflow)：指程序申请内存时，没有足够的内存供申请者使用，或者说，给了你一块存储int类型数据的存储空间，但是你却存储long类型的数据，那么结果就是内存不够用，此时就会报错OOM,即所谓的内存溢出。</p></li></ol><h3 id="十四-javaGC类型minor-GC-full-GC的区别">十四.javaGC类型minor GC&amp;full GC的区别</h3><ol><li>Minor GC又称为新生代GC :指的是发生在新生代的垃圾收集。因为Java对象大多都具备朝生夕灭的特性，因此Minor GC(采用复制算法)非常频繁，一般回收速度也比较快。</li><li>Full GC 又称为 老年代GC或者Major GC : 指发生在老年代的垃圾收集。出现了Major GC，经常会伴随 至少一次的Minor GC(并非绝对，在Parallel Scavenge收集器中就有直接进行Full GC的策略选择过程)。 Major GC的速度一般会比Minor GC慢10倍以上。老年代：标记-整理算法（清理的时候做内存移动）</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS对象,JSBOM和JSDOM的介绍以及基本运用</title>
      <link href="/posts/26029.html"/>
      <url>/posts/26029.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-JavaScript简介">一. JavaScript简介</h3><ol><li>JavaScript是一种解释性脚本语言（代码不进行预编译），由浏览器解释执行，用来向页面添加交互行为；</li><li>Java Script由三个主要组成部分：ECMAScript（核心），BOM（浏览器对象模型），DOM（文档对象模型）；</li></ol><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220808183449.png" alt="image-20220808183449272"></p><ul><li>ECMAScript描述了Js的基本语法：类型、语句、关键字、保留字、运算符和对象等。<strong>DOM</strong>是把整个文档中的所有节点解析成一个一个对象，并且这些对象之间会形成一个层级关系。通过DOM我们可以对文档中所有节点做<strong>CRUD</strong>操作。<strong>BOM</strong>是浏览器的一种特性，它可以对<strong>浏览器窗口</strong>进行访问和操作，例如移动、关闭窗口，调整窗口的大小等；</li></ul><h3 id="二-JS三种写法">二. JS三种写法</h3><h4 id="1-行内JS">1.行内JS</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;javascript:alert(&#x27;行内写法&#x27;)&quot;</span>&gt;点我&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="2-内部JS">2.内部JS</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;内部js写法&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="3-外联JS">3.外联JS</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--js按照顺序执行--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./static/demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="三-数据类型">三. 数据类型</h3><ol><li>js中可以使用typeof 和typeof()判断当前变量属于那种数据类型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> a);<span class="comment">//boolean</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">typeof</span>(a));<span class="comment">//boolean</span></span><br></pre></td></tr></table></figure><ol start="2"><li>无穷数</li></ol><ul><li>在JS语法中，数字是有取值边界的，超出最大数取值为Infinity【正无穷】，超出最小数取值为-Infinity【负无穷】，无穷数不能用于数值运算，一般使用isFinite()函数对一个数字进行判断是否是有穷的【有限的】，若传入的数据是无穷数，那么返回false，若传入的数据是有穷数，则返回为true；</li><li>在JS中，1/0并不会报错，因为JS语法中0是取值了一个无限趋近于0的一个数字。</li></ul><ol start="3"><li><p>非数</p><ul><li>不是数字，在JS中采用NAN来表示，同样在JS中采用了isNaN()函数来判定当前字符是否真的不是数字</li></ul></li><li><p>boolean(布尔类型)</p><ul><li>在JS语法中，0、NaN、Undefined、空字符串、null均可以表示为false</li></ul></li><li><p>string(字符串类型)</p><ul><li>JS语法中不存在char类型，所以由单引号或双引号括起来的字符序列，任何<strong>字符串的长度</strong>都可以通过访问<strong>length</strong>属性获得</li></ul></li><li><p>null(空对象)</p><ul><li>表示一个不存在的对象，只有一个值null</li></ul></li><li><p>undefined(未定义或未初始化)</p><ul><li>表示声明但未赋值的对象，Undefined派生自null；</li><li>如果我们做 -，*、/如果有字符串，它会尝试去转换成number来进行运算，如果转换失败（NaN）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//https://w3school.com.cn/</span></span><br><span class="line">    &lt;!--判断是否是无穷数--&gt;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="number">1</span> / <span class="number">0</span>));<span class="comment">//finite 有限的</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(a));<span class="comment">//判断是否是一个数字 Not a Number</span></span><br><span class="line">    <span class="keyword">let</span> b;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//未定义 js的变量值类型是赋值后确定的</span></span><br><span class="line">    <span class="keyword">let</span> string = <span class="string">&quot;今天是个好日子_咿呀咿呀哟&quot;</span>;</span><br><span class="line">    <span class="comment">//字符串方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">split</span>(<span class="string">&#x27;_&#x27;</span>))<span class="comment">//返回字符串数组</span></span><br><span class="line">    <span class="comment">//    js 中的0，NaN,null,Undefined,空字符串都可以表示位false</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------------------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;值为0:&quot;</span> + <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (&#123;&#125;) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;大括号&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">NaN</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NaN:&quot;</span> + <span class="title class_">NaN</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;空字符串&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="四-运算符">四. 运算符</h3><h4 id="1-关系运算符">1.关系运算符</h4><ul><li><p>比较运算符用于判断两个变量大小关系：&gt;、&lt;、==、&lt;=、&gt;=、===、!=、!==；</p></li><li><p>(1) == ：代表相等(它只比较内容，不比较类型)</p><p>(2) ===：绝对相等(先比较类型，再比较内容)</p><p>(3) !==：绝对不等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="string">&quot;10&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">debug</span>(x==y);  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">debug</span>(x===y);  <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">debug</span>(x!==y);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-逻辑运算符">2.逻辑运算符</h4><ul><li><p>&amp;&amp; ：逻辑AND运算符，一假遍假</p></li><li><p>|| ：逻辑OR运算符 ，一真遍真</p></li><li><p>!  ：逻辑NOT运算符，真为假，假为真</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="string">&quot;5&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a*b=&quot;</span> + a * b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a*c=&quot;</span> + a * c);<span class="comment">//遇到字符串运算时会自动隐式转换 如果是+号则拼接字符串 当然了字符串是数字才可以隐式转换</span></span><br><span class="line">    <span class="comment">//    逻辑运算符</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> d = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> e = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d || e);<span class="comment">//返回第一个位true的值1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d &amp;&amp; e);<span class="comment">//返回第一个位false的值0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> f = <span class="string">&quot;10&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == f) &#123;<span class="comment">//不比较类型 只比较数值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数值相等&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(a === f)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数值相等&quot;</span> + a === f)<span class="comment">//先比较类型再比较数值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数值不相等&quot;</span> + !a == f)<span class="comment">//先比较类型再比较数值 绝对不等</span></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="五-JavaScript流程控制">五.JavaScript流程控制</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="string">&quot;5&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;other obj&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span> (a &lt;= <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">7</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">        b++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (b &lt;= <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> str = [<span class="string">&quot;01&quot;</span>, <span class="string">&quot;02&quot;</span>, <span class="string">&quot;03&quot;</span>, <span class="string">&quot;04&quot;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> s <span class="keyword">of</span> str) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt; <span class="number">2</span> ? <span class="number">10</span> : <span class="number">2</span>);<span class="comment">//三目运算符</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="六-JavaScript函数">六.JavaScript函数</h3><ul><li><p>声明函数的几种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    &lt;!-- 无参无返回值   --&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是函数一&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用函数</span></span><br><span class="line">    <span class="title function_">foo1</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参无返回值</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo2</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">foo2</span>(<span class="number">39</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参有返回值</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo3</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo3</span>(<span class="number">11</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    匿名函数</span></span><br><span class="line">    <span class="keyword">const</span> e = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> e1 = <span class="title function_">e</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">e</span>(<span class="number">11</span>, <span class="number">11</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="七-JavaScript对象">七.JavaScript对象</h3><ol><li><p>js的对象有三大类，内部对象（本地对象和内置对象）、宿主对象和自定义对象；</p></li><li><p>内部对象包括本地对象和内置对象：</p><p>(1) 本地对象可以new实例，方法或函数式通过实例调用的；</p><p>(2) 内置对象不能使用new关键字创建实例，方法调用也不需要通过实例去调用；</p></li><li><p>宿主对象指的是<strong>BOM</strong>和<strong>DOM</strong>中的所有对象；</p></li><li><p>自定义对象就是开发人员自己定义的对象。</p></li><li><h4 id="本地对象Date："><strong>本地对象Date：</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> now1 = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(now1.<span class="title function_">getFullYear</span>());<span class="comment">//获取年份</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(now1.<span class="title function_">getDay</span>());<span class="comment">//获取星期</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(now1.<span class="title function_">getMonth</span>() + <span class="number">1</span>);<span class="comment">//获取月份</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(now1.<span class="title function_">getDate</span>());<span class="comment">// 返回月中的第几天（从 1 到 31）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(now1.<span class="title function_">getTime</span>());<span class="comment">//返回毫秒数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(now1.<span class="title function_">toLocaleDateString</span>());<span class="comment">//2022/8/8</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(now1.<span class="title function_">toLocaleTimeString</span>());<span class="comment">//15:35:20</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(now1.<span class="property">constructor</span>);<span class="comment">//返回创建 Date 对象原型的函数。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  自定义日期格式</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">format</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">let</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">        <span class="keyword">let</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> day = date.<span class="title function_">getDay</span>();</span><br><span class="line">        <span class="keyword">let</span> time = date.<span class="title function_">toLocaleTimeString</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day + <span class="string">&quot; &quot;</span> + time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">format</span>();</span><br><span class="line">    <span class="comment">//向Date添加方法</span></span><br><span class="line">    <span class="title class_">Date</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">format</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">let</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">        <span class="keyword">let</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> day = date.<span class="title function_">getDay</span>();</span><br><span class="line">        <span class="keyword">let</span> time = date.<span class="title function_">toLocaleTimeString</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day + <span class="string">&quot; &quot;</span> + time);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义属性</span></span><br><span class="line">    <span class="title class_">Date</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">username</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    date1.<span class="title function_">format</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(date1.<span class="property">username</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="本地对象String："><strong>本地对象String：</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&quot;0606,i am a monster, you can call me,哇酷哇酷&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">length</span>);<span class="comment">//字符串长度</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>));<span class="comment">//分割字符串</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">substring</span>(<span class="number">5</span>, <span class="number">19</span>));<span class="comment">//截取字符串</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>内置对象 包括Global、Math这两个</strong></p><p>①<strong>Global全局对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    &lt;!-- 编码uri   --&gt;</span><br><span class="line">    <span class="keyword">let</span> web = <span class="string">&quot;www.baidu.com?name=春上村树&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURI</span>(web));<span class="comment">//www.baidu.com?name=%E6%98%A5%E4%B8%8A%E6%9D%91%E6%A0%91</span></span><br><span class="line">    <span class="comment">//解码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">decodeURI</span>(<span class="string">&quot;www.baidu.com?name=%E6%98%A5%E4%B8%8A%E6%9D%91%E6%A0%91&quot;</span>));</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    eval() 评估字符串并像脚本代码一样执行它。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">eval</span>(<span class="string">&quot;12+12&quot;</span>));</span><br><span class="line">    <span class="comment">// console.log(eval(&quot;alert(&#x27;you are so cute&#x27;)&quot;));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析字符串返回整数 首字符必须位数字 直到找到一个非数字字符返回前面数字字符的整数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;1123abc&quot;</span>));</span><br><span class="line">    <span class="comment">//返回浮点数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&quot;121.2xn&quot;</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>②<strong>数学计算对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    &lt;!--  随机数  --&gt;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());<span class="comment">//0-1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">cos</span>(<span class="number">180</span>));<span class="comment">//余弦</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">180</span>));<span class="comment">//正弦</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">11.11</span>;</span><br><span class="line">    <span class="keyword">const</span> b = -<span class="number">11.11</span>;</span><br><span class="line">    <span class="comment">//向上取整</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(a));<span class="comment">//12</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(b));<span class="comment">//-11</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//向下取整</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(a));<span class="comment">//11</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(b));<span class="comment">//-12</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//四舍五入</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(a));<span class="comment">//11</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(b));<span class="comment">//-11</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义对象三种方式如下</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    &lt;!-- 方式一   --&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">User</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;coderyeah&quot;</span>;</span><br><span class="line">    <span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">19</span>;</span><br><span class="line">    <span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">print</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我的名字是&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;  今年&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">name</span>);</span><br><span class="line">    user.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   方式二</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, sex</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stu</span> = <span class="keyword">function</span> (<span class="params">name, sex</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是&quot;</span> + name + <span class="string">&quot;  性别：&quot;</span> + sex)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;渣渣灰&quot;</span>, <span class="number">22</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">age</span>);</span><br><span class="line">    stu.<span class="title function_">stu</span>(<span class="string">&quot;渣渣灰&quot;</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    方式三 常用</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;栀子花&quot;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">99.99</span>,</span><br><span class="line">        <span class="attr">address</span>: <span class="string">&quot;成都&quot;</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;white&quot;</span>,</span><br><span class="line">        <span class="attr">intro</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;  &quot;</span> + <span class="variable language_">this</span>.<span class="property">price</span> + <span class="string">&quot;  &quot;</span> + <span class="variable language_">this</span>.<span class="property">address</span> + <span class="string">&quot;  &quot;</span> + <span class="variable language_">this</span>.<span class="property">color</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br><span class="line">    obj.<span class="title function_">intro</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一次性定时器</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello jack&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 周期性定时器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;interval&quot;)</span></span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;https://www.jd.com/&quot;</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);<span class="comment">//停止定时器任务</span></span><br><span class="line">        &#125;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   地址对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;location:&quot;</span> + location.<span class="property">href</span>);</span><br><span class="line">    <span class="comment">//   确认弹框</span></span><br><span class="line">    <span class="keyword">let</span> bool = <span class="title function_">confirm</span>(<span class="string">&quot;确定要忘记她吗？&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(bool)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="八-BOM">八.BOM</h3><ol><li><p>BOM是Browser Object Model的缩写，简称浏览器对象模型;</p></li><li><p>所有的BOM和DOM中的对象都称之为宿主对象；</p></li><li><p>BOM的顶级对象是window;</p></li><li><p>(1) 打开一个窗口就是一个window对象；</p><p>(2) 窗口里面使用location表示地址栏；</p><p>(3) 窗口的历史记录使用history来表示；</p><p>(4) 浏览器的信息使用navigator来表示；</p><p>(5) 窗口里面的内容使用document来表示；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 周期性定时器</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;interval&quot;)</span></span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="comment">//跳转页面</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;https://www.jd.com/&quot;</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);<span class="comment">//停止定时器任务</span></span><br><span class="line">        &#125;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   地址对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;location:&quot;</span> + location.<span class="property">href</span>);</span><br><span class="line">    <span class="comment">//   确认弹框</span></span><br><span class="line">    <span class="keyword">let</span> bool = <span class="title function_">confirm</span>(<span class="string">&quot;确定要忘记她吗？&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(bool)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="九-DOM">九.DOM</h3><ol><li><p>DOM【Document Object Model】 ：文档对象模型。直白的讲就是通过程序解析结构化文档（xml，html）的时候，在内存中生成的包含当前结构化文档中所有内容的一个对象模型。文档中的每一个节点都会生成一个对象，这些对象与对象之间会形成一个层级关系，像一个树形结构，所以称之为DOM树；</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220809184925.png" alt="image-20220809184925760"></p></li><li><p>事件绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--元素上直接绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;show()&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--动态绑定方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;保存成功!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;展示......&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>获取节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>读书</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>看报</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>打豆豆</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sp&quot;</span>&gt;</span>黄金镇魂曲<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sp&quot;</span>&gt;</span>性感手枪<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// getElementById(&quot;id属性值&quot;) -- 常用     // 通过标签元素的ID获取到标签对象 返回HTML集合</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> d1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d1);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 通过标签名称获取到标签对象，返回的是数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(input);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// getElementsByName() 返回NodeList 通过标签元素的name属性获取到标签对象，返回的是数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//通过class值获取到标签对象，返回的是数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;sp&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// parentNode：父节点，返回Node  获取指定元素的父节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d1.<span class="property">parentNode</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d1.<span class="property">parentElement</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// document.body：获取body节点  &lt;body&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">body</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>页面加载事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面加载事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//页面加载 要等页面加载完成后再执行js代码  因为代码是从上往下开始执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">//匿名函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d1&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>i am a monster<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>操作节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: green; font-size: 26px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;s&quot;</span>&gt;</span>我系乔巴纳<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> d1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//创建节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> inp = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//添加节点属性</span></span></span><br><span class="line"><span class="language-javascript">    inp.<span class="property">type</span> = <span class="string">&quot;text&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    inp.<span class="property">name</span> = <span class="string">&quot;username&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    inp.<span class="property">value</span> = <span class="string">&quot;吉良吉影&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    inp.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    inp.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&quot;28px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//添加节点</span></span></span><br><span class="line"><span class="language-javascript">    d1.<span class="title function_">appendChild</span>(inp)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//    删除节点 通过获取父节点进行删除</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> s = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;s&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// d1.removeChild(s)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">parentElement</span>.<span class="title function_">removeChild</span>(s));<span class="comment">//&lt;span id=&quot;s&quot;&gt;我系乔巴纳&lt;/span&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>操作属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;inp1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> d1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> inp1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;inp1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取属性 方式一</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(inp1.<span class="title function_">getAttribute</span>(<span class="string">&quot;name&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(inp1.<span class="title function_">getAttribute</span>(<span class="string">&quot;id&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取属性 方式二</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(inp1.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(inp1.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//添加属性方式一</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// inp1.setAttribute(&quot;value&quot;, &quot;空条徐伦&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//添加属性方式二</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// inp1.value=&quot;哈哈哈哈哈&quot;</span></span></span><br><span class="line"><span class="language-javascript">    inp1.<span class="property">value</span> = <span class="string">&quot;啊啊啊啊啊&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    inp1.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    inp1.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&quot;25px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//删除属性</span></span></span><br><span class="line"><span class="language-javascript">    inp1.<span class="title function_">removeAttribute</span>(<span class="string">&quot;value&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    inp1.<span class="title function_">removeAttribute</span>(<span class="string">&quot;name&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//赋空值</span></span></span><br><span class="line"><span class="language-javascript">    inp1.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>操作样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>操作样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.myClass</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;in&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> inp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;in&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    inp.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="language-javascript">    inp.<span class="property">className</span>=<span class="string">&quot;myClass&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>操作文本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>《老友记》<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>《平凡的世界》<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>《左手倒影，右手年华》<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>《天才在左，疯子在右》<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;ul&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//innerHTML 获取标签+文本内容</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">innerHTML</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//innerText 获取文本内容</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//重新赋值 如果直接赋值会覆盖所有</span></span></span><br><span class="line"><span class="language-javascript">    ul.<span class="property">innerHTML</span> = ul.<span class="property">innerHTML</span> + <span class="string">&quot;&lt;li&gt;《倒影》&lt;/li&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//赋值文本</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ul.innerText = ul.innerText + &quot;《倒影》&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>鼠标事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px;height: 300px;background-color: pink&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//加载事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> d1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//鼠标移入事件</span></span></span><br><span class="line"><span class="language-javascript">        d1.<span class="property">onmouseover</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            d1.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;span style=&#x27;background-color: wheat&#x27;&gt;我移动上来了哦&lt;/span&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//鼠标移出事件</span></span></span><br><span class="line"><span class="language-javascript">        d1.<span class="property">onmouseout</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            d1.<span class="property">innerText</span> = <span class="string">&quot;我出去了啊&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>焦点事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//页面加载事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> inp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;inp&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        inp.<span class="property">onfocus</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取焦点</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;得到了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//失去焦点</span></span></span><br><span class="line"><span class="language-javascript">        inp.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我还是失去了你......&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>综合案例—打地鼠</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>打地鼠<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.dishu</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>; <span class="comment">/* 圆角 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute; <span class="comment">/* 定位 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            要随机出现在不同的位置，所以位置不能写死</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            top:100px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            left:200px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color: skyblue&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//加载页面事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//设置周期性定时器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1.创建img标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2.为img标签设置属性</span></span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">src</span> = <span class="string">&quot;./static/img/1.jpg&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">className</span> = <span class="string">&quot;dishu&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//3.获取画布(body)宽高 减去图片的宽高是为了解决图片显示不完整bug</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> width = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span> - <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> height = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span> - <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//随机数范围是 0~1  这里设置的是X,Y坐标 边界距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> left = <span class="title class_">Math</span>.<span class="title function_">random</span>() * width + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> top = <span class="title class_">Math</span>.<span class="title function_">random</span>() * height + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">style</span>.<span class="property">left</span> = left;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">style</span>.<span class="property">top</span> = top;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//添加img标签到父标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//4.设置图片的点击事件</span></span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//点击之后删除当前标签</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="十-Ajax-u-异步请求-局部刷新-u">十. <strong>Ajax:<u>异步请求,局部刷新</u></strong></h3><ol><li><p>优点：</p><ul><li>异步请求，发送请求的同时还可以继续操作页面。页面不销毁；</li><li>返回部分数据，减少不必要的数据传输，减少网络资源。页面不刷新，而是更新页面部分数据。</li></ul></li><li><p>Ajax实质：通过浏览器得到一个ajax对象，再通过ajax对象发送请求。</p></li><li><p>同步和异步：</p><ul><li><p>同步：你先做完我再做(排队)，后一步的操作必须要等待前一步操作的结果；</p></li><li><p>异步：各做各的相互不干扰（效率高，但安全性较低）。</p></li></ul></li><li><p>Ajax发送请求的步骤</p><p>①获取ajax对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取ajax对象</span></span><br><span class="line">           <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;<span class="comment">//针对其他浏览器</span></span><br><span class="line">               xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;<span class="comment">//针对低版本的ie浏览器</span></span><br><span class="line">               xhr = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>②准备发送请求:xhr.open(“post”,“/xx/add”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建请求</span></span><br><span class="line">       xhr.<span class="title function_">open</span>(<span class="string">&quot;post&quot;</span>, <span class="string">&quot;/req&quot;</span>);</span><br><span class="line">       <span class="comment">//设置请求头， application/x-www-form-urlencoded表示请求的参数是字符串格式</span></span><br><span class="line">       xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br></pre></td></tr></table></figure><p>③设置回调函数（主要是获取服务器返回的正确数据）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回调函数</span></span><br><span class="line">           xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;<span class="comment">//已经接收到服务器响应的内容了</span></span><br><span class="line">                   <span class="keyword">var</span> txt = xhr.<span class="property">responseText</span>;</span><br><span class="line">                   <span class="comment">//展示数据到页面</span></span><br><span class="line">                   <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;msg&quot;</span>).<span class="property">innerText</span> = txt;</span><br><span class="line">               &#125;<span class="comment">//这里最后不要写else，因为状态从0-1-2-3都会触发else</span></span><br><span class="line">           &#125;;</span><br></pre></td></tr></table></figure><p>④发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送请求 这里采用post方式发送请求，请求参数就不能拼接在请求路径后面</span></span><br><span class="line">          xhr.<span class="title function_">send</span>(<span class="string">&quot;username=&quot;</span> + <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">value</span>);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery的介绍和基本运用</title>
      <link href="/posts/41576.html"/>
      <url>/posts/41576.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-简介">一.简介</h3><ol><li><code>jQuery</code>是继prototype之后一个优秀的开源的JavaScript代码库（或JavaScript框架），它封装JavaScript常用的功能代码；</li><li>特点：<ul><li>具有独特的链式语法，可以把多个操作写在一行代码里，更加简洁；</li><li>拥有大量的选择器，不仅有高效灵活的<code>css</code>选择器，并且可对<code>CSS</code>选择器进行扩展；</li><li>拥有便捷的插件扩展机制和丰富的插件（树形菜单、日期控件、图片切换插件、弹出窗口等）。</li></ul></li><li>核心思想：(write less，do more）写得更少，做得更多；</li></ol><h3 id="二-jQuery操作方式">二.<code>jQuery</code>操作方式</h3><h4 id="1-和JQuery">1. $和<code>JQuery</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  $指代jQuery对象 如果有多个框架$发生冲突 就用 jQuery代替$  --&gt;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>($);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>($ === jQuery)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="2-页面加载事件">2. 页面加载事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;static/jquery/jquery-2.1.3.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &lt;!--  $指代jQuery对象 如果有多个框架$发生冲突 就用 jQuery代替$  --&gt;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//原生js页面加载事件 先加载html标签 静态资源图片等 再执行js代码 效率慢体验感差</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原生js页面加载事件......&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//加载html标签 不用等待静态资源加载 直接执行 速度更快</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jquery加载页面事件......&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-基本选择器">3. 基本选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我系渣渣灰，一🔪九九九<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我司我冠<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h1&quot;</span>&gt;</span>IU不错哦<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &lt;!--  $指代jQuery对象 如果有多个框架$发生冲突 就用 jQuery代替$  --&gt;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//id选择器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> d1 = $(<span class="string">&quot;#d1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(d1);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//class选择器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> h1 = $(<span class="string">&#x27;.h1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(h1);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//标签选择器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> p = $(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//全局选择器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> all = $(<span class="string">&#x27;*&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(all);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//组合选择器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> zh = $(<span class="string">&#x27;.h1,#d1,p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(zh);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-毗邻选择器">4. 毗邻选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>绯红之刃<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &lt;!--  $指代jQuery对象 如果有多个框架$发生冲突 就用 jQuery代替$  --&gt;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//后代选择器 标签之间空格 隔开</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;form label&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;form input&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//子选择器标签之间用 &gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;form &gt; input&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//毗邻选择器 标签之间用+ 找后面的第一个</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;input + span&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//兄弟选择器 找的是平级后面的所有选择器 用~连接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;label ~ input&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;label ~ label&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-绑定事件">5. 绑定事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>事件1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>事件2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>事件3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &lt;!--  $指代jQuery对象 如果有多个框架$发生冲突 就用 jQuery代替$  --&gt;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式一</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;点击了事件一&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式二 指定事件为click</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn2&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;点击了事件二&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式三</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn3&#x27;</span>).<span class="title function_">bind</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;点击了事件三&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//    取消事件绑定</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn2&#x27;</span>).<span class="title function_">off</span>(<span class="string">&#x27;click&#x27;</span>);<span class="comment">//常用</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn3&#x27;</span>).<span class="title function_">unbind</span>(<span class="string">&#x27;click&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-文本操作">6. 文本操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>《天上人间》<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>《JOJO》<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>《斗破苍穹》<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: wheat; width: 300px; height: 200px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &lt;!--  $指代jQuery对象 如果有多个框架$发生冲突 就用 jQuery代替$  --&gt;\</span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取网页内容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">html</span>());</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取纯文本</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">text</span>());</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#d1&#x27;</span>).<span class="title function_">mouseover</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="variable language_">this</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;span style=&#x27;color: red&#x27;&gt;hello&lt;/span&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#d1&#x27;</span>).<span class="title function_">mouseout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="variable language_">this</span>).<span class="title function_">text</span>(<span class="string">&quot;再见&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-取值操作">7. 取值操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &lt;!--  $指代jQuery对象 如果有多个框架$发生冲突 就用 jQuery代替$  --&gt;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取值</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#getVal&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> username = $(<span class="string">&#x27;#username&#x27;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#age&#x27;</span>).<span class="title function_">val</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#fruit&#x27;</span>).<span class="title function_">val</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#girl&#x27;</span>).<span class="title function_">val</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#boy&#x27;</span>).<span class="title function_">val</span>());</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#setVal&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#username&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;coderyeah爱喝水&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#age&#x27;</span>).<span class="title function_">val</span>(<span class="number">22</span>)</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#fruit&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;Apple&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#girl&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;00000&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#boy&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;11111&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-属性操作">8. 属性操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.jd.com/&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hre1&quot;</span> <span class="attr">data-abc</span>=<span class="string">&quot;123&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">data-person</span>=<span class="string">&#x27;&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;tom&quot;,&quot;address&quot;:&quot;四川成都&quot;&#125;&#x27;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">data-name</span>=<span class="string">&quot;赵子龙&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">data-age</span>=<span class="string">&quot;22&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">data-sex</span>=<span class="string">&quot;true&quot;</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &lt;!--  $指代jQuery对象 如果有多个框架$发生冲突 就用 jQuery代替$  --&gt;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//加载页面事件</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#hre1&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//自定义属性 使用data-属性名=属性值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> abc = $(<span class="string">&#x27;#hre1&#x27;</span>).<span class="title function_">data</span>(<span class="string">&#x27;abc&#x27;</span>);<span class="comment">//获取自定义属性 这种方式会自动进行类型转换 例如&quot;123&quot;--数字123</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(abc);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//通过attr获取自定义属性值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> attr = $(<span class="string">&#x27;#hre1&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;data-abc&#x27;</span>);<span class="comment">//不能省略data了 这种方式不会进行类型转换默认字符类型</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(attr);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//自动解析json对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> p1 = $(<span class="string">&#x27;#hre1&#x27;</span>).<span class="title function_">data</span>(<span class="string">&#x27;person&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//不会解析 json字符串</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> p2 = $(<span class="string">&#x27;#hre1&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;data-person&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p2)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//    将json字符串转换为json对象用JSON.parse(json字符串)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(p2));</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//    将json对象转换为json字符串用JSON.stringify(json对象)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(p1));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-样式操作">9. 样式操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.myClass</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#0a885e</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;myClass&quot;</span>&gt;</span></span><br><span class="line">    i am a monster!!!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &lt;!--  $指代jQuery对象 如果有多个框架$发生冲突 就用 jQuery代替$  --&gt;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//添加样式</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#d1&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;myClass&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//删除样式</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#d1&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;myClass&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-元素节点操作">10. 元素节点操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #0a885e&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &lt;!--  $指代jQuery对象 如果有多个框架$发生冲突 就用 jQuery代替$  --&gt;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//添加节点</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#d1&#x27;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;span&gt;i  am  stronger than  you  ?????&lt;/span&gt;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//删除节点（包括子节点）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// $(&#x27;#d1&#x27;).remove();</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//清空子节点</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#d1&#x27;</span>).<span class="title function_">empty</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#d1&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="11-原生DOM和jQuery的转换">11. 原生<code>DOM</code>和<code>jQuery</code>的转换</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>000001<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>000002<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &lt;!--  $指代jQuery对象 如果有多个框架$发生冲突 就用 jQuery代替$  --&gt;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d1&quot;</span>));<span class="comment">//返回html标签内容</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#d2&#x27;</span>));<span class="comment">//返回数组对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//将jquery转换为原生DOM</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#d2&#x27;</span>)[<span class="number">0</span>].<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//将原生DOM转换为jquery</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;d1&quot;</span>)).<span class="title function_">text</span>());</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="12-遍历">12. 遍历</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;u&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>天青色等烟雨<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>而我在等你<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>give up！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &lt;!--  $指代jQuery对象 如果有多个框架$发生冲突 就用 jQuery代替$  --&gt;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> li = $(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// $(li).each(function (index, item) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">        li.<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">index, item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(index + <span class="string">&quot;  &quot;</span> + item.<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三-异步请求方式">三.异步请求方式</h3><h4 id="1-Ajax实现GET请求">1. Ajax实现GET请求</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">账号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> username = $(<span class="string">&#x27;#username&#x27;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">get</span>(<span class="string">&quot;/req&quot;</span>, &#123;<span class="string">&quot;username&quot;</span>: username&#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//回调函数</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&#x27;#msg&#x27;</span>).<span class="title function_">text</span>(res)</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="string">&#x27;text&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-Ajax实现POST请求">2. Ajax实现POST请求</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> username = $(<span class="string">&#x27;#username&#x27;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">post</span>(<span class="string">&quot;/req&quot;</span>, &#123;<span class="string">&quot;username&quot;</span>: username&#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//回调函数</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&#x27;#msg&#x27;</span>).<span class="title function_">text</span>(res)</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="string">&#x27;text&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-Ajax统一请求">3. Ajax统一请求</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> username = $(<span class="string">&#x27;#username&#x27;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;/req&#x27;</span>,<span class="comment">//请求路径</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,<span class="comment">//请求方式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;<span class="string">&quot;username&quot;</span>: username&#125;,<span class="comment">//json格式参数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;<span class="comment">//返回res结果集</span></span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&#x27;#msg&#x27;</span>).<span class="title function_">text</span>(res);<span class="comment">//回调函数</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&#x27;text&#x27;</span>,<span class="comment">//数据返回格式 text,json</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">async</span>: <span class="literal">true</span><span class="comment">//表示异步请求 默认异步请求</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java面试题大全</title>
      <link href="/posts/8604.html"/>
      <url>/posts/8604.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-JavaSE-部分">一.JavaSE 部分</h2><h3 id="基础部分">基础部分</h3><h4 id="Java中基本数据类型有哪些？">Java中基本数据类型有哪些？</h4><p>byte：8位，最大存储数据量是255，存放的数据范围是-128~127之间。</p><p>short：16位，</p><p>int：32位，最大数据存储容量是2的32次方减1，数据范围是负的2的31次方到正的2的31次方减1。</p><p>long：64位，最大数据存储容量是2的64次方减1，数据范围为负的2的63次方到正的2的63次方减1。</p><p>float：32位，</p><p>double：64位，</p><p>boolean：只有true和false两个取值。</p><p>char：16位，存储Unicode码，用单引号赋值。</p><h4 id="Integer-和-int的区别">Integer 和 int的区别</h4><p><strong>int</strong>是基本数据类型，变量中直接存放数值，变量初始<strong>化时值是0</strong></p><p><strong>Integer</strong>是引用数据类型，变量中存放的是该对象的引用，变量<strong>初始化时值时null</strong></p><p>Integer是int类型的包装类，将int封装成Integer，符合java面向对象的特性，可以使用各种方法比如和其他数据类型间的转换</p><p>Integer和int的深入对比：</p><ol><li><p>两个通过new生成的Integer对象，由于在堆中地址不同，所以永远不相等</p></li><li><p>int和Integer比较时，只要数值相等，结果就相等，因为包装类和基本数据类型比较时，会自动拆箱，将Integer转化为int</p></li><li><p>通过new生成的Integer对象和非通过new生成的Integer对象相比较时，由于前者存放在堆中，后者存放在Java常量池中，所以永远不相等</p></li><li><p>两个非通过new生成的Integer对象比较时，如果两个变量的数值相等且在-128到127之间，结果就相等。这是因为给Integer对象赋一个int值，java在编译时，会自动调用静态方法valueOf()，根据java api中对Integer类型的valueOf的定义，对于-128到127之间的整数，会进行缓存，如果下次再赋相同的值会直接从缓存中取，即享元模式</p></li></ol><h4 id="String和StringBuilder和StringBuffer区别">String和StringBuilder和StringBuffer区别</h4><p><strong>三者</strong>底层都是<code>char[] </code>存储数据，JDK1.9之后使用的是byte[] ，因为往往我们存储都是短字符串，使用byte[]这样更节约空间。</p><p>由于String底层的char[]有<code>final</code>修饰，因此每次对String的操作都会在内存中开辟空间，生成新的对象，所以String不可变</p><p>StringBuilder和StringBuffer是可变字符串，没有final修饰，适合字符串拼接，另外StringBuffer是线程安全的，方法有<code>synchronized</code>修饰，但是性能较低，StringBuilder是线程不安全的，方法没有synchronized修饰，性能较高</p><h4 id="String-a-“A”-和-String-a-new-String-“A”-创建字符串的区别">String a = “A” 和 String a = new String(“A”) 创建字符串的区别</h4><p>String c = “A”  首先去常量池找 “A”，如果有，会把a指向这个对象的地址 ，如果没有则在栈中创建三个char型的值’A’,堆中创建一个String对象object，值为&quot;A&quot;,接着object会被存放进字符串常量池中，最后将a指向这个对象的的地址</p><p>new String(“A”) ： 如果常量池中么有“A”就会走上面相同的流程先创建“A”，然后在堆中创建一个String对象，它的值共享栈中已有的char值“A”。</p><h4 id="下面代码创建了几个对象">下面代码创建了几个对象</h4><ul><li>String s = “a” +“b” + “c” + “d”;这条语句创建了几个对象？</li></ul><p>创建了一个对象，因为相对于字符串常量相加的表达式，编译器会在编译期间进行优化，直接将其编译成常量相加的结果。</p><ul><li><p>String s； 创建几个对象？<br>没有创建对象。</p></li><li><p>String a = “abc”;  String b = “abc”; 创建了几个对象</p><p>创建了一个对象，只是在第一条语句中创建了一个对象，a和b都指向相同的对象&quot;abc&quot;，引用不是对象</p></li></ul><h4 id="和-equals-的区别是什么">== 和 equals 的区别是什么</h4><p><code>==</code>比较对象比较的是地址，对于Object对象中的<code>equals</code> 方法使用的也是 == ，比较的是对象的地址，默认情况下使用对象的equals比较Object中的equals方法，也就是比较地址，如果要实现自己的比较方式需要复写equals 方法。</p><p>对于包装类比如：Integer都是复写过equals方法，比较的是int 值。</p><h4 id="final-和-finally-和-finalize-的区别">final 和 finally 和 finalize 的区别</h4><p>当用final修饰类的时，表明该类不能被其他类所继承。当我们需要让一个类永远不被继承，此时就可以用final修饰</p><p>finally作为异常处理的一部分，它只能用在try/catch语句中，并且附带一个语句块，表示这段语句最终一定会被执行（不管有没有抛出异常），经常被用在需要释放资源的情况下</p><p>finalize()是在java.lang.Object里定义的，也就是说每一个对象都有这么个方法。这个方法在gc启动，该对象被回收的时候被调用。其实gc可以回收大部分的对象（凡是new出来的对象，gc都能搞定，一般情况下我们又不会用new以外的方式去创建对象），所以一般是不需要程序员去实现finalize的。</p><h4 id="JDK-和-JRE-有什么区别？">JDK 和 JRE 有什么区别？</h4><p>JRE(Java Runtime Enviroment) ：是Java的运行环境，JRE是运行Java程序所必须环境的集合，包含JVM标准实现及 Java核心类库</p><p>JDK(Java Development Kit) ：是Java开发工具包，它提供了Java的开发环境(提供了编译器javac等工具，用于将java文件编译为class文件)和运行环境(提 供了JVM和Runtime辅助包，用于解析class文件使其得到运行)。JDK是整个Java的核心，包括了Java运行环境(JRE)，一堆Java工具tools.jar和Java标准类库 (rt.jar)。</p><h4 id="面向对象四大特性">面向对象四大特性</h4><p>抽象 : 是将一类对象的共同特征总结出来构造类的过程,包括数据抽象和行为抽象两方面,抽象只关注对象的哪些属性和行为,并不关注这此行为的细节是什么 - 举例：定义一个persion类，了就是对<code>人</code>这种事物的抽象</p><p>封装：对数据的访问只能通过已定义的接口,封装就是隐藏一切可隐藏的东西,只向外界提供最简单的编程接口，比如在Java中，把不需要暴露的内容和实现细节隐藏起来，或者private修饰，然后提供专门的访问方法，如JavaBean。 - 生活举例：电脑主机就是把主板等封装到机壳，提供USB接口，网卡接口，电源接口等。    JavaBean就是一种封装。</p><p>继承：新类(子类，派生类)继承了原始类的特性，子类可以从它的父类哪里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。</p><p>多态：多态是指允许不同类的对象对同一消息做出响应。对象的多种形态，当编译时类型和运行时类型不一样，就是多态，意义在于屏蔽子类差异</p><h4 id="方法覆盖和重载">方法覆盖和重载</h4><p>方法的覆盖是子类和父类之间的关系，方法的重载是同一个类中方法之间的关系。<br>覆盖只能由一个方法，或只能由一对方法产生关系；方法的重载是多个方法之间的关系。<br>覆盖要求参数列表相同；重载要求参数列表不同。</p><h4 id="普通类和抽象类">普通类和抽象类</h4><p>抽象类不能被实例化, 需要通过子类实例化<br>抽象类可以有构造函数，被继承时子类必须继承父类一个构造方法，抽象方法不能被声明为静态。<br>抽象方法只需申明，而无需实现，抽象类中可以允许普通方法有主体<br>含有抽象方法的类必须申明为抽象类<br>抽象的子类必须实现抽象类中所有抽象方法，否则这个子类也是抽象类</p><h4 id="接口和抽象类">接口和抽象类</h4><p>定义接口使用interface，定义抽象类使用abstract class</p><p>接口由全局常量，抽象方法，（java8后：静态方法，默认方法）</p><p>抽象类由构造方法，抽象方法，普通方法</p><p>接口和类是实现关系，抽象类和类是继承关系</p><hr><h3 id="IO流">IO流</h3><h4 id="你知道BIO-NIO-AIO么？讲一下你的理解">你知道BIO,NIO,AIO么？讲一下你的理解</h4><p>AIO （ Asynchronous I/O）：异步非阻塞I/O 模型，适用于连接数目多且连接比较长（重操作）的架构</p><p>BIO （Blocking I/O）：同步阻塞I/O 模式，以流的方式处理数据，数据的读取写入必须阻塞在一个线程内等待其完成。适用于连接数目比较小且固定的架构</p><p>NIO （New I/O）：同时支持阻塞与非阻塞模式，以块的方式处理数据，适用于连接数目多且连接比较短（轻操作）的架构，比如聊天器</p><h4 id="java-中四大基础流">java 中四大基础流</h4><p>InputStream : 输入字节流, 也就是说它既属于输入流, 也属于字节流 ，</p><p>OutputStream: 输出字节流, 既属于输出流, 也属于字节流</p><p>Reader: 输入字符流, 既属于输入流, 又属于字符流</p><p>Writer: 输出字符流, 既属于输出流, 又属于字符流</p><h4 id="读文本用什么流，读图片用什么流">读文本用什么流，读图片用什么流</h4><p>文本用字符输入流，读图片用字节输入流</p><h4 id="字符流和字节流有什么区别">字符流和字节流有什么区别</h4><p>字符流适用于读文本，字节流适用于读图片，视频，文件等。</p><p>字节流操作的基本单元为字节；字符流操作的基本单元为Unicode码元。</p><p>字节流默认不使用缓冲区；字符流使用缓冲区。</p><p>字节流通常用于处理二进制数据，实际上它可以处理任意类型的数据，但它不支持直接写入或读取Unicode码元；字符流通常处理文本数据，它支持写入及读取Unicode码元</p><h4 id="BufferedInputStream-用到什么设计模式">BufferedInputStream 用到什么设计模式</h4><p>主要运用了俩个设计模式，适配器和装饰者模式</p><h4 id="带缓冲区的流">带缓冲区的流</h4><p>BufferedInputStream 带缓冲区的字节输入</p><p>BufferedOutputStream 带缓冲区的输出流</p><p>BufferedReader : 带缓冲区的字符输入流</p><p>BufferedWriter : 带缓冲区的字符输出流</p><hr><h3 id="集合篇">集合篇</h3><h4 id="说一下Java中的集合体系">说一下Java中的集合体系</h4><p>Collection接口</p><p>List：</p><ul><li><p>ArrayList：底层数据结构是数组，查询性能高，增删性能低</p></li><li><p>Vector：底层数据结构是数组，查询性能高，增删性能低</p></li><li><p>LinkedList：底层数据结构是双向链表，查询性能低，增删性能高</p></li></ul><p>Set：</p><ul><li><p>HashSet：无序不重复的，使用HashMap的key存储元素，判断重复依据是hashCode()和equals()</p></li><li><p>TreeSet：有序不重复的，底层使用TreeMap的key存储元素，排序方式分为自然排序，比较器排序</p></li></ul><p>Map接口</p><ul><li>HashMap：key的值没有顺序，线程不安</li><li>TreeMap：key的值可以自然排序，线程不安全</li><li>HashTable：它的key和value都不允许为null，线程安全</li><li>ConcurrentHashMap：加强版的TreeMap，能抗高并发</li><li>Properties：它的key和value都是String类型的，线程安全</li></ul><h4 id="HashMap和HashTable的区别">HashMap和HashTable的区别</h4><p>HashMap和HashTable都是实现了Map接口的集合框架，他们的区别</p><ul><li><p>HashTable是线程安全的，它的实现方法都加了synchronized关键字，因此它的性能较低</p></li><li><p>HashMap是线程不安全的，它实现方法没有加synchronized，因此它的性能较高</p></li><li><p>HashMap的key和value都允许为null，HashTable中的key和value都不能为null,如果不考虑线程安全，建议使用HashMap，如果需要考虑线程安全的高并发实现，建议使用ConcurrentHashMap</p></li></ul><h4 id="ArrayList和Vector区别">ArrayList和Vector区别</h4><p>ArrayList是线程不安全的，Vector相反是线程安全的，方法加了同步锁，线程安全但是性能差，ArrayList底层数组容量不足时，会自动扩容0.5倍，Vector会自动扩容1倍</p><h4 id="一个User的List集合，如何实现根据年龄排序">一个User的List集合，如何实现根据年龄排序</h4><p>第一种方式，让User类实现Comparable接口，覆写compareTo方法，方法中自定义根据年龄比较的算法</p><p>第二种方式，调用Collections.sort方法，传入一个比较器，覆写compare方法，方法中自定义根据年龄比较的算法</p><h4 id="HashMap底层用到了那些数据结构？">HashMap底层用到了那些数据结构？</h4><p>JDK1.7及其之前：数组，链表 ; JDK1.8开始：数组，链表，红黑树</p><h4 id="什么是Hash冲突">什么是Hash冲突</h4><p>哈希冲突，也叫哈希碰撞，指的是两个不同的值，计算出了相同的hash，也就是两个不同的数据计算出同一个下标，通常解决方案有：</p><ul><li><p>拉链法，把哈希碰撞的元素指向一个链表</p></li><li><p>开放寻址法，把产生冲突的哈希值作为值，再进行哈希运算，直到不冲突</p></li><li><p>再散列法，就是换一种哈希算法重来一次</p></li><li><p>建立公共溢出区，把哈希表分为基本表和溢出表，将产生哈希冲突的元素移到溢出表</p></li></ul><h4 id="HashMap为什么要用到链表结构">HashMap为什么要用到链表结构</h4><p>当我们向HashMap中添加元素时，会先根据key尽心哈希运算，把hash值模与数组长度得到一个下标，然后将该元素添加进去。但是如果产生了哈希碰撞，也就是不同的key计算出了相同的hash值，这就出问题了，因此它采用了拉链法来解决这个问题，将产生hash碰撞的元素，挂载到链表中</p><h4 id="HashMap为什么要用到红黑树">HashMap为什么要用到红黑树</h4><p>当HashMap中同一个索引位置出现哈希碰撞的元素多了，链表会变得越来越长，查询效率会变得越来越慢。因此在JDK1.8之后，当链表长度超过8个，会将链表转坏为红黑树来提高查询</p><h4 id="HashMap链表和红黑树在什么情况下转换的？">HashMap链表和红黑树在什么情况下转换的？</h4><p>当链表的长度大于等于8，同时数组的长度大于64，链表会自动转化为红黑树,当树中的节点数小于等于6，红黑树会自动转化为链表</p><h4 id="HashMap在什么情况下扩容？HashMap如何扩容的？">HashMap在什么情况下扩容？HashMap如何扩容的？</h4><p>HashMap的数组初始容量是16，负载因子是0.75，也就是说当数组中的元素个数大于12个，会成倍扩容</p><p>tips:为啥子是0.75：负载因子过小容易浪费空间，过大容易造成更多的哈希碰撞，产生更多的链表和树，因此折衷考虑采用了0.75</p><p>为啥子是成倍扩容：需要保证数组的长度是2的整数次幂</p><p>为嘛数组的长度必须是2的整数次幂：我们在存储元素到数组中的时候，是通过hash值模与数组的长度，计算出下标的。但是由于计算机的运算效率，加减法&gt;乘法&gt;除法&gt;取模，取模的效率是最低的。开发者们为了让你用的开心，也是呕心沥血。将取模运算转化成了与运算，即数组长度减1的值和hash值的与运算，以此来优化性能。但是这个转化有一个前提，就是数组的长度必须为2的整数次幂</p><h4 id="HashMap是如何Put一个元素的">HashMap是如何Put一个元素的</h4><p>首先，将key进行hash运算，将这个hash值与上当前数组长度减1的值，计算出索引。此时判断该索引位置是否已经有元素了，如果没有，就直接放到这个位置</p><p>如果这个位置已经有元素了，也就是产生了哈希碰撞，那么判断旧元素的key和新元素的key的hash值是否相同，并且将他们进行equals比较，如果相同证明是同一个key，就覆盖旧数据，并将旧数据返回，如果不相同的话</p><p>再判断当前桶是链表还是红黑树，如果是红黑树，就按红黑树的方式，写入该数据，</p><p>如果是链表，就依次遍历并比较当前节点的key和新元素的key是否相同，如果相同就覆盖，如果不同就接着往下找，直到找到空节点并把数据封装成新节点挂到链表尾部。然后需要判断，当前链表的长度是否大于转化红黑树的阈值，如果大于就转化红黑树，最后判断数组长度是否需要扩容。</p><h4 id="HashMap是如何Get一个元素的">HashMap是如何Get一个元素的</h4><p>首先将key进行哈希运算，计算出数组中的索引位置，判断该索引位置是否有元素，如果没有，就返回null,如果有值，判断该数据的key是否为查询的key，如果是就返回当前值的value</p><p>如果第一个元素的key不匹配，判断是红黑树还是链表,如果是红黑树，就就按照红黑树的查询方式查找元素并返回,如果是链表，就遍历并匹配key，让后返回value值</p><h4 id="你知道HahsMap死循环问题吗">你知道HahsMap死循环问题吗</h4><p>HashMap在扩容数组的时候，会将旧数据迁徙到新数组中，这个操作会将原来链表中的数据颠倒，比如a-&gt;b-&gt;null，转换成b-&gt;a-&gt;null</p><p>这个过程单线程是没有问题的，但是在多线程环境，就可能会出现a-&gt;b-&gt;a-&gt;b…，这就是死循环</p><p>在JDK1.8后，做了改进保证了转换后链表顺序一致，死循环问题得到了解决。但还是会出现高并发时数据丢失的问题，因此在多线程情况下还是建议使用ConcurrentHashMap来保证线程安全问题</p><h4 id="说一下你对ConcurrentHashMap的理解">说一下你对ConcurrentHashMap的理解</h4><p>ConcurrentHashMap，它是HashMap的线程安全，支持高并发的版本</p><p>在jdk1.7中，它是通过分段锁的方式来实现线程安全的。意思是将哈希表分成许多片段Segment，而Segment本质是一个可重入的互斥锁，所以叫做分段锁。</p><p>在jdk1.8中，它是采用了CAS操作和synchronized来实现的，而且每个Node节点的value和next都用了volatile关键字修饰，保证了可见性</p><hr><h2 id="二-JavaEE-框架-中间件">二.JavaEE&amp;框架&amp;中间件</h2><h3 id="数据库基础">数据库基础</h3><h4 id="平局值用什么，分组用什么">平局值用什么，分组用什么</h4><p>统计平局值：avg  , 分组：group by</p><h4 id="两个相同列的结果集求并集用什么">两个相同列的结果集求并集用什么</h4><p>union 并集 , union all(允许重复并集)</p><h4 id="完整查询SQL中的关键字的定义顺序">完整查询SQL中的关键字的定义顺序</h4><p>SELECT 列名 FROM 表1 JOIN  表2  ON  条件  WHERE 条件  GROUP BY  列名  HAVING  条件  ORDER BY  列名    LIMIT</p><h4 id="完整的多表JOIN查询，SQL中关键字的执行顺序">完整的多表JOIN查询，SQL中关键字的执行顺序</h4><p>FROM  --&gt;  ON  --&gt;  JOIN  --&gt;  WHERE  --&gt;  GROUP BY  --&gt;  HAVING  --&gt;  ORDER BY  --&gt;  LIMIT</p><h4 id="员工表employee字段有-id-username-amount-deptname">员工表employee字段有: id, username, amount ,deptname .</h4><ul><li>求每个部门总人数怎么做 ,</li></ul><p>select 部门名,count(id) from employee group by deptname</p><ul><li>求每个部门总工资怎么做?</li></ul><p>select 部门名,sum(amount) from employee group by deptname</p><h3 id="Spring部分">Spring部分</h3><h4 id="介绍一下Spring">介绍一下Spring</h4><p>Spring是一个开源的轻量级控制反转和面向切面编程的容器框架。轻量级是说它开发使用简单，功能强大。控制反转是指将对象的创建，销毁控制交给ioc容器，方便解耦合，降低维护难度，面向切面编程是指将相同的逻辑横向抽取出来，可以对一些通用业务如事务，日志进行集中管理</p><h4 id="说下Spring框架的组成">说下Spring框架的组成</h4><ol><li>CoreContain核心容器模块：<ol><li>spring-core：提供框架的基本组成部分，包括 IoC 和依赖注入功能</li><li>spring-beans：提供 BeanFactory，工厂模式</li><li>context：提供国际化，事件传播，资源加载等功能</li><li>spring-ExpressionLanguage：提供表达式语言</li></ol></li><li>Web模块<ol><li>Web：提供面向web的基本功能和面向web的应用上下文</li><li>Web-MVC：为web应用提供模型视图控制（MVC）</li><li>Web-Socket：在 web 应用程序中提供客户端和服务器端之间通信的方式</li><li><strong>Web-Portlet：模块提供了用于Portlet环境的MVC实现</strong></li></ol></li><li>数据/集成模块<ol><li>JDBC：包含了Spring对JDBC数据访问进行封装的所有类</li><li>ORM：为对象-关系映射提供交互层</li><li>OXM：提供对Object/XML映射实现的抽象层</li><li>JMS：主要包含了一些制造、消费和消息的功能</li><li><strong>Transaction：为实现特殊接口类以及所有的 POJO 支持编程式和声明式的事务管理</strong></li></ol></li><li>其他模块<ol><li>AOP：提供了面向切面编程相关实现</li><li>Aspects：模块提供了与AspectJ的集成，是一个功能强大的AOP框架</li><li><strong>Instrumentation：提供了class instrumentation 的支持和类加载器classloader的实现</strong></li><li><strong>Messaging：为 STOMP 提供支持</strong></li><li>Test：支持使用JUnit和TestNG对Spring组件进行测试</li></ol></li></ol><h4 id="什么是Spirng的IOC">什么是Spirng的IOC</h4><p>IOC控制反转，把对象的创建，属性设置，初始化，销毁等工作交给Spirng的IOC容器去管理，解放程序员的劳动力。</p><p>对象被注册到Spring的IOC容器中，使用的时候从容器中获取即可，非常方便。</p><p>它通过依赖注入，将需要的外部资源注入到组件中，使用IOC使得对象之间的耦合度降低，资源变得容易管理，从而使得代码更加优雅</p><h4 id="你对AOP的理解">你对AOP的理解</h4><p>AOP，Aspect Oriented Programming 英文首字母缩写，意为面向切面编程，是Spring的核心思想之一</p><p>AOP是对OOP(面向对象编程)的一种补充，能够做到很多面向对象无法做到的事情，比如需要在所有方法执行前开启事务，打印日志，如果使用面向对象来编程，将会产生大量重复代码，而使用AOP，可以将那些与业务无关，却为业务模块所共同调用的逻辑封装起来，一次解决这些问题。而这些重复的代码，一般统称为横切逻辑代码</p><p>使用AOP，在不改变原有业务逻辑的情况下，实现解耦合，避免横切逻辑代码重复</p><p>AOP的使用场景包括日志记录，性能统计，安全控制，事务处理，异常处理等等</p><p>它是基于动态代理实现的，分为JDK动态代理和CGLIB动态代理。JDK动态代理只支持实现了接口的类 ，CGLIB支持没有实现接口的类。Spring默认使用JDK动态代理，如果被代理类没有实现接口，会选择CGLIB动态代理</p><h4 id="Spring的Bean懒加载和非懒加载有什么区别">Spring的Bean懒加载和非懒加载有什么区别</h4><p>懒加载：需要使用对象的时候才创建，节省资源，但不利于提前发现错误</p><p>非懒加载，也叫迫切加载，容器启动时就创建对象，消耗资源，但有利于提前发现错误</p><p>spring中默认时迫切加载，即在项目启动时，spring会扫描符合条件的所有bean并将其初始化</p><p>如果需要懒加载，可以使用@Lazy注释或者xml中配置属性default-lazy-init=“true”</p><h4 id="Spring的依赖注入方式有哪些">Spring的依赖注入方式有哪些</h4><p>方式一：setter方式注入，通过反射调用无参构造方法生成对象，再通过对于的setter方法注入配置的值，支持注解和xml两种实现方式</p><p>方式二：构造器方式注入，通过反射调用有参构造方法生成对象，支持注解和xml两种实现方式</p><p>注解实现方式：@Autowired，它是默认按类型匹配的、@Resource，它是默认按名字匹配的</p><h4 id="说一下定义切面相关的注解">说一下定义切面相关的注解</h4><p>@Aspect：定义切面</p><p>@Pointcut：定义切点 =   cn.xx.service.*</p><p>@Before：前置通知，在目标方法运行之前运行</p><p>@After：后置通知，在目标方法运行结束之后运行（无论方法正常结束还是异常结束）</p><p>@AfterReturning：返回通知，在目标方法正常返回之后运行</p><p>@AfterThrowing：异常通知，在目标方法出现异常以后运行</p><p>@Around：动态代理，手动推进目标方法运行</p><h4 id="Bean的四种注册方式">Bean的四种注册方式</h4><p>方式一：普通注册方式，直接通过class注册</p><p>方式二：简单静态工厂方式注册</p><p>方式三：简单实例工厂方式注册</p><p>方式四：FactoryBean方式注册</p><h4 id="注册Bean的注解有哪些">注册Bean的注解有哪些</h4><p>@Controller/@RestController 一般用于定义控制层的类</p><p>@Service一般用于定义服务层的类</p><p>@Repository一般用于定义持久层类</p><p>@Component定义一般类</p><p>@Configuration 定义配置类</p><h4 id="IOC的启动流程有了解过吗">IOC的启动流程有了解过吗</h4><p>当Spring启动时，IOC容器会加载Spring的配置文件，包括XML配置或者注解，然后解析这些Bean并把相关定义信息封装成BeanDefinition对象，通过Bean注册器BeanDefinitionRegistry注册到IOC容器，也就是一个ConcurrentHashMap中</p><p>此时会找出所有的单例且非惰性加载的bean，根据其BeanDefinition进行Bean的实例化，它会判断如果bean中有方法覆盖，就使用JDK反射创建Bean，否则使用CGLIB方式生成代理。然后把实例化好的Bean缓存到一个ConcurrentHashMap中</p><h4 id="Bean的生命周期讲一下">Bean的生命周期讲一下</h4><p>从宏观的角度来说就是：实例化 ，属性注入，初始化，使用，销毁。更细的生命周期如下</p><ol><li><p>实例化：如果是单例且迫切加载的bean，在Spring容器启动时就会根据BeanDefinition进行实例化，如果时设置了懒加载或者多例模式的bean，在用的时候才会实例化</p></li><li><p>属性赋值：通过BeanDeifinition找到当前Bean所依赖的其他Bean，如果容器中有就直接拿过来，如果没有就根据创建流程区创建依赖的bean，然后通过反射给依赖的字段注入值</p></li><li><p>然后会调用BeanPostProcessor的前置处理器，对于@Autowired和@Transcational就是基于BeanPostProcessor来实现的。</p></li><li><p>接着会看Bean是否实现InitializingBean ，如果有会触发其afterPropertiesSet方法的调用</p></li><li><p>接着是调用我们自定义的bean的init-method方法，此时会调用执行</p></li><li><p>然后是调用BeanPostProcessor的后置处理</p></li><li><p>容器正常关闭，Bean进行销毁，会先调用实现了DisposableBean的destory方法。</p></li><li><p>接着调用我们指定的bean的destroy-method方法，此时会调用执行</p></li></ol><h4 id="单例多例的区别">单例多例的区别</h4><p>单例和多例属于对象模式，单例模式指对象在整个系统中只存在一份，多例模式则可以有多个实例。</p><p>在spring的ioc容器中的bean默认都是单例的，如果需要使用多例，可以通过修改scope属性：scope=“prototype”</p><p>如果一个bean是单例模式的，在处理多次请求的时候，在ioc容器中只实例化一个bean，这个对象会被保存在一个map中，当有请求来的时候，会先从map中查看，如果有就直接使用这个对象，没有才会实例化新的对象。</p><p>如果是多例(prototype)模式的bean，每次请求来的时候，会直接实例化新的bean，没有map缓存的过程。</p><h4 id="Spring的Bean被指定为prototype以及singleton有什么区别">Spring的Bean被指定为prototype以及singleton有什么区别</h4><p>这两者分别指的是多例和单例模式，singleton即单例模式，指对象在整个系统中只存在一份；prototype即多例模式系统中可以有多个实例。</p><p>如果一个bean是单例模式的，在处理多次请求的时候，在ioc容器中只实例化一个bean，这个对象会被保存在一个map中，当有请求来的时候，会先从map中查看，如果有就直接使用这个对象，没有才会实例化新的对象。</p><p>如果是多例模式的bean，每次请求来的时候，会直接实例化新的bean，没有map缓存的过程。</p><p>在spring的ioc容器中的bean默认都是单例的，如果需要使用多例，可以指定scope属性：scope=“prototype”</p><h4 id="BeanFactory和ApplicationContext有什么区别">BeanFactory和ApplicationContext有什么区别</h4><p>BeanFactory接口是IOC容器的核心接口，定义了管理bean的最基本方法，比如实例化，配置，管理，获取bean的方法</p><p>ApplicationContext接口是BeanFactory接口的子接口，除了继承BeanFactory中所有管理bean的方法，还拥有环境、国际化、资源、事件等服务相关的接口</p><p>BeanFactory是延迟加载，ApplicationContext是迫切加载</p><h4 id="BeanFactory和FactoryBean的区别">BeanFactory和FactoryBean的区别</h4><p>BeanFactory接口是IOC容器的核心接口，定义了管理bean的最基本方法，比如实例化，配置，管理，获取bean的方法</p><p>FactoryBean是IOC容器创建bean的一种形式，可以通过实现此接口来创建实例化过程比较复杂的bean</p><h4 id="IOC容器是如何保证Bean的单例的？">IOC容器是如何保证Bean的单例的？</h4><p>IOC容器会将单例模式的bean放入一个ConcurrentHashMap中，需要这个bean时直接到这个map中获取，如果没有找到才会实例化这个bean。而ConcurrentHashMap本身时线程安全的，也就保证了Bean是单例的</p><h4 id="Spring如何解决Bean的循环依赖">Spring如何解决Bean的循环依赖</h4><p>循环依赖分为三种，构造器注入循环依赖 ，setter方式注入循环依赖，多例模式Bean的循环依赖。而Spring解决了单例bean的setter注入循环依赖</p><p>setter循环依赖的解决主要使用了三级缓存</p><ul><li>一级缓存，用来缓存已经实例化好的bean，即单利Bean缓存池</li><li>二级缓存，用来缓存正在创建的bean</li><li>三级缓存，用来缓存创建bean的实例工厂ObjectFactory</li></ul><p>假设有两个bean，A依赖B，B依赖A</p><p>当实例化好A，在属性注入环境，发现A依赖了B，会先将正在创建的A的实例工厂ObjectFactory放入三级缓存，然后去创建B的实例。</p><p>走Bean的实例化流程创建B，在B的属注入环节发现，B依赖了A，这个时候就会去三级缓存中，找到A的创建工厂ObjectFactory获取A的实例，并注入到B中。此时B就初始化好了，然后将B实例放入一级缓存。最后将B实例注入到A中，A也就创建好了</p><p>在getBean的时候，如果单利Bean缓存池没有Bean,就会走二级缓存尝试获取，如果也没有，就会走三级缓存拿到Bean的ObjectFacory创建Bean,然后把Bean放入二级缓存。</p><h4 id="Spring构造器注入能循环依赖吗">Spring构造器注入能循环依赖吗</h4><p>构造注入不能解决循环依赖的原因是：如果A的构造其中依赖了B B的构造器中又依赖了A  在getSingleton中三级缓存需要调用getObject()构造器，来构造提早暴露但未设置属性的bean，此时就会产生无限递归创建</p><p>多例模式下Bean是不做缓存的，所以就没法暴露ObjectFactory，也就没办法解决循环依赖</p><h4 id="说几个Spring的IOC的容器工厂类">说几个Spring的IOC的容器工厂类</h4><p>BeanFactory：IOC容器顶层接口，提供了Bean获取的基础方法</p><p>DefaultListableBeanFactory：是整个 bean 加载的核心部分，Spring 注册及加载Bean 的默认实现</p><p>ApplicationContext：除了实现IOC基本功能外，还扩展了国际化支持，资源访问，事件发布</p><p>ClasspathXmlApplicationContext：从classpath中获取XML配置</p><h4 id="你知道Spring的AOP主要基于什么设计模式实现吗">你知道Spring的AOP主要基于什么设计模式实现吗</h4><p>AOP的实现原理是基于动态代理，动态代理就是在运行时期动态的为原生类生成代理类以达到代码增强的目的，且代理类是持有原生类的，可以在代理类中调用原生类以及做一些增强业务。</p><p>动态代理分为JDK动态代理和CGLIB代理，CGLIB代理需要导入相关的jar包，两者的区别是JDK动态代理要求目标类需要实现至少一个接口。而CGLIB则是基于继承进行代理，原生类可以不实现任何接口</p><p>Spring中默认采用JDK动态代理，如果原生类没有实现任何接口，Spring会选择CGLIB代理，或者你可以在配置文件中强制指定使用CGLIB代理</p><h4 id="你知道-Autowaire自动注入的实现原理吗？">你知道@Autowaire自动注入的实现原理吗？</h4><p>自动注入是通过BeanPostProcessor 后置处理器AutowiredAnnotationBeanPostProcessor完成的，在Bean实例化过程中，触发了AutowiredAnnotationBeanPostProcessor的postProcessPropertyValues方法的调用执行，它就会扫描当前类中是否有@Autowired注解，然后得到自动注入依赖的bean的类型，并去容器中得到依赖的bean实例，如果没有就走Bean的实例化流程创建依赖的Ban，然后反射进行字段赋值。</p><h4 id="你知道-Transcational注解的实现原理吗？">你知道@Transcational注解的实现原理吗？</h4><p>分为两个动作把，第一个是解析@Transcational注解，在Sping中有个后置处理器InfrastructureAdvisorAutoProxyCreator，在Bean的初始化过程中，它负责解析标记了@Transcational注解的类，生成代理。还创建了 TransactionAttributeSource ，它是对事务注解的封装，以及 TransactionInterceptor 事务拦截器。</p><p>在执行业务方法的时候，代码会进入事务拦截器TransactionInterceptor去执行事务相关的代码，TransactionInterceptor主要是通过调用TranscationManagerment的事务API，而TranscationManagerment又是调用connection的事务API完成事务操作。</p><h3 id="Javaweb基础">Javaweb基础</h3><h4 id="常见Http状态码">常见Http状态码</h4><p>200 成功返回状态</p><p>301 永久重定向，被请求的资源永久移动到新位置</p><p>302 临时重定向，被请求的资源临时移动到新的位置，项目中使用了oauth2，对目标资源访问无权限时就会见到，它是会重定向到授权地址</p><p>401 无权限访问</p><p>403 禁止访问，服务器已经接收到请求，但拒绝执行</p><p>404 找不到该资源</p><p>500 服务器内部错误 zuul找不到服务名就会见到</p><p>503 服务器内部错误 服务器维护或者过载</p><p>504 网关超时</p><h4 id="Servlet的生命周期">Servlet的生命周期</h4><p>Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</p><ul><li>Servlet 初始化后调用 <strong>init ()</strong> 方法。</li><li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</li><li>Servlet 销毁前调用 <strong>destroy()</strong> 方法。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><h4 id="什么是过滤器？怎么创建一个过滤器">什么是过滤器？怎么创建一个过滤器</h4><p>过滤器：在请求发送之后，处理之前对请求的一次拦截，可以更改请求状态或者参数值等。</p><p>创建过滤器：实现filter接口，重写doFilter方法，最后在web.xml中配置过滤器</p><h4 id="讲一下Session的工作原理">讲一下Session的工作原理</h4><p>服务端的session id会自动写入客户端的cookie中，每次请求客户端回自动把cookie带入后台，后台自动根据cookie中的sessionid就能找到session</p><h4 id="Session和cookie有什么区别">Session和cookie有什么区别</h4><p>session和cookie都是为了弥补http协议的无状态特性，解决会话问题</p><p>session是以ConcurrentHashMap结构存储在服务器端，同时生成一个sessionid返回客户端并存放到cookie中</p><p>cookie是将数据存储在客户浏览器端</p><p>session占用服务器的性能，但安全性较高，使用cookie减轻服务器的压力，但有被用户篡改风险因此安全性较低</p><h4 id="说说preparedStatement和Statement的区别">说说preparedStatement和Statement的区别</h4><p>statement的sql语句使用字符串拼接，很容易出错，而preparedStatement使用？作为占位符，不容易出错易于维护</p><p>statement不对sql语句作处理，直接交给数据库，而preparedStatement支持预编译，事先将编译好的sql语句放到数据库端，相当于缓存，因此效率更高</p><p>statement有sql注入风险，preparedStatement没有sql注入风险</p><h4 id="请求转发和重定向的区别">请求转发和重定向的区别</h4><p>转发是一次请求，可以共享同一组request和response，重定向是多次请求，不能共享同一组request和response</p><p>转发地址栏不会发生变化，重定向地址栏会发生变化</p><p>转发不能到外部应用，重定向可以到尾部应用</p><p>如果我们需要数据共享，使用转发，如果需要访问内部资源(WEB-INF)，使用转发，如果需要跨域到外部资源，必须使用重定向</p><h4 id="get和post请求的区别">get和post请求的区别</h4><p>最直观的区别，get把参数包含在url中，post是把参数放到request body中</p><p>post相对于get更安全,post发送的数据更大，get有url的长度限制</p><p>post更发送更多的数据类型，get只能发送ASCII字符</p><p>在restful中，get一般用户查询搜索数据，post一般用户添加或者修改数据</p><h4 id="JSP的原理">JSP的原理</h4><p>jsp的本质就是servlet,每个JSP文件都回被编译成一个Serverlet去执行，在该Serverlet会对JSP中的动态内容进行替换，静态部分是标准的html，动态部分是java程序</p><h3 id="SpringMVC部分">SpringMVC部分</h3><h4 id="SpringMVC怎么样设定重定向和转发的">SpringMVC怎么样设定重定向和转发的</h4><p>重定向是指将用户从当前请求重新定向到一个视图页面，或者是一个handler处理请求，以前的request域中信息全部失效，同时地址栏会发生变化，它是客户端行为</p><p>转发是指将用户从当前请求转发给另一个视图页面或者handler处理请求，以前的request域可以共享，地址栏不会发生变化，它是服务器行为</p><p>springmvc默认是使用转发方式跳转的，且会默认经过视图解析器,我们也可以通过指定，转发时在返回值前面加&quot;forward:“，重定向时在返回值前面加&quot;redirect:”，且此时就不会再经过视图解析器了</p><h4 id="SpringMVC如何对时间格式的参数进行格式化">SpringMVC如何对时间格式的参数进行格式化</h4><p>第一种需求，后台接收前台页面返回的string类型时间，要转换成的Date类型数据，可以使用@DateTimeFormat注解来接收参数</p><p>第二种需求，后台将Date类型数据返回给前台页面，默认是返回时间戳，如果想要优雅的格式，可以在模型的Date字段或get方法上使用@JsonFormat注解</p><h4 id="SpringMVC常用的注解有哪些">SpringMVC常用的注解有哪些</h4><p>@Controller：用来标识一个类是控制器类</p><p>@RequestMapping：用来映射请求路径和参数</p><p>@ResponseBody：将返回值放到responsebody中，通常返回json或者xml格式数据</p><p>@RequestBody：将前台请求参数转换成对象</p><p>@PathVariable：接收路径参数，通常用在restful接口中</p><p>@RestController：@Controller和@ResponseBody的组合注解</p><p>@ControllerAdvice：运用aop的思想，对全局做一些处理，比如结合@ExceptionHandler做全局异常捕获</p><h4 id="如何定义SpringMVC的拦截器">如何定义SpringMVC的拦截器</h4><p>SpringMVC 的拦截器主要用于拦截用户的请求并做相应的处理，通常应用在权限验证、判断登录等功能上</p><p>第1步，定义拦截器：可以实现 HandlerInterceptor 接口来自定义拦截器，接口定义了三个方法，preHandler方法是在请求到达处理器之前执行，postHandler方法是在请求经过处理器之后、解析试图之前执行，afterCompletion方法是在视图渲染之后、返回客户端之前执行</p><p>第2步，配置拦截器：在springmvc的配置文件xml中，配置所有拦截路径，以及需要放行的路径</p><h4 id="HandlerInterceptor和HandlerInterceptorAdapter的区别">HandlerInterceptor和HandlerInterceptorAdapter的区别</h4><p>HandlerInterceptor是接口，我们可以实现该接口来定义拦截器，HandlerInterceptorAdapter是抽象类，它实现了HandlerInterceptor接口的子接口AsyncHandlerInterceptor，我们可以继承该类来定义拦截器，它简化拦截器的实现，默认preHandler返回true</p><h4 id="SpringMVC的执行原理">SpringMVC的执行原理</h4><p>1.Http请求：客户端请求提交到DispatcherServlet-前端控制器</p><p>2.寻找处理器：由DispatcherServlet调用HandlerMapping-处理器映射器，根据url找到对应的的Handler</p><p>3.调用处理器：DispatcherServlet指定HandlerAdapter-处理器适配器去调用Handler</p><p>4.调用业务处理和返回结果：Handler调用业务逻辑处理完成后，返回ModelAndView</p><p>5.处理视图映射并返回模型： DispatcherServlet查询一个或多个ViewResoler-视图解析器，找到ModelAndView指定的视图</p><p>6.Http响应：将结果显示到客户端</p><h4 id="SpringMVC的Controller是单例还是多例，有没有并发安全问题，如何解决">SpringMVC的Controller是单例还是多例，有没有并发安全问题，如何解决</h4><p>在spring中，bean默认都是单例的，controller也是交给spring容器管理的一个bean，因此它也是单例的。</p><p>单例的好处是减少了创建对象和垃圾回收的时间，节省了内存资源，但同时单例会造成线程不安全的问题，因为当所有请求访问同一个controller实例，controller中的成员变量是所有线程公用的，某个线程如果修改了这个变量，别的请求再来拿这个变量就编程修改后的值了</p><p>要解决这个问题，最直接有效的方式就是不要在controller中定义成员变量，如果你非要定义成员变量，两种方式</p><p>第一种，可以给controller上加注解@Scope(“prototype”)，将controller设置为多例模式，每次请求都重新实例化一个controller</p><p>第二种，使用ThreadLocal变量，让每一个线程都有自己独立的变量</p><h4 id="RequestMapping-和-GetMapping有什么区别">RequestMapping 和 GetMapping有什么区别</h4><p>@Getmapping是一个组合注解，即是@RequestMapping(method =  RequestMethod.GET)的缩写，意思是只接收get请求的方法</p><p>@Requestmapping如果没有指定请求方式，可以接收get，put等各种类型的请求</p><h3 id="SpringBoot部分">SpringBoot部分</h3><h4 id="相比Spring-Spring-Boot有哪些优点">相比Spring,Spring Boot有哪些优点</h4><p>Springboot是一个基于spring的框架，对spring做了大量简化，使开发流程更快，更高效</p><p>它大量简化maven依赖，管理了大量的基础依赖</p><p>基于注解配置（JavaConfig），无需xml配置</p><p>内嵌Tomcat，部署流程简单</p><p>打包和部署更加灵活，允许独立运行</p><h4 id="SpringBoot如何做全局异常处理">SpringBoot如何做全局异常处理</h4><p>可以使用@ControllerAdvice注解，编写一个全局异常处理类，再自定义一个方法使用@ExceptionHandler来捕获具体的异常并作相应的处理</p><p>通常情况下后台向前台返回结果时，会把结果封装成包含有错误码，错误信息以及数据本身的json数据，因此我们可以使用自定义异常类，自定义枚举错误码，在捕获全局异常后，向前台返回一个包含错误码的信息</p><h4 id="SpringBootApplication注解的含义">@SpringBootApplication注解的含义</h4><p>@SpringBootApplication是SprnigBoot项目的核心注解，目的是开启自动配置，并表示该类为主启动类。它包含三个子标签</p><ul><li>@ComponentScan注解：开启ioc自动扫描注解，默认扫描当前包及其子包中@Controller,@Service等，并把这些bean加载到ioc器中</li><li>@EnableAutoConfiguration注解：启用springboot自动配置，自动所有扫描classpath目录下面所有jar中的spring.factories文件实现配置类批量注册</li><li>@SpringBootConfiguration注解：标志该类为springboot配置类</li></ul><h4 id="spring-boot-starter-parent的作用">spring-boot-starter-parent的作用</h4><p>这是SpringBoot的父工程，它的作用是帮我们管理了很多的基础jar包，同时它继承了spring-boot-dependencies，在spring-boot-dependencies项目中通过<dependencyManagement>管理了大量的依赖，同时通过<properties>维护了这些依赖的版本号</p><p>但是在项目中，还需要通过<dependencies> 去导入具体的依赖才能使用</p><h5 id="spring-boot-starter-web的作用">spring-boot-starter-web的作用</h5><p>此项目是Springboot和Springmvc整个的jar包，构建了web项目的基本环境，集成了日志，tomcat，springmvc，json支持等等</p><h4 id="SpringBoot中如何读取配置">SpringBoot中如何读取配置</h4><p>方式一：使用@Value读取配置文件</p><p>方式二：使用@ConfigurationProperties读取配置文件</p><h4 id="SpringBoot中日志的level有哪些">SpringBoot中日志的level有哪些</h4><p>日志级别从低到高分别为：</p><p>TRACE &lt; DEBUG &lt;INFO &lt;WARN &lt; ERROR</p><p>如果设置为 WARN，则低于 WARN 的信息都不会输出</p><p>Spring中默认使用INFO级别输出到控制台</p><h4 id="SpringBoot中如何管理事务">SpringBoot中如何管理事务</h4><p>事务(transaction)是指业务逻辑上对数据库进行的一系列持久化操作，要么全部成功，要么全部失败。</p><p>在Springboot中，可以通过xml配置和注解配置</p><p>xml方式通过配置DataSourceTransactionManager和transactionManager实现</p><p>注解方式配置通过在主启动类上加上@EnableTransactionManagement开启事务管理器，在具体的实现层service类上加上@Transactional 实现事务</p><h4 id="SpringBoot自动配置原理">SpringBoot自动配置原理</h4><p>在启动类上我们会打上： @SpringBootApplication 注解，它是一个组合标签，包括：</p><ul><li>SpringBootConfuration ,本质是一个 Configuration ，代表Spring的配置类。</li><li>IOC自动扫描的注解 ，ComponentScan 会去扫描类上是否有：@Component ,@Respository ,@Service @Controller ,如果有，就会把这个类自动注册到Spring容器中。</li><li>EnableAutoConfiguration ：就是启动SpringBoot自动配置的注解</li></ul><p>在 @EnableAutoConfiguration 注解中，注册了一个选择器，其中有一个方法会去返回很多的自动配置的的全限定名，这些类会自动注册到Spring容器中，</p><p>那它是怎么去找到这些所谓的自动配置类的呢？</p><p>他会通过Spring的SPI接口，也就是通过一个SpringFactoryLoader去扫描 classpath中的所有的jar包中的MET-INF/spring.factories 中的自动配置类，比如： DispatchServlert就对应了DispatchServlertAutoConfiguration自动配置类 ， 它通过@Bean+方法的方式注册了一个 DispatchServlert 到Spring容器中了</p><h4 id="SpringBoot启动流程">SpringBoot启动流程</h4><p>1.开启秒表计时</p><p>2.starting监听器，</p><p>3.处理应用参数</p><p>4.加载环境对象</p><p>5.打印横幅</p><p>6.创建Spring容器对象：AnnotationConfigApplicationContext</p><p>7.容器刷新的前置工作</p><p>8.刷新容器 ，这里会执行spring的ioc属性容器的refrsh方法,Bean的加载，初始化等都在这个里面，Tomcat的启动也在这个方法里面。</p><p>9.刷新容器后置工作</p><p>10.秒表停止</p><p>11.started事件</p><p>12.调用runner</p><p>13.running.listeners.</p><h3 id="Mybatis部分">Mybatis部分</h3><h4 id="MyBatis中-取值和-取值的区别">MyBatis中${}取值和#{}取值的区别</h4><p>#{}能够防止SQL注入，因为底层使用PreparedStatement对象，预编译，性能较高</p><p>${}不能防止SQL注入，因为底层使用Statement对象，不会预编译而是拼接字符串，性能较低</p><p>能使用#{}时尽量使用#{}，如果需要动态传入表名或者字段名需要用 ${}比如，像 ORDER BY 时只能使用${}</p><h4 id="MyBatis关联查询中，延迟加载和饥饿加载的区别">MyBatis关联查询中，延迟加载和饥饿加载的区别</h4><p>延迟加载，是先从单表查询，需要使用关联数据的时候才发起关联查询，不用的时候不查询关联的数据，又叫懒加载,饥饿加载，是在查询时将关联的数据立即查询出来加载进内存，不管用不用</p><h4 id="MyBatis对象关联查询和集合关联查询怎么做">MyBatis对象关联查询和集合关联查询怎么做</h4><p>单个关联对象用associate ，适用于多对一的关联查询，使用javaType来定义实体类型，集合用collection，适用于一对多的关联查询，使用ofType来定义集合的泛型类型</p><h4 id="MyBatis一级缓存和二级缓存的区别">MyBatis一级缓存和二级缓存的区别</h4><p>缓存，是指将从数据库查询出的数据存放在缓存中，下次使用相同查询时不必再从数据库查询，而是直接从缓存中读取，从而减轻数据库查询的压力，提高性能</p><p>mybaits中的一级缓存，是SqlSession级别，默认开启，使用同一个SqlSession发送相同的SQL时命中；它的生命周期和SqlSession一致，当调用SqlSession.close()方法时会释放缓存</p><p>mybatis中的二级缓存，是namespace级别，默认不开启，执行同一个namespace的相同statement，发送相同的SQL时命中；它的生命周期是程序结束</p><p>当SQL中执行了update()、delete()、insert()操作，则缓存中的数据都会清空</p><h4 id="MyBaits的Mapper接口没有实现类为社么可以用-Autowired直接注入">MyBaits的Mapper接口没有实现类为社么可以用@Autowired直接注入</h4><p>动态代理，赋值给mapper接口引用的对象其实是一个代理对象，这个代理对象是由 JDK 动态代理创建的。在解析mapper的时候，mybatis会通过java反射，获取到接口所有的方法</p><p>当调用接口中方法时，将通过接口全限定名+方法名对应找到映射文件中namespace和id匹配的sql，然后将执行结果返回</p><h4 id="在MyBatis如何动态修改SQL">在MyBatis如何动态修改SQL</h4><p>使用Mybatis的拦截器可以做到</p><h4 id="MyBatis的动态SQL标签有哪些？">MyBatis的动态SQL标签有哪些？</h4><p>if标签：条件判断</p><p>choose、when、otherwise标签：选择结构，类似java中的switch</p><p>trim标签：对包含的内容加上前缀，后缀</p><p>where标签：主要是用来简化SQL语句中where条件判断的，能智能的处理and or，不必担心多余导致语法错误</p><p>foreach标签：遍历元素</p><h4 id="Mybatis的mapper如何传递多个参数">Mybatis的mapper如何传递多个参数</h4><p>方式一，可以使用map进行传参，SQL中使用map的key来引用取值</p><p>方式二，可以在SQL中使用#{param1}，#{param2}…来引用取值，它是根据mapper接口对应方法中形参的顺序进行匹配的，不管接口方法的参数名字叫个啥，SQL都只能使用param1，param2，等来取值</p><p>方式三，可以使用@Param注解，给mapper接口方法的参数命名，在SQL中直接使用取的名字来引用</p><h4 id="Mybatis，关联对象查询，使用嵌套子查询和JOIN连表有什么区别">Mybatis，关联对象查询，使用嵌套子查询和JOIN连表有什么区别</h4><p>嵌套子查询，指的是在查询一个主对象的时候，使用单表查询，在resultmap中额外发送一个子sql查询关联对象，然后映射给主对象</p><p>连表join查询，指的是查询一个主对象的时候，使用join连表的方式把主对象和关联对象的数据一次性查出来，用resultmap映射结果</p><p>他们的区别，join连表查询只发一条sql就能把数据查询出来，嵌套子查询会有一个n+1的问题，就是说如果主查询出来n条数据，那么会额外发送n条子sql去查询对应的关联对象，加上主查询那1次，也就是n+1次，因此它的性能相对较低的，一般我们会使用join连表查询</p><h4 id="为什么要使用连接池">为什么要使用连接池</h4><p>对数据库的操作都需要取得连接，使用完都需要关闭连接，如果每次操作需要打开关闭连接，这样系统性能很低下。连接池就可以动态的管理这些连接的申请，使用和释放，我们操作数据库只需要在连接池里获取连接，使用完放回连接池，这样大大节省了内存，提高效率。</p><p>数据库连接池的原理主要分为三部分</p><ul><li>第一，连接池的建立，在系统初始化时建立几个连接对象以便使用。</li><li>第二，连接池的管理，客户请求连接数据库时，首先查看连接池中是否有空闲连接，如果有直接分配，如果没有就等待，直到超出最大等待时间，抛出异常</li><li>第三，连接池的关闭，当系统关闭时，连接池中所有连接关闭</li></ul><h3 id="Redis部分">Redis部分</h3><h4 id="讲一下你理解的Redis，为什么Redis很快">讲一下你理解的Redis，为什么Redis很快</h4><p>Redis是一种高性能的，开源的，C语言编写的非关系型数据库，可以对关系型数据库起到补充作用，同时支持持久化，可以将数据同步保存到磁盘</p><p>说Redis很快是相对于关系型数据库如mysql来说的，主要有以下因素</p><ul><li>第一，数据结构简单，所以速度快</li><li>第二，直接在内存中读写数据，所以速度快</li><li>第三，采用多路IO复用模型，减少网络IO的时间消耗，避免大量的无用操作，所以速度快</li><li>第四，单线程避免了线程切换和上下文切换产生的消耗，所以速度快</li></ul><h4 id="你常用的Redis的数据存储结构有哪些，他们的使用场景分别是什么">你常用的Redis的数据存储结构有哪些，他们的使用场景分别是什么</h4><p>Redis存储形式是键值对，支持value形式包括String，List，Set，ZSet，Hash。</p><p>String可以用作缓存，计数器，防攻击，验证码、登录过期等，List可以用来做队列，秒杀等，Set可以用来去重</p><h4 id="Redis每种存储结构说-4-个命令吧">Redis每种存储结构说 4 个命令吧</h4><p>1.String</p><ul><li>set key value设置值</li><li>get key   取值</li><li>mset key value key value…设置多个值</li><li>mget key key获取多个值</li><li>incr key将key中的值自增1</li><li>decre key将key中的值自减1</li></ul><p>2.List</p><ul><li>lpush key value value…从最左边设置值</li><li>rpush key value value…从最右边设置值</li><li>lrange key start stop查询key中指定区间的元素</li><li>lpop key移出并返回key中最左边的元素</li><li>rpop key移出并返回key中最右边的元素</li></ul><p>3.Set</p><ul><li>sadd key value value添加元素</li><li>smembers key返回集合key中的所有元素</li><li>srem key member删除集合key中member元素</li><li>scard key查询集合key中的元素数量</li></ul><p>4.ZSet</p><ul><li>zadd key score value (score value)…添加元素</li><li>zcard key查询集合key中元素数量</li><li>zcount key min max返回有序集合key中score 在min和max之间的元素</li><li>zrange key start stop返回有序集合key中索引在start和stop之间的元素</li></ul><p>5.Hash</p><ul><li>hset key field value添加元素</li><li>hget key field获取key集合中field键对应的值</li><li>hmset key field value (field value)…添加元素并批量添加子键值对</li><li>hmget key field field获取key集合中所有的子键值对</li></ul><h4 id="你们项目是怎么用Redis的">你们项目是怎么用Redis的</h4><p>使用的是Springboot整合的redis，主要用来解决前后端分离后前后端会话问题，以及验证码的问题</p><h4 id="怎么防止Redis宕机数据丢失问题">怎么防止Redis宕机数据丢失问题</h4><p>通过对Redis持久化，把内存中的数据和命令，保存一份到磁盘中做备份，当Redis发生宕机，重启服务器的时候，会从磁盘重新加载备份的数据，从而解决数据丢失问题</p><h4 id="Redis持久化是什么？有几种方式">Redis持久化是什么？有几种方式</h4><p>将内存中的数据备份到磁盘的过程，就叫作持久化</p><p>Redis持久化主要有两种方式，RDB和AOF，可以通过修改redis.conf进行配置</p><p>RDB是记录数据快照，而AOF是记录写命令的</p><h4 id="Redis有了AOF持久化为什么还要RDB？">Redis有了AOF持久化为什么还要RDB？</h4><p>AOF和RDB各有所长</p><ul><li>RDB是记录数据快照，它的优点是只产生一个持久化文件，体积相对较小，启动恢复速度快，备份方便，它的缺点是没办法做到数据百分百不丢失，因为它是每隔一定时间保存一次</li><li>AOF是记录写命令，它的优点是格式清晰，容易理解，数据更安全，采用append模式即使持久化过程中宕机，也不影响已经保存的数据，它的缺点是文件体积较大，恢复速度慢</li></ul><p>根据实际需要来选择，通常二者可以结合来使用</p><h4 id="Redis内存不够了怎么办？">Redis内存不够了怎么办？</h4><p>方式一：增加物理内存</p><p>方式二：使用淘汰策略，删掉一些老旧数据</p><p>方式三：集群</p><h4 id="你们Redis用在哪些业务上？用的什么存储结构">你们Redis用在哪些业务上？用的什么存储结构</h4><p>主要用做缓存,比如：验证码，分类缓存，数据字典缓存，权限数据缓存，登录信息缓存等。</p><p>String类型的存储结构用的比较多，并且使用了Json格式进行序列化。</p><h4 id="淘汰策略有哪些？你们用的哪种">淘汰策略有哪些？你们用的哪种</h4><ul><li>volatile-lru ：从已设置过期时间的数据集中挑选最近最少使用的数据淘汰</li><li>volatile-ttl：从已设置过期时间的数据集中挑选将要过期的数据淘汰</li><li>volatile-random：从已设置过期时间的数据集中任意选择数据淘汰</li><li>allkeys-lru：从数据集中挑选最近最少使用的数据淘汰</li><li>allkeys-random：从数据集中任意选择数据淘汰</li><li>no-enviction：不使用淘汰</li></ul><h4 id="Redis事务和Mysql事务的区别">Redis事务和Mysql事务的区别</h4><p>Mysql的事务是基于日志，记录修改数据前后的状态来实现的，而Redis的事务是基于队列实现的</p><p>Mysql中的事务满足原子性：即一组操作要么同时成功，要么同时失败，</p><p>Redis中的事务不满足原子性，即一组操作中某些命令执行失败了，其他操作不会回滚</p><p>因此对于比较重要的数据，应该存放在mysql中</p><h4 id="使用Redis如何实现消息广播">使用Redis如何实现消息广播</h4><p>Redis是使用发布订阅来实现广播的</p><p>订阅者通过 SUBSCRIBE channel命令订阅某个频道 ， 发布者通过 PUBLISH channel message向该频道发布消息，该频道的所有订阅者都可以收到消息</p><h4 id="为什么要使用Redis做缓存">为什么要使用Redis做缓存</h4><p>一个字，快。</p><p>缓存它指的是将数据库的数据同步到内存中，客户端获取数据直接从内存中获取。由于内存读写速度大于磁盘，而使用缓存能减少磁盘读取，大大提高查询性能。</p><p>我们一般会将经常查询的，不会经常改变的热点数据，保存到缓存中，提高响应速度</p><h4 id="缓存的执行流程">缓存的执行流程</h4><p>1.客户端发起查询请求</p><p>2.判断缓存中是否有数据</p><ul><li>如果有，直接返回</li><li>如果没有，就从数据库查询，再把数据同步到缓存</li></ul><p>3.返回数据给客户端</p><h4 id="你们怎么保证Redis和Mysql的一致性">你们怎么保证Redis和Mysql的一致性</h4><p>我们在代码中控制，如果数据库做是写操作，直接把redis中的对应数据删除，下次查询数据会重新写入缓存。</p><p>我们的业务对一致性要求不是很高，因此采用了先操作mysql，后删除redis。在写数据库和删除缓存行代码之间如果有查询请求依然会查询到Redis中的老数据，但是这种情况非常极端，而且我们的业务也能容忍这种短暂的脏数据。</p><p>我还知道其他方案，比如延迟双删 ， 监听Mysql事务日志自动同步Redis等。</p><h4 id="SpringCache常用注解">SpringCache常用注解</h4><p>@EnableCaching：打在主启动类上，开启缓存功能</p><p>@Cacheable：打在方法上，表示该方法会开启缓存，打在类上，表示类中所有的方法都开启缓存，方法的返回值会自动写入缓存。如果缓存中已经有数据，方法将不会被调用，而是拿着缓存数据直接返回给客户端。</p><p>@CacheEvict：搭载类或者方法上，会将缓存清除</p><p>@CachePut：更新缓存</p><p>@Caching：组合操作，要应用于方法的多个缓存操作</p><p>@CacheConfig：打在类上，共享的一些常见缓存设置</p><h4 id="了解缓存击穿，穿透，雪崩吗？怎么处理？">了解缓存击穿，穿透，雪崩吗？怎么处理？</h4><p>缓存击穿：缓存中没有，数据库中有的数据，由于某种原因比如缓存过期了，同时并发用户特别多，一时间都往数据库中读取数据</p><ul><li>解决方案：加互斥锁，只能允许一个线程访问数据库，然后其他线程就可以往内存中拿</li></ul><p>缓存穿透：客户端频繁请求一个缓存和数据库中都没有数据，导致数据库压力大。</p><ul><li>解决方案：布隆过滤器来判断数据库中有没有这个key</li></ul><p>缓存雪崩：缓存重启，或者大量key失效，导致大量并发打到数据库</p><ul><li>解决方案：为key设置不同的过期时间</li></ul><h4 id="Redis的主从有什么优点，和缺点？">Redis的主从有什么优点，和缺点？</h4><p>优点是读写分离，分担了读的压力，同时能起到备份作用，防止数据丢失</p><p>缺点是不能分担写的压力，主的单点故障没有解决，存储没有得到扩容</p><h4 id="解释一下Redis的哨兵模式。哨兵的不足？">解释一下Redis的哨兵模式。哨兵的不足？</h4><p>当主服务器中断服务后，可以将一个从服务器升级为主服务器 ，以便继续提供服务</p><p>哨兵就是用来监控主从服务器，实现故障恢复功能的。它会不断的检查主服务器和从服务器的健康状态，当某个服务器出现问题时，可以向管理员发起通知。如果主服务器不可用时，会自动选择一个从服务器作为新的主服务器，并让其他的从服务器从新的主服务器复制数据</p><p>哨兵也是主从模式，没有解决写的压力，只减轻了读的压力，而且存储也得不到扩容</p><h4 id="Redis的cluster集群怎么存储数据的？">Redis的cluster集群怎么存储数据的？</h4><p>Redis Cluster集群采用哈希槽 (hash slot)的方式来分配的。它默认分配了16384个槽位，当我们set一个key 时，会用CRC16算法得到所属的槽位，然后将这个key 分到对应区间的节点上</p><h4 id="什么情况下Redis集群不可用？">什么情况下Redis集群不可用？</h4><p>Redis Cluster有一个容错机制，如果半数以上的主节点与故障节点通信都超时了，就会认为该节点故障了，自动触发故障转移操作，故障节点对应的从节点升级为主节点。</p><p>但是如果某个主节点挂了，又没有从节点可以使用，那么整个Redis集群就不可用了、</p><h4 id="Redis存储结构底层有没有了解？什么是SDS">Redis存储结构底层有没有了解？什么是SDS</h4><p>简单动态字符串，是Redis自己封装的字符串结构。它记录了字节数组buf，字节数组中用到的字节数len，以及未使用的字节数free。</p><ul><li>为了解决二进制安全问题，定义了len来表示已有字符串长度</li><li>为了防止缓冲区溢出，在分配内存的时候做了预留空间free</li><li>内存惰性释放，多余的内存加入free做预留，优化了内存频繁分配</li><li>针对不同的String长度定制了不同的SDS结构</li></ul><h4 id="Redis如何模拟队列和栈，用什么命令">Redis如何模拟队列和栈，用什么命令</h4><p>list控制同一边进，同一边出就是栈；list控制一边进，另一边出就是队列</p><h4 id="Redis存储单个对象怎么存，存储对象集合怎么存">Redis存储单个对象怎么存，存储对象集合怎么存</h4><p>单个对象可以使用String，也可以使用hash</p><p>集合对象可以使用hash，以便可以快速的通过field来取值</p><h4 id="你们Redis用来做什么？使用的什么结构？">你们Redis用来做什么？使用的什么结构？</h4><p>登录信息login，使用的是String结构存储</p><p>手机验证码code，使用的是String结构</p><p>课程分类course_type ，使用的是String结构</p><p>购物车保存，使用的是Hash结构</p><h4 id="统计全国高考前20名用什么？">统计全国高考前20名用什么？</h4><p>Zrevrangebyscore</p><h4 id="从100个VIP用户中随机抽取5名怎么做？">从100个VIP用户中随机抽取5名怎么做？</h4><p>Srandmember</p><h3 id="RabbitMQ">RabbitMQ</h3><h4 id="RabbitMQ的使用场景">RabbitMQ的使用场景</h4><p>rabbitMQ消息队列可以用来</p><ul><li>做任务的异步处理，提高程序的相应时间</li><li>提高系统稳定性，通过手动确认机制，当消费者出现故障，只要没有确认签收，请求的数据都不会丢失可以再次处理</li><li>服务解耦，生产者通过MQ与消费者交互</li><li>消除峰值，通过异步处理，消息传到MQ直接返回，接着等待排队处理，避免了线路拥堵</li></ul><h4 id="RabbitMQ如何防止消息丢失">RabbitMQ如何防止消息丢失</h4><p>首先，RabbitMQ的消息确认机制，默认是自动签收，也就是说消息一旦被消费者接收，就自动签收，消息就从队列里清除了。因此对于重要的消息，不容丢失的数据，我们需要设置在消费完成后手动签收</p><p>其次，我们可以将消息持久化，避免消息在消费前MQ宕机，网络问题等造成的消息丢失</p><h4 id="RabbitMQ的交换机有哪几种">RabbitMQ的交换机有哪几种</h4><p>Fanout：广播，将消息交给所有绑定到交换机的队列</p><p>Direct：定向，把消息交给符合指定routing key的队列</p><p>Topic：通配符，把消息交给符合routing pattern的队列</p><h4 id="消息是如何从发送者到达消费者的（RabbitMQ工作流程）">消息是如何从发送者到达消费者的（RabbitMQ工作流程）</h4><p>分为消息发送和消息接收两个步骤</p><ul><li>消息发送：生产者和Broker建立TCP连接，创建信道。通过信道将消息发送给Broker，由Exchange将消息进行转发到指定的队列</li><li>消息接收：消费者和Broker建立TCP连接 ，创建信道 ，然后监听指定的队列，当有消息到达队列时，Broker默认将消息推送给消费者，消费者就能接收到消息</li></ul><h4 id="如何防止消息重复消费">如何防止消息重复消费</h4><p>重复消费，一般时由于消费者消费成功后，在给MQ确认签收的时候出现了网络波动，MQ没有接到确认，就会继续给消费者投递之前的消息，造成消费者接收到了两条一样的消息。</p><p>我们可以通过实现消息的幂等性来避免这种情况，比如说让生产者给每个消息携带一个唯一的id，消费者获取消息后根据这个id去查询数据库，如果不存在就正常消费，如果存在了就证明该消息被消费过，直接丢弃</p><h4 id="RabbitMQ消息投递失败，你们怎么处理">RabbitMQ消息投递失败，你们怎么处理</h4><p>我们可以设置confirm回调和 returned 回调</p><p>比如说，可以在发送消息的时候，把消息详情包括交换机名，路由键，都保存到一个表中，状态设置为发送中，如果在confirm方法中ack为false,代表发送到交换机失败 ，就把这个记录状态修改为发送失败</p><p>然后我们创建一个定时任务定时扫表，去读取发送失败的数据并重新发送，为了优化性能，我们设置重试次数3次，如果3次都失败了，我们可以采取人工干预</p><h3 id="ElasticSearch">ElasticSearch</h3><h4 id="Lucene创建索引原理">Lucene创建索引原理</h4><p>Lucene是基于倒排索引原理来实现的</p><ul><li>首先，将原文档进行分词处理，形成一个个单独的单词，</li><li>然后取出标点符号以及停词，形成词元，</li><li>再将词元做一些语言相关的处理，比如变成小写，转换时态，单复数形式等等，</li><li>将得到的词创建一个字典，按照字母顺序排序，合并相同的词，最终生成一个倒排索引文档</li></ul><h4 id="ES的keyword和text区别">ES的keyword和text区别</h4><p>keyword：不分词，直接建立索引，支持模糊查询，精确查询，聚合查询</p><p>text：分词后建立索引，支持模糊查询，精确查询，不支持聚合查询</p><p>keyword通常用于通常用于存储年龄，性别，邮编，邮箱号码等等，直接将完整数据保存的场景</p><p>text通常存储全文搜索的数据，例如地址，文章内容的保存</p><h4 id="ES的优势">ES的优势</h4><p>ES是基于Lucene的开源搜索引擎，它解决了原生Lucene使用的不足，优化了Lucene的调用方式</p><ul><li>分布式的实时文件存储，每个字段都被索引并可被搜索</li><li>支持实时分析搜索</li><li>可以扩展到上百台服务器，处理PB级结构化或非结构化数据</li><li>通过简单的 RESTful API、可以跟各种语言的客户端甚至命令行进行交互</li><li>上手非常容易，只需很少的学习就可以在生产环境中使用</li></ul><h4 id="Lucene-ES为什么那么快-ES用到什么数据结构">Lucene/ES为什么那么快(ES用到什么数据结构)</h4><p>传统搜索比如mysql的like关键字查询，它的搜索方式就是全文扫表，查询性能很低</p><p>ES是基于Lucene的全文检索引擎，它采用的是倒排索引结构，在存储时先对文档进行分词，再做一些标点符号去除，大小写时态转换等优化处理，最后按照字母顺序去重排序，形成一个倒排索引文档，我们在检索时，就可以通过二分查找的方式找到目标值</p><h4 id="ES的分层结构，index下面是什么">ES的分层结构，index下面是什么</h4><p>Index：索引库，包含有一堆相似结构的文档数据，类比Mysql中的数据库</p><p>Type：类型，它是index中的一个逻辑数据分类，类比Mysql中的表</p><p>Document：文档：是ES中的最小数据单元，通常用json结构标识，类比Mysql中的一行数据</p><p>Field：字段：类比Mysql中的一个列</p><p>从ES7.0开始，Type被干掉了，从此库表合一即一个Index中只有一个默认的Type</p><h4 id="讲几个ES中的查询对象：比如TermQuery">讲几个ES中的查询对象：比如TermQuery</h4><p>BooleanQuery：按条件查询</p><p>must：查询条件（模糊查询）</p><p>filter： 过滤条件（精确查询）</p><p>MatchQuery：匹配关键字查询（关键字分词后）</p><p>TermQuery：匹配关键字查询（关键词不分词）</p><p>matchAllQuery：匹配所有文档查询</p><p>rangeQuery：查询指定范围内的数据</p><h4 id="你简单描述一下DSL语法">你简单描述一下DSL语法</h4><p>DSL是一种以json形式标识的，由ES提供的一种查询语言，它由两部分组成，DSL查询和DSL过滤。</p><p>DSL过滤类似于精确查询，DSL查询类似于模糊查询</p><h4 id="你说一下-match和term的区别？">你说一下 match和term的区别？</h4><p>term：不会对搜索词进行分词处理，而是作为一个整体与目标字段进行匹配，若完全匹配，则可查询到</p><p>match：会将搜索词分词，再与目标查询字段进行匹配，若分词中的任意一个词与目标字段匹配上，则可查询到</p><h4 id="你使用过ES的哪些聚合查询？">你使用过ES的哪些聚合查询？</h4><p>指标聚合，比如求和，求最大值，最小值，平均数</p><p>数量统计聚合，计算满足条件数据的总条数，相当于sql中的count</p><p>去重聚合，它会计算非重复的数据个数，相当于sql中的distinct</p><p>桶聚合，它会将某个field的每个唯一值当成一个桶，并计算每个桶内的文档个数，相当于sql中的group by</p><p>最高权值聚合，它会匹配每组前n条数据，相当于sql中的group by后取出前n条</p><h4 id="ES高亮怎么做的？">ES高亮怎么做的？</h4><p>使用HighlightBuilder对关键字作高亮处理，由于我们项目使用的是SpringBoot整合ES的jar包，结果没有进行高亮处理，我们使用ElasticsearchTemplate的queryForPage方法来获取结果，再手动进行分页封装返回前台</p><h4 id="你们ES和数据库的数据一致性怎么做的">你们ES和数据库的数据一致性怎么做的</h4><p>代码控制的，数据库做了写操作，直接更新ES中的数据，我知道可以通过 Logstash 中数据和ES的数据自动同步。</p><h4 id="ES分片机制了解吗">ES分片机制了解吗</h4><p>ES的索引库由多个分片 shard组成，shard分为primary shard主shad和replica shard 副本,主shard承担写请求，replica副本的数据从primary复制而来，同时分担读请求，primary shard的数量设定了就不能修改，replica数量可以修改。</p><h4 id="描述一下ES添加文档的过程">描述一下ES添加文档的过程</h4><p>(1) 客户端请求一个协调节点coordinating node</p><p>(2) 协调节点根据算法选择一个primary shard: 算法 hash(document_id) % (num_of_primary_shards)</p><p>(3) 对应的primary shard 所在节点保存完数据后，将数据同步到replica node。</p><p>(4) 协调节点coordinating node 发现 primary node 和所有 replica node 都搞定之后返回结果给客户端</p><h4 id="数据节点存储数据详细流程：（储缓冲区Memory-Buffer）文件系统缓存：Filesystem-Cache">数据节点存储数据详细流程：（储缓冲区Memory Buffer）文件系统缓存：Filesystem Cache</h4><p>(1) 当分片所在的节点接收到来自协调节点的请求后，会将请求写入到Memory Buffer，然后定时（默认是每隔1秒）写入到Filesystem Cache，这个从Momery Buffer到Filesystem 　　Cache的过程就叫做refresh</p><p>(2) 当然在某些情况下，存在Momery Buffer和Filesystem Cache的数据可能会丢失，ES是通过translog的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到translog中，当Filesystem cache中的数据写入到磁盘中时，才会清除掉，这个过程叫做flush；</p><p>(3)在flush过程中，内存中的缓冲将被清除，内容被写入一个新段，段的fsync将创建一个新的提交点，并将内容刷新到磁盘，旧的translog将被删除并开始一个新的translog。<br>flush触发的时机是定时触发（默认30分钟）或者translog变得太大（默认为512M）时；</p><h4 id="详细描述一下Elasticsearch获取文档的过程">详细描述一下Elasticsearch获取文档的过程</h4><p>(1) 客户端请求一个协调节点coordinating node</p><p>(2) coordinate node 根据算法hash(document_id) % (num_of_primary_shards)，将请求转发到对应的 node，此时会使用 round-robin随机轮询算法，在 primary shard 以及其所有 replica 中随机选择一个，让读请求负载均衡</p><p>(3) 接收到请求的 node 返回 document 给调节点 coordinate node。</p><p>(4) coordinate node 返回 document 给客户端。</p><p>搜索被执行成一个两阶段过程，我们称之为 Query Then Fetch；</p><h4 id="详细描述一下Elasticsearch搜索过程存-（储缓冲区Memory-Buffer）">详细描述一下Elasticsearch搜索过程存 （储缓冲区Memory Buffer）</h4><p>(1) 在初始查询阶段时，查询会广播到索引中每一个分片拷贝（主分片或者副本分片）。</p><p>(2) 每个分片在本地执行搜索并构建一个匹配文档的大小为 from + size 的优先队列。PS：在搜索的时候是会查询Filesystem Cache的，但是有部分数据还在Memory Buffer，所以搜索是近实时的。</p><p>(3) 每个分片返回各自优先队列中所有文档的 ID 和排序值给协调节点，协调节点它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表。</p><p>(4) 接下来就是 取回阶段，协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。每个分片加载并 丰富 文档，如果有需要的话，接着返回文档给协调节点。一旦所有的文档都被取回了，协调节点返回结果给客户端。</p><h4 id="详细描述一下Elasticsearch更新和删除文档的过程">详细描述一下Elasticsearch更新和删除文档的过程</h4><p>删除和更新也都是写操作，但是Elasticsearch中的文档是不可变的，因此不能被删除或者改动以展示其变更；　磁盘上的每个段都有一个相应的.del文件。当删除请求发送后，文档并没有真的被删除，而是在.del文件中被标记为删除。该文档依然能匹配查询，但是会在结果中被过滤掉。当段合并时，在.del文件中被标记为删除的文档将不会被写入新段。</p><p>在新的文档被创建时，Elasticsearch会为该文档指定一个版本号，当执行更新时，旧版本的文档在.del文件中被标记为删除，新版本的文档被索引到一个新段。旧版本的文档依然能匹配查询，但是会在结果中被过滤掉。</p><h4 id="ES有几种节点类型？他们的作用分别是什么">ES有几种节点类型？他们的作用分别是什么</h4><p>分为主节点，node.master  =true , 数据节点node.data  =true , 负载均衡节点(node.data  =false,node.master=false),</p><p>node.master=true,代表该节点有成为主资格 ,主节点的主要职责是和集群操作相关的内容，如创建或删除索引，跟踪哪些节点是群集的一部分，并决定哪些分片分配给相关的节点。一般会把主节点和数据节点分开</p><p>node.data=true,数据节点主要是存储索引数据的节点，主要对文档进行增删改查操作，聚合操作等,数据节点对CPU,IO,内存要求较高，优化节点的时候需要做状态监控，资源不够时要做节点扩充</p><p>当主节点和数据节点配置都设置为false的时候，该节点只能处理路由请求，处理搜索，分发索引操作等，从本质上来说该客户节点表现为智能负载平衡器。配置：mode.master=false,mode.data=false</p><h4 id="ES集群的三种颜色代表什么">ES集群的三种颜色代表什么</h4><p>绿色，黄色，红色，绿色代表集群健康，所有的主备分片都得到分配，如果有备分片没有node去分配，集群是黄色，黄色和绿色都是可用状态，如果有主分片的节点down机，集群不可写数据，呈现红色，代表集群不健康。</p><h4 id="你们项目怎么使用ES">你们项目怎么使用ES</h4><p>我们使用的是spring-boot-start-data-elasticsearch这个库来操作ES，用在大数据的搜索场景，比如商品的发布，搜索功能。</p><hr><h3 id="SpringSeucity">SpringSeucity</h3><h4 id="说一下security中的的filter">说一下security中的的filter</h4><p>SecurityContextPersistenceFilter：请求开始会从SecurityContextRepository中获取SecurityContext对象并设置给SecurityContextHolder，在请求完处理成后将SecurityContextHolder持有的SecurityContext再保存到配置好的SecurityContextRepository中，同时清除SecurityContextHolder中的SecurityContext</p><p>UsernamePasswordAuthenticationFilter：默认拦截“/login”登录请求，将请求中的认证信息包括用户名，密码封装成UsernamePasswordAuthenticationToken，然后调用AuthenticationManager的认证方法进行认证</p><p>BasicAuthenticationFilter：处理 HTTP 请求的 BASIC 授权标头，如果身份验证成功，就把生成的Authentication对象放入SecurityContextHolder。如果设置了记住我，下次访问就不会走这里来了</p><p>RememberAuthenticationFilter：记住我，调用RememberMeServices的autoLogin方法自动登录</p><p>AnonymousAuthenticationFilter：匿名filter，检测SecurityContextHolder有没有Authentication对象，如果没有，就会创建一个AnonymousAuthenticationToken并保存到SecurityContextHolder</p><p>ExceptionTranslationFilter：处理filter链中的所有AccessDeniedException和AuthenticationException</p><p>FilterSecurityInterceptor：继承自AbstractSecurityInterceptor，通过调用AccessDecisionManager.decide方法进行授权</p><h4 id="说一下security的认证原理">说一下security的认证原理</h4><p>首先，请求会经过UsernamePasswordAuthenticationFilter拦截，请求的用户名密码会封装成UsernamePasswordAuthenticationToken，过滤器将token提交给认证管理器AuthenticationManager进行认证</p><p>然后，认证管理器调用AuthenticationProvider进行认证，AuthenticationProvider再调用UserDetailsService获取到数据库中存储的用户信息UserDetails，然后调用密码编码器对密码进行比较，认证成功后封装Authentication</p><p>再后来，请求回到UsernamePasswordAuthenticationFilter，调用SecurityContextHolder将Authentication对象封装成SecurityContext并保存到SecurityContextHolder中</p><p>最后，请求回到SecurityContextPersistenceFilter，它会调用SecurityContextRepository将SecurityContext对象存储起来，再清理掉SecurityContextHolder中的信息</p><h2 id="三-微服务部分">三.微服务部分</h2><h3 id="相关概念">相关概念</h3><h4 id="什么是集群">什么是集群</h4><p>集群使将应用复制成多个相同的应用，一起来工作，从而提高工作能力。即将多个应用程序分散在不同的服务器，每个服务器都独立运行相同的代码。可以分散服务器压力解决高并发的问题，同时也能预防单节点故障，即一台服务器故障不影响其他服务器正常运行，但没有解决单体应用代码臃肿，业务复杂，维护性差等等问题</p><h4 id="什么是负载均衡">什么是负载均衡</h4><p>使用了集群后，解决高并发同时有一个新的问题，就是客户端的请求如何分配到多台服务。因此需要通过负载均衡器，比如Nginx，使用负载均衡算法比如轮询、权重、随机等等将请求路由到不同的服务器</p><h4 id="什么是分布式">什么是分布式</h4><p>分布式是将应用按照业务类型拆分成多个子应用，每个子应用部署在不同的服务器上单独运行，子应用之间通过API相互调用。</p><p>可以分散服务器压力解决高并发问题，同时可以解决单体应用代码臃肿、业务复杂、维护性差等等问题，但是不能防止单节点故障，比如一个子应用故障，整个应用就能不完整运行</p><h4 id="集群和分布式的区别，分别解决什么问题">集群和分布式的区别，分别解决什么问题</h4><p>集群是将一个应用程序复制多份，部署在多台服务器上，每个服务器中的程序都是完整的，可以独立运行</p><p>分布式是将一个应用程序拆分成多个子程序，分别部署在多台服务器上，每个服务器中的程序都是不完整的，所有服务器需要相互通信相互协调才能完成最终的业务</p><p>集群能解决高并发问题，同时能防止单节点故障，即一台服务器宕机不影响其他服务器的正常运行</p><p>分布式也能解决高并发问题，但不能防止单节点故障，即一台服务器宕机了，整体业务就无法完成</p><p>集群无法解决项目本身的代码臃肿、业务复杂等等问题，分布式能降低模块之间的耦合</p><p>实际应用中，我们可以将分布式和集群相结合，比如分布式某个子程序的负载很高，可以单独对这个子程序做集群</p><h4 id="说一下你理解的微服务">说一下你理解的微服务</h4><p>微服务也是一个分布式系统，它将单体应用进行细粒度拆分，形成多个微服务，每个服务独立运行，每个服务也都可以有自己的数据库，服务之间使用HTTP通信，互相协调完成整个系统的业务。</p><p>它的优点是服务之间解耦合，不同的服务可以有不同的编程语言，技术选型多元化，支持敏捷开发</p><p>他的缺点是分布式事务很复杂，部署麻烦，技术成本高，服务间通信对性能也有一定的损耗</p><h4 id="什么是CAP理论-，-哪些技术用到AP，哪些用到CP">什么是CAP理论 ， 哪些技术用到AP，哪些用到CP</h4><p>CAP理论指的是，在一个分布式系统中，一致性，可用性，分区容错性，三个要素最多只能同时实现两点。</p><p>分区容错性是分布式系统的内在要求，因此我们通常会在一致性和可用性之间做取舍。</p><p>满足CP，也就是满足一致性和容错性，舍弃可用性，如果系统允许有段时间失效就可以考虑。常见的如Redis，Nacos，ZooKeeper</p><p>满足AP，也就是满足可用性和容错性，舍弃一致性，如果系统允许出现短暂时间的不一致可以考虑。常见的如MySQL，Eureka</p><h4 id="什么是强一致性和最终一致性">什么是强一致性和最终一致性</h4><p>强一致性是只数据在多个副本中总数实时同步的，如果能容忍数据在多个副本中在一定的延迟时间内同步，则是弱一致性</p><p>最终一致性则不要求数据什么时候同步，但是最终会同步即可。通常情况下我们在分布式领域选择会牺牲了强一致性，会采用最终一致性</p><h4 id="什么是Base理论">什么是Base理论</h4><p>Base指的是基本可用，软状态，最终一致性。它是对CAP中的AP的扩展，意思是说当出现故障部分服务不可用时，要保证核心功能可用，允许在一段时间内数据不一致，但最终要保证一致性。满足Base理论的事务也叫柔性事务</p><h3 id="SpringCloud">SpringCloud</h3><h4 id="讲一下你们公司微服务解决方案">讲一下你们公司微服务解决方案</h4><p>我司正在使用的是第一代微服务方案，Springcloud Netflix全家桶。</p><p>它是使用Eureka做服务注册与发现，也就是解决服务之间通信问题，</p><p>使用Ribbon/OpenFeign做客户端的负载均衡，也就是解决将请求路由到微服务集群的问题，</p><p>使用Hystrix断路器的熔断、降级来解决单节点故障，</p><p>使用Zuul做服务网关，将它作为整个微服务的大门，来实现登录、权限检查等业务，</p><p>使用Config分布式配置中心，来统一管理配置所有微服务的配置文件，</p><p>使用Bus消息总线给各个微服务广播消息，可以实现各个微服务配置的自动刷新，</p><p>使用Sleuth链路追踪，来实时监控各个微服务建的调用关系，快速定位故障节点</p><h4 id="说一说Spring-Cloud有哪些常用组件">说一说Spring Cloud有哪些常用组件</h4><p>Eureka：做服务注册与发现，用来解决服务之间通信问题，</p><p>Ribbon/OpenFeign：用做客户端的负载均衡，也就是解决将请求路由到微服务集群的问题，</p><p>Hystrix：断路器，它的熔断、降级策略用来解决单节点故障，</p><p>Zuul：做服务网关，它是整个微服务的大门，可以用来实现登录、权限检查等业务，</p><p>Config：分布式配置中心，用来统一管理配置所有微服务的配置文件，</p><p>Bus：消息总线，用来给各个微服务广播消息，可以实现各个微服务配置的自动刷新，</p><p>Sleuth：链路追踪，用来实时监控各个微服务建的调用关系，快速定位故障节点</p><h4 id="Spring-Cloud的优缺点？">Spring Cloud的优缺点？</h4><p>微服务相对单体应用来说</p><p>优点</p><ul><li>服务之间无耦合，代码简单方便开发维护，服务之间升级维护互不影响</li><li>轻量级HTTP通信机制，不同的服务可以采用不同的编程语言</li><li>有极强的扩展能力,业务量大的服务可以再次拆分服务，或者也可以集群部署</li><li>支持时下流行的敏捷开发并做了优化</li></ul><p>缺点</p><ul><li>分布式事务繁琐</li><li>部署麻烦，开发人员的学习成本高</li><li>技术成本高，开发人员需要花更多的时间学习相关技术</li><li>微服务间的通信存在对性能的损耗问题</li></ul><h4 id="什么是服务注册">什么是服务注册</h4><p>Eureka是一个服务组测与发现的组件，翻译成人话就是管理所有微服务的通讯录的组件。它包含注册中心，客户端两部分组成。客户端在启动的时候会向注册中心发送一条自我介绍信息，比如端口，ip等等，在注册中心就会保存一张所有微服务的通讯录。这就叫服务注册</p><h4 id="什么是服务发现">什么是服务发现</h4><p>微服务会定期的从客户端拉取一份微服务通讯录，到本地缓存起来，默认是30s一次。当一个微服务向另一个微服务发起调用，直接根据本地的通讯录找到对方的服务名，发送HTTP请求。这个就叫服务发现</p><h4 id="什么是服务续约">什么是服务续约</h4><p>微服务会定时（默认30s）发送心跳请求，告诉注册中心，自己还处于存活状态，那么服务中心就不会将其从清单中删除，否则，当微服务宕机或者网络故障等因素，没有在规定时间（默认90s）内提交心跳请求，注册中心就会将它从通讯录中删除。</p><h4 id="如果服务挂了，注册中心要等到90s后剔除，那么在剔除前的这段时间内，挂掉的服务有可能还是会被调用，怎么处理？">如果服务挂了，注册中心要等到90s后剔除，那么在剔除前的这段时间内，挂掉的服务有可能还是会被调用，怎么处理？</h4><p>第一，可以修改注册中心剔除服务时间，同时加快服务续约心跳请求的频率</p><p>第二，可以使用Hystrix的熔断降级机制，当某个服务不可访问，快速失败，并返回托底数据</p><p>第三。重试,提供者集群</p><h4 id="你知道EurekaClient服务发现和服务续约每隔30s做一次请求是用什么技术实现的吗？">你知道EurekaClient服务发现和服务续约每隔30s做一次请求是用什么技术实现的吗？</h4><p>使用了ScheduledThreadPoolExecutor线程池定时任务来实现</p><p>服务发现是先判断是否开启了服务发现功能（默认是开启的），获取定时任务的间隔时间（默认是30s），然后初始化服务发现的定时任务，间隔时间可以在yml中修改</p><p>服务续约是先判断是否开启服务注册功能（默认是开启的），获取定时任务间隔时间（默认是30s），然后初始化心跳请求的定时任务，间隔时间可以在yml中修改</p><h4 id="Ribbon是什么，Ribbon的工作原理讲一下">Ribbon是什么，Ribbon的工作原理讲一下</h4><p>Ribbon是一个客户端负债均衡器，它可以按照负债均衡算法，向多个服务发起调用。当一个微服务有多个集群时，就可以使用它做请求负载均衡，通常结合RestTemplate来使用</p><h4 id="说一下-Ribbon的工作原理">说一下 Ribbon的工作原理</h4><p>消费者会30/次注册中心拉取服务注册清单缓存到本地，当消费者需要调用一组提供者集群服务时，Ribbon会根据提供者服务名，在本地缓存的服务地址清单里找到这一组服务的通讯地址，然后按照负债均衡算法（默认是轮询），选择其中的一个通讯地址，发起http调用服务。</p><p>Ribobn内部通过LoadBalancerInterceptor拦截RestTemplate发起的请求，然后交给RibbonLoadBalancerClient负载均衡客户端做负载均衡，RibbonLoadBalancerClient把选择服务的工作交给ILoadBalancer负载均衡器 ，ILoadBalancer会调用 IRule负载均衡算法类来选择服务。之后RibbonLoadBalancerClient把选择好的服务交给LoadBalancerRequest去发请求。</p><h4 id="Ribbon有哪些负载均衡算法，怎么配置">Ribbon有哪些负载均衡算法，怎么配置</h4><p>RoundRobinRule：简单轮询，ribbon默认规则</p><p>AvailabilityFilteringRule：忽略短路状态和并发过高的服务器</p><p>WeightedResponseTimeRule：根据服务器响应时间作为权重，响应时间越长权重越小</p><p>ZoneAvoidanceRule：根据区域选择</p><p>BestAvailableRule：忽略短路的服务器，选择并发较低的服务器</p><p>RandomRule：随机选择一个可用服务器</p><p>Retry：重试机制的选择逻辑</p><h4 id="OpenFeign和Ribbon的区别">OpenFeign和Ribbon的区别</h4><p>OpenFeign整合了Ribbon和Hystrix,屏蔽了Ribbon拼接URL，参数的细节，使用声明式编程，让服务调用变得更加简单，OpenFiegn底层也是走的Ribbon的负载均衡策略。推荐使用OpenFeign</p><h4 id="OpengFiegn的工作流程">OpengFiegn的工作流程</h4><p>首先，当程序启动时，@EnableFeignClient会扫描@FeignClient注解的接口，并交给Spring容器管理。</p><p>当发起请求时，会使用jdk动态代理，并为每个方法都生成相应的RequestTemplate，同时封装http信息，包括url和请求参数等，</p><p>最后把RestTemplate交个HttpClient发送请求，使用ribbon的负载均衡发起调用</p><h4 id="为什么要使用Eureka-为什么要使用Ribbon-为什么要使用config配置中心">为什么要使用Eureka   为什么要使用Ribbon   为什么要使用config配置中心</h4><p>在微服务系统中，各个服务之间是需要进行网络通信的，那么他们相互调用就得知道对方的通信地址。eureka就是专门来做做服务注册与发现，解决服务之间通信问题的</p><p>当一个微服务做了集群，也就是同一个服务名会对应多个地址，那么我们在调用的时候，应该调用哪一个就成了问题，Ribbon是一个负债均衡器，它可以按照负债均衡算法，向多个服务发起调用。当一个微服务有多个集群时，就可以使用它做请求的分发</p><p>在微服务系统中，服务数量很多，而每个服务都有自己的配置文件，管理起来很麻烦。用了配置中心就可以帮我们集中管理配置文件，它支持本地配置文件，也支持将配置文件放到远程仓库如git集中管理</p><h4 id="为什么Feign的客户端接口没有写实现类也可以直接被依赖注入">为什么Feign的客户端接口没有写实现类也可以直接被依赖注入</h4><p>自动注入的实例其实是一个jdk动态代理对象，Feign会为每个方法生成相应的requestTemplate，它根据服务名找到对应的服务，根据返回值类型、形参列表匹配相应的接口，然后封装url、请求参数，最后生成request请求，使用Ribbon负载均衡发起调用</p><h4 id="介绍一下Hystrix">介绍一下Hystrix</h4><p>Hystrix意为熔断器，它可以将出现故障的服务，通过熔断、降级等手段隔离开，这样不影响整个系统的主业务。它可以防止由单节点异常导致整个微服务故障，如果遇到故障时，快速失败，熔断的同时可以返回兜底数据达到服务降级的目的</p><h4 id="什么是熔断，什么是降级">什么是熔断，什么是降级</h4><p>熔断，是对服务链路的一种保护机制，当链路上的某个服务不可访问时，服务就会触发降级返回拖地数据，同时当失败率到达一个阈值，就标记该服务为短路状态，当请求访问时直接熔断。直到检查到该服务能正常访问时，就快速恢复</p><p>降级，是当某个服务不可访问时，我们返回一些事先准备好的数据给客户端，比如说，友情提示服务暂不可用，请骚后重试，这样用户体验就上去了</p><h4 id="什么是资源隔离？">什么是资源隔离？</h4><p>指的是限制某一个分布式服务的资源使用，可以理解为限流，也就是限制某个服务的请求数量。它包括线程池隔离和信号量隔离</p><p>线程池隔离，是指用一个线程池来存储当前请求，可以通过设置线程池最大线程数和最大排队队列数来限制请求数量</p><p>信号量隔离：是指用一个计数器来记录当前有多少个线程在运行，请求进来计数器就增加1，超过最大信号量，就直接返回</p><h4 id="资源隔离：信号量和线程池的区别">资源隔离：信号量和线程池的区别</h4><p>线程池方式是异步处理，它与调用线程不是同一个线程</p><p>信号量方式是同步处理，与调用线程是同一个线程</p><p>线程池方式由于需要排队，调度，线程切换，因此开销较大，信号量方式无需切换线程，开销较小</p><h4 id="对于CAP理论，Eureka选择的是AP还是CP？它保证了一致性还是可用性？">对于CAP理论，Eureka选择的是AP还是CP？它保证了一致性还是可用性？</h4><p>CAP理论指的是，一个分布式系统中，一致性，可用性，分区容错性，三个要素只能同时实现两点。Eureka选择的是AP，它是弱一致性的，保证了可用性和分区容错性，放弃了数据一致性。也就是说当多个Eureka之间不可通信时，需要保证服务可用，正常提供服务注册发现功能，但是网络恢复后最终还是会同步的。</p><h4 id="说一下Eureka的自我保护">说一下Eureka的自我保护</h4><p>为了防止服务被误删除，Eureka不会立即删除过时的服务数据。这种机制可能会导致客户端从注册中心获取到已经下线的服务并发起调用而导致错误，因此在开发阶段我们可以关闭自我保护机制。在生产环境中，我们需要打开自我保护，因为它可以防止因为网络波动，服务没有及时续约而造成的服务误删除问题。</p><h4 id="你们项目是如何做服务降级的？">你们项目是如何做服务降级的？</h4><p>比如在秒杀业务中，需要实时从redis中查询库存，通过设置hystrix的最大信号量，以此来防止redis雪崩。当并发过高，请求数超过最大信号量，触发降级，直接向客户端返回兜底数据：”活动太火爆啦，请骚后重试“</p><h4 id="Zuul有哪几类Filter-他们的执行顺序是怎么样的？">Zuul有哪几类Filter,他们的执行顺序是怎么样的？</h4><p>zuul按照执行顺序，分为pre前置过滤，route路由过滤，post后置过滤，error异常后过滤</p><p>正常流程是请求先经过前置过滤器，到达路由过滤器进行路由，路由到各种微服务执行请求，返回结果后经过后置过滤，返回用户</p><p>异常流程，如果再整个过程中出现异常，都会进入error异常过滤器，处理完毕后经过post过滤器返回用户，如果error自己出现异常，最终也会通过post过滤器返回用户，如果post过滤器出现异常，也会跳转到error过滤器，然后直接返回用户</p><h4 id="在Zuul中做登录检查如何实现？">在Zuul中做登录检查如何实现？</h4><p>可以通过继承ZuulFilter抽象类，自定义pre类型的过滤器，shouldFilter方法中可以定义需要放行的资源，run方法中检查请求头中的token信息，如果没有token，就响应到客户端未登录的信息，并组织filter继续往后执行</p><h4 id="在Zuul中如何做限流？">在Zuul中如何做限流？</h4><p>方式一：可以通过继承ZuulFilter抽象类自定义pre过滤器，加上限流算法，来实现</p><p>方式二：可以通过hystrix的资源隔离模式，设置线程池最大连接数或者最大信号量来实现</p><p>方式三：常用，Ratelimit，使用令牌桶算法。。。</p><h4 id="配置中心解决什么问题？">配置中心解决什么问题？</h4><p>在分布式系统中，服务数量很多，而每个服务都有自己的配置文件，管理起来很麻烦。配置中心是个好东西，可以帮我们集中管理配置文件，它支持本地配置文件，也支持将配置文件放到远程仓库如git集中管理。</p><h4 id="EureakServer的搭建流程">EureakServer的搭建流程</h4><p>第一步，导入eureka-server依赖，以及springboot的web环境依赖。</p><p>第二布，主启动类上打注解，@EnableEurekaServer，开启eureka服务端功能</p><p>第三步，yml配置文件中，配置注册中心的端口号，主机名，注册中心地址</p><h4 id="Ribbon的整合流程">Ribbon的整合流程</h4><p>第一步，导入ribbon依赖</p><p>第二部，给RestTemplate的Bean定义方法上，加上注解@LoadBalanced，让这个restTemplate有负载均衡的功能</p><p>第三步，修改restTemplate调用服务的url，将目标主机名换成目标服务名</p><h4 id="Feign的整合流程">Feign的整合流程</h4><p>第一步，导入openfeign依赖</p><p>第二部，主配置类加注解，@EnableFeignClients，开启feign支持</p><p>第三步，定义feign客户端接口，并加上注释@FeignClient(“目标服务名”)，接口中定义方法，该方法与目标服务的对应方法的方法名，返回值类型，形参列表，url路径要一致</p><h4 id="Hystrix的整合流程">Hystrix的整合流程</h4><ul><li><p>第一步，导入hystrix依赖</p></li><li><p>第二部，主启动类加注解，@EnableCircuitBreaker，开启熔断功能</p></li><li><p>第三步，在需要开启熔断功能的方法上，加注解@HystrixCommand(fallbackMethod=“xxx”)，xxx是降级方法</p></li><li><p>第四步，定义降级方法，方法名需要和fallbackMethod的值一致，形参列表和返回值类型需要和目标方法一致</p></li></ul><p>feign整合Hystrix：</p><ul><li><p>第一步，yml中配置，feign.hystrix.enable=true，开启hystrix功能</p></li><li><p>第二部，@FeignClient标签中，定义fallback或者fallbackFactory，指定降级类</p></li><li><p>第三步，</p></li></ul><p>如果是fallback，就实现feign接口，并覆写接口中的方法作为降级方法</p><p>如果是fallbackFactory，就实现FallbackFactory接口，同时指定泛型为feign接口，覆写create方法，返回一个feign接口的匿名内部类，类中写降级方法</p><h4 id="Zuul的整合流程">Zuul的整合流程</h4><p>第一步，导入zuul依赖</p><p>第二步，主启动类上加注解@EnableZuulProxy，开启zuul功能</p><p>第三步，yml中配置，统一访问前缀prefix，禁用通过服务名方式访问服务ignoredServices，配置路由routes指定某个服务使用某个路径来访问</p><h4 id="ConfigServer的整合流程">ConfigServer的整合流程</h4><p>配置中心服务端配置：</p><p>​第一步，导入config-server依赖</p><p>​第二步，主启动类加注解，@EnableConfigServer，开启配置中心</p><p>​第三步，配置文件中，配置远程仓库地址，仓库账号密码</p><p>客户端配置：</p><p>​第一步，导入config-client依赖</p><p>​第二步，创建bootstrap.yml配置文件，配置中心地址config.uri，要拉取的配置文件名name，环境名profile</p><h4 id="你们微服务项目的技术栈描述一下">你们微服务项目的技术栈描述一下</h4><p>​前端门户系统：HTML + JQuery + CSS</p><p>​前端管理系统：VUE + ElementUI</p><p>​后端系统：基于SpringCloud微服务框架（Eureka+OpenFeign+Hystrix+Zuul+Config）</p><p>+MyBatisPlus+SpringMVC+Redis+ElasticSearch+RabbitMQ+AlicloudOSS</p><h4 id="浏览器发起一个请求，在你的微服务项目中的怎么去执行的？">浏览器发起一个请求，在你的微服务项目中的怎么去执行的？</h4><p>浏览器发起的所有请求首先通过Nginx，通过负载均衡算法，路由给zuul集群，然后通过zuul前置过滤，作登录校验后，它会从配置中心拉取的通讯地址中，根据url匹配到对应的服务，然后使用ribbon发起restful调用。微服务间也可以通过feign相互调用，最终执行完任务，返回浏览器</p><h4 id="说下Ribbon和Feign的区别呢">说下Ribbon和Feign的区别呢</h4><p>Ribbon和Feign都是SpringCloud Netflix中实现负载均衡的组件，不同点在于</p><p>Ribbon是需要我们手动构建http请求，根据目标服务名通过负载均衡算法直接调用目标服务，</p><p>Feign是采用接口的方式，将需要调用的目标服务方法定义成抽象方法，路径，服务名，形参列表，返回值类型需要保持一致。我们只需要调用接口中的方法就可以了。它会自动帮我们生成jdk动态代理，为每个方法生成RequestTemplate并封装url和请求参数，使用负载均衡算法发起调用</p><p>Ribbon的实现方式，一般配合RestTemplate发起http请求，我们需要在注册RestTemplate的Bean的方法上加@LoadBalanced，使它具有负载均衡的能力</p><p>Feign的实现方式，是在主启动类上加@EnableFeignClients，在客户端接口上加注解@FeignClient</p><h4 id="Spring-SpringBoot和SpringCloud的关系以及区别">Spring,SpringBoot和SpringCloud的关系以及区别</h4><p>Spring是一个开源的轻量级控制反转和面向切面编程的容器框架。轻量级是说它开发使用简单，功能强大。控制反转是指将对象的创建，销毁控制交给ioc容器，方便解耦合，降低维护难度，面向切面编程是指将相同的逻辑横向抽取出来，可以对一些通用业务如事务，日志进行集中管理。</p><p>Springboot是一个基于spring的框架，对spring做了大量简化，使开发流程更快，更高效。比如它大量简化maven依赖，基于注解配置（JavaConfig）无需XML，内嵌Tomcat，部署流程简单，打包和部署更加灵活，允许独立运行</p><p>SpringCloud是基于SpringBoot实现的，用于微服务架构中管理和协调服务的，它是一系列框架的有序集合，它为开发者提供了一系列工具，例如服务发现与注册，配置中心，网关，负载均衡，熔断器，链路追踪等等，让微服务架构落地变得更简单</p><h3 id="分布式事务">分布式事务</h3><h4 id="什么是分布式事务，">什么是分布式事务，</h4><p>分布式事务，指的是在分布式环境中，一个请求可能涉及到对多个数据库的写操作，要保证多数据库的一致性就需要用到分布式事务</p><h4 id="分布式事务你知道哪些解决方案？-这些方案如何选型">分布式事务你知道哪些解决方案？   这些方案如何选型</h4><p>常见的分布式事务解决方案，2PC，TCC，可靠消息最终一致性，最大努力通知</p><p>2PC，它将整个事务流程分为两个阶段，P指的是准备阶段，C指的是提交阶段。它是一个阻塞协议，不适用于并发较高，事务生命周期长的分布式事务。</p><p>TCC，它是基于补偿性事务的AP系统的一种实现，补偿也就是说先按照预定方案执行，如果失败了就走补偿方案。它可以自己定义数据操作的粒度，但是对应用的侵入性强，可以用在登录送积分，送优惠券等等场景</p><p>可靠消息最终一致性，指的是当事务发起方执行完本地事务后，就发出一条消息通知其他参与方，并且他们一定能接收到消息并处理事务。适合执行周期长，并且实时性要求不高的场景</p><p>最大努力通知，是在不影响主业务的情况下，尽可能的保证数据的一致性，它适用于一些最终一致性敏感度低的业务，比如支付结果通知</p><h4 id="什么是2pc">什么是2pc</h4><p>2PC，是将整个事务流程分为两个阶段，P指的是准备阶段，C指的是提交阶段。它常见的标准有XA，JTA，Seata</p><p>由DTP模型定义事务管理器TM和资源管理器RM之间通讯的接口规范叫做XA，它规定的交互方式是酱紫的：应用程序AP通过TM提交和回滚事务，TM通过XA接口来通知RM数据库事务的开始，结束，提交，回滚</p><p>2PC能保证分布式事务的原子性，但是也有很多缺陷</p><p>比如，在第一阶段，如果参与者迟迟不回复协调者，就会造成事务的阻塞，性能不好</p><p>比如，在第二阶段，如果事务协调者发出提交事务指令后宕机，一部分参与者收到消息提交了事务，另一部分没有收到消息没有提交事务，这就会导致数据不一致</p><p>再比如，在第二阶段，如果事务协调者发出提交事务指令后宕机，收到指令的参与者也宕机了，我们就不能确定事务的执行结果，究竟有没有提交</p><h4 id="Seata相比传统2PC有什么区别，以及优点？">Seata相比传统2PC有什么区别，以及优点？</h4><p>Seata是由阿里中间件团队发起的开源项目Fescar更名而来，是一个开源的分布式事务框架，它通过对本地关系数据库的分支事务协调，来驱动完成全局事务</p><p>Seata的主要优点是性能好，不会长时间占用链接资源，对业务零入侵</p><p>与传统的2PC的区别主要两方面</p><p>在架构层次方面，传统的2PC方案的RM本质就是数据库自身，而Seata的RM是以jar包形式作为中间件层部署在应用程序上</p><p>在两阶段提交上方面，传统2PC方案是在第二阶段完成才释放资源，而Seata是在第一阶段就将本地事务提交，提高了效率</p><h4 id="Seata的TC-TM-RM的含义，以及作用？">Seata的TC,TM,RM的含义，以及作用？</h4><p>TC：事务协调器，它是独立的中间件，需要独立部署运行，它维护全局事务的运行状态，接收TM指令发起全局事务的提交与回滚，负责与RM通信协调各各分支事务的提交或回滚</p><p>TM：事务管理器，TM需要嵌入应用程序中工作，它负责开启一个全局事务，并最终向TC发起全局提交或全局回滚的指令</p><p>RM：控制分支事务，负责分支注册、状态汇报，并接收事务协调器TC的指令，驱动分支事务的提交和回滚</p><h4 id="你知道TCC吗，它有什么样的优缺点？">你知道TCC吗，它有什么样的优缺点？</h4><p>TCC是基于补偿型事务的AP系统的一种实现。补偿指的先按照事先预定的方案去执行，如果失败了就走补偿方案</p><p>它的优点是异步执行效率高，它能对分布式事务中的各个资源分别锁定，分别提交与释放</p><p>它的缺点是对应用的侵入性强，改动成本高，实现难度大</p><h4 id=""></h4><h4 id="解释一下Seata的工作原理">解释一下Seata的工作原理</h4><p>Seata有三个角色：</p><ul><li>TM任务管理器，负责开启，提交，回滚事务的发起，</li><li>TC事务协调器 ，接收TM的指令通知RM提交或者回滚事务</li><li>RM资源管理器，控制着分支事务的提交和回滚</li></ul><p>假设有服务A需要调用服务B，且两个服务都需要修改各自的数据库,A服务作为程序入口充当TM和RM，B服务控制着分支事务充当RM。</p><ul><li><p>A服务的TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID</p></li><li><p>A服务的RM向TC注册分支事务，并将其纳入XID对应全局事务的管辖</p></li><li><p>A服务执行分支事务，写undolog日志，向TC上报事务状态</p></li><li><p>当调用B服务时，B服务的RM向TC注册分支事务，该分支事务执行，然后写undolog,向TC上报事务状态</p></li><li><p>服务执行完毕A服务的TM向TC发送commit或者rollback指令</p></li><li><p>TC接收到指令，向参与事务的RM发送指令</p></li><li><p>事务参与者RM受到commit指令，删除undolog日志。  如果是rollback指令就根据undolog回滚</p></li></ul><h4 id="你能简单描述一下你在项目中是如何集成Seata的吗">你能简单描述一下你在项目中是如何集成Seata的吗</h4><p>事务协调器：安装并启动Seata客户端</p><p>主业务端：</p><ul><li><p>第一步，导入Seata依赖</p></li><li><p>第二步，yml中配置事务组名，同时需要添加配置文件file.conf，registry.conf，需要注意yml中事务组名与file.comf中的事务组名一致</p></li><li><p>第三步，配置DataSource，需要适用Seata对DataSource进行代理</p></li><li><p>第四步，数据库中添加undo log日志表</p></li><li><p>第五步，业务方法上加注解@GlobalTransactional(rollbackFor = Exception.class)注解</p></li></ul><p>事务参与者：</p><ul><li>前四步与主业务端相同，第五步不需要了</li></ul><h4 id="没有Seata或者TCC这些事务框架-你可以怎么处理事务">没有Seata或者TCC这些事务框架,你可以怎么处理事务?</h4><p>不用框架就要自己实现,如果业务要求强一致性这个不太好做,需要协调多个数据库的同时提交和回滚.如果是业务不要求强一致性,我可以参照TCC思想 ,可以考虑自己实现异步写数据库方案,如果失败可以做补偿.当然这个要根据业务特性来,很多大公司都是自己封装事务框架.</p><h3 id="分布式锁">分布式锁</h3><h4 id="你说一下什么是分布式锁">你说一下什么是分布式锁</h4><p>分布式锁是在分布式/集群环境中解决多线程并发造成的一系列数据安全问题.所用到的锁就是分布式锁，这种锁需要被多个应用共享才可以，通常使用Redis和zookeeper来实现。</p><h4 id="分布式锁有哪些解决方案">分布式锁有哪些解决方案</h4><h4 id="常用的三种方案">常用的三种方案</h4><p>基于数据库实现：通常基于主键，或者唯一索引来实现分布式锁,但是性能比较差，一般不建议使用</p><p>基于Redis ：可以使用setnx来加锁 ，但是需要设置锁的自动删除来防止死锁，所以要结合expire使用.为了保证setnx和expire两个命令的原子性，可以使用set命令组合。</p><p>另外释放锁在finallly中调用del删除锁，而删除锁前需要判断该锁是否是当前线程加的锁以免误删除锁，需要通过get获取锁然后进行判断，但是需要保证get判断或和del删除锁的原子性，可以使用LUA脚本实现。</p><p>总之自己封装Redis的分布式锁是很麻烦的，我们可以使用Redissoin来实现分布式锁，Redissoin已经封装好了。</p><p>基于zookeeper ： 使用临时顺序节点实现，线程进来都去创建临时顺序节点,第一个节点的创建线程获取到锁，后面的节点监听自己的上一个节点的删除事件，如果第一个节点被删除，释放锁第二个节点就成为第一个节点，获取到锁。</p><p>在项目中可以使用curator，这个是Apache封装好的基于zookeeper的分布式锁方案。</p><h4 id="Redis如何实现分布式锁，用什么命令">Redis如何实现分布式锁，用什么命令</h4><p>可以使用setnx来加锁 ，但是需要设置锁的自动删除来防止死锁，所以要结合expire使用.为了保证setnx和expire两个命令的原子性，可以使用set命令组合。</p><h4 id="Redis实现分布式锁可能会出现什么问题，如何解决">Redis实现分布式锁可能会出现什么问题，如何解决</h4><p>添加锁和设置过期时间可以使用set命令进行组合，达到原子性加锁</p><p>需要用lua解决删除和判断锁的原子性，否则可能会删除掉别人的锁。</p><p>Redis集群环境中，redis节点挂掉可能会导致加锁失败，可以使用Redisson的红锁来解决。</p><h4 id="你项目中怎么使用分布式锁的">你项目中怎么使用分布式锁的</h4><p>自己封装Redis的分布式锁是很麻烦的，我们可以使用Redissoin来实现分布式锁，Redissoin已经封装好了</p><h4 id="了解Redission的看门狗原理吗？">了解Redission的看门狗原理吗？</h4><p>Redisson对分布式锁进行了封装，对于锁超时问题，它提供了看门狗进行锁时间的续期，底层使用了定时任务每10s检查一下，如果业务还未执行完成，未释放锁，就进行超时时间续期。</p><h4 id="你在项目中如果使用ZK实现分布式锁的？">你在项目中如果使用ZK实现分布式锁的？</h4><p>基于zookeeper ： 使用临时顺序节点实现，线程进来都去创建临时顺序节点,第一个节点的创建线程获取到锁，后面的节点监听自己的上一个节点的删除事件，如果第一个节点被删除，释放锁第二个节点就成为第一个节点，获取到锁。</p><p>在项目中可以使用curator，这个是Apache封装好的基于zookeeper的分布式锁方案。</p><h2 id="四-技能提升">四.技能提升</h2><h3 id="多线程">多线程</h3><h4 id="创建线程是几种方式">创建线程是几种方式</h4><p>方式一：继承Thread类，覆写run方法，创建实例对象，调用该对象的start方法启动线程<br>方式二：创建Runnable接口的实现类，类中覆写run方法，再将实例作为此参数传递给Thread类有参构造创建线程对象，调用start方法启动</p><p>方式三：创建Callable接口的实现类，类中覆写call方法，创建实例对象，将其作为参数传递给FutureTask类有参构造创建FutureTask对象，再将FutureTask对象传递给Thread类的有参构造创建线程对象，调用start方法启动</p><p>Thread有单继承的局限性，Runnable和Callable三避免了单继承的局限，使用更广泛。Runnable适用于无需返回值的场景，Callable使用于有返回值的场景</p><h4 id="Thread的start和run的区别">Thread的start和run的区别</h4><p>start是开启新线程， 而调用run方法是一个普通方法调用，还是在主线程里执行。没人会直接调用run方法</p><h4 id="sleep-和-wait的区别">sleep 和 wait的区别</h4><p>第一，sleep方法是Thread类的静态方法，wait方法是Object类的方法</p><p>第二：sleep方法不会释放对象锁，wait方法会释放对象锁</p><p>第三：sleep方法必须捕获异常，wait方法不需要捕获异常</p><h4 id="线程的几种状态">线程的几种状态</h4><p>新建状态：线程刚创建，还没有调用start方法之前</p><p>就绪状态：也叫临时阻塞状态，当调用了start方法后，具备cpu的执行资格，等待cpu调度器轮询的状态</p><p>运行状态：就绪状态的线程，获得了cpu的时间片，真正运行的状态</p><p>冻结状态：也叫阻塞状态，指的是该线程因某种原因放弃了cpu的执行资格，暂时停止运行的状态，比如调用了wait，sleep方法</p><p>死亡状态：线程执行结束了，比如调用了stop方法</p><h4 id="Synchronized-和-lock的区别">Synchronized 和 lock的区别</h4><p>他们都是用来解决并发编程中的线程安全问题的，不同的是</p><ul><li>synchronized是一个关键字，依靠Jvm内置语言实现，底层是依靠指令码来实现；Lock是一个接口，它基于CAS乐观锁来实现的</li><li>synchronized在线程发生异常时，会自动释放锁，不会发生异常死锁，Lock在异常时不会自动释放锁，我们需要在finally中释放锁</li><li>synchronized是可重入，不可判断，非公平锁，Lock是可重入，可判断的，可手动指定公平锁或者非公平锁</li></ul><h4 id="你知道AQS吗">你知道AQS吗</h4><p>AQS：AbstractQuenedSynchronizer抽象的队列式同步器。是除了java自带的synchronized关键字之外的锁机制，它维护了一个volatile修饰的 int 类型的，state（代表共享资源）和一个FIFO线程等待队列（多线程争用资源被阻塞时会进入此队列）。</p><p>工作思想是如果被请求的资源空闲，也就是还没有线程获取锁，将当前请求资源的线程设置为有效的工作线程，并将共享资源设置为锁定状态，如果请求的资源被占用，就将获取不到锁的线程加入队列。</p><h4 id="悲观锁和乐观锁">悲观锁和乐观锁</h4><p>悲观锁和乐观锁，指的是看待并发同步问题的角度</p><ul><li><p>悲观锁认为，对同一个数据的并发操作，一定是会被其他线程同时修改的。所以在每次操作数据的时候，都会上锁，这样别人就拿不到这个数据。如果不加锁，并发操作一定会出问题。用阳间的话说，就是总有刁民想害朕</p></li><li><p>乐观锁认为，对同一个数据的并发操作，是不会有其他线程同时修改的。它不会使用加锁的形式来操作数据，而是在提交更新数据的时候，判断一下在操作期间有没有其他线程修改了这个数据</p></li></ul><p>悲观锁一般用于并发小，对数据安全要求高的场景,乐观锁一般用于高并发，多读少写的场景，通常使用版本号控制，或者时间戳来解决.</p><h4 id="你知道什么是CAS嘛">你知道什么是CAS嘛</h4><p>CAS,compare and swap的缩写，中文翻译成比较并交换。它是乐观锁的一种体现，CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。 如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值 。否则，处理器不做任何操作。</p><h4 id="Synchronized-加非静态和静态方法上的区别">Synchronized 加非静态和静态方法上的区别</h4><p>实例方法上的锁，锁住的是这个对象实例，它不会被实例共享，也叫做对象锁</p><p>静态方法上的锁，锁住的是这个类的字节码对象，它会被所有实例共享，也叫做类锁</p><h4 id="Synchronized-this-和-Synchronized-User-class-的区别">Synchronized(this) 和  Synchronized (User.class)的区别</h4><p>Synchronized(this) 中，this代表的是该对象实例，不会被所有实例共享</p><p>Synchronized (User.class)，代表的是对类加锁，会被所有实例共享</p><h4 id="Synchronized-和-volatitle-关键字的区别">Synchronized 和 volatitle 关键字的区别</h4><p>这两个关键字都是用来解决并发编程中的线程安全问题的，不同点主要有以下几点</p><p>第一：volatile的实现原理，是在每次使用变量时都必须重主存中加载，修改变量后都必须立马同步到主存；synchronized的实现原理，则是锁定当前变量，让其他线程处于阻塞状态</p><p>第二：volatile只能修饰变量，synchronized用在修饰方法和同步代码块中</p><p>第三：volatile修饰的变量，不会被编译器进行指令重排序，synchronized不会限制指令重排序</p><p>第四：volatile不会造成线程阻塞，高并发时性能更高，synchronized会造成线程阻塞，高并发效率低</p><p>第五：volatile不能保证操作的原子性，因此它不能保证线程的安全，synchronized能保证操作的原子性，保证线程的安全</p><h4 id="synchronized-锁的原理">synchronized 锁的原理</h4><p>synchronized是基于JVM内置锁实现，通过内部对象Monitor(监视器锁)实 现，基于进入与退出Monitor对象实现方法与代码块同步，监视器锁的实现依赖 底层操作系统的Mutex lock（互斥锁）实现，它是一个重量级锁性能较低，涉及到用户态到内核态的切换，会让整个程序性能变得很差。</p><p>因此在JDK1.6及以后的版本中，增加了锁升级的过程，依次为无锁，偏向锁，轻量级锁，重量级锁。而且还增加了锁粗化，锁消除等策略，这就节省了锁操作的开销，提高了性能</p><h4 id="synchronized-锁升级原理">synchronized 锁升级原理</h4><p>每个对象都拥有对象头，对象头由Mark World ，指向类的指针，以及数组长度三部分组成，锁升级主要依赖Mark Word中的锁标志位和释放偏向锁标识位。</p><ul><li>偏向锁（无锁）</li></ul><p>大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得。偏向锁的目的是在某个线程获得锁之后（线程的id会记录在对象的Mark Word锁标志位中），消除这个线程锁重入（CAS）的开销，看起来让这个线程得到了偏护。(第二次还是这个线程进来就不需要重复加锁，基本无开销)，如果自始至终使用锁的线程只有一个，很明显偏向锁几乎没有额外开销，性能极高。</p><ul><li>轻量级锁（CAS）：</li></ul><p>轻量级锁是由偏向锁升级来的，偏向锁运行在一个线程进入同步块的情况下，当第二个线程加入锁争用的时候，偏向锁就会升级为轻量级锁自旋锁）；没有抢到锁的线程将自旋，获取锁的操作。轻量级锁的意图是在没有多线程竞争的情况下，通过CAS操作尝试将MarkWord锁标志位更新为指向LockRecord的指针，减少了使用重量级锁的系统互斥量产生的性能消耗。</p><p>长时间的自旋操作是非常消耗资源的，一个线程持有锁，其他线程就只能在原地空耗CPU，执行不了任何有效的任务，这种现象叫做忙等（busy-waiting）</p><ul><li>重量级锁：</li></ul><p>如果锁竞争情况严重，某个达到最大自旋次数(10次默认)的线程，会将轻量级锁升级为重量级锁，重量级锁则直接将自己挂起，在JDK1.6之前，synchronized直接加重量级锁，很明显现在得到了很好的优化。</p><p>虚拟机使用CAS操作尝试将MarkWord更新为指向LockRecord的指针，如果更新成功表示线程就拥有该对象的锁；如果失败，会检查MarkWord是否指向当前线程的栈帧，如果是，表示当前线程已经拥有这个锁；如果不是，说明这个锁被其他线程抢占，此时膨胀为重量级锁。</p><h4 id="乐观锁的使用场景-数据库-ES">乐观锁的使用场景(数据库,ES)</h4><p>场景一：ES中对version的控制并发写。</p><p>场景二：数据库中使用version版本号控制来防止更新覆盖问题。</p><p>场景三：原子类中的CompareAndSwap操作</p><h4 id="AtomicInterger怎么保证并发安全性的">AtomicInterger怎么保证并发安全性的</h4><p>通过CAS操作原理来实现的，就可见性和原子性两个方面来说</p><p>它的value值使用了volatile关键字修饰，也就保证了多线程操作时内存的可见性</p><p>Unsafe这个类是一个很神奇的类，而compareAndSwapInt这个方法可以直接操作内存，依靠的是C++来实现的，它调用的是Atomic类的cmpxchg函数。而这个函数的实现是跟操作系统有关的，比如在X86的实现就利用汇编语言的CPU指令lock cmpxchg，它在执行后面的指令时，会锁定一个北桥信号，最终来保证操作的原子性</p><h4 id="什么是重入锁，什么是自旋锁，什么是阻塞">什么是重入锁，什么是自旋锁，什么是阻塞</h4><p>可重入锁是指允许同一个线程多次获取同一把锁，比如一个递归函数里有加锁操作</p><p>自旋锁不是锁，而是一种状态，当一个线程尝试获取一把锁的时候，如果这个锁已经被占用了，该线程就处于等待状态，并间隔一段时间后再次尝试获取的状态，就叫自旋</p><p>阻塞，指的是当一个线程尝试获取锁失败了，线程就就进行阻塞，这是需要操作系统切换CPU状态的</p><h4 id="你用过JUC中的类吗，说几个">你用过JUC中的类吗，说几个</h4><p>Lock锁体系  ，ConcurrentHashMap ，Atomic原子类，如：AtomicInteger ；ThreadLoal ; ExecutorService</p><h4 id="ThreadLocal的作用和原理">ThreadLocal的作用和原理</h4><p>ThreadLocal，翻译成中国话，叫做线程本地变量，它是为了解决线程安全问题的，它通过为每个线程提供一个独立的变量副本，来解决并发访问冲突问题 - 简单理解它可以把一个变量绑定到当前线程中，达到线程间数据隔离目的。</p><p>原理：ThredLocal是和当前线程有关系的，每个线程内部都有一个ThreadLocal.ThreadLocalMap类型的成员变量threadLocals，它用来存储每个线程中的变量副本，key就是ThreadLocal变量，value就是变量副本。</p><p>当我们调用get方法是，就会在当前线程里的threadLocals中查找，它会以当前ThreadLocal变量为key获取当前线程的变量副本</p><p>它的使用场景比如在spring security中，我们使用SecurityContextHolder来获取SecurityContext，比如在springMVC中，我们通过RequestContextHolder来获取当前请求，比如在 zuul中，我们通过ContextHolder来获取当前请求</p><h4 id="线程池的作用">线程池的作用</h4><p>请求并发高的时候，如果没有线程池会出现线程频繁创建和销毁而浪费性能的情况，同时没办法控制请求数量，所以使用了线程池后有如下好处</p><ul><li>主要作用是控制并发数量，线程池的队列可以缓冲请求</li><li>线程池可以实现线程的复用效果</li><li>使用线程池能管理线程的生命周期</li></ul><h4 id="Executors创建四种线程池">Executors创建四种线程池</h4><ul><li><p>CachedThreadPool：可缓存的线程池，它在创建的时候，没有核心线程，线程最大数量是Integer最大值，最大空闲时间是60S</p></li><li><p>FixedThreadPool：固定长度的线程池，它的最大线程数等于核心线程数，此时没有最大空闲时长为0</p></li><li><p>SingleThreadPool：单个线程的线程池，它的核心线程和最大线程数都是1，也就是说所有任务都串行的执行</p></li><li><p>ScheduledThreadPool：可调度的线程池，它的最大线程数是Integer的最大值，默认最长等待时间是10S，它是一个由延迟执行和周期执行的线程池</p></li></ul><h4 id="线程池的执行流程">线程池的执行流程</h4><p>corePoolSize，maximumPoolSize，workQueue之间关系。</p><ol><li>当线程池中线程数小于corePoolSize时，新提交任务将创建一个新线程(使用核心)执行任务，即使此时线程池中存在空闲线程。</li><li>当线程池中线程数达到corePoolSize时(核心用完)，新提交任务将被放入workQueue中，等待线程池中任务调度执行 。</li><li>当workQueue已满，且maximumPoolSize &gt; corePoolSize时，新提交任务会创建新线程(非核心)执行任务。</li><li>当workQueue已满，且提交任务数超过maximumPoolSize(线程用完，队列已满)，任务由RejectedExecutionHandler处理。</li><li>当线程池中线程数超过corePoolSize，且超过这部分的空闲时间达到keepAliveTime时，回收这些线程。</li><li>当设置allowCoreThreadTimeOut(true)时，线程池中corePoolSize范围内的线程空闲时间达到keepAliveTime也将回收。</li></ol><p><strong>线程池执行流程 ：</strong> 核心线程 =&gt; 等待队列 =&gt; 非核心线程 =&gt; 拒绝策略</p><h4 id="线程池构造器的7个参数">线程池构造器的7个参数</h4><ul><li><p>CorePoolSize：核心线程数，它是不会被销毁的</p></li><li><p>MaximumPoolSize ：最大线程数，核心线程数+非核心线程数的总和</p></li><li><p>KeepAliveTime：非核心线程的最大空闲时间，到了这个空闲时间没被使用，非核心线程销毁</p></li><li><p>Unit：空闲时间单位</p></li><li><p>WorkQueue：是一个BlockingQueue阻塞队列，超过核心线程数的任务会进入队列排队</p></li><li><p>ThreadFactory：它是一个创建新线程的工厂</p></li><li><p>Handler：拒绝策略，任务超过最大线程数+队列排队数 ，多出来的任务该如何处理取决于Handler</p></li></ul><h4 id="线程池拒绝策略有几种">线程池拒绝策略有几种</h4><p>拒绝策略，当线程池任务超过 最大线程数+队列排队数 ，多出来的任务该如何处理取决于Handler</p><ol><li>AbortPolicy丢弃任务并抛出RejectedExecutionException异常；</li><li>DiscardPolicy丢弃任务，但是不抛出异常；</li><li>DiscardOldestPolicy丢弃队列最前面的任务，然后重新尝试执行任务；</li><li>CallerRunsPolicy由调用线程处理该任务</li></ol><p>可以定义和使用其他种类的RejectedExecutionHandler类来定义拒绝策略。</p><h4 id="你知道ScheduledThreadPool使用场景吗">你知道ScheduledThreadPool使用场景吗</h4><p>这是带定时任务的线程池，EurekaClient拉取注册表&amp;心跳续约就是使用的这个线程池。</p><h3 id="索引部分">索引部分</h3><h4 id="什么是索引">什么是索引</h4><p>索引是用来高效获取数据的存储结构如同字典的目录一样，数据库的索引通常使用b+tree来实现，索引树的节点和数据地址相关联，查询的时候在索引树种进行高效搜索，然后根据数据地址获取数据。索引提高了搜索的效率同时增加了索引维护的成本，滥用索引也会降低insert,update,delete的性能。</p><h4 id="Mysql索引有哪些类型">Mysql索引有哪些类型</h4><p>普通索引：允许重复的值</p><p>唯一索引：不允许有重复的值</p><p>主键索引：数据库自动为我们的主键创建索引，如果我们没有指定主键，它会根据没有null的唯一索引创建主键索引，否则会默认根据一个隐藏的rowId作为主键索引</p><p>全文索引，用来对文本域进行索引，比如text，varchar，只针对MyISAM有效</p><h4 id="索引方式有哪些">索引方式有哪些</h4><p>B+树和hash，Myisam和innodb都不支持hash</p><h4 id="Mysql的索引结构原理">Mysql的索引结构原理</h4><p>采用了B+树的数据结构,采用B+树的原因，B+树是多叉树，适合存储大量数据，B+树的数据存储在叶子节点，内部节点只存键值，因此B+树每次查询都要走到叶子节点， 查询性能更稳定，同时它的非叶子节点只存储key，因此每个节点能存储更多的key，树的高度变的更低，查询性能更快，而且它的叶子节点能够形成一个链表，支持范围查询，排序 。</p><h4 id="InnoDB的索引结构和MyIsam的索引结构有什么区别">InnoDB的索引结构和MyIsam的索引结构有什么区别</h4><p>他们都是用的B+树，不同的是</p><ul><li><p>innodb的叶子节点存放的是数据，myisam的叶子节点存放的是数据的地址</p></li><li><p>innodb中辅助索引的叶子节点存放的是主键索引的键值，myisam中辅助索引的叶子节点存放的也是数据的地址</p></li><li><p>innodb的索引和数据都存放到一个文件中，myisam的索引和数据分别存放到不同的文件中</p></li></ul><h4 id="哪些列不适合创建索引">哪些列不适合创建索引</h4><p>不经常查询的列不适合创建索引</p><p>不出现在where中的字段不适合创建索引</p><p>离散度太低的字段不适合创建索引，比如性别</p><p>更新非常频繁的字段不适合创建索引</p><h4 id="哪些因素会造成索引失效">哪些因素会造成索引失效</h4><p>模糊查询时，通配符放到左边的时候，会导致索引失效比如 like ‘’%keyword%‘’</p><p>列是字符串类型，查询条件没有用引号，会导致索引失效</p><p>使用了or，in，not in，not exist， !=等，会导致索引失效</p><p>查询null值，会导致索引失效</p><p>还有mySQL认为全表扫描会比索引查找快，就不会使用索引，比如表里只有一条记录</p><h4 id="什么是辅助索引-什么是覆盖索引">什么是辅助索引&amp;什么是覆盖索引</h4><p>除了主键索引之外的其他索引都叫辅助索引，也叫二级检索。辅助索引的叶子节点存储的是主键索引的键值，因此辅助索引扫描完之后还会扫描主键索引，这也叫回表</p><p>但是如果查询的列恰好包含在辅助索引的键值中，就不会再回表了，这也叫覆盖索引</p><h4 id="InnoDB辅助索引的叶子节点也存数据吗">InnoDB辅助索引的叶子节点也存数据吗</h4><p>InnoDB辅助索引的叶子节点存放的是，主键索引的键值</p><p>因此辅助索引扫描完还会扫描主键索引，也叫回表</p><p>但是如果查询的列恰好包含在辅助索引的键值中，就不会再回表了，这也叫覆盖索引</p><h4 id="组合索引的匹配原则">组合索引的匹配原则</h4><p>组合索引向左匹配，我们应该优先选择组合索引，因为对覆盖索引命中率更高，查询性能更高，但是应该考虑列的顺序，因为组合索引会向左匹配</p><h4 id="Like一定会让索引失效吗">Like一定会让索引失效吗</h4><p>不一定，比如：like  “值%” 一样可以使用索引，向左匹配，而 like &quot;%值&quot;或 &quot;_值&quot;就不能命中索引。</p><h4 id="索引创建的原则有哪些">索引创建的原则有哪些</h4><p>查询较频繁的列应该考虑创建索引</p><p>不经常查询的列不适合创建索引</p><p>不出现在where中的字段不适合创建索引</p><p>离散度太低的字段不适合创建索引，比如性别</p><p>更新非常频繁的字段不适合创建索引</p><h3 id="数据库优化">数据库优化</h3><h4 id="哪些因素可能会造成数据库性能问题">哪些因素可能会造成数据库性能问题</h4><p>不合理的商业需求，比如实时更新总注册人数，总交易额等等，应该考虑不要实时</p><p>对于热点数据的查询并发太高，应该考虑用缓存</p><p>数据库结构设计不合理，比如几十个字段集中在一张表，应该考虑分表</p><p>SQL语句有问题，比如太多JOIN，很多不需要的字段也要全部查询出来，应该考虑优化SQL</p><p>硬件和网络方面的影响</p><h4 id="Mysql的执行流程是怎么样的">Mysql的执行流程是怎么样的</h4><p>客户端发起SQL查询，首先通过连接器，它会检查用户的身份，包括校验账户密码，权限</p><p>然后会查询缓存，如果缓存命中直接返回，如果没有命中再执行后续操作，但是MySQL8.0之后已经删除了缓存功能</p><p>接下来到达分析器，主要检查语法词法，比如SQL有没有写错，总共有多少关键字，要查询哪些东西</p><p>然后到达优化器，他会以自己的方式优化我们的SQL</p><p>最后到达执行器，调用存储引擎执行SQL并返回结果</p><h4 id="优化SQL你从哪些方面着手">优化SQL你从哪些方面着手</h4><p>不需要的字段就不要查询出来</p><p>小结果集驱动大结果集，将能过率更多数据的条件写到前面</p><p>in和not in尽量不要用，会导致索引失效</p><p>避免在where中使用or链接条件，这会导致索引失效</p><p>给经常要查询的字段建立索引</p><p>考虑如果不需要事务，并且主要查询的化，可以考虑使用MyISAM存储引擎</p><p>如果表数据量实在太庞大了，考虑分表</p><h4 id="如何去定位慢SQL">如何去定位慢SQL</h4><p>通过druid连接池的内置监控来定位慢SQL</p><p>通过MySQL的慢查询日志查看慢SQL</p><p>通过show processlist，查看当前数据库SQL执行情况来定位慢SQL</p><h4 id="页面上发起的一个查询很慢，你怎么去优化">页面上发起的一个查询很慢，你怎么去优化</h4><p>首先看一下硬件和网络层面，有没有什么异常</p><p>然后分析代码有没有什么问题，算法有没有什么缺陷，比如多层嵌套循环</p><p>最后我们再定位到慢SQL，比如</p><ul><li>通过druid连接池的内置监控来定位慢SQL</li><li>通过MySQL的慢查询日志查看慢SQL</li><li>通过show processlist，查看当前数据库SQL执行情况来定位慢SQL</li></ul><p>定位到慢SQL再考虑优化该SQL，比如说</p><ul><li>不需要的字段就不要查询出来</li><li>小结果集驱动大结果集，将能过率更多数据的条件写到前面</li><li>in和not in尽量不要用，会导致索引失效</li><li>避免在where中使用or链接条件，这会导致索引失效</li><li>考虑如果不需要事务，并且主要查询的化，可以考虑使用MyISAM存储引擎</li></ul><p>如果优化SQL后还是很慢，可以考虑给查询字段建索引来提升效率</p><p>如果建立索引了还是慢，看一下是不是数据量太庞大了，应该考虑分表了</p><h4 id="你如何看SQL有没有命中索引">你如何看SQL有没有命中索引</h4><p>在SQL语句前加上explain，结果中的key就是实际用到的索引</p><h4 id="mysql存储引擎有哪些，有什么区别，如何选择">mysql存储引擎有哪些，有什么区别，如何选择</h4><p>主要有innodb，memory，myisam</p><p>innodb支持事务，速度相对较慢，支持外键，不支持全文索引</p><p>myisam 速度相对较快，支持全文索引，不支持外键，不支持事务，</p><p>memory不支持事务，基于内存读写，速度快，支持全文索引</p><p>如果对事务要求不高，而且是查询为主，考虑用myisam</p><p>如果对事务要求高，保存的都是重要的数据，建议使用innodb，它也是默认的存储引擎</p><p>如果数据频繁变化的，不需要持久化，可以使用memory</p><h4 id="下面SQL如何优化">下面SQL如何优化</h4><p>一个sql ： select sum(amount) from recharge  ,来查询总充值，recharge  表数据量达到了上千万，怎么优化</p><p>可以考虑建个汇总表来统计总充值，总订单数，总人数等等等</p><p>或者采用日报表，月报表，年报表，使用定时任务进行结算的方式来统计</p><p>或者看数据能不能使用ES搜索引擎来优化，如果非得要在这个上千万的表中来查询，那就采用分表</p><h4 id="事务相关">事务相关</h4><h4 id="什么是事务">什么是事务</h4><p>一组对数据库的操作，把这一组看成一个再给你，要么全部成功，要么全部失败。</p><p>举个栗子，比如A向B转账，A账户的钱少了，B账户的钱就应该对应增加，这就转账成功了，如果A账户的钱少了，由于网络波动等因素转账失败了，B账户的钱没有增加，那么A账户就应该恢复成原先的状态</p><h4 id="事务的四大特性">事务的四大特性</h4><p>原子性：指的是一个事务应该是一个最小的无法分割的单元，不允许部分成功部分失败，只能同时成功，或者同时失败</p><p>持久性：一旦提交事务，那么数据就应该持久化，保证数据不会丢失</p><p>隔离性：两个事务修改同一个数据，必须按顺序执行，并且前一个事务如果未完成，那么中间状态对另一个事务不可见</p><p>一致性：要求任何写到数据库的数据都必须满足预先定义的规则，它基于其他三个特性实现的</p><h4 id="InnoDB如何保证原子性和持久性的">InnoDB如何保证原子性和持久性的</h4><p>通过undo log 保证事务的原子性，redo log保证事务的持久性</p><p>undo log是回滚日志，记录的是回滚需要的信息，redo log记录的是新数据的备份</p><p>当事务开始时，会先保存一个undo log，再执行修改，并保存一个redo log，最后再提交事务。如果系统崩溃数据保存失败了，可以根据redo log中的内容，从新恢复到最新状态，如果事务需要回滚，就根据undo log 回滚到之前的状态</p><h4 id="事务并发问题有哪些">事务并发问题有哪些</h4><p>脏读：事务A读到了事务B修改还未提交的数据</p><p>幻读，也叫虚读：事务A两次读取相同条件的数据，两次查询到的数据条数不一致，是由于事务B再这两次查询中插入或删除了数据造成的</p><p>不可重复读：事务A两次读取相同条件的数据，结果读取出不同的结果，是由于事务B再这两次查询中修改了数据造成的</p><p>第一类丢失更新：也叫回滚丢失，事务A和事务B更新同一条数据，事务B先完成了修改，此时事务A异常终止，回滚后造成事务B的更新也丢失了</p><p>第二类丢失更新：也叫覆盖丢失，事务A和事务B更新同一条数据，事务B先完成了修改，事务A再次修改并提交，把事务B提交的数据给覆盖了</p><h4 id="事务隔离级别有哪些，分别能解决什么问题">事务隔离级别有哪些，分别能解决什么问题</h4><p>读未提交：事务读不阻塞其他事务的读和写，事务写阻塞其他事务的写但不阻塞读，能解决第一类丢失更新的问题，</p><p>读已提交：事务读不会阻塞其他事务读和写，事务写会阻塞其他事务的读和写，能解决第一类丢失更新，脏读的问题</p><p>可重复读：事务读会阻塞其他事务的写但不阻塞读，事务写会阻塞其他事务读和写，能解决第一类丢失更新，脏读，不可重复读，第二类丢失更新问题</p><p>串行化：使用表级锁，让事务一个一个的按顺序执行，能解决以上所有并发安全问题</p><h4 id="MySql的InnoDB是如何保证原子性的">MySql的InnoDB是如何保证原子性的</h4><p>利用了undo log实现的</p><p>undo log记录了这些回滚需要的信息，当事务执行失败或调用了rollback，导致事务需要回滚，就可以利用undo log中的信息将数据回滚到修改之前的样子</p><h4 id="MySql的InnoDB是如何保证持久性的">MySql的InnoDB是如何保证持久性的</h4><p>利用了redo log实现的</p><p>redo log记录的是新数据的备份，在事务提交前，需要将Redo Log持久化，当系统崩溃时，可以根据redo Log的内容，将所有数据恢复到最新的状态</p><h4 id="说一下事务的执行流程-Undolog-Redolog">说一下事务的执行流程(Undolog+Redolog)</h4><p>假设有A=1，B=2，两个数据，现在有个事务把A修改为3，B修改为4，那么事务的执行流程：</p><p>当事务开始时，会首先记录A=1到undo log，记录A=3到redo log，和记录B=2到undo log，记录B=4到redo log，然后再将redo log写入磁盘，最终事务提交</p><h4 id="解释一下事务并发丢失更新问题，·如何解决">解释一下事务并发丢失更新问题，·如何解决</h4><p>第一类丢失更新：也叫回滚丢失，事务A和事务B更新同一条数据，事务B先完成了修改，此时事务A异常终止，回滚后造成事务B的更新也丢失了</p><p>第二类丢失更新：也叫覆盖丢失，事务A和事务B更新同一条数据，事务B先完成了修改，事务A再次修改并提交，把事务B提交的数据给覆盖了</p><p>SQL标准中的四种隔离级别，读未提交，读已提交，可重复读，串行化，都能解决第一类数据更新丢失问题</p><p>对于第二类丢失更新问题，可以使用悲观锁也就是串行化来解决，也可以使用乐观锁的方式，比如加一个版本号管理来解决</p><h4 id="InnoDB事务隔离的实现原理是什么">InnoDB事务隔离的实现原理是什么</h4><p>隔离的实现主要利用了读写锁和MVCC机制</p><p>读写锁，要求在每次读操作时需要获取一个共享锁，写操作时需要获取一个写锁。共享锁之间不会产生互斥，共享锁和写锁，写锁与写锁之间会产生互斥。当产生锁竞争时，需要等一个操作的锁释放，另一个操作才能获得锁</p><p>MVCC，多版本并发控制，它是在读取数据时通过一种类似快照的方式将数据保存下来，不同的事务看到的快照版本是不一样的，即使其他事务修改了数据，但是对本事务仍然是不可见的，它只会看到第一次查询到的数据</p><p>可重复读是只在事务开始的时候生成一个当前事务全局性的快照，而读提交则是每次执行语句的时候都重新生成一次快照</p><h3 id="数据库集群">数据库集群</h3><h4 id="Mysql主从解决什么问题，不能解决什么问题？">Mysql主从解决什么问题，不能解决什么问题？</h4><p>MySQL主从同步，主负责写，从负责读，使用一主多从，能减轻读的压力</p><p>但是这不能解决写的压力和主库的单点故障，如果主库的写并发高，可以做成多个主库</p><h4 id="MySql主从复制原理？">MySql主从复制原理？</h4><p>主要依靠binlog来实现的，它记录的是所有的DDL，DML，TCL操作</p><p>当主库的数据发生改变时，会将改变记录保存到binlog中</p><p>从库新开一个线程将binlog内容发送到从库</p><p>从库会发起一个I/O线程请求主库的binlog，并保存到中继日志中</p><p>从库新开一个SQL线程，读取中继日志并解析成具体操作，从而将主库更新的内容写到了从库中</p><h4 id="MySql主从配置步骤？">MySql主从配置步骤？</h4><p>安装mySQL主从客户端，并配置my.ini</p><p>主库需要配置授权从库使用的账号和权限，启动后可以通过show 主库名 status查看状态，我们需要记录File和Position的值，File是对应的binlog文件名，position是当前同步数据的最新行</p><p>从库需要配置主库链接信息，包括账号密码和binlog文件名和最新行，然后启动。通过show 从库名 status 检查同步状态，Slave_IO_Running 和 Slave_SQL_Running 的值都为YES，说明大功告成了</p><h4 id="什么是垂直分表，垂直分库，水平分表，水平分库">什么是垂直分表，垂直分库，水平分表，水平分库</h4><p>垂直分表，可以理解为按列分表，如果一个表的字段太多了，可以按照使用频率分成不同的表，优化查询性能。比如商品表可以分为商品类型表，商品详情表，商品促销表等等</p><p>垂直分库，为了减轻单个数据库压力，我们可以按照业务类型，拆分成多个数据库，比如分布式架构，不同的模块可以有不同的数据库</p><p>水平分表，可以理解为按行分表，如果一个表的数据有千万行，查询性能太低，可以拆分成10张小表，每张表保存一百万行数据</p><p>水平分库，我们做了水平分表后，表数量太多了也会影响数据库查询效率，我们可以将这些表分到多个数据库中</p><h4 id="分库分表后会出现哪些问题？怎么解决">分库分表后会出现哪些问题？怎么解决</h4><p>会产生分布式事务，以前本地事务就能结局的问题现在要用上Seata分布式事务</p><p>垂直分库后跨库查询会导致一个查询结果来源于两个库，可能要用到多线程调用多个库查询</p><p>水平分库后一个分页查询的某一页可能来自两个库，可以将两个库的数据合并之后再执行SQL</p><p>水平分表后不同的表出现主键重复，可以通过雪花算法来解决</p><p>两个库都用到同一个表，那这个公共表的维护可能要用到MySQL主从同步</p><h4 id="你们公司使用的是什么技术来水平分表？还可以有什么技术？有什么区别？">你们公司使用的是什么技术来水平分表？还可以有什么技术？有什么区别？</h4><p>使用的是sharding-jdbc来实现的，它是由java开发的关系型数据库中间件，读写分离，分库分表操作简单</p><p>TDDL，淘宝业务框架，复杂而且分库分表的部分还没有开源</p><p>Mycat，要安装额外的环境，不稳定用起来复杂</p><p>MySQL官方提供的中间件，不支持大数据量的分不分表，性能较差</p><h4 id="你们使用什么规则来分库分表的？还有哪些规则？">你们使用什么规则来分库分表的？还有哪些规则？</h4><p>垂直分库，按照业务进行垂直分库，比如课程表和用户表放到不同数据库</p><p>垂直分表，把多字段表拆分少量字段表，比如将课程表分为课程类型表，课程详情表，课程促销表等</p><p>水平分表，把海量数据表拆分为多个小表</p><p>把商品业务进行水平分库，可以对水平分库后每一个数据库服务器进行集群</p><h4 id="你从哪些方面去优化你的数据库？">你从哪些方面去优化你的数据库？</h4><p>如果是并发高，可以考虑缓存，如果是数据量大可以考虑分库分表，具体如下：</p><p>首先应该考虑垂直分库，不同的业务使用不同的数据库</p><p>然后进行垂直分表，按照使用频率把字段多的表拆分成若干个表</p><p>对经常查询的列建立索引，提高查询效率</p><p>设计冗余字段，减少join表的次数</p><p>SQL优化，比如尽量使用索引查询</p><p>对热点数据应该考虑做缓存，比如首页展示汇总数据</p><p>从海量数据中查询数据应该考虑用全文检索</p><p>如果查询并发高，可以对mySQL做集群</p><p>如果数据量实在太大了，可以考虑水平分表，</p><p>水平分表后，表数量还是太多了，可以考虑水平分库</p><h4 id="Mysql的集群有哪些模式？">Mysql的集群有哪些模式？</h4><p>一主一从；一主多从；双主；环形多主；级联同步</p><h4 id="单机优化到极致了，可以怎么优化？">单机优化到极致了，可以怎么优化？</h4><p>可以考虑做集群，比如一主多从模式，然后对应用做读写分离</p><h4 id="多机优化有哪些方式？">多机优化有哪些方式？</h4><p>分表，分库，主从同步</p><h4 id="解释一下分库分表的含义？">解释一下分库分表的含义？</h4><p>垂直分表，可以理解为按列分表，如果一个表的字段太多了，可以按照使用频率分成不同的表，优化查询性能。比如商品表可以分为商品类型表，商品详情表，商品促销表等等</p><p>垂直分库，为了减轻单个数据库压力，我们可以按照业务类型，拆分成多个数据库，比如分布式架构，不同的模块可以有不同的数据库</p><p>水平分表，可以理解为按行分表，如果一个表的数据有千万行，查询性能太低，可以拆分成10张小表，每张表保存一百万行数据</p><p>水平分库，我们做了水平分表后，表数量太多了也会影响数据库查询效率，我们可以将这些表分到多个数据库中</p><h4 id="水平分表有哪些分表规则？">水平分表有哪些分表规则？</h4><p>按照区间范围分表，比如把用户按照年龄分为新生代表，青年代表，老年代表</p><p>按照时间分表，比如按照年来分表，比如登录日志，分成今年的表，去年的表。。</p><p>hash分表，通过将某一列的值比如id，通过一定的hash算法来算出对应那张表</p><p>雪花算法，通过雪花算法生成id，根据id来算出对应那张表</p><h4 id="能简单说一下你怎么使用shardingjdbc做读写分离的嘛">能简单说一下你怎么使用shardingjdbc做读写分离的嘛</h4><p>首先导入相关的依赖</p><p>然后在配置文件中配置datasource，包括主从数据库的名字，主从数据库的连接信息，配置负载均衡</p><p>项目中就可以正常使用datasource了，自动做读写分离</p><h4 id="能简单说一下你怎么使用shardingjdbc做读分库分表的嘛">能简单说一下你怎么使用shardingjdbc做读分库分表的嘛</h4><p>首先，要改造数据库，比如水平分表，水平分库</p><p>在配置文件中，需要做如下配置</p><ul><li><p>datasource名字，多个数据源就配多个datasource</p></li><li><p>分库策略，比如按照哪一列分库，分库规则</p></li><li><p>分表策略，比如哪些库下面的哪些表，按照那一列分表，分表规则</p></li><li><p>配置公共的表</p></li></ul><p>然后项目中就可以正常使用了</p><h3 id="JVM篇">JVM篇</h3><h4 id="你们用什么工具监控JVM">你们用什么工具监控JVM</h4><p>jconsule, jvisualvm</p><h4 id="JVM类加载流程">JVM类加载流程</h4><p>loading加载：class文件从磁盘加载到内存中</p><p>verification验证：校验class文件，包括字节码验证，元数据验证，符号引用验证等等</p><p>preparation准备：静态变量赋默认值，只有final会赋初始值</p><p>resolution解析：常量池中符号引用，转换成直接访问的地址</p><p>initializing初始化：静态变量赋初始值</p><h4 id="JVM类加载器有几种类型，分别加载什么东西，用到什么设计模式？">JVM类加载器有几种类型，分别加载什么东西，用到什么设计模式？</h4><ol><li><p>BootStrap ClassLoader 启动类加载器，加载&lt;JAVA_HOME&gt;\lib下的类</p></li><li><p>Extenstion ClassLoader 扩展类加载器，加载&lt;JAVA_HOME&gt;\lib\ext下的类</p></li><li><p>Application ClassLoader 应用程序类加载器，加载Classpath下的类</p></li><li><p>自定义类加载器</p></li></ol><p>这里是用到了双亲委派模式，从上往下加载类，在这过程中只要上一级加载到了，下一级就不会加载了，这麽做的目的</p><ul><li>不让我们轻易覆盖系统提供功能</li><li>也要让我们扩展我们功能。</li></ul><h4 id="JVM组成，以及他们的作用">JVM组成，以及他们的作用</h4><p>运行时数据区：</p><ul><li><p>堆：存放对象的区域，所有线程共享</p></li><li><p>虚拟机栈：对应一个方法，线程私有的，存放局部变量表，操作数栈，动态链接等等</p></li><li><p>本地方法栈：对应的是本地方法，在hotspot中虚拟机栈和本地方法栈是合为一体的</p></li><li><p>程序计数器：确定指令的执行顺序</p></li><li><p>方法区：存放虚拟机加载的类的信息，常量，静态变量等等，JDK1.8后，改为元空间</p></li></ul><p>执行引擎：</p><ul><li><p>即时编译器，用来将热点代码编译成机器码（编译执行）</p></li><li><p>垃圾收集，将没用的对象清理掉</p></li></ul><p>本地方法库：融合不同的编程语言为java所用</p><h4 id="在JVM层面，一个线程是如何执行的">在JVM层面，一个线程是如何执行的</h4><p>线程执行，每个方法都会形成一个栈帧进行压榨保存到虚拟机栈中，方法调用结束就回出栈。调用过程中创建的变量在虚拟机栈，对象实例存放在堆内存中，栈中的变量指向了对中的内存。当方法执行完成就出栈，创建的变量会被销毁，堆中的对象等待GC。</p><h4 id="程序内存溢出了，如何定位问题出在哪儿？">程序内存溢出了，如何定位问题出在哪儿？</h4><p>增加启动参数-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=d:\ 可以把内存溢出的日志输出到文件，然后通过JVM监视工具VisualVM来分析日志，定位错误所在。在linux服务器也可以使用命令： jmap -dump  来下载堆快照。</p><h4 id="垃圾标记算法">垃圾标记算法</h4><p>垃圾标记算法有：引用计数和可达性算法</p><ul><li>引用计数 ： 给每一个对象添加一个引用计数器，每当<code>有一个地方引用它时，计数器值加1</code>；每当有一个地方<code>不再引用它时，计数器值减1</code>，这样只要计数器的值不为0，就说明还有地方引用它，它就不是无用的对象. 这种算法的问题是当某些对象之间互相引用时，无法判断出这些对象是否已死</li><li>GC Roots ：找到一个对象作为 CG Root  , 当一个对象到GC Roots没有任何引用链相连（GC Roots到这个对象不可达）时，就说明此对象是不可用的</li></ul><h4 id="垃圾回收算法">垃圾回收算法</h4><ul><li><p>标记清除算法 ：分为标记和清除两个阶段，首先标记出所有需要回收的对象，标记完成后统一回收所有被标记的对象 ；缺点：标记和清除两个过程效率都不高；标记清除之后会产生大量不连续的内存碎片。</p></li><li><p>复制算法 ：把内存分为大小相等的两块，每次存储只用其中一块，当这一块用完了，就把存活的对象全部复制到另一块上，同时把使用过的这块内存空间全部清理掉，往复循环 ，缺点：实际可使用的内存空间缩小为原来的一半，比较适合</p></li><li><p>标记整理算法 ：先对可用的对象进行标记，然后所有被标记的对象向一段移动，最后清除可用对象边界以外的内存</p></li><li><p>分代收集算法 ：把堆内存分为<code>新生代和老年代</code>，新生代又分为Eden区、From Survivor和To Survivor。一般新生代中的对象基本上都是朝生夕灭的，每次只有少量对象存活，因此<code>新生代采用复制算法</code>，只需要复制那些少量存活的对象就可以完成垃圾收集；<code>老年代中的对象存活率较高，就采用标记-清除和标记-整理算法</code>来进行回收。</p></li></ul><h4 id="垃圾回收器有哪些">垃圾回收器有哪些</h4><ul><li><p>新生代：Serial ：一款用于<code>新生代的单线程收集器，采用复制算法进行垃圾收集</code>。Serial进行垃圾收集时，不仅只用一条线程执行垃圾收集工作，它在收集的同时，所有的用户线程必须暂停（Stop The World</p></li><li><p>新生代：ParNew : ParNew就是一个Serial的多线程版本`，其它与Serial并无区别。ParNew在单核CPU环境并不会比Serial收集器达到更好的效果，它默认开启的收集线程数和CPU数量一致，可以通过-XX:ParallelGCThreads来设置垃圾收集的线程数。</p></li><li><p>新生代：Parallel Scavenge(掌握) Parallel Scavenge也是一款用于新生代的<code>多线程收集器</code>，与ParNew的不同之处是，ParNew的目标是<code>尽可能缩短垃圾收集时用户线程的停顿时间，Parallel Scavenge的目标是达到一个可控制的吞吐量</code>.Parallel Old收集器以多线程，采用标记整理算法进行垃圾收集工作。</p></li><li><p>老年代：Serial Old ,Serial Old收集器是Serial的老年代版本，同样是一个单线程收集器，采用标记-整理算法。</p></li><li><p>老年代CMS收集器是一种以最短回收停顿时间为目标的收集器，以“最短用户线程停顿时间”著称。整个垃圾收集过程分为4个步骤</p><ul><li>初始标记：标记一下GC Roots能直接关联到的对象，速度较快</li><li>并发标记：进行GC Roots Tracing，标记出全部的垃圾对象，耗时较长</li><li>重新标记：修正并发标记阶段引用户程序继续运行而导致变化的对象的标记记录，耗时较短</li><li>并发清除：<code>用标记-清除算法清除垃圾对象</code>，耗时较长</li></ul><p>整个过程耗时最长的并发标记和并发清除都是和用户线程一起工作，所以从总体上来说，<code>CMS收集器垃圾收集可以看做是和用户线程并发执行的。</code></p></li><li><p>老年代：Parallel Old ,Parallel Old收集器是Parallel Scavenge的老年代版本，是一个<code>多线程收集器，采用标记-整理算法。可以与Parallel Scavenge收集器搭配，可以充分利用多核CPU的计算能力</code>。</p></li><li><p>堆收集：G1 收集器, G1 收集器是jdk1.7才正式引用的商用收集器，现在已经成为<code>jdk1.9默认的收集器</code>。前面几款收集器收集的范围都是新生代或者老年代，<code>G1进行垃圾收集的范围是整个堆内存</code>，它采用“化整为零”的思路，<code>把整个堆内存划分为多个大小相等的独立区域（Region）</code>在每个Region中，都有一个Remembered Set来实时记录该区域内的引用类型数据与其他区域数据的引用关系<code>（在前面的几款分代收集中，新生代、老年代中也有一个Remembered Set来实时记录与其他区域的引用关系），在</code>标记时直接参考这些引用关系就可以知道这些对象是否应该被清除，而不用扫描全堆的数据</p></li></ul><p>Jdk1.7.18新生代使用Parallel Scavenge,老年代使用Parallel Old</p><h4 id="Minor-GC和Full-GC">Minor GC和Full GC</h4><p>新生代的回收称为Minor GC，新生代的回收一般回收很快，采用<code>复制算法，造成的暂停时间很短 ，而Full GC一般是老年代的回收,并伴随至少一次的Minor GC，新生代和老年代都回收，而老年代采用</code>标记-整理算法<code>，</code>这种GC每次都比较慢<code>，</code>造成的暂停时间比较长`，通常是Minor GC时间的10倍以上。尽量减少 Full GC</p><h4 id="JVM优化的目的是什么？">JVM优化的目的是什么？</h4><p>优化程序的内存使用大小，以及减少CG来减少程序的停顿来提升程序的性能。</p><h4 id="堆怎么调，栈怎么调">堆怎么调，栈怎么调</h4><p>-Xms : 初始堆，1/64 物理内存</p><p>-Xmx : 最大堆，1/4物理内存</p><p>-Xmn :新生代大小</p><p>-Xss : 栈大小</p><h3 id="设计模式">设计模式</h3><h4 id="什么是单例，如何实现">什么是单例，如何实现</h4><p>一个类只能有一个实例，主要用于需要频繁使用的对象避免频繁初始化和销毁来提高性能，或者资源需要相互通信的环境</p><p>主要实现方式有，饿汉模式，懒汉模式，枚举，静态内部类</p><p>饿汉模式，是在类加载过程中就将这个单例对象实例化，需要将构造方法私有化，定义一个成员变量并new一个该类的实例作为初始值，提供一个公共的静态方法获取这个实例</p><p>懒汉模式，是在使用时才创建这个单例对象，需要将构造方法私有化，定义一个该类的成员变量不赋初始值，提供一个获取实例的公共静态方法。特别注意这个方法需要保证多线程环境下的并发安全性，可以通过DCL加volatile关键字来解决</p><p>枚举，直接在枚举中定义字段，它就是单例并且线程安全的</p><p>静态内部类，在类中搞一个静态内部类，在静态内部类中搞一个目标类的静态成员变量并且new一个实例作为初始值。然后在目标类中定义一个获取实例的静态方法，方法返回的就是静态内部类中的成员变量。这种方式能保证线程安全，也能实现延迟加载。缺点是这种方式传参不太方便</p><h4 id="模板模式的作用">模板模式的作用</h4><p>定义一个算法骨架，而将某个或多个具体的实现延迟到子类中，使得子类可以在不修改当前算法的结构情况下，重新定义当前算法的某些特定步骤</p><p>比如考试中所有考生的试卷都一样，答案由每个考生自己完成</p><h4 id="什么是适配器模式">什么是适配器模式</h4><p>将不兼容的接口转换为可兼容的接口的中间类</p><p>比如HandlerInterceptorAdapter ，我们定义拦截器时不需要覆写HandlerInterceptor中的所有方法，因为适配器类帮我们做了空实现。但JDK1.8之后，给接口中增加了默认方法，可以有方法体，因此这些适配器类已经失去作用了</p><h4 id="什么是代理模式？有几种代理？">什么是代理模式？有几种代理？</h4><p>不直接使用实际对象，通过调用代理对象间接调用实际对象，主要用作对实际对象的增强，分为静态代理，JDK动态代理，CGLIB动态代理</p><h4 id="JDK动态代理和CGLIB动态代理的区别？">JDK动态代理和CGLIB动态代理的区别？</h4><p>JDK动态代理是jdk提供的，我们可以直接使用，而CGLIB需要导入第三方库</p><p>JDK动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用目标方法前调用InvokeHandler来处理</p><p>CGLIB动态代理是先加载目标类的class文件，然后修改其字节码生成子类来实现的</p><h4 id="常见的设计模式说一下">常见的设计模式说一下</h4><p>单例模式：一个类只能有一个实例，分为饿汉模式（迫切加载）和懒汉模式（延迟加载）和枚举。</p><p>工厂模式：隐藏了产品的复杂创建过程，实现生产功能的复用，让产品生产更加高效。分为简单工厂（需要来回切换生产线），工厂方法（开设新的生产线），抽象工厂（制定创建产品的接口，让子工厂选择创建哪种产品）</p><p>在Spring中各种的BeanFactory创建bean都用到了</p><p>模板模式：定义一个算法骨架或者算法的流程，而不同的实例实现方式不同，将某个或多个具体的实现延迟到子类中，比如RedisTemplate实现了RedisOperations，ElasticSearchTemplate实现了ElasticsearchOperations</p><p>代理模式：不直接使用实际对象，通过调用代理对象间接调用实际对象，主要用作对实际对象的增强，分为静态代理，JDK动态代理，CGLIB动态代理比如Spring的AOP原理就是动态代理，当目标对象实现了接口会使用JDK动态代理，没有实现接口会使用CGLIB动态代理</p><p>适配器模式：将不兼容的接口转换为可兼容的接口的中间类，比如HandlerInterceptorAdapter ，我们定义拦截器时不需要覆写HandlerInterceptor中的所有方法，因为适配器类帮我们做了空实现。但JDK1.8之后，给接口中增加了默认方法，可以有方法体，因此这些适配器类已经失去作用了</p><p>观察者模式：当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新，比如Spring中的ApplicationListener</p><h3 id="数据结构">数据结构</h3><h4 id="数据结构有哪几种分类">数据结构有哪几种分类</h4><p>按照逻辑结构分</p><ul><li>集合：没有相互关系的一堆数据</li><li>线性结构：元素存在一对一的相互关系</li><li>树形结构：元素存在一对多的相互关系</li><li>图形结构：元素存在多对多的相互关系</li></ul><p>按照物理结构分</p><ul><li><p>顺序存储结构：用一组地址连续的存储空间依次存储线性表的数据元素，也叫顺序存储结构，比如数组</p></li><li><p>链接存储结构：用一组任意的存储空间来存储线性表中的数据元素，不要求相邻元素在物理位置上也相邻，比如链表</p></li><li><p>数据索引存储结构：建立附加的索引来标识节点的地址，通过索引，可以很快检索数据</p></li><li><p>数据散列存储结构：将数据元素的存储位置与关键字之间建立确定的对应关系，加快查找的速度，又叫hash存储</p></li></ul><h4 id="数组和链表在内存中的存储结构有什么区别">数组和链表在内存中的存储结构有什么区别</h4><p>数组在内存中是一组连续的存储空间，它随机存取元素性能很高，但是插入和删除操作，需要移动其他元素，因此性能很低</p><p>链表在内存中的存储空间可以是不连续的，而在每一个元素中都保存相邻节点的指针，因此它的存储密度相对较小，查找的性能低，因为需要从第一个元素依次遍历，但是它的插入和删除操作性能很高，因为它不需要移动节点，只需要改变相邻节点指针就行了，同时它更容易造成内存的碎片化</p><h4 id="说一下散列存储-Hash存储-，-什么是Hash冲突-，-有什么解决方案">说一下散列存储(Hash存储) ， 什么是Hash冲突 ， 有什么解决方案</h4><p>散列存储，它通过把关键码的值映射到表中的一个位置，来提高查询的速度。而这个映射函数叫做散列函数。</p><p>哈希冲突，也叫哈希碰撞，指的是两个不同的值，计算出了相同的hash，也就是两个不同的数据计算出同一个下标，通常解决方案有：</p><ul><li><p>拉链法，把哈希碰撞的元素指向一个链表</p></li><li><p>开放寻址法，把产生冲突的哈希值作为值，再进行哈希运算，直到不冲突</p></li><li><p>再散列法，就是换一种哈希算法重来一次</p></li><li><p>建立公共溢出区，把哈希表分为基本表和溢出表，将产生哈希冲突的元素移到溢出表</p></li></ul><h4 id="说说-数组，链表，循环，嵌套循环的时间复杂度">说说 数组，链表，循环，嵌套循环的时间复杂度</h4><p>时间复杂度是用来度量算法执行的时间长短，通常我们用Ｏ(f(n))渐进时间复杂度来衡量，比如说</p><ul><li>要在 hash 表中找到一个元素就是 O(1)</li><li>要在无序数组中找到一个元素就是 O(n)</li><li>访问数组的第 n 个元素是 O(1)</li><li>二分搜索的时间复杂度最好的情况是 O(1)，最坏情况（平均情况）下 O(log n)</li><li>访问链表的第 n 个元素是 O(n)</li><li>一个For循环是O(n)</li><li>两个For循环嵌套是O(n2)</li><li>三个Foreach嵌套是O(n3)</li></ul><h4 id="JDK中线性结构的集合有哪些">JDK中线性结构的集合有哪些</h4><p>数组：按照顺序物理结构存储，ArrayList</p><p>链表：按照链式物理结构存储，LinkedList</p><p>栈：LIFO后进先出的线性存储结构，分为用数组实现的顺序栈，用链表实现的链栈</p><p>队列：FIFO先进先出的线性存储结构，分为顺序队列和链式队列</p><p>串：特殊的线性存储结构，String，StringBuffer，StringBuilder</p><h4 id="你说一下树形结构对比线性结构的优势">你说一下树形结构对比线性结构的优势</h4><p>线性结构，对于大量的输入数据，访问时间很长，效率很低，树形结构的优势在于它查找数据性能很高</p><h4 id="说一下树的分类，以及你对它们的理解">说一下树的分类，以及你对它们的理解</h4><p>树有二叉树，多叉树，他们特点如下</p><ul><li><p>二叉树：树中任意节点最多只有两个分叉的树，它又分为二叉排序树，平衡二叉树，赫夫曼树，红黑树</p></li><li><p>二叉排序树，它是一个有序的二叉树，优势在于查找插入数据的性能很高，但是可能会出现倾斜而变成数组</p></li><li><p>平衡二叉树，二叉排序树进化形态，要求任何节点的两颗字数高度差不大于1。它的查询性能很高，但是每次增删元素，会重排序导致性能低</p></li><li><p>红黑树，自平衡二叉树，要求根节点和叶子节点是黑色，其他节点红黑交替，在任何一个子树中，从根节点向下走到空姐点的路径经过的黑节点数相同。从而保证了平衡。它的查询性能比平衡二叉树稍低，插入和删除元素的性能大幅提高。</p></li></ul><p>多叉树：解决二叉树存储大规模数据时，深度过大而导致IO性能低，查询效率低的问题，常见有B树和B+树，字典树，后缀树等等</p><ul><li><p>B树，自平衡的树，一个节点可以存储多个key，和拥有key数量+1个分叉，适用于读写相对大的数据块，比如文件系统，数据库索引。因为相对二叉树来说，节点存储key越多，分叉越多，需要的节点越少，树高越矮，IO次数少，查询效率越高。</p></li><li><p>B+树，B树升级版，它的内部节点只存储key，不存储具体数据，叶子节点存放key和具体数据。这就使得每个节点可以存更多的key，树的高度更低，查询更快，同时它每次查询都会到叶子节点，查询速度更稳定。并且所有的叶子节点会组成一个有序链表，方便区间查询</p></li></ul><h4 id="有是二叉树为什么要出现多叉树">有是二叉树为什么要出现多叉树</h4><p>因为二叉树在大规模的数据存储中，树会高的没谱，这会导致IO读写过于频繁，查询效率低下</p><p>多叉树可以解决这个问题，它每层可以存放更多的数据，因此能大幅度降低树的深度，提高查询性能</p><h4 id="B-tree和b-tree的区别">B-tree和b+tree的区别</h4><p>一是节点存储内容上的区别：B树每个节点都可以存放key，存放数据，而B+树所有内部节点只存放key，叶子节点存放key和数据，因此它的节点能存放更多数据，降低树高，查询性能更快</p><p>二是B+树所有的叶子节点会构成一个链表结构，方便区间查找和排序</p><h4 id="说一下ES用到了什么数据结构">说一下ES用到了什么数据结构</h4><p>ES是使用了数据索引存储结构，它是通过为关键字建立索引，通过索引找到对应的数据，这种索引也叫倒排索引，可以实现快速检索</p><h2 id="五-项目部分">五.项目部分</h2><h4 id="浏览器输入一个域名，它是怎么去执行的？">浏览器输入一个域名，它是怎么去执行的？</h4><ol><li>首先带着域名去hosts文件中看有没有配置对应的本地域名，如果有就以配置的ip进行访问</li><li>如果hosts没有配置，就会请求DNS服务器解析域名得到对应的IP然后发起访问</li><li>这时候请求就会打到服务器上可能是Nginx也有可能直接打到Tomcat.</li></ol><h4 id="请求在你的项目中是怎么执行的？">请求在你的项目中是怎么执行的？</h4><p>后端使用zuul网关，请求先到达zuul网关，zuul做登录检查，zuul网关底层整合ribbon把请求路由到下游微服务，服务之间使用OpenFeign进行通信。执行成功后原路返回结果。</p><h4 id="如果zuul网关挂了怎么办？">如果zuul网关挂了怎么办？</h4><p>可以做zuul集群，使用Nginx做负载均衡到zuul集群，然后Nginx可以采用双机主备，或者双机互备做集群防止单点故障。如果并发非常高可以加上LVS做负载。</p><h4 id="如果有人用脚本刷你们的短信接口怎么办">如果有人用脚本刷你们的短信接口怎么办</h4><p>首先，可以设置图形验证码，流量错峰</p><p>其次，可以获取请求的ip地址，手机号，发送时间，并保存到发送短信记录的日志中，对于短时间多次请求的ip地址，手机号，可以拦截不执行发送手机验证码</p><p>再次，可以设置单位时间内发送短信的总数量，比如设定1秒最多只发送10条验证码。但这种方式会降低并发性</p><h4 id="非对称加密，什么是数字签名">非对称加密，什么是数字签名</h4><p>非对称加密是一种算法，指的是加密和解密时使用不同的密钥，其中私钥不可公开，公钥可以公开。</p><p>数字签名就是在非对称加密的基础上，使用私钥加密，公钥解密，主要用来防止数据被篡改，实现安全传输的目的</p><h4 id="Oauth2的四种授权模式">Oauth2的四种授权模式</h4><p>oauth协议是一个安全的开放授权标准，与传统的授权方式相比，它不会使第三方触及到用户的账号信息，比如用户名，密码。Oauth2有四种授权模式</p><p>一、授权码模式，它是功能最完整，流程最严密的授权模式</p><p>二、简化模式，直接从前端渠道获取token，容易受安全攻击</p><p>三、用户名密码模式，使用用户名和密码登录的应用，比如桌面APP</p><p>四、客户端凭证模式，用户直接向客户端认证，客户端以自己的名义向第三方索取服务</p><h4 id="要求每天早上-1点统计前一天的平台注册人数，怎么做">要求每天早上 1点统计前一天的平台注册人数，怎么做</h4><p>使用定时任务每日结算即可。把结算的数据保存到一个统计表中</p><h4 id="使用Quzrtz定时任务做订单超时关单有什么问题">使用Quzrtz定时任务做订单超时关单有什么问题</h4><p>数据量大的时候，定时任务扫描表性能会很差，而且多数都是空扫描，还有延迟问题，</p><p>对于我们的小型项目，可以使用quartz定时器，使用起来也很简单方便，但如果是高并发，比如秒杀等业务，可以使用RabbitMQ的延迟队列来实现，也可以使用Redis来做延迟队列。</p><h4 id="讲一下你做过的比较复杂的业务">讲一下你做过的比较复杂的业务</h4><p>省略…</p><h4 id="什么是RBAC-，-相关表怎么设计的？">什么是RBAC ， 相关表怎么设计的？</h4><p>RBAC：Role-Based Access Control首字母缩写，意为基于角色的访问控制。基本思想是对系统操作的各种权限不是直接授予具体的用户，而是在用户集合与权限集合之间建立一个角色集合。</p><p>将权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。极大地简化了权限的管理。这样管理都是层级相互依赖的，权限赋予给角色，而把角色又赋予用户，这样的权限设计很清楚，管理起来很方便。</p><p>实现RBAC，需要将用户对权限的多对多关系，转化为用户对角色，角色对权限的多对多关系，因此在数据库中，需要在用户，角色，权限中分别加入中间表，即用户表，用户和角色关系表，角色表，角色和权限关系表，权限表</p><h4 id="在VUE中，什么是MVVM">在VUE中，什么是MVVM</h4><p>MVVM，Model–View–ViewModel首字母缩写，是一种软件架构模式。</p><p>其中Model指的是模型，包括数据和一些基本操作</p><p>View指的是视图，页面渲染结果</p><p>ViewModel指的是模型与视图间的双向操作</p><p>MVVM的思想就是数据模型和视图的双向绑定，只要数据变化，视图会跟着变化，只要视图被修改，数据也会跟者变化</p><h4 id="讲几个VUE的指令">讲几个VUE的指令</h4><p>v-text：给元素填充纯文本内容</p><p>v-html：给元素填充内容，与v-text的区别是它会把内容的html符号进行渲染</p><p>v-for：遍历数字，字符串，数组，对象</p><p>v-bind：将data中的数据绑定到标签上,作为标签的属性</p><p>v-model：创建双向绑定，表单的值被修改时会自动修改data中的数据，data中的值变化时页面也会被修改</p><p>v-show：根据表达式的真假值，切换元素的css属性</p><p>v-if：根据表达式的真假值，销毁或重建元素</p><p>v-on：绑定事件</p><h4 id="webpack的作用">webpack的作用</h4><p>VUE项目需要打包后才能部署</p><p>首先，它可以将ES6等高级语法，编译成各个浏览器都认识的语法</p><p>其次，它可以将相互依赖的许多散碎文件搞成一个整体，提高网页访问的效率</p><p>再次，它可以将代码压缩，减小代码体积</p><h4 id="Vue中定义组件分为几种，有什么区别">Vue中定义组件分为几种，有什么区别</h4><p>组件是一种自定义的元素标签，可以对功能封装，提高代码复用性，分为全局组件和局部组件两种</p><ul><li><p>全局组件，是在所有vue挂载的标签中都有效，</p></li><li><p>局部组件，只在当前vue所挂载的标签中有效</p></li></ul><h4 id="讲一下你用过ElementUI的哪些组件">讲一下你用过ElementUI的哪些组件</h4><p>基础组件，比如按钮Button，图标Icon</p><p>表单组件：比如表单Form，单选框Radio，多选框Checkbox，输入框Input，选择器Select，级联选择器Cascader</p><p>其他组件：比如Dialog对话框，消息提示Message</p><h4 id="你们Redis做登录是怎么处理登录信息过期的？">你们Redis做登录是怎么处理登录信息过期的？</h4><p>给保存在Redis中的token设置过期时间来处理登录过期的,为了防止已登录用户在访问后台时突然遭遇登录过期的情况，我们在后台接收到用户访问时，重新设置token的过期时间写入Redis，则用户访问期间就不会突然过期了</p><h4 id="讲一下你们的登录实现方案">讲一下你们的登录实现方案</h4><p>当用户第一次发起登录请求，后台生成一个token保存到Redis中</p><p>将生成的token返回给用户端</p><p>用户端使用用浏览器中的localStorage保存token</p><p>通过axios的拦截器，给每次请求的请求头都加上token</p><p>服务端收到token，就能在Redis中找到对应的数据</p><h4 id="三方登录流程讲一下">三方登录流程讲一下</h4><p>1.用户发起微信登录请求</p><p>2.后端获取请求二维码的连接，重定向到扫码界面</p><p>3.用户使用微信扫一扫并同意授权</p><p>4.后端回调获取授权码，并将授权码作为参数，重定向到前端跳转页面</p><p>5.前端将授权码返回后端，后端根据授权码获取token</p><p>6.后端根据token获取openId</p><p>7.根据openId查询微信用户表</p><ul><li><p>如果查到有用户信息，且已关联本地账户，就默认登录</p></li><li><p>如果有查到用户信息，但没有关联本地账户，就跳转本地账户绑定页面，</p></li><li><p>如果没有查到用户信息，就向微信平台发起请求查询用户基本信息，添加到微信用户信息表，再跳转本地账户绑定页面</p></li></ul><p>8.执行绑定逻辑时，根据手机号判断是否有本地账户，如果有就直接绑定，如果没有就自动注册再绑定，绑定成功后就默认登录</p><h4 id="讲一下什么是非对称加密，什么是数字签名，数字签名的作用是什么？">讲一下什么是非对称加密，什么是数字签名，数字签名的作用是什么？</h4><p>非对称加密是一种算法，指的是加密和解密时使用不同的密钥，其中私钥不可公开，公钥可以公开。</p><p>数字签名就是在非对称加密的基础上，使用私钥加密，公钥解密，主要用来防止数据被篡改，实现安全传输的目的</p><h4 id="京东的首页的商品分类，让你设计表，你怎么设计">京东的首页的商品分类，让你设计表，你怎么设计</h4><p>首先可以看出表的结构是自关联，三层的树状结构，分类表的字段可以有主键id，商品名，创建时间，修改时间，上架时间，下架时间，商品数量，排序，图标，父级id</p><h4 id="如何查询出树状结构的课程分类数据">如何查询出树状结构的课程分类数据</h4><p>首先，在entity中加入子分类字段children</p><p>查询方式有四种</p><ul><li><p>第一，使用嵌套for循环，循环体内查询每一层级的数据，并关联到children。当然这也可以使用递归函数来实现</p></li><li><p>第二，使用mybatis的嵌套查询，也就是主查询加额外子sql查询的方式</p></li><li><p>第三，使用mybatis的嵌套结果，也就是join连表查询的方式</p></li><li><p>第四，只使用一次查询，将所有数据查询出来，通过一种算法来实现：除了第一级，其他所有数据都关联到自己的父级分类，结果返回第一级数据就可以</p></li></ul><p>第一，第二种方式，当层级多的时候查询性能极低，第三种方式一般只能查询两层结构，第四种方式性能最高，适用于数据量本身并不大但层级很多的场景</p><p>所有课程的数据本身体量小，层级多，因此采用了第四种方式。</p><h4 id="你们系统使用Redis缓存了哪些东西？用Redis的什么结构去存储的？">你们系统使用Redis缓存了哪些东西？用Redis的什么结构去存储的？</h4><p>登录信息login，使用的是String结构存储</p><p>手机验证码code，使用的是String结构</p><p>课程分类course_type ，使用的是String结构</p><p>购物车保存，使用的是Hash结构</p><h4 id="课程发布流程讲一下">课程发布流程讲一下</h4><p>发布课程两大步</p><p>第一步，将课程的状态改为上线并保存到数据库中，</p><p>第二步，将课程信息保存到ES中，方便门户网站展示</p><h4 id="你们课程相关的表是怎么设计的？主要的字段说一下">你们课程相关的表是怎么设计的？主要的字段说一下</h4><p>我们按照字段的使用频次，垂直分表来设计，分为课程主表，课程详情表，课程类型表，课程市场详情表。</p><p>课程主表，包括主键id，课程名称，课程类型id，课程上下线状态，适用人群，课程等级，课程所属机构等，并且冗余了课程类型名，课程价格字段来提高前台的查询性能</p><p>课程详情表，包括课程简介，课程详情</p><p>课程市场详情表，包括课程价格，促销活动，活动过期时间</p><p>课程类型表，包括主键id，类型名，创建修改时间，课程数量，父级id</p><p>其中课程主表和课程详情表、课程主表和课程市场详情表，都是一对一的关系，他们采用相同的主键id来相互关联。课程主表和课程类型表是多对一的关系，在课程主表添加类型id来相互关联</p><h4 id="讲一下你们这个项目的主线业务">讲一下你们这个项目的主线业务</h4><p>我们项目分为两大版图，</p><p>入驻我们平台的培训机构，可以发布相关课程，入驻平台的企业，可以发布相关的就业招聘信息</p><p>门户网站的大众用户，可以选择培训机构发布的课程来进行学习，可以选择企业发布的招聘信息来就业</p><h4 id="你们项目最大并发是多少">你们项目最大并发是多少</h4><p>俺们项目是按照最高2000 QPS设计的，实际并发数运维在统计，俺也不太清楚</p><h4 id="你们项目最大表数量是多少">你们项目最大表数量是多少</h4><p>俺们项目都有分库分表，按服务拆分多个数据库，对于有些数据量大的表，我们也是按照字段的使用频率，拆分成多个表，比如课程表拆分成课程主表，课程详情表，课程分类表等等。</p><p>但是有些表比如日志，流水相关的表，数据量还是很大的</p><h4 id="说一下你们课程搜索的那个业务方法的大致逻辑">.说一下你们课程搜索的那个业务方法的大致逻辑</h4><p>首先，课程在发布的时候，就同时将课程信息存放到ES中，信息中包括了需要查询的字段，如课程标题，课程分类，课程等级，机构名，销量，浏览量，上线时间，价格等等</p><p>接下来，根据用户在前台发送的查询条件，在ES中搜索对应的课程，并作关键字高亮处理，排序和分页处理，然后返回前台</p><h4 id="项目并发高处理过不过来怎么办">项目并发高处理过不过来怎么办</h4><p>前端优化：</p><ul><li>使用页面静态化技术由Nginx实现动静分离、</li><li>CDN加速加快响应速度、</li><li>使用验证码使流量错峰等手段最大限度的降低并发</li></ul><p>后端优化：</p><ul><li><p>Nginx+LVS负载，也可以多机房部署，分流</p></li><li><p>从架构上使用分布式、集群分散并发量，</p></li><li><p>从数据结构上使用缓存如Redis减少数据读写时间，</p></li><li><p>从处理方式上采用如RabitMQ队列实现异步响应，</p></li><li><p>资源隔离比如使用Hystrix的信号量隔离来限流，同时做好备用方案比如Hystrix的熔断降级策略等等</p></li></ul><h4 id="讲一下你们的微服务授权方案-你还知道有哪些方案吗？">讲一下你们的微服务授权方案   你还知道有哪些方案吗？</h4><p>我们使用的是SpringSecurity+Oauth2+JWT，认证服务器负责颁发token，资源服务器负责认证和授权</p><p>或者也可以将认证工作交给网关zuul，资源服务器只负责授权工作。</p><p>另外常见的授权方案还有，单点登录，用户只用在某个服务上登录，访问其他服务时就不需要登录了，这就要求每个面向用户的服务都必须于认证服务交互，会产生大量重复的工作</p><p>分布式会话，它是将用户认证信息存储在共享容器比如redis中，通常会以会话作为key，当用户访问微服务时，就从redis中获取认证信息。这对安全存储有较高的要求，复杂度高</p><p>讲一下你们微服务认证授权的整体流程</p><p>客户端访问认证服务器，认证服务器验证用户名密码，然后颁发token</p><p>客户端保存token，并且每次访问服务时都携带token</p><p>资源服务器接收到客户端请求，会验证token信息，认证通过后返回资源</p><p>你们为啥要用JWT</p><p>一个字，安全</p><p>我们做了认证授权后，每次客户端访问资源服务器，都需要远程调用认证服务器进行token的校验和授权，才能访问到资源。这是很好性能的，因此我们考虑将签名信息直接保存到客户端，那就不需要每次都向认证服务器认证授权了。</p><p>但是这有有一个新的问题，这些敏感数据赤裸裸的存到客户端不安全！而JWT就能解决这个问题。它支持非对称加密算法对信息加密，保证了信息安全</p><p>另外，JWT以json对象的形式传递信息，解析更方便</p><p>可以再令牌中定义内容，方便扩展</p><h4 id="Oauth2的授权模式有哪些，分别使用在什么场景？">Oauth2的授权模式有哪些，分别使用在什么场景？</h4><p>授权码模式：它是功能最完整、流程最严密的授权模式</p><p>简化模式：跳过授权码，直接再浏览器端申请令牌</p><p>用户名密码模式：客户向客户端提供用户名密码，建立在用户对客户端高度信赖的基础上</p><p>客户端模式：客户端以自己的名义，要求服务提供商提供服务</p><h4 id="Oauth2认证，如果Token过期了你们是怎么处理的">Oauth2认证，如果Token过期了你们是怎么处理的</h4><p>首先，我们会在前端设置axios后置拦截，检查是否是token过期，判断一下如果返回401，就代表token过期了</p><p>然后从localStorage中获取刷新refresh_token，并发送请求获取新的token</p><p>后台接收到前台的刷新token请求，拼接完整的刷新token的url，发送http请求获取到新的token并返回客户端</p><p>客户端收到新的token就把旧的token覆盖掉，最后把之前的请求再重新发送一次</p><h4 id="Oauth2认证，如果Token被盗了怎么办？">Oauth2认证，如果Token被盗了怎么办？</h4><p>首先，我们需要对token设置过期时间，这个时间可以根据需要设置短一点</p><p>然后，可以在token中加入客户身份标识，比如客户的ip地址，如果短时间内ip地址频繁变动，就标记为异常状态，并给用户发送信息，提示账户有风险</p><h4 id="秒杀的整体流程详细说一下">秒杀的整体流程详细说一下</h4><p>秒杀的商品和库存是缓存到Redis的，库存使用信号量，做的是秒杀预减库存方案。用户发起秒杀，直接走Redis秒杀商品，满足资格就预减库存，然后预创订单写入Redis。整个秒杀流程是不做数据罗库的。</p><p>此时把订单号返回给客户端，用户带着订单号进入订单确认页面进行下单，用户确认下单，再把Redis中的预创订单写入订单数据，同时做库存同步。紧接着就是调用支付接口做支付。</p><h4 id="如果流量更高，比如：每秒10W请求，应该怎么处理">如果流量更高，比如：每秒10W请求，应该怎么处理</h4><p>Lvs+Nginx集群+下游服务集群。如果流量再高，就使用CDN分流。</p><h4 id="说一下支付超时处理方案？延迟队列和死信队列是什么意思？">说一下支付超时处理方案？延迟队列和死信队列是什么意思？</h4><p>支付超时使用MQ延迟队列来处理，把消息投递到一个设置了过期时间的队列中，达到过期时间消息会被转发给另外一个“死信队列”</p><p>设置了过期时间的队列就是延迟队列，过期的消息叫着死信消息，存放死信消息的队列叫死信队列。</p><h4 id="整个秒杀流程你用到了哪些队列">整个秒杀流程你用到了哪些队列</h4><p>下单业务中用到了一个低劣，订单超时用到一个队列，支付结果处理用到一个队列。</p><h4 id="秒杀成功，返回给用户的数据是什么？">秒杀成功，返回给用户的数据是什么？</h4><p>预创订单号，前台通过这个订单号来进行下单。</p><h4 id="你们怎么处理超卖">你们怎么处理超卖</h4><p>Redisson分布式锁，信号量来保证库存不超卖</p><h4 id="如何提高接口的qps">如何提高接口的qps</h4><p>一方面：提高并发数</p><p>1.多线程,尽量用线程池           (线程个数：CPU核数 / (1 - 阻塞系数(IO密集型接近1，计算密集型接近0)))</p><p>2.适当调整连接数(Tomcat,Redis，Mysql等连接数)</p><p>3.集群</p><p>二方面：提高接口响应速度</p><p>1.减少和数据库交互，使用Redis代替</p><p>2.使用异步方案，比如MQ</p><p>3.使用并发编程，多个线程同时工作</p><p>4.减少服务的调用链</p><p>5.实在要连数据库，考虑数据库优化</p><h4 id="你们这个前后端分离项目是怎么部署的">你们这个前后端分离项目是怎么部署的</h4><p>前后端分开部署，前端使用Nginx部署，</p><p>后端使用Springboot内嵌的tomcat部署，</p><p>分开部署后，通过代理解决前后端域名不一致的跨域问题</p><h4 id="前后端分离的好处">前后端分离的好处</h4><p>第一，专人干专事，前后端同时开发，效率更高</p><p>第二，责任分离，避免了前后端相互踢皮球的现象</p><p>第三，前后端解耦合，一套后端可以处理不同的前端，包括app端，浏览器端</p><p>第四，分开部署，减轻了服务器压力</p><p>第五，页面显示东西再多也不怕，数据都是异步加载，就算后端服务器挂了，前端页面也能访问，虽然没有数据</p><p>第六，前端分离出去，后端写一套接口就可以适用于web,app端</p><h4 id="你们用什么做项目代码管理的">你们用什么做项目代码管理的</h4><p>使用主流的Git管理项目</p><h4 id="讲讲Git相对于SVN的区别">讲讲Git相对于SVN的区别</h4><p>第一。Git是每个攻城狮都有自己的版本库，可以在自己的库上任意操作提交代码</p><p>第二。Git在每个工程只产生一个.git目录，而SVN会在每个目录下都生成.svn目录</p><p>第三。Git能快速切换分支，且合并文件的速度比SVN快</p><p>第四。Git采用分布式版本库，内容完整性更好</p><h4 id="你们微服务项目怎么部署">你们微服务项目怎么部署</h4><p>docker 容器 ，使用Jnekins做持续集成。</p><h4 id="讲几个Git的命令">讲几个Git的命令</h4><p>git clone：从远程仓库克隆项目到本地</p><p>git add：添加代码到本地仓库管理</p><p>git commit：提交add后的代码到本地仓库</p><p>git push：推送本地仓库文件到远程仓库</p><p>git pull：拉取远程仓库中的代码到本地仓库</p><h2 id="六-运维篇">六.运维篇</h2><h3 id="linux">linux</h3><h4 id="有使用过linux吗-，-讲几个命令">有使用过linux吗 ， 讲几个命令</h4><ul><li>查看目录 : ls</li><li>切换目录： cd</li><li>拷贝：cp</li><li>远程拷贝 ：scp</li><li>移动 : mv</li><li>删除：rm</li><li>查看文本内容：cat</li><li>编辑文本： vi</li><li>查找：find</li><li>远程拷贝：scp</li><li>创建目录 ： mkdir</li><li>创建文件：touch</li></ul><h4 id="Linux根目录下的几个核心目录">Linux根目录下的几个核心目录</h4><ul><li>/bin : 二进制文件</li><li>/dev : 设备文件</li><li>/etc : 配置文件</li><li>/home : 用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</li><li>/root: 该目录为系统管理员，也称作超级权限者的用户主目录。</li><li>/sbin : s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</li></ul><h4 id="周日凌晨零点零分定期备份-user-backup到-tmp-目录下，如何做">周日凌晨零点零分定期备份 /user/backup到 /tmp 目录下，如何做?</h4><p>使用crontab即可做到，如下配置：</p><p>crontab -e<br>0 0 * * 7 /bin/cp /user/backup /tmp</p><h4 id="Linux中你怎么排查项目问题？查看项目日志你一般怎么做">Linux中你怎么排查项目问题？查看项目日志你一般怎么做?</h4><p>查看tomcat日志，使用tail命令<code>tail -n N filename.txt</code> 。n是查看行数</p><h4 id="怎么查看进程">怎么查看进程</h4><p>ps -ef | grep 软件名</p><h4 id="常用的压缩命令">常用的压缩命令</h4><p>使用 ： tar -zcvf压缩     ， tar -zxvf 解压缩</p><p>或者使用： zip 压缩成zip,  unzip解压</p><h4 id="部署过项目么？大概讲一讲如何部署的">部署过项目么？大概讲一讲如何部署的</h4><p>单体应用的部署是比较简单的，前端打包上传使用Nginx，后端打包成war，可以使用Tomcat来部署，如果是SpringBoot的可以默认打包为jar，直接java -jar 启动。如果用到其他组件，比如Redis可以直接在服务器安装，然后项目指向其IP即可。</p><p>如果项目的组成部分比较多，比如：项目后端，前端，Redis,Mysql等等都涉及到，那么可以使用Docker来部署，这样更好管理应用之间的内存和资源分配。</p><h4 id="你们这个服务器的配置是怎么样的">你们这个服务器的配置是怎么样的</h4><p>我们微服务有20个服务器，业务系统是8核CPU,16G内存，有些服务配置还要低一些，视频处理系统是12核CPU，24G内存。通过NFS方式共享20T硬盘。</p><h3 id="Docker">Docker</h3><h4 id="讲讲什么是Docker">讲讲什么是Docker</h4><p>docker是一个容器技术，最大的好处是做资源的分配和管理，传统的linux部署项目不好管理内存等资源的分配，造成了应用之间资源竞争的情况，Dcoker的出现解决了这一问题。我们可以把我们的应用打包成Docker的镜像，然后启动成容器。容器和容器之间相互隔离也可以互相通信。就类似于有多个主机一样。</p><h4 id="讲几个Docker的命令">讲几个Docker的命令</h4><p>docker images ：查看本地镜像</p><p>docker search : 搜索镜像</p><p>docker pull : 下载镜像</p><p>docker push : 上传镜像到仓库</p><p>docker rmi : 删除镜像</p><p>docker run : 创建并启动一个容器</p><p>docker ps : 查看容器</p><p>docker rm :删除容器</p><p>docker stop : 停止容器</p><p>docker kill :停止容器</p><p>docker start : 启动容器</p><p>docker exec -it 容器名 /bin/bash : 进入容器</p><p>docker exit :退出容器</p><p>docker cp : 拷贝文件到容器，或者从容器中拷贝文件到linux</p><p>docker logs : 查看容器的日志</p><h4 id="怎么把文件上传到容器中">怎么把文件上传到容器中</h4><p>docker cp  或者在启动容器的时候增加 -v 做目录映射</p><h4 id="某个服务不可访问了你怎么排查">某个服务不可访问了你怎么排查</h4><p>服务不可访问，那就是容器出问题了，我会去找到对应的容器是不是挂了，或者使用docker logs 查看日志根据错误日志来排错。</p><h4 id="容器之间怎么通信">容器之间怎么通信</h4><p>使用容器IP通信，但是容器重启IP会变动，不建议</p><p>使用端口映射也可以通信，但是内网部署的应用不需要做端口映射，所以这个不建议用</p><p>使用–link 名字进行通信</p><p>使用桥接网络通信</p><h4 id="对于Redis和zuul网关你怎么部署">对于Redis和zuul网关你怎么部署</h4><p>首先肯定要下载一个redis的镜像， 对于zuul的镜像可以使用docker插件对zuul进行打包。</p><p>redis是不需要暴露给外网的，所以不要做端口映射，可以使用–link或桥接网络通信 ，而zuul是服务访问入口需要做端口映射进行外网部署。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java开发中各个环境的适用场景</title>
      <link href="/posts/6f89773b.html"/>
      <url>/posts/6f89773b.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-开发环境">一.开发环境</h3><p>在系统开发的经典模型，一般会分成 2 类 5 种环境：</p><ul><li><p>【线下】本地环境(local)、开发环境(dev)、测试环境(test)</p></li><li><p>【线上】预发布环境(stage)、生产环境(prod)</p></li><li><p>每个环境、每个项目使用独立的二级域名</p></li><li><p>线下、线上各一套 MySQL 数据库，多个环境共享使用</p></li><li><p>每个环境对应一个配置文件，后端使用 [<code>application-&#123;env&#125;.yaml</code>]文件，前端使用 [<code>.env.&#123;env&#125;</code> ]文件</p></li></ul><h3 id="二-本地环境">二.本地环境</h3><p>后端工程师使用 <code>application-local.yaml</code> 配置文件，在本地电脑启动后端服务，连接线下 MySQL 数据库。考虑到不影响 dev、test 环境，会配置禁用定时任务、MQ 集群消费的执行。</p><p>前端工程师也会在本地电脑启动前端服务，一般不使用 <code>.env.local</code> 配置文件，而是使用 <code>.env.dev</code> 配置文件，访问 dev 环境的后端服务。如果需要和后端进行本地联调，可以使用 <code>.env.local</code> 配置文件。</p><h3 id="三-开发环境">三.开发环境</h3><p>dev 环境的用户是前端工程师、后端工程师，主要用于前后端的联调、又或者功能开发完后的自测。</p><p>一些公司可能不提供 dev 环境，直接使用 test 环境，适合团队规模较小的团队，可以降低服务器的成本。</p><p>不过，测试工程师可能比较反感 dev 和 test 环境不隔离，因为他们是按照测试用例，一轮一轮的进行验收。这个时候，如果前端或者后端工程师部署了 test 环境，“破坏”了他当前轮次的验收。</p><h3 id="四-测试坏境">四.测试坏境</h3><p>test 环境的用户是产品经理、测试工程师，主要用于他们的功能验收。</p><p>考虑到 test 环境的稳定性，一般建议由测试工程师使用 Jenkins 等工具，完成该环境的部署。</p><h3 id="五-预发布环境">五.预发布环境</h3><p>stage 环境的用户是产品经理、测试工程师，连接线上 MySQL 数据库，基于真实的数据，进行功能的全回归测试。</p><p>因为数据更加真实，且更具多样性，所以往往也会测试出较多的 Bug。比较好的解决方案，是将线上数据库定期脱敏，导入线下数据库。</p><p>考虑到 stage 环境的安全性，一般由技术经理、运维工程师进行部署。</p><p>一些公司可能不提供 stage 环境，直接上线到 production 环境，风险非常高，容易产生较多报错。</p><h3 id="六-生产环境">六.生产环境</h3><p>production 环境的用户是真实用户，即线上环境。一般发布上线时，会进行核心功能的快速测试，避免主流程存在问题。</p><p>考虑到 production 环境的问题排查效率，会给技术核心开放 MySQL 数据库的读权限。</p><p>参考https://doc.iocoder.cn/dev-env/#_1-%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java基础笔记加强</title>
      <link href="/posts/2021ecf2.html"/>
      <url>/posts/2021ecf2.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-List接口以及他的常用实现类">1. List接口以及他的常用实现类</h3><h4 id="1-1-List接口">1.1 List接口</h4><p>有序集合（也称为<em>序列</em> ）。 该界面的用户可以精确控制列表中每个元素的插入位置。  用户可以通过整数索引（列表中的位置）访问元素，并搜索列表中的元素。</p><ul><li><pre><code class="language-java">public interface List&lt;E&gt;extends Collection&lt;E&gt;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">####    <span class="number">1.2</span>  `ArrayList`</span><br><span class="line"></span><br><span class="line"> 继承自 `AbstractList`，实现了 List 接口。底层基于数组实现容量大小动态变化。允许 null 的存在。同时还实现了  `RandomAccess`、`Cloneable`、`Serializable` 接口，所以`ArrayList` 是支持快速访问、复制、序列化的。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span>  ArrayList&lt;&gt;()<span class="comment">;//实现类</span></span><br></pre></td></tr></table></figure></code></pre></li></ul><h4 id="1-3-常用方法">1.3 常用方法</h4><ul><li><table><thead><tr><th style="text-align:center"><code>boolean</code></th><th style="text-align:center"><code>add(E e)</code>  将指定的元素追加到此列表的末尾。</th></tr></thead><tbody><tr><td style="text-align:center"><code>void</code></td><td style="text-align:center"><code>add(int index, E element)</code>  在此列表中的指定位置插入指定的元素。</td></tr><tr><td style="text-align:center"><code>void</code></td><td style="text-align:center"><code>clear()</code>  从列表中删除所有元素。</td></tr><tr><td style="text-align:center"><code>E</code></td><td style="text-align:center"><code>get(int index)</code>  返回此列表中指定位置的元素。</td></tr><tr><td style="text-align:center"><code>Iterator&lt;E&gt;</code></td><td style="text-align:center"><code>iterator()</code>  以正确的顺序返回该列表中的元素的迭代器。</td></tr><tr><td style="text-align:center"><code>E</code></td><td style="text-align:center"><code>remove(int index)</code>  删除该列表中指定位置的元素。</td></tr><tr><td style="text-align:center"><code>int</code></td><td style="text-align:center"><code>size()</code>  返回此列表中的元素数。</td></tr><tr><td style="text-align:center"><code>Object[]</code></td><td style="text-align:center"><code>toArray()</code>  以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。</td></tr></tbody></table></li></ul><h4 id="1-4-底层实现">1.4 底层实现</h4><ul><li><p><code>ArrayList</code> 底层是基于数组来实现容量大小动态变化的。默认初始容量大小为 10。是线程不同步的</p></li><li><p>扩容：第一次扩容10，以后每次都扩容原容量的1.5倍，扩容通过位运算右移动1位。</p></li><li><pre><code class="language-java">List&lt;Integer&gt; list = new  ArrayList&lt;&gt;();//实现类/*** Default initial capacity.*/private static final int DEFAULT_CAPACITY = 10;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 遍历方式：for循环，增强for, 迭代器。</span><br><span class="line"></span><br><span class="line">#### <span class="number">1.5</span> `LinkedList`</span><br><span class="line"></span><br><span class="line">`LinkedList`: `LinkedList` 实现 List 接口，能对它进行[队列](https://so.csdn.net/so/search?q=队列&amp;spm=<span class="number">1001.2101</span>.<span class="number">3001.7020</span>)操作。`LinkedList` 是通过双向链表去实现的。</span><br><span class="line"></span><br><span class="line">- ```java </span><br><span class="line">  List&lt;Integer&gt; list = <span class="keyword">new</span>  LinkedList&lt;&gt;()<span class="comment">;//实现类</span></span><br><span class="line">  //栈（Stack）：是只允许在一端进行插入或删除的线性表。首先栈是一种线性表，但限定这种线性表只能在某一端进行插入和删除操作。</span><br><span class="line">  //队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。</span><br></pre></td></tr></table></figure></code></pre></li></ul><h4 id="1-6-面试题：ArrayList和LinkedList-的区别？">1.6 面试题：<code>ArrayList</code>和<code>LinkedList</code> 的区别？</h4><p>都是线程不同步的。</p><p><code>ArrayList</code>:</p><ul><li>基于动态数组的数据结构</li><li>对于随机访问的get和set，其效率优于<code>LinkedList</code></li><li>对于随机操作的add和remove，<code>ArrayList</code>不一定比<code>LinkedList</code>慢(<code>ArrayList</code>底层由于是动态数组，因此并不是每一次add和remove都需要创建新数组)</li></ul><p><code>LinkedList</code></p><ul><li><p>基于<strong>链表的数据结构</strong></p></li><li><p>对于顺序操作，<code>LinkedList</code> 不一定比<code>ArrayList</code>慢</p></li><li><p>对于随机操作，<code>LinkedList</code> 效率明显低于<code>LinkedList</code></p></li><li><p>内部是基于链表结构实现的。添加和删除比较快，查询相对<code>ArrayList</code>比较慢.</p><p>内部相对于<code>ArrayList</code>而言多了一些操作头和尾的方法。可以充当队列，堆栈。不是线程安全的（同步的）。</p></li></ul><h3 id="2-HashSet和TreeSet">2.<code>HashSet</code>和<code>TreeSet</code></h3><ul><li>都实现了Set接口，集合中存储的元素不重复。</li><li>都是无序的</li></ul><h4 id="2-1-HashSet实现原理">2.1 <code>HashSet</code>实现原理</h4><ul><li>此类实现<code>Set</code>接口，由哈希表（实际为<code>HashMap</code>实例）支持。  对集合的迭代次序不作任何保证; 特别是，它不能保证订单在一段时间内保持不变。  这个类允许<code>null</code>元素。</li><li>去重：根据判断每个元素的<code>hashCode</code>值是否相同和equals是否为true判断此元素是否相同</li><li><strong>如果两个对象的<code>hashCode</code>相等  并且 两个对象调用equals结果是true  才认为两个元素重复</strong></li></ul><h4 id="2-2-TreeSet-实现原理">2.2 <code>TreeSet</code> 实现原理</h4><ul><li><pre><code class="language-java">TreeSet&lt;Integer&gt; set = new TreeSet&lt;&gt;(); //构造方法TreeSet(Comparator&lt;? super E&gt; comparator) //构造一个新的，空的树集，根据指定的比较器进行排序。<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 介绍：<span class="number">1</span>．无序：不保证（不记录）我们的添加顺序；</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>．不重复：不能够添加重复元素</span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>．内部存储有一定的顺序</span><br><span class="line"></span><br><span class="line">  ***\*注意：`TreeSet`一旦添加了第一个元素后就不能添加其它数据类型的元素了，只能添加相同数据类型的元素，除非将容器中所有的元素全部清空，才能添加新的数据类型的元素\****</span><br><span class="line"></span><br><span class="line"><span class="meta">#### 2.3 自然排序和定制排序</span></span><br><span class="line"></span><br><span class="line">- 自然排序：实现Comparable接口，重写此方法，返回值为<span class="number">0</span>表示元素相同，负整和正整数数表示倒序或顺序。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">compareTo</span>(<span class="params">Object o</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//自定义逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>定制排序：实现Comparator(比较器)接口，重写此方法，返回值为0表示元素相同，负整和正整数数表示倒序或顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(o1==<span class="literal">null</span>||o2==<span class="literal">null</span>)&#123;<span class="comment">//判断，若两个有一个为null都直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> Student &amp;&amp; o2 <span class="keyword">instanceof</span> Student)&#123;<span class="comment">//如果类型匹配才转换</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> (Student)o1;</span><br><span class="line"><span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> (Student)o2;</span><br><span class="line"><span class="keyword">if</span>(stu1.age&gt;stu2.age)&#123;<span class="comment">//先判断年龄后判断姓名</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(stu1.age&lt;stu2.age)&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> stu1.name.compareTo(stu2.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MyComparator mc = new MyComparator();</span></span><br><span class="line"><span class="comment">//TreeSet ts = new TreeSet(mc);</span></span><br></pre></td></tr></table></figure><ul><li><img src="https://gitee.com/coderyeah/picgo/raw/master/1.png" alt="1"></li></ul><h3 id="3-IO流">3. IO流</h3><h4 id="3-1-InputStream">3.1 <code>InputStream</code></h4><ul><li><h4 id="字节输入流读取文件一般用于图片，视频等文件">字节输入流读取文件一般用于图片，视频等文件</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(File file);</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(String pathname);</span><br><span class="line"><span class="comment">//缓冲流</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">buff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(in);</span><br></pre></td></tr></table></figure><h4 id="3-2-FileReader">3.2 <code>FileReader</code></h4><ul><li>字符输入流一般用于读取文字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileReader reader=<span class="keyword">new</span> <span class="title class_">FileReader</span>(File file);</span><br><span class="line">FileReader reader=<span class="keyword">new</span> <span class="title class_">FileReader</span>(String pathname);</span><br><span class="line"><span class="comment">//字符缓冲流</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">buff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader);</span><br></pre></td></tr></table></figure><h4 id="3-3-OutputStream">3.3 <code>OutputStream</code></h4><ul><li><p>字节输出流写出文件一般用于图片，视频等文件</p></li><li><pre><code class="language-java">OutputStream  out = new FileOutputStream (File file);OutputStream  out = new FileOutputStream (String pathname);//缓冲流BufferedOutputStream buff = new BufferedOutputStream(out);<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### <span class="number">3.4</span> `FileWriter`</span><br><span class="line"></span><br><span class="line">- 字符输出流一般用于写出文字</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  FileWriter writer=<span class="keyword">new</span> FileWriter(File file)<span class="comment">;</span></span><br><span class="line">  FileWriter writer=<span class="keyword">new</span> FileWriter(String pathname)<span class="comment">;</span></span><br><span class="line">  //字符缓冲输出流</span><br><span class="line">  BufferedWriter buff = <span class="keyword">new</span> BufferedWriter(writer)<span class="comment">;</span></span><br></pre></td></tr></table></figure></code></pre></li></ul><h4 id="3-5-复制文件案例">3.5 复制文件案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.ioTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyAllVideoContent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        copyFile();</span><br><span class="line">        <span class="comment">//递归复制所有文件</span></span><br><span class="line">       <span class="comment">/* File file = new File(&quot;E:\\itsourse\\2022-07-02-JAVA加强-集合-Map-泛型&quot;);</span></span><br><span class="line"><span class="comment">        copyAllVideoContents(file, &quot;E:\\itsourse\\copyVideo&quot;);*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在file中查找以.mp4的文件并复制到指定位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">copyAllVideoContents</span><span class="params">(File file, String dir)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists() || file.listFiles().length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;文件不存在或文件无内容！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f.isFile()) &#123;</span><br><span class="line">                <span class="comment">//复制视频文件</span></span><br><span class="line">                copyVideoFile(f, dir);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//目录 递归调用</span></span><br><span class="line">                copyAllVideoContents(f, dir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;复制视频内容完成！！！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyVideoFile</span><span class="params">(File f, String dir)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (f.getName().endsWith(<span class="string">&quot;mp4&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> (<span class="comment">//自动关流</span></span><br><span class="line">                 <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">                 <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dir + <span class="string">&quot;\\&quot;</span> + f.getName());</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="type">int</span> count;</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> ((count = in.read(bytes, <span class="number">0</span>, bytes.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    out.write(bytes, <span class="number">0</span>, count);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未拷贝文件名称：&quot;</span> + f.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 采用字节缓冲流复制 提高效率</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\itsourse\\预习视频-有声版\\2022-03-29-JAVA-Map和泛型\\video&quot;</span>);</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            copyByBuffered(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;复制完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyByBuffered</span><span class="params">(File f)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\itsourse\\mapVideo&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">                <span class="type">BufferedInputStream</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(in);</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\itsourse\\mapVideo&quot;</span> + <span class="string">&quot;\\&quot;</span> + f.getName());</span><br><span class="line">                <span class="type">BufferedOutputStream</span> <span class="variable">bufout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(out);</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">int</span> count;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((count = buf.read(bytes, <span class="number">0</span>, bytes.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bufout.write(bytes, <span class="number">0</span>, count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-6-RandomAccessFile">3.6 <code>RandomAccessFile</code></h4><ul><li><p>随机访问流读写文件，一般用于下载文件。</p><table><thead><tr><th style="text-align:center"><code>void</code></th><th style="text-align:center"><code>setLength(long newLength)</code>  设置此文件的长度。</th></tr></thead><tbody><tr><td style="text-align:center"><code>void</code></td><td style="text-align:center"><code>seek(long pos)</code>  设置文件指针偏移，从该文件的开头测量，发生下一次读取或写入。</td></tr></tbody></table></li><li><pre><code class="language-java">/** * 随机访问流读取文件 */public class RandomStreamTest &#123;    public static void main(String[] args) throws Exception &#123;        String thisLine = null;        RandomAccessFile as = new RandomAccessFile(&quot;E:\\javabase\\practiceDemo\\src\\com\\lqs\\ioTest\\song.txt&quot;, &quot;rw&quot;);        System.out.println(as.length());        int count;        byte[] bytes = new byte[1024];        while ((count = as.read(bytes, 0, bytes.length)) != -1) &#123;            System.out.print(new String(bytes, 0, count));        &#125;        as.setLength(1024 * 1024 * 8);//设置文件大小为8M        as.seek(1024);//设置偏移量             /*   while ((thisLine = as.readLine()) != null) &#123;            System.out.println(thisLine);        &#125;*/    &#125;&#125;<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">### <span class="number">4.</span>  自定义日期转换工具类</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">package com.lqs.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">@SuppressWarnings(&quot;all&quot;)</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> DateUtils &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符转日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param s</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">Date</span> stringToDate(String s) &#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="built_in">new</span> SimpleDateFormat(&quot;yyyy年MM月dd日HH时mm分ss秒&quot;);</span><br><span class="line">        <span class="type">Date</span> <span class="type">date</span> = <span class="keyword">null</span>;</span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="type">date</span> = sdf.parse(s);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">date</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转字符</span></span><br><span class="line"><span class="comment">     * @param date</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">public</span> static String dateToString(<span class="type">Date</span> <span class="type">date</span>) &#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="built_in">new</span> SimpleDateFormat(&quot;yyyy年MM月dd日HH时mm分ss秒&quot;);</span><br><span class="line">        String s = <span class="keyword">null</span>;</span><br><span class="line">        s = sdf.format(<span class="type">date</span>);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="5-设计模式">5. 设计模式</h3><h4 id="5-1-单例设计模式">5.1 单例设计模式</h4><ul><li>单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例。</li><li>单例特征：①对象构造私有化，②私有静态当前类类型的字段，③提供公共，静态对外的访问方法获取对象</li></ul><h4 id="5-2-饿汉模式">5.2 饿汉模式</h4><ul><li><p>实质上就是在类加载的时候即创建，</p><p>饿汉模式线程安全，但是存在加载效率低下的问题，</p><p>使用静态内部类块优化。</p></li><li><pre><code class="language-java">/** * 单例设计模式 * 1.构造方法私有化 * 2.初始化成员属性 */public class SingleInstance &#123;    private static SingleInstance instance = new SingleInstance();//饿汉单例模式    private SingleInstance() &#123;    &#125;    public static SingleInstance getInstance() &#123;        return instance;    &#125;<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 饿汉单例模式</span></span><br><span class="line"><span class="comment">    * 一开始就初始化对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   @Test</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInstance</span>()</span> &#123;<span class="comment">//同一个对象</span></span><br><span class="line">       System.<span class="keyword">out</span>.println(SingleInstance.getInstance());</span><br><span class="line">       System.<span class="keyword">out</span>.println(SingleInstance.getInstance());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>5.3 懒汉模式</p><ul><li><p>即在需要的时候才创建对象返回，懒汉模式容易造成线程不安全问题，故可以同步代码块【synchronized】解决线程问题，但要使用双重校验，而且同步代码块这种方式效率比较低。</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例设计模式</span></span><br><span class="line"><span class="comment"> * 1.构造方法私有化</span></span><br><span class="line"><span class="comment"> * 2.初始化成员属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleInstance2</span> &#123;</span><br><span class="line">    <span class="comment">//volatile 保证AB线程会看到变量instance的同一个值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">SingleInstance2</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//懒汉单例模式 会出现线程安全问题 需要解决</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleInstance2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleInstance2 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;<span class="comment">//防止多线程排队</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingleInstance2.class) &#123;<span class="comment">//同步锁 线程进来需要排队 但是每一个线程进来都需要进行判断导致访问缓慢所以要--&gt;防止多线程排队</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;<span class="comment">//防止多个线程排队造成 对象重复创建</span></span><br><span class="line">                    <span class="comment">//睡眠 会出现线程安全问题</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">SingleInstance2</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;=======线程安全问题========&quot;</span>);</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">           System.out.println(SingleInstance2.getInstance());</span><br><span class="line">       &#125;).start();</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(SingleInstance2.getInstance())).start();<span class="comment">//同一对象</span></span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(SingleInstance2.getInstance())).start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><p>5.3 枚举单例模式（推荐）</p><ul><li><pre><code class="language-java">package com.lqs.utils;public enum MyEnum &#123;    MAN,//表示一个对象    WOMAN;    public void show() &#123;        System.out.println(&quot;枚举单例设计模式，设计安全哦&quot;);    &#125;&#125;<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 调用：</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">      @Test</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEnum</span>()</span> &#123;</span><br><span class="line">          MyEnum.MAN.show();<span class="comment">//枚举单例设计模式，设计安全哦</span></span><br><span class="line">          System.<span class="keyword">out</span>.println(MyEnum.WOMAN);<span class="comment">//WOMAN</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h4 id="5-3-装饰者模式">5.3 装饰者模式</h4><ul><li>装饰模式指的是在不必改变原类文件和不使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</li><li>实现步骤 ：通过对原类文件继承，对原有方法功能的基础上，实现新的功能.</li></ul><p>5.4 简单工厂模式</p><ul><li>工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。(spring反射)</li><li>实现步骤：使用工厂对象，根据传递的参数创建对象解耦（耦合）<em><strong>*低耦合高内聚*</strong></em>。</li></ul><p>5.5 适配器模式</p><ul><li>适配器模式（有时候也称包装样式或者包装）将一个类的接口适配成用户所期待的。一个适配允许通常因为接口不兼容而不能在一起工作的类工作在一起，做法是将类自己的接口包裹在一个已存在的类中。</li></ul><h3 id="6-资源文件解析">6.  资源文件解析</h3><h4 id="6-1-概诉">6.1 概诉</h4><ul><li><h4 id="资源文件也可以看成是配置文件，一般的形式有两种：properties形式和XML形式。">资源文件也可以看成是配置文件，一般的形式有两种：properties形式和XML形式。</h4></li><li><p>properties文件中数据的存储是****以键值对的形式存在，每一行为一条数据，只能存储字符串形式的数据，Properties文件中值的部分任意字符都会被当做值的一部分，尤其是空格****</p></li></ul><h4 id="6-2-Properties类语法">6.2 <strong>Properties类语法</strong></h4><ul><li><p>①<code>load</code>(字节输入流) 加载资源文件</p><p>②<code>getProperty(key)</code> 返回资源文件中对应key中的值【字符串】，若key不存在则返回null</p><p>③<code>getProperty(key,默认值)</code> 返回资源文件中对应key中的值【字符串】，若key不存在则返回默认值</p></li><li><p>传统IO方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(文件路径));</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-3-类加载器获取流">6.3 类加载器获取流</h4><ul><li><p>通过类加载器获取流，那么首要是获取到类加载器，获取类加载器的方式有很多种，以下介绍两种：</p><ul><li><p>字节码对象方式获取类加载器–&gt;&gt;字节码对象<code>.getClassLoader()</code></p></li><li><p>线程方式获取类加载器–&gt;&gt;线程方式获取类加载器稍微比字节码对象获取类加载器稍显复杂，必须先获取当前线程，通过当前线程获取类加载器<code>Thread.currentThread().getContextClassLoader()</code></p></li><li><p>**获取流语法：**类加载器对象<code>.getResourceAsStream(包名/文件名)</code>，类加载器获取流的时候，路径最前方不需要书写/</p></li></ul></li></ul><h4 id="6-4-代码案例">6.4 代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//        InputStream in = TestAll.class.getClassLoader().getResourceAsStream(&quot;db.properties&quot;);//类加载器</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>));<span class="comment">//读取文件</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ps);</span><br><span class="line">        System.out.println(ps.getProperty(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(ps.getProperty(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="7-注解">7. 注解</h3><h4 id="7-1-jdk四大内置注解">7.1 <code>jdk</code>四大内置注解</h4><ol><li><p><code>@Override</code></p><ul><li><pre><code>  作用：检查方法是否方法覆写</code></pre></li><li><pre><code>  位置：方法@Deprecated</code></pre></li></ul></li><li><p><code>@Deprecated</code></p><ul><li><p>作用:用来标记过时，过时不是不可以用，只是不建议使用</p></li><li><p>过时：后面的版本可能不维护升级，已经有更好的替换方案</p></li></ul></li><li><p><code>@SuppressWarings</code></p><ul><li>作用：抑制警告,不建议使用，注解可以传值</li><li><code>@SuppressWarings(&quot;all&quot;)</code></li></ul></li><li><p>@SafeVarargs</p><ul><li><p>作用：抑制堆污染警告，这个注解是后面才出来的，以前也是使用<code>@SuppressWarings</code>解决警告问题</p></li><li><p>堆污染 ：不建议使用</p></li></ul></li></ol><h4 id="7-2-元注解：用来定义注解的注解">7.2 元注解：用来定义注解的注解</h4><ol><li>@Target<ul><li><pre><code>  用来定义【注解】的使用位置</code></pre></li></ul></li><li>@Retention<ul><li><pre><code>  用来定义【注解】生命周期</code></pre></li><li><pre><code>  白话：@Retention 标注在@Override ,Override这个注解的声明周期属于哪个阶段</code></pre></li><li><pre><code>  `RetentionPolicy`</code></pre></li><li><pre><code>  SOURCE：源码阶段，编译为字节码以后 注解就不存在了</code></pre></li><li><pre><code>  CLASS：字节码阶段，运行注解就不存在了</code></pre></li><li><pre><code>  RUNTIME：运行时，一直存在</code></pre></li></ul></li><li>@Documented<ul><li><pre><code>  所标注的【注解】在生成文档以后，在文档中体现出来</code></pre></li></ul></li><li>@Inherited<ul><li><pre><code>  所标注的【注解】具有继承性</code></pre></li><li><pre><code>  例如 ：</code></pre></li><li><pre><code>  定义了一个注解 `@VIP`,在定义`@VIP`的时候使用了@Inherited注解</code></pre></li><li><pre><code>  `@VIP`</code></pre></li><li><pre><code>  `class A&#123;&#125;`</code></pre></li><li><pre><code>  `class B extends A&#123;&#125;`</code></pre></li><li><pre><code>  B这个类也能继承`@VIP`这个注解</code></pre></li></ul></li></ol><h4 id="7-3-注解的传值">7.3 注解的传值</h4><ol><li><p>注解的传值：@注解名字(属性名=值,属性名=值)。</p></li><li><p>特殊情况：</p><ul><li>如果属性有默认值，在使用注解的时候可以不用传值【如果没有默认值，必须传值】</li><li>如果只传一个值，并且属性的名字叫做value,属性名可以省略不写</li><li>数组的传值  属性名={值1,值2,值3,…}</li></ul></li><li><pre><code class="language-java">package com.lqs.reflect;import com.lqs.examination.TransRecord;@Deprecated//表示类过期了不建议使用@VIP(number = &quot;00001&quot;, order = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;, value = &quot;hello&quot;)public class Person &#123;    @Deprecated    private String name;    private int age;    public Person(String name, int age) &#123;        this.name = name;        this.age = age;    &#125;    @Deprecated    @Override    public String toString() &#123;        return &quot;Person&#123;&quot; +                &quot;name='&quot; + name + '\'' +                &quot;, age=&quot; + age +                '&#125;';    &#125;&#125;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">4.</span> ```java</span><br><span class="line">   <span class="keyword">package</span> com.lqs.reflect;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Target(value = &#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><span class="comment">//使用范围</span></span><br><span class="line">   <span class="meta">@Documented</span><span class="comment">//是否生成文档</span></span><br><span class="line">   <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//生命周期</span></span><br><span class="line">   <span class="meta">@Inherited</span><span class="comment">//注解的继承</span></span><br><span class="line">   <span class="keyword">public</span> <span class="meta">@interface</span> VIP &#123;</span><br><span class="line">       String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">//定义属性</span></span><br><span class="line">       String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;coderyeah&quot;</span>;</span><br><span class="line">   </span><br><span class="line">       String <span class="title function_">number</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;1001&quot;</span>;</span><br><span class="line">   </span><br><span class="line">       <span class="type">int</span>[] order();<span class="comment">//数组</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></code></pre></li></ol><h3 id="8-反射">8. 反射</h3><h4 id="8-1-概念">8.1 概念</h4><p>一个Class对象就是表示一个class文件，获取Class对象不能通过new的方式，因为只有<code>java</code>源程序编译后生成字节码文件，再通过class文件得到Class对象。</p><ol><li><p>会产生class文件的类型有：类，接口，枚举，注解</p></li><li><p>获取Class对象：</p><ul><li><p><code>对象.getClass()</code>     Object提供</p></li><li><p><code>Class.forName(String className)</code>  Class 提供</p></li><li><p>类名.class</p></li></ul></li></ol><h4 id="8-2-获取Class对象">8.2 获取Class对象</h4><ol><li><pre><code class="language-java">package com.lqs.reflect;public class User &#123;    private String name;    public Long id;    private String password;    public void eat(String name) &#123;        System.out.println(name + &quot;想吃大闸蟹······&quot;);    &#125;    private void show(String name, int age) &#123;        System.out.println(name + &quot;今年&quot; + age + &quot;岁啦&quot;);    &#125;    //构造器开始    public User() &#123;    &#125;    private User(String name, Long id, String password) &#123;        this.name = name;        this.id = id;        this.password = password;    &#125;    //构造器开始    public User(String name) &#123;        this.name = name;    &#125;    //构造器结束    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public Long getId() &#123;        return id;    &#125;    public void setId(Long id) &#123;        this.id = id;    &#125;    public String getPassword() &#123;        return password;    &#125;    public void setPassword(String password) &#123;        this.password = password;    &#125;    @Override    public String toString() &#123;        return &quot;User&#123;&quot; +                &quot;name='&quot; + name + '\'' +                &quot;, id=&quot; + id +                &quot;, password='&quot; + password + '\'' +                '&#125;';    &#125;&#125;<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### <span class="number">8.3</span> 通过反射获取构造方法</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> User类</span><br><span class="line"></span><br><span class="line">   ```java</span><br><span class="line">   package com.lqs.reflect;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="type">String</span> name;</span><br><span class="line">       <span class="keyword">public</span> Long id;</span><br><span class="line">       <span class="keyword">private</span> <span class="type">String</span> password;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">//构造器开始</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">(<span class="type">String</span> name, Long id, <span class="type">String</span> password)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.name = name;</span><br><span class="line">           <span class="keyword">this</span>.id = id;</span><br><span class="line">           <span class="keyword">this</span>.password = password;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//构造器开始</span></span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="type">String</span> name)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.name = name;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//构造器结束</span></span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="type">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> name;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">setName</span><span class="params">(<span class="type">String</span> name)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.name = name;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> id;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.id = id;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="type">String</span> <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> password;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">setPassword</span><span class="params">(<span class="type">String</span> password)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.password = password;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       @<span class="function">Override</span></span><br><span class="line"><span class="function">       <span class="keyword">public</span> <span class="type">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                   <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                   <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                   <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></code></pre></li><li><p>获取构造器</p></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetConstructor</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; cla = Class.forName(<span class="string">&quot;com.lqs.reflect.User&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt;[] cons = cla.getConstructors();<span class="comment">//获取所有的public修饰的构造器</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; c : cons) &#123;</span><br><span class="line"><span class="comment">//         System.out.println(c);//public com.lqs.reflect.User(java.lang.String),public com.lqs.reflect.User()</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt;[] constructors = cla.getDeclaredConstructors();<span class="comment">//获取User中所有的构造器</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(constructor);//包括私有的构造方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取指定参数类型的公共构造器</span></span><br><span class="line">        System.out.println(cla.getConstructor());<span class="comment">//public com.lqs.reflect.User()</span></span><br><span class="line">        System.out.println(cla.getConstructor(String.class));<span class="comment">//public com.lqs.reflect.User(java.lang.String)</span></span><br><span class="line">        <span class="comment">//获取指定参数的私有构造器 private com.lqs.reflect.User(java.lang.String,java.lang.Long,java.lang.String)</span></span><br><span class="line">        System.out.println(cla.getDeclaredConstructor(String.class, Long.class, String.class));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用构造方法创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNewInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;<span class="comment">//使用构造方法创建对象</span></span><br><span class="line">       Class&lt;?&gt; cla = Class.forName(<span class="string">&quot;com.lqs.reflect.User&quot;</span>);</span><br><span class="line">       <span class="type">Object</span> <span class="variable">newInstance</span> <span class="operator">=</span> cla.newInstance();<span class="comment">//默认使用无参构造</span></span><br><span class="line">       System.out.println(newInstance);<span class="comment">//User&#123;name=&#x27;null&#x27;, id=null, password=&#x27;null&#x27;&#125;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">//私有构造方法</span></span><br><span class="line">       Constructor&lt;?&gt; constructor = cla.getDeclaredConstructor(String.class, Long.class, String.class);</span><br><span class="line">       constructor.setAccessible(<span class="literal">true</span>);<span class="comment">//让权限检查失效</span></span><br><span class="line">       <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;coderyeah&quot;</span>, <span class="number">10001l</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">       System.out.println(o);<span class="comment">//User&#123;name=&#x27;coderyeah&#x27;, id=10001, password=&#x27;root&#x27;&#125;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">//公共构造方法</span></span><br><span class="line">       <span class="keyword">final</span> Constructor&lt;?&gt; con = cla.getConstructor(String.class);</span><br><span class="line">       System.out.println(con.newInstance(<span class="string">&quot;山姆&quot;</span>));<span class="comment">//User&#123;name=&#x27;山姆&#x27;, id=null, password=&#x27;null&#x27;&#125;</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="8-4-使用反射获取方法并调用">8.4 使用反射获取方法并调用</h4><ol><li><p>获取方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; cla = Class.forName(<span class="string">&quot;com.lqs.reflect.User&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> Method[] methods = cla.getMethods();<span class="comment">//获取所有公共的方法，包括父类所继承的方法</span></span><br><span class="line"><span class="comment">//        System.out.println(methods.length);//16</span></span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Method[] declaredMethods = cla.getDeclaredMethods();<span class="comment">//获取User类所有的方法，不包括父类所继承的方法</span></span><br><span class="line"><span class="comment">//        System.out.println(declaredMethods.length);//9</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : declaredMethods) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(method);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取公共的指定方法名和参数类型的方法</span></span><br><span class="line">        <span class="comment">//public void com.lqs.reflect.User.eat(java.lang.String)</span></span><br><span class="line">        System.out.println(cla.getMethod(<span class="string">&quot;eat&quot;</span>, String.class));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取私有的指定方法名和参数类型的方法</span></span><br><span class="line"><span class="comment">        private void com.lqs.reflect.User.show(java.lang.String,int)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(cla.getDeclaredMethod(<span class="string">&quot;show&quot;</span>, String.class, <span class="type">int</span>.class));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>获取方法并调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取方法并调用：</span></span><br><span class="line"><span class="comment">     * Method</span></span><br><span class="line"><span class="comment">     * Object invoke(Object obj, Object... args) 执行方法</span></span><br><span class="line"><span class="comment">     * obj:调用方法的对象</span></span><br><span class="line"><span class="comment">     * args:调用方法的实参</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; cla = Class.forName(<span class="string">&quot;com.lqs.reflect.User&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cla.getMethod(<span class="string">&quot;eat&quot;</span>, String.class);</span><br><span class="line">        method.invoke(cla.newInstance(), <span class="string">&quot;coderyeah&quot;</span>);<span class="comment">//coderyeah想吃大闸蟹······</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用私有方法</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Method</span> <span class="variable">show</span> <span class="operator">=</span> cla.getDeclaredMethod(<span class="string">&quot;show&quot;</span>, String.class, <span class="type">int</span>.class);</span><br><span class="line">        show.setAccessible(<span class="literal">true</span>);<span class="comment">//让权限检查失效</span></span><br><span class="line">        show.invoke(cla.newInstance(), <span class="string">&quot;coderyeah&quot;</span>, <span class="number">21</span>);<span class="comment">//coderyeah今年21岁啦</span></span><br><span class="line"></span><br><span class="line">        System.out.println(cla.getModifiers());<span class="comment">//1 public</span></span><br><span class="line">        System.out.println(show.getModifiers());<span class="comment">//2 private</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="8-5获取字段并赋值">8.5获取字段并赋值</h4><ol><li><p>获取字段并赋值</p><ul><li><p><code>Field getField(String name)</code>  返回一个 Field对象，它反映此表示的类或接口的指定公共成员字段 类对象。<br><code>Field[] getFields()</code>  返回包含一个数组 Field对象反射由此表示的类或接口的所有可访问的公共字段 类对象。</p><p><code>Field getDeclaredField(String name)</code>  返回一个 Field对象，它反映此表示的类或接口的指定已声明字段 类对象。<br><code>Field[] getDeclaredFields()</code>  返回的数组 Field对象反映此表示的类或接口声明的所有字段 类对象。</p></li></ul></li><li><pre><code class="language-java">package com.lqs.reflect;import org.junit.Test;import java.lang.reflect.Field;public class FieldTest &#123;    @Test    public void testGetField() throws Exception &#123;        final Class&lt;?&gt; cla = Class.forName(&quot;com.lqs.reflect.User&quot;);        final Field name = cla.getDeclaredField(&quot;name&quot;);        System.out.println(name);//private java.lang.String com.lqs.reflect.User.name        System.out.println(cla.getField(&quot;id&quot;));//public java.lang.Long com.lqs.reflect.User.id        for (Field field : cla.getFields()) &#123;            System.out.println(field);//public java.lang.Long com.lqs.reflect.User.id        &#125;        /**         * private java.lang.String com.lqs.reflect.User.name         * public java.lang.Long com.lqs.reflect.User.id         * private java.lang.String com.lqs.reflect.User.password         */        for (Field field : cla.getDeclaredFields()) &#123;            System.out.println(field);        &#125;    &#125;    @Test    public void Test2() throws Exception &#123;        final Class&lt;?&gt; cla = Class.forName(&quot;com.lqs.reflect.User&quot;);        final Field id = cla.getField(&quot;id&quot;);        final User user = new User();        id.set(user, 110L);        System.out.println(id.get(user));//110        final Field name = cla.getDeclaredField(&quot;name&quot;);        name.setAccessible(true);        name.set(user, &quot;coderyeah&quot;);        System.out.println(name.get(user));//coderyeah    &#125;&#125;<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### <span class="number">8.6</span> 使用反射创建任意对象</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. ```java</span><br><span class="line">   <span class="keyword">package</span> com.lqs.reflect;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> BeanFactory &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> Object CreateBean(String cla) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">Class</span>&lt;?&gt; aClass = <span class="keyword">Class</span>.forName(cla);</span><br><span class="line">           <span class="keyword">return</span> aClass.newInstance();</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T CreateBean(<span class="keyword">Class</span>&lt;T&gt; cla) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           <span class="keyword">return</span> cla.newInstance();</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="language-java">    @Test    public void testBean() throws Exception &#123;        final Object o = BeanFactory.CreateBean(&quot;com.lqs.reflect.User&quot;);        System.out.println(o);//User&#123;name='null', id=null, password='null'&#125;        System.out.println(BeanFactory.CreateBean(Student.class));//com.lqs.reflect.Student@ba8a1dc    &#125;</code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java基础笔记2</title>
      <link href="/posts/63733.html"/>
      <url>/posts/63733.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-List接口以及他的常用实现类">1. List接口以及他的常用实现类</h3><h4 id="1-1-List接口">1.1 List接口</h4><p>有序集合（也称为<em>序列</em> ）。 该界面的用户可以精确控制列表中每个元素的插入位置。  用户可以通过整数索引（列表中的位置）访问元素，并搜索列表中的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">List</span>&lt;E&gt;<span class="keyword">extends</span> <span class="title class_">Collection</span>&lt;E&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-ArrayList实现类">1.2  <code>ArrayList</code>实现类</h4><ul><li>继承自 <code>AbstractList</code>，实现了 List 接口。底层基于数组实现容量大小动态变化。允许 null 的存在。同时还实现了  <code>RandomAccess</code>、<code>Cloneable</code>、<code>Serializable</code> 接口，所以<code>ArrayList</code> 是支持快速访问、复制、序列化的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span>  <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//实现类</span></span><br></pre></td></tr></table></figure><h4 id="1-3-常用方法">1.3 常用方法</h4><ul><li><table><thead><tr><th style="text-align:center"><code>boolean</code></th><th style="text-align:center"><code>add(E e)</code>  将指定的元素追加到此列表的末尾。</th></tr></thead><tbody><tr><td style="text-align:center"><code>void</code></td><td style="text-align:center"><code>add(int index, E element)</code>  在此列表中的指定位置插入指定的元素。</td></tr><tr><td style="text-align:center"><code>void</code></td><td style="text-align:center"><code>clear()</code>  从列表中删除所有元素。</td></tr><tr><td style="text-align:center"><code>E</code></td><td style="text-align:center"><code>get(int index)</code>  返回此列表中指定位置的元素。</td></tr><tr><td style="text-align:center"><code>Iterator&lt;E&gt;</code></td><td style="text-align:center"><code>iterator()</code>  以正确的顺序返回该列表中的元素的迭代器。</td></tr><tr><td style="text-align:center"><code>E</code></td><td style="text-align:center"><code>remove(int index)</code>  删除该列表中指定位置的元素。</td></tr><tr><td style="text-align:center"><code>int</code></td><td style="text-align:center"><code>size()</code>  返回此列表中的元素数。</td></tr><tr><td style="text-align:center"><code>Object[]</code></td><td style="text-align:center"><code>toArray()</code>  以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。</td></tr></tbody></table></li></ul><h4 id="1-4-底层实现">1.4 底层实现</h4><ul><li><p><code>ArrayList</code> 底层是基于数组来实现容量大小动态变化的。默认初始容量大小为 10。是线程不同步的</p></li><li><p>扩容：第一次扩容10，以后每次都扩容原容量的1.5倍，扩容通过位运算右移动1位。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span>  <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//实现类</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Default initial capacity.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>遍历方式：for循环，增强for, 迭代器。</li></ul><h4 id="1-5-LinkedList实现类">1.5 <code>LinkedList</code>实现类</h4><p><code>LinkedList</code>: <code>LinkedList</code> 实现 List 接口，能对它进行<a href="https://so.csdn.net/so/search?q=%E9%98%9F%E5%88%97&amp;spm=1001.2101.3001.7020">队列</a>操作。<code>LinkedList</code> 是通过双向链表去实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span>  <span class="title class_">LinkedList</span>&lt;&gt;();<span class="comment">//实现类</span></span><br><span class="line"><span class="comment">//栈（Stack）：是只允许在一端进行插入或删除的线性表。首先栈是一种线性表，但限定这种线性表只能在某一端进行插入和删除操作。</span></span><br><span class="line"><span class="comment">//队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。</span></span><br></pre></td></tr></table></figure><h4 id="1-6-面试题：ArrayList和LinkedList-的区别？">1.6 面试题：<code>ArrayList</code>和<code>LinkedList</code> 的区别？</h4><p>都是线程不同步的。</p><p><code>ArrayList</code>:</p><ul><li>基于动态数组的数据结构</li><li>对于随机访问的get和set，其效率优于<code>LinkedList</code></li><li>对于随机操作的add和remove，<code>ArrayList</code>不一定比<code>LinkedList</code>慢(<code>ArrayList</code>底层由于是动态数组，因此并不是每一次add和remove都需要创建新数组)</li></ul><p><code>LinkedList</code></p><ul><li><p>基于<strong>链表的数据结构</strong></p></li><li><p>对于顺序操作，<code>LinkedList</code> 不一定比<code>ArrayList</code>慢</p></li><li><p>对于随机操作，<code>LinkedList</code> 效率明显低于<code>LinkedList</code></p></li><li><p>内部是基于链表结构实现的。添加和删除比较快，查询相对<code>ArrayList</code>比较慢.</p><p>内部相对于<code>ArrayList</code>而言多了一些操作头和尾的方法。可以充当队列，堆栈。不是线程安全的（同步的）。</p></li></ul><h3 id="2-HashSet和TreeSet">2.<code>HashSet</code>和<code>TreeSet</code></h3><ul><li>都实现了Set接口，集合中存储的元素不重复。</li><li>都是无序的</li></ul><h4 id="2-1-HashSet实现原理">2.1 <code>HashSet</code>实现原理</h4><ul><li>此类实现<code>Set</code>接口，由哈希表（实际为<code>HashMap</code>实例）支持。  对集合的迭代次序不作任何保证; 特别是，它不能保证订单在一段时间内保持不变。  这个类允许<code>null</code>元素。</li><li>去重：根据判断每个元素的<code>hashCode</code>值是否相同和equals是否为true判断此元素是否相同</li><li><strong>如果两个对象的<code>hashCode</code>相等  并且 两个对象调用equals结果是true  才认为两个元素重复</strong></li></ul><h4 id="2-2-TreeSet-实现原理">2.2 <code>TreeSet</code> 实现原理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(); </span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line">TreeSet(Comparator&lt;? <span class="built_in">super</span> E&gt; comparator) <span class="comment">//构造一个新的，空的树集，根据指定的比较器进行排序。</span></span><br></pre></td></tr></table></figure><p>介绍：1．无序：不保证（不记录）我们的添加顺序；</p><p>2．不重复：不能够添加重复元素</p><p>3．内部存储有一定的顺序</p><p><em><strong>*注意：<code>TreeSet</code>一旦添加了第一个元素后就不能添加其它数据类型的元素了，只能添加相同数据类型的元素，除非将容器中所有的元素全部清空，才能添加新的数据类型的元素*</strong></em></p><h4 id="2-3-自然排序和定制排序">2.3 自然排序和定制排序</h4><ul><li>自然排序：实现Comparable接口，重写此方法，返回值为0表示元素相同，负整和正整数数表示倒序或顺序。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="comment">//自定义逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定制排序：实现Comparator(比较器)接口，重写此方法，返回值为0表示元素相同，负整和正整数数表示倒序或顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(o1==<span class="literal">null</span>||o2==<span class="literal">null</span>)&#123;<span class="comment">//判断，若两个有一个为null都直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> Student &amp;&amp; o2 <span class="keyword">instanceof</span> Student)&#123;<span class="comment">//如果类型匹配才转换</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> (Student)o1;</span><br><span class="line"><span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> (Student)o2;</span><br><span class="line"><span class="keyword">if</span>(stu1.age&gt;stu2.age)&#123;<span class="comment">//先判断年龄后判断姓名</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(stu1.age&lt;stu2.age)&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> stu1.name.compareTo(stu2.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MyComparator mc = new MyComparator();</span></span><br><span class="line"><span class="comment">//TreeSet ts = new TreeSet(mc);</span></span><br></pre></td></tr></table></figure><h3 id="3-IO流">3. IO流</h3><h4 id="3-1-InputStream">3.1 <code>InputStream</code></h4><ul><li>字节输入流读取文件一般用于图片，视频等文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(File file);</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(String pathname);</span><br><span class="line"><span class="comment">//缓冲流</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">buff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(in);</span><br></pre></td></tr></table></figure><h4 id="3-2-FileReader">3.2 <code>FileReader</code></h4><p>字符输入流一般用于读取文字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileReader reader=<span class="keyword">new</span> <span class="title class_">FileReader</span>(File file);</span><br><span class="line">FileReader reader=<span class="keyword">new</span> <span class="title class_">FileReader</span>(String pathname);</span><br><span class="line"><span class="comment">//字符缓冲流</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">buff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader);</span><br></pre></td></tr></table></figure><h4 id="3-3-OutputStream">3.3 <code>OutputStream</code></h4><p>字节输出流写出文件一般用于图片，视频等文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OutputStream</span>  <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span> (File file);</span><br><span class="line"><span class="type">OutputStream</span>  <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span> (String pathname);</span><br><span class="line"><span class="comment">//缓冲流</span></span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">buff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(out);</span><br></pre></td></tr></table></figure><h4 id="3-4-FileWriter">3.4 <code>FileWriter</code></h4><p>字符输出流一般用于写出文字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileWriter writer=<span class="keyword">new</span> <span class="title class_">FileWriter</span>(File file);</span><br><span class="line">FileWriter writer=<span class="keyword">new</span> <span class="title class_">FileWriter</span>(String pathname);</span><br><span class="line"><span class="comment">//字符缓冲输出流</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">buff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(writer);</span><br></pre></td></tr></table></figure><h4 id="3-5-复制文件案例">3.5 复制文件案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.ioTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyAllVideoContent</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        copyFile();</span><br><span class="line">        <span class="comment">//递归复制所有文件</span></span><br><span class="line">       <span class="comment">/* File file = new File(&quot;E:\\itsourse\\2022-07-02-JAVA加强-集合-Map-泛型&quot;);</span></span><br><span class="line"><span class="comment">        copyAllVideoContents(file, &quot;E:\\itsourse\\copyVideo&quot;);*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在file中查找以.mp4的文件并复制到指定位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">copyAllVideoContents</span><span class="params">(File file, String dir)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists() || file.listFiles().length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;文件不存在或文件无内容！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f.isFile()) &#123;</span><br><span class="line">                <span class="comment">//复制视频文件</span></span><br><span class="line">                copyVideoFile(f, dir);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//目录 递归调用</span></span><br><span class="line">                copyAllVideoContents(f, dir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;复制视频内容完成！！！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyVideoFile</span><span class="params">(File f, String dir)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (f.getName().endsWith(<span class="string">&quot;mp4&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> (<span class="comment">//自动关流</span></span><br><span class="line">                 <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">                 <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dir + <span class="string">&quot;\\&quot;</span> + f.getName());</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="type">int</span> count;</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> ((count = in.read(bytes, <span class="number">0</span>, bytes.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    out.write(bytes, <span class="number">0</span>, count);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未拷贝文件名称：&quot;</span> + f.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 采用字节缓冲流复制 提高效率</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\itsourse\\预习视频-有声版\\2022-03-29-JAVA-Map和泛型\\video&quot;</span>);</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            copyByBuffered(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;复制完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyByBuffered</span><span class="params">(File f)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\itsourse\\mapVideo&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">                <span class="type">BufferedInputStream</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(in);</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\itsourse\\mapVideo&quot;</span> + <span class="string">&quot;\\&quot;</span> + f.getName());</span><br><span class="line">                <span class="type">BufferedOutputStream</span> <span class="variable">bufout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(out);</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">int</span> count;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((count = buf.read(bytes, <span class="number">0</span>, bytes.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bufout.write(bytes, <span class="number">0</span>, count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-6-RandomAccessFile">3.6 <code>RandomAccessFile</code></h4><p>随机访问流读写文件，一般用于下载文件。</p><table><thead><tr><th style="text-align:center"><code>void</code></th><th style="text-align:center"><code>setLength(long newLength)</code>  设置此文件的长度。</th></tr></thead><tbody><tr><td style="text-align:center"><code>void</code></td><td style="text-align:center"><code>seek(long pos)</code>  设置文件指针偏移，从该文件的开头测量，发生下一次读取或写入。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机访问流读取文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomStreamTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">thisLine</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">as</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;E:\\javabase\\practiceDemo\\src\\com\\lqs\\ioTest\\song.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        System.out.println(as.length());</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((count = as.read(bytes, <span class="number">0</span>, bytes.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, count));</span><br><span class="line">        &#125;</span><br><span class="line">        as.setLength(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">8</span>);<span class="comment">//设置文件大小为8M</span></span><br><span class="line">        as.seek(<span class="number">1024</span>);<span class="comment">//设置偏移量</span></span><br><span class="line">        </span><br><span class="line">     <span class="comment">/*   while ((thisLine = as.readLine()) != null) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(thisLine);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-自定义日期转换工具类">4.  自定义日期转换工具类</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符转日期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">stringToDate</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日HH时mm分ss秒&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = sdf.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期转字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">dateToString</span><span class="params">(Date date)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日HH时mm分ss秒&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        s = sdf.format(date);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-设计模式">5. 设计模式</h3><h4 id="5-1-单例设计模式">5.1 单例设计模式</h4><ul><li>单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例。</li><li>单例特征：①对象构造私有化，②私有静态当前类类型的字段，③提供公共，静态对外的访问方法获取对象</li></ul><h4 id="5-2-饿汉模式">5.2 饿汉模式</h4><p>实质上就是在类加载的时候即创建，</p><p>饿汉模式线程安全，但是存在加载效率低下的问题，</p><p>使用静态内部类块优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例设计模式</span></span><br><span class="line"><span class="comment"> * 1.构造方法私有化</span></span><br><span class="line"><span class="comment"> * 2.初始化成员属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleInstance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingleInstance</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleInstance</span>();<span class="comment">//饿汉单例模式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleInstance <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 饿汉单例模式</span></span><br><span class="line"><span class="comment">  * 一开始就初始化对象</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInstance</span><span class="params">()</span> &#123;<span class="comment">//同一个对象</span></span><br><span class="line">     System.out.println(SingleInstance.getInstance());</span><br><span class="line">     System.out.println(SingleInstance.getInstance());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-懒汉模式">5.3 懒汉模式</h4><ul><li><p>即在需要的时候才创建对象返回，懒汉模式容易造成线程不安全问题，故可以同步代码块【synchronized】解决线程问题，但要使用双重校验，而且同步代码块这种方式效率比较低。</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例设计模式</span></span><br><span class="line"><span class="comment"> * 1.构造方法私有化</span></span><br><span class="line"><span class="comment"> * 2.初始化成员属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleInstance2</span> &#123;</span><br><span class="line">    <span class="comment">//volatile 保证AB线程会看到变量instance的同一个值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">SingleInstance2</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//懒汉单例模式 会出现线程安全问题 需要解决</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleInstance2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleInstance2 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;<span class="comment">//防止多线程排队</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingleInstance2.class) &#123;<span class="comment">//同步锁 线程进来需要排队 但是每一个线程进来都需要进行判断导致访问缓慢所以要--&gt;防止多线程排队</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;<span class="comment">//防止多个线程排队造成 对象重复创建</span></span><br><span class="line">                    <span class="comment">//睡眠 会出现线程安全问题</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">SingleInstance2</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;=======线程安全问题========&quot;</span>);</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">           System.out.println(SingleInstance2.getInstance());</span><br><span class="line">       &#125;).start();</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(SingleInstance2.getInstance())).start();<span class="comment">//同一对象</span></span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(SingleInstance2.getInstance())).start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-4-枚举单例模式（推荐）">5.4 枚举单例模式（推荐）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">MyEnum</span> &#123;</span><br><span class="line">    MAN,<span class="comment">//表示一个对象</span></span><br><span class="line">    WOMAN;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;枚举单例设计模式，设计安全哦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEnum</span><span class="params">()</span> &#123;</span><br><span class="line">    MyEnum.MAN.show();<span class="comment">//枚举单例设计模式，设计安全哦</span></span><br><span class="line">    System.out.println(MyEnum.WOMAN);<span class="comment">//WOMAN</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-5-装饰者模式">5.5 装饰者模式</h4><ul><li>装饰模式指的是在不必改变原类文件和不使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</li><li>实现步骤 ：通过对原类文件继承，对原有方法功能的基础上，实现新的功能.</li></ul><h4 id="5-6-简单工厂模式">5.6 简单工厂模式</h4><ul><li>工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。(spring反射)</li><li>实现步骤：使用工厂对象，根据传递的参数创建对象解耦（耦合）<em><strong>*低耦合高内聚*</strong></em>。</li></ul><h4 id="5-7-适配器模式">5.7 适配器模式</h4><ul><li>适配器模式（有时候也称包装样式或者包装）将一个类的接口适配成用户所期待的。一个适配允许通常因为接口不兼容而不能在一起工作的类工作在一起，做法是将类自己的接口包裹在一个已存在的类中。</li></ul><h3 id="6-资源文件解析">6.  资源文件解析</h3><h4 id="6-1-概诉">6.1 概诉</h4><ul><li><p>资源文件也可以看成是配置文件，一般的形式有两种：properties形式和XML形式。</p></li><li><p>properties文件中数据的存储是****以键值对的形式存在，每一行为一条数据，只能存储字符串形式的数据，Properties文件中值的部分任意字符都会被当做值的一部分，尤其是空格****</p></li></ul><h4 id="6-2-Properties类语法">6.2 <strong>Properties类语法</strong></h4><ul><li><p>①<code>load</code>(字节输入流) 加载资源文件</p><p>②<code>getProperty(key)</code> 返回资源文件中对应key中的值【字符串】，若key不存在则返回null</p><p>③<code>getProperty(key,默认值)</code> 返回资源文件中对应key中的值【字符串】，若key不存在则返回默认值</p></li><li><p>传统IO方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(文件路径));</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-3-类加载器获取流">6.3 类加载器获取流</h4><ul><li><p>通过类加载器获取流，那么首要是获取到类加载器，获取类加载器的方式有很多种，以下介绍两种：</p><ul><li><p>字节码对象方式获取类加载器–&gt;&gt;字节码对象<code>.getClassLoader()</code></p></li><li><p>线程方式获取类加载器–&gt;&gt;线程方式获取类加载器稍微比字节码对象获取类加载器稍显复杂，必须先获取当前线程，通过当前线程获取类加载器<code>Thread.currentThread().getContextClassLoader()</code></p></li><li><p>**获取流语法：**类加载器对象<code>.getResourceAsStream(包名/文件名)</code>，类加载器获取流的时候，路径最前方不需要书写/</p></li></ul></li></ul><h4 id="6-4-代码案例">6.4 代码案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//        InputStream in = TestAll.class.getClassLoader().getResourceAsStream(&quot;db.properties&quot;);//类加载器</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>));<span class="comment">//读取文件</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ps);</span><br><span class="line">        System.out.println(ps.getProperty(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(ps.getProperty(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="7-注解">7. 注解</h3><h4 id="7-1-jdk四大内置注解">7.1 <code>jdk</code>四大内置注解</h4><ol><li><p><code>@Override</code></p><p>作用：检查方法是否方法覆写</p><p>位置：方法@Deprecated</p></li><li><p><code>@Deprecated</code></p><p>作用:用来标记过时，过时不是不可以用，只是不建议使用</p><p>过时：后面的版本可能不维护升级，已经有更好的替换方案</p></li><li><p><code>@SuppressWarings</code></p><p>作用：抑制警告,不建议使用，注解可以传值</p><p><code>@SuppressWarings(&quot;all&quot;)</code></p></li><li><p>@SafeVarargs</p><p>作用：抑制堆污染警告，这个注解是后面才出来的，以前也是使用<code>@SuppressWarings</code>解决警告问题</p><p>堆污染 ：不建议使用</p></li></ol><h4 id="7-2-元注解：用来定义注解的注解">7.2 元注解：用来定义注解的注解</h4><ol><li><p>@Target</p><p>用来定义【注解】的使用位置</p></li><li><p>@Retention</p><p>用来定义【注解】生命周期</p><p>白话：@Retention 标注在@Override ,Override这个注解的声明周期属于哪个阶段</p><p><code>RetentionPolicy</code></p><p>SOURCE：源码阶段，编译为字节码以后 注解就不存在了</p><p>CLASS：字节码阶段，运行注解就不存在了</p><p>RUNTIME：运行时，一直存在</p></li><li><p>@Documented</p><p>所标注的【注解】在生成文档以后，在文档中体现出来</p></li><li><p>@Inherited</p><p>所标注的【注解】具有继承性</p><p>例如 ：</p><p>定义了一个注解 <code>@VIP</code>,在定义<code>@VIP</code>的时候使用了@Inherited注解</p><p><code>@VIP</code></p><p><code>class A&#123;&#125;</code></p><p><code>class B extends A&#123;&#125;</code></p><p>B这个类也能继承<code>@VIP</code>这个注解</p></li></ol><h4 id="7-3-注解的传值">7.3 注解的传值</h4><ol><li><p>注解的传值：@注解名字(属性名=值,属性名=值)。</p></li><li><p>特殊情况：</p><p>如果属性有默认值，在使用注解的时候可以不用传值【如果没有默认值，必须传值】</p><p>如果只传一个值，并且属性的名字叫做value,属性名可以省略不写</p><p>数组的传值  属性名={值1,值2,值3,…}</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.lqs.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lqs.examination.TransRecord;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span><span class="comment">//表示类过期了不建议使用</span></span><br><span class="line"><span class="meta">@VIP(number = &quot;00001&quot;, order = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;, value = &quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><span class="comment">//使用范围</span></span><br><span class="line"><span class="meta">@Documented</span><span class="comment">//是否生成文档</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//生命周期</span></span><br><span class="line"><span class="meta">@Inherited</span><span class="comment">//注解的继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> VIP &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//定义属性</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;coderyeah&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">number</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;1001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] order();<span class="comment">//数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="8-反射">8. 反射</h3><h4 id="8-1-概念">8.1 概念</h4><p>一个Class对象就是表示一个class文件，获取Class对象不能通过new的方式，因为只有<code>java</code>源程序编译后生成字节码文件，再通过class文件得到Class对象。</p><ol><li><p>会产生class文件的类型有：类，接口，枚举，注解</p></li><li><p>获取Class对象：</p><ul><li><p><code>对象.getClass()</code>     Object提供</p></li><li><p><code>Class.forName(String className)</code>  Class 提供</p></li><li><p>类名.class</p></li></ul></li></ol><h4 id="8-2-获取Class对象">8.2 获取Class对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetClassTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetClass</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.getClass());<span class="comment">//class java.lang.String</span></span><br><span class="line">        System.out.println(String.class);<span class="comment">//class java.lang.String</span></span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; name = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        System.out.println(Class.forName(<span class="string">&quot;java.lang.String&quot;</span>));<span class="comment">//完全限定名</span></span><br><span class="line"></span><br><span class="line">        System.out.println(List.class == Class.forName(<span class="string">&quot;java.util.List&quot;</span>));<span class="comment">//true 返回同一个Class对象</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个数组也有对应的Class对象</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 该对象由具有相同元素类型和维数的所有数组共享 (相同维数和数组类型则Class对象一致)</span></span><br><span class="line"><span class="comment">     * 类获取Class 对象</span></span><br><span class="line"><span class="comment">     * 1.对象.getClass()     Object提供</span></span><br><span class="line"><span class="comment">     * 3.类名.class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetClass2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span>[][] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">12</span>][<span class="number">6</span>];</span><br><span class="line">        System.out.println(a.getClass());<span class="comment">//对象 class [I</span></span><br><span class="line">        System.out.println(a.getClass() == <span class="type">int</span>[].class);<span class="comment">//true</span></span><br><span class="line">        System.out.println(a.getClass());<span class="comment">//class [I</span></span><br><span class="line">        System.out.println(b.getClass());<span class="comment">//class [[I</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原始Java类型（ boolean ， byte ， char ， short ， int ， long ， float和double ）</span></span><br><span class="line"><span class="comment">     *  ，和关键字void也表示为Class对象。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 基本数据类型也有class对象，基本数据类型对应的包装类 持有其Class对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 类获取Class 对象</span></span><br><span class="line"><span class="comment">     * 3.类名.class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetClass4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;Integer&gt; cla = <span class="type">int</span>.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基本数据类型也有class对象，基本数据类型对应的包装类 持有其Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cla1</span> <span class="operator">=</span> Integer.TYPE;</span><br><span class="line">        System.out.println(cla==cla1);<span class="comment">//true</span></span><br><span class="line">        System.out.println(cla);<span class="comment">//int</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-3-通过反射获取构造方法">8.3 通过反射获取构造方法</h4><ol><li><p>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器开始</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">User</span><span class="params">(String name, Long id, String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造器开始</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造器结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>获取构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetConstructor</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; cla = Class.forName(<span class="string">&quot;com.lqs.reflect.User&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt;[] cons = cla.getConstructors();<span class="comment">//获取所有的public修饰的构造器</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; c : cons) &#123;</span><br><span class="line"><span class="comment">//         System.out.println(c);//public com.lqs.reflect.User(java.lang.String),public com.lqs.reflect.User()</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt;[] constructors = cla.getDeclaredConstructors();<span class="comment">//获取User中所有的构造器</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(constructor);//包括私有的构造方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取指定参数类型的公共构造器</span></span><br><span class="line">        System.out.println(cla.getConstructor());<span class="comment">//public com.lqs.reflect.User()</span></span><br><span class="line">        System.out.println(cla.getConstructor(String.class));<span class="comment">//public com.lqs.reflect.User(java.lang.String)</span></span><br><span class="line">        <span class="comment">//获取指定参数的私有构造器 private com.lqs.reflect.User(java.lang.String,java.lang.Long,java.lang.String)</span></span><br><span class="line">        System.out.println(cla.getDeclaredConstructor(String.class, Long.class, String.class));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用构造方法创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNewInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;<span class="comment">//使用构造方法创建对象</span></span><br><span class="line">       Class&lt;?&gt; cla = Class.forName(<span class="string">&quot;com.lqs.reflect.User&quot;</span>);</span><br><span class="line">       <span class="type">Object</span> <span class="variable">newInstance</span> <span class="operator">=</span> cla.newInstance();<span class="comment">//默认使用无参构造</span></span><br><span class="line">       System.out.println(newInstance);<span class="comment">//User&#123;name=&#x27;null&#x27;, id=null, password=&#x27;null&#x27;&#125;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">//私有构造方法</span></span><br><span class="line">       Constructor&lt;?&gt; constructor = cla.getDeclaredConstructor(String.class, Long.class, String.class);</span><br><span class="line">       constructor.setAccessible(<span class="literal">true</span>);<span class="comment">//让权限检查失效</span></span><br><span class="line">       <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;coderyeah&quot;</span>, <span class="number">10001l</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">       System.out.println(o);<span class="comment">//User&#123;name=&#x27;coderyeah&#x27;, id=10001, password=&#x27;root&#x27;&#125;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">//公共构造方法</span></span><br><span class="line">       <span class="keyword">final</span> Constructor&lt;?&gt; con = cla.getConstructor(String.class);</span><br><span class="line">       System.out.println(con.newInstance(<span class="string">&quot;山姆&quot;</span>));<span class="comment">//User&#123;name=&#x27;山姆&#x27;, id=null, password=&#x27;null&#x27;&#125;</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="8-4-使用反射获取方法并调用">8.4 使用反射获取方法并调用</h4><ol><li><p>获取方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; cla = Class.forName(<span class="string">&quot;com.lqs.reflect.User&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> Method[] methods = cla.getMethods();<span class="comment">//获取所有公共的方法，包括父类所继承的方法</span></span><br><span class="line"><span class="comment">//        System.out.println(methods.length);//16</span></span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Method[] declaredMethods = cla.getDeclaredMethods();<span class="comment">//获取User类所有的方法，不包括父类所继承的方法</span></span><br><span class="line"><span class="comment">//        System.out.println(declaredMethods.length);//9</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : declaredMethods) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(method);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取公共的指定方法名和参数类型的方法</span></span><br><span class="line">        <span class="comment">//public void com.lqs.reflect.User.eat(java.lang.String)</span></span><br><span class="line">        System.out.println(cla.getMethod(<span class="string">&quot;eat&quot;</span>, String.class));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取私有的指定方法名和参数类型的方法</span></span><br><span class="line"><span class="comment">        private void com.lqs.reflect.User.show(java.lang.String,int)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(cla.getDeclaredMethod(<span class="string">&quot;show&quot;</span>, String.class, <span class="type">int</span>.class));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>获取方法并调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取方法并调用：</span></span><br><span class="line"><span class="comment">     * Method</span></span><br><span class="line"><span class="comment">     * Object invoke(Object obj, Object... args) 执行方法</span></span><br><span class="line"><span class="comment">     * obj:调用方法的对象</span></span><br><span class="line"><span class="comment">     * args:调用方法的实参</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; cla = Class.forName(<span class="string">&quot;com.lqs.reflect.User&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cla.getMethod(<span class="string">&quot;eat&quot;</span>, String.class);</span><br><span class="line">        method.invoke(cla.newInstance(), <span class="string">&quot;coderyeah&quot;</span>);<span class="comment">//coderyeah想吃大闸蟹······</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用私有方法</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Method</span> <span class="variable">show</span> <span class="operator">=</span> cla.getDeclaredMethod(<span class="string">&quot;show&quot;</span>, String.class, <span class="type">int</span>.class);</span><br><span class="line">        show.setAccessible(<span class="literal">true</span>);<span class="comment">//让权限检查失效</span></span><br><span class="line">        show.invoke(cla.newInstance(), <span class="string">&quot;coderyeah&quot;</span>, <span class="number">21</span>);<span class="comment">//coderyeah今年21岁啦</span></span><br><span class="line"></span><br><span class="line">        System.out.println(cla.getModifiers());<span class="comment">//1 public</span></span><br><span class="line">        System.out.println(show.getModifiers());<span class="comment">//2 private</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="8-5获取字段并赋值">8.5获取字段并赋值</h4><ol><li><p>获取字段并赋值</p><ul><li><p><code>Field getField(String name)</code>  返回一个 Field对象，它反映此表示的类或接口的指定公共成员字段 类对象。</p></li><li><p><code>Field[] getFields()</code>  返回包含一个数组 Field对象反射由此表示的类或接口的所有可访问的公共字段 类对象。</p></li><li><p><code>Field getDeclaredField(String name)</code>  返回一个 Field对象，它反映此表示的类或接口的指定已声明字段 类对象。</p></li><li><p><code>Field[] getDeclaredFields()</code>  返回的数组 Field对象反映此表示的类或接口声明的所有字段 类对象。</p></li></ul></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FieldTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetField</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; cla = Class.forName(<span class="string">&quot;com.lqs.reflect.User&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> cla.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);<span class="comment">//private java.lang.String com.lqs.reflect.User.name</span></span><br><span class="line">        System.out.println(cla.getField(<span class="string">&quot;id&quot;</span>));<span class="comment">//public java.lang.Long com.lqs.reflect.User.id</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : cla.getFields()) &#123;</span><br><span class="line">            System.out.println(field);<span class="comment">//public java.lang.Long com.lqs.reflect.User.id</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * private java.lang.String com.lqs.reflect.User.name</span></span><br><span class="line"><span class="comment">         * public java.lang.Long com.lqs.reflect.User.id</span></span><br><span class="line"><span class="comment">         * private java.lang.String com.lqs.reflect.User.password</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : cla.getDeclaredFields()) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; cla = Class.forName(<span class="string">&quot;com.lqs.reflect.User&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">id</span> <span class="operator">=</span> cla.getField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        id.set(user, <span class="number">110L</span>);</span><br><span class="line">        System.out.println(id.get(user));<span class="comment">//110</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> cla.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(user, <span class="string">&quot;coderyeah&quot;</span>);</span><br><span class="line">        System.out.println(name.get(user));<span class="comment">//coderyeah</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="8-6-使用反射创建任意对象">8.6 使用反射创建任意对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">CreateBean</span><span class="params">(String cla)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; aClass = Class.forName(cla);</span><br><span class="line">        <span class="keyword">return</span> aClass.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">CreateBean</span><span class="params">(Class&lt;T&gt; cla)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> cla.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> BeanFactory.CreateBean(<span class="string">&quot;com.lqs.reflect.User&quot;</span>);</span><br><span class="line">    System.out.println(o);<span class="comment">//User&#123;name=&#x27;null&#x27;, id=null, password=&#x27;null&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">    System.out.println(BeanFactory.CreateBean(Student.class));<span class="comment">//com.lqs.reflect.Student@ba8a1dc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-7-图片">8.7 图片</h4><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220713151237.png" alt="无标题"></p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/20220713144927.jpg" alt="girl"></p><h3 id="9-MYSQL的执行顺序">9.<code>MYSQL</code>的执行顺序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关键字：from、on、left join、where、group by、having、select、distinct、order by、limit.</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">①FORM:</span> <span class="string">对FROM的左边的表和右边的表计算笛卡尔积。产生虚表VT1</span></span><br><span class="line"><span class="string">②ON:</span> <span class="string">对虚表VT1进行ON筛选，只有那些符合&lt;join-condition&gt;的行才会被记录在虚表VT2中。</span></span><br><span class="line"><span class="string">③JOIN:</span> <span class="string">如果指定了OUTER</span> <span class="string">JOIN（比如left</span> <span class="string">join、</span> <span class="string">right</span> <span class="string">join），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中，产生虚拟表VT3,</span> <span class="string">rug</span> <span class="string">from子句中包含两个以上的表的话，那么就会对上一个join连接产生的结果VT3和下一个表重复执行步骤1~3这三个步骤，一直到处理完所有的表为止。</span></span><br><span class="line"><span class="string">④WHERE:</span> <span class="string">对虚拟表VT3进行WHERE条件过滤。只有符合&lt;where-condition&gt;的记录才会被插入到虚拟表VT4中。</span></span><br><span class="line"><span class="string">⑤GROUP</span> <span class="attr">BY:</span> <span class="string">根据group</span> <span class="string">by子句中的列，对VT4中的记录进行分组操作，产生VT5.</span></span><br><span class="line"><span class="string">⑥CUBE</span> <span class="string">|</span> <span class="attr">ROLLUP:</span> <span class="string">对表VT5进行cube或者rollup操作，产生表VT6.</span></span><br><span class="line"><span class="string">⑦HAVING:</span> <span class="string">对虚拟表VT6应用having过滤，只有符合&lt;having-condition&gt;的记录才会被</span> <span class="string">插入到虚拟表VT7中。</span></span><br><span class="line"><span class="string">⑧SELECT:</span> <span class="string">执行select操作，选择指定的列，插入到虚拟表VT8中。</span></span><br><span class="line"><span class="string">⑨DISTINCT:</span> <span class="string">对VT8中的记录进行去重。产生虚拟表VT9.</span></span><br><span class="line"><span class="string">⑩ORDER</span> <span class="attr">BY:</span> <span class="string">将虚拟表VT9中的记录按照&lt;order_by_list&gt;进行排序操作，产生虚拟表VT10.</span></span><br><span class="line"><span class="attr">LIMIT:</span> <span class="string">取出指定行的记录，产生虚拟表VT11,</span> <span class="string">并将结果返回。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase基础知识笔记</title>
      <link href="/posts/32431.html"/>
      <url>/posts/32431.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-jdk下载与环境变量配置">1.jdk下载与环境变量配置</h4><ul><li>下载官网：(<a href="https://www.oracle.com/index.html">https://www.oracle.com/index.html</a>)</li><li>配置：变量名为JAVA_HOME, 变量值为安装路径如：E:\javahome,  path值：%JAVA_HOME%bin</li><li>win+R, 输入cmd, 回车,再输入javac -version回车查看版本,再输入 java -version 若都成功则配置安装成功。</li></ul><h4 id="2-基本数据类型（四型八种）">2.基本数据类型（四型八种）</h4><ul><li><code>byte by = 123;//一个字节，八位</code></li><li><code>short sh = 456;//短整型，两个字节，16位</code></li><li><code>int i = 12332;//整型, 四个字节，32位</code></li><li><code>long lon = 23142342131L;//长整型，八个字节，64位</code></li><li><code>  float fo = 175.9F;//单精度浮点型，四个字节，32位,</code></li><li>声明一个float类型变量，一个普通的小数默认是double类型<br>必须在常数的后面加上f或F</li><li><code>  double dou = 123.87;//双精度浮点型，八个字节，64位</code></li><li><code>boolean passed = false;//boolean类型，jvm中规定，计算机底层使用int类型存储Boolean类型，所以4字节</code></li><li>//字符类型变量char,可以和int整型数据类型相互转换但是不能超过最大值，\表示转义字符<br><code>cha</code>r ch1 = ‘男’;<code>   </code>int a = 66;<code>   </code>System.out.println(“ch1对应的整型是：” + (int)ch1);//强制类型转换<code>     System.out.println(&quot;a对应的字符型是：&quot; + (char)a);//强制类型转换</code></li><li>/<em>强制类型转换，从高精度向低精度转换</em>/(需要的低数据类型)高精度数据类型例如：<code>float f = (float)1212.121d;</code></li></ul><h4 id="3-短路与和短路或">3.短路与和短路或</h4><ul><li>boolean bool = n1 &gt; n2 &amp;&amp; ++n1 &gt; n3, 如果n1&gt;n2为flase,则后面部分则不会被执行，称为短路与。</li><li>boolean bool2 = n1 &gt; n2 || --n1 &gt;n3, 如果n1&gt;n2为真，则后面不会被执行，称为短路或。</li><li>按位与&amp;和按位或|：6661. 按位与和逻辑与相似，但不会出现短路现象，按位或亦是如此。</li><li>按位非~类似！</li></ul><h4 id="4-移位运算符">4.移位运算符</h4><ul><li><p>左移位，表示3向左移位2位， 左移位运算&lt;&lt;     左移一位相当于乘2，左移两位相当于乘2的2次方。</p><p>3 &lt;&lt;2(3为int型)</p><p>1）把3转换为二进制数字0000 0000 0000 0000 0000 0000 0000 0011，</p><p>2）把该数字高位(左侧)的两个零移出，其他的数字都朝左平移2位，</p><p>3）在低位(右侧)的两个空位补零。则得到的最终结果是0000 0000 0000 0000 0000 0000 0000 1100，转换为十进制是12。</p></li><li><p>向左移动32位，结果和输入的数一样     * 原因：32%32==0,移动0位     * 如果向左移动33位，33%32==1，移动1位     结果：输入24，得到24 * 2^1 =48</p></li><li><p>右移位运算&gt;&gt;,右移一位相当于除2，右移n位相当于除2的n次方。无符号向右侧移动&gt;&gt;&gt;,对负数有效变为正数，对整数和&gt;&gt;一样</p></li></ul><h4 id="5-循环">5.循环</h4><ul><li><p>while循环：当条件为true时，可使用break;关键字跳出循环。continue;关键字表示结束本次循环，继续下一次循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 计算出100以内所有偶数的和，偶数的和，并比较大小，输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">odd_number_sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//奇数和</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">even_number_sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//偶数和</span></span><br><span class="line">       <span class="keyword">while</span> (a &lt; <span class="number">101</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>) &#123;<span class="comment">//判断为偶数</span></span><br><span class="line">               even_number_sum += a;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               odd_number_sum += a;</span><br><span class="line">           &#125;</span><br><span class="line">           a++;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li><li><p>do while循环：至少执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*生成随机数,用户输入0~5的数，猜数字游戏，do while循环至少执行一次 */</span></span><br><span class="line">      <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">      <span class="comment">//生成一个随机数</span></span><br><span class="line">      <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();<span class="comment">//new一个生成随机数的对象</span></span><br><span class="line">      <span class="type">int</span> randomNumber;</span><br><span class="line">      <span class="type">int</span> number;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;请输入一个范围在0~5的整数：&quot;</span>);</span><br><span class="line">          number = scanner.nextInt();</span><br><span class="line">          randomNumber = random.nextInt(<span class="number">5</span>);<span class="comment">//随机生成一个小于5的整数</span></span><br><span class="line">          <span class="keyword">if</span> (number == randomNumber) &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;恭喜你猜对了，随机数是&quot;</span> + randomNumber);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;对不起，你猜错了，随机数是&quot;</span> + randomNumber);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">while</span> (randomNumber != number);</span><br></pre></td></tr></table></figure></li><li><p>for循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//打印九九乘法表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;<span class="comment">//外层循环控制换行</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;<span class="comment">//内层循环输出</span></span><br><span class="line">      System.out.print(j+ <span class="string">&quot; x &quot;</span> + i + <span class="string">&quot; = &quot;</span> + (i * j) + <span class="string">&quot;   &quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">        System.out.println();<span class="comment">//换行</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>for循环迭代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for循环迭代</span></span><br><span class="line">   <span class="type">int</span>[] nums = &#123;<span class="number">12</span>, <span class="number">34</span>, <span class="number">567</span>, <span class="number">34</span>, <span class="number">1324</span>, <span class="number">12</span>&#125;;<span class="comment">//数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-冒泡排序">6.冒泡排序</h4><p>1、比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p><p>2、对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</p><p>3、针对所有的元素重复以上的步骤，除了最后一个。</p><p>4、持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line">        <span class="type">int</span> temp;<span class="comment">//临时变量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length - <span class="number">1</span>; i++) &#123;<span class="comment">//外层循环控制总的排序次数</span></span><br><span class="line">            <span class="comment">/*内层循环实现排序*/</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; scores.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">/*对相邻两个数进行判断*/</span></span><br><span class="line">          <span class="keyword">if</span> (scores[j] &lt; scores[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                temp = scores[j];</span><br><span class="line">                scores[j] = scores[j + <span class="number">1</span>];</span><br><span class="line">                scores[j + <span class="number">1</span>] = temp;<span class="comment">//依次比较将最小数置于末尾</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*使用冒泡排序递增排序*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; scores.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (scores[j + <span class="number">1</span>] &lt; scores[j]) &#123;</span><br><span class="line">                    temp = scores[j + <span class="number">1</span>];</span><br><span class="line">                    scores[j + <span class="number">1</span>] = scores[j];</span><br><span class="line">                    scores[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="7-数组">7.数组</h4><ul><li><p>一维数组：<code>String[] names = &#123;&quot;小米&quot;, &quot;小明&quot;, &quot;莱昂纳多&quot;&#125;;</code>静态方式创建数组 ,数组在JVM中采用栈和堆的储存方式，通过names在栈中地址访问堆（里面为数据）     <code>int[] nums = new int[5];//指定数组长度</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">56</span>, <span class="number">28</span>, <span class="number">15</span>, <span class="number">999</span>, <span class="number">30</span>, <span class="number">65</span>, <span class="number">12</span>, <span class="number">77</span>&#125;;</span><br><span class="line">        <span class="type">int</span> temp;<span class="comment">//临时变量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            temp = nums[i];</span><br><span class="line">            nums[i] = nums[nums.length - (i + <span class="number">1</span>)];</span><br><span class="line">            nums[nums.length - (i + <span class="number">1</span>)] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>二维数组<code>：int[][] stuScores;//声明二维数组变量      </code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`  stuScores = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];<span class="comment">//创建一个二维数组`</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="8-面向对象">8.面向对象</h4><ul><li><p>java对象在JVM中储存：<code>Person person;</code>//声明一个自定义类型的局部变量，存储在JVM的栈中， 使用构造方法创建一个Person类型的对象；赋值给person变量，  对象存储在JVM的堆中；只有new才会在内存堆中新建一个对象        <code>person = new Person();</code></p></li><li><p>访问修饰符：</p><ol><li>public:公共的,最大访问级别。</li><li>protected:保护的,不同包中只有子类允许访问。</li><li>缺省：默认的,不同包中不允许访问。</li><li>private:私有的,只允许在本类中访问。</li></ol></li><li><p><strong>构造方法：</strong></p><ol><li><p>方法名称和类名完全相同，没有任何返回类型，这样的方法是构造方法(构造器)</p></li><li><p>构造方法是用来创建对象使用的,使用new 运算符调用并创建一个对象</p></li><li><p>带参数的构造器目的就是为对象进行成员属性初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*局部变量和成员实例属性重合时可以使用this关键字指向成员变量*/</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">int</span> workAge)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.name = name;</span><br><span class="line">   <span class="built_in">this</span>.workAge = workAge;</span><br><span class="line">   System.out.println(name + <span class="string">&quot; &quot;</span> + workAge);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果构造器被定义多个称为<strong>构造方法重载</strong>或<strong>构造器重载</strong>,自定义有参构造器将会覆盖系统默认提供的无参构造器,如果需要使用则必须重新显示定义。</p></li></ol></li></ul><h4 id="9-继承，多态，接口">9.继承，多态，接口</h4><ul><li>继承：继承是类与类之间的关系，非对象与对象之间的关系，使用关键字extend, 创建子类对象时总是要先创建一个父类对象，默认子类的构造方法总是自动调用父类的无参构造方法 .</li><li>java的三大特性：封装、继承、多态(方法重载、方法重写)。</li><li>final关键字修饰的类不能被继承,构造方法不能被继承，final修饰的类不能被继承,不能被重写。</li><li>方法重载是在同一个类中，方法重写出现在子类当中</li><li><strong>super关键字，不能出现在静态方法中，super关键字在子类的构造方法中代表父类的构造器。</strong></li><li>抽象类：<ol><li>Java核心编程思想是面向对象，面向对象核心编程思想是面向抽象。</li><li>不能使用final关键字修饰。</li><li>自身不能够实例化。</li><li>用来被继承。</li></ol></li><li>适配器： <strong>适配器(Adaptor)创建一个普通类作为适配器类，继承抽象类，实现所有抽象类方法，在用非抽象子类继承适配器，选择性重写抽象方法。</strong></li><li><strong>接口</strong>：接口中属性定义必须是公共的，静态的常量；接口中只允许定义公共的抽象的实例方法。接口中所有对象都是上转型对象。</li></ul><h4 id="10-静态代码块">10.静态代码块</h4><ul><li><p>允许访问静态属性，调用静态方法，定义局部变量及常量，定义局部类。</p></li><li><p>不允许访问实例属性和方法以及定义方法。</p></li><li><p>静态代码块属于类，和对象无关，随类的加载而加载。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义静态的常量*/</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD;</span><br><span class="line"><span class="comment">/*静态块</span></span><br><span class="line"><span class="comment">     * 可以访问静态常量，静态变量，静态方法</span></span><br><span class="line"><span class="comment">     * 定义静态内部类</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//给常量赋值</span></span><br><span class="line">        DRIVER = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">        URL = <span class="string">&quot;jdbc:mysql://localhost:3306/java&quot;</span>;</span><br><span class="line">        USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        PASSWORD = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="11-常用库介绍">11.常用库介绍</h4><ul><li><p>Object类：</p><ol><li>是所有类的超级父类，java任何引用类型对象都可以赋值给Object类型变量。</li><li>Object类提供的常用方法：toString()方法；equals方法用来判定给定对象是否与当前对象相等；getClass方法返回当前对象的运行时类（Class）对象,此方法不允许子类进行重写：public final Class getClass();</li></ol></li><li><p>Character包装类:</p><ol><li><code>Character.isDigit(chars[i])</code>判断是否为数字</li><li><code>Character.isLetter(chars[i])</code>判断是否为字母</li><li><code>Character.isLowerCase(chars[i])</code>判断是否为小写字母</li><li><code>Character.isUpperCase(chars[i])</code>判断是否为大写字母</li><li><code>Character.toUpperCase(chars[i]);</code>字母转换为大写字母</li><li><code>Character.toLowerCase(chars[i]);</code>字母转换为小写字母</li></ol></li><li><p>Integer:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">strNumber</span> <span class="operator">=</span> Integer.toString(number);<span class="comment">//将整型转换为字符串</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer.parseInt(String.valueOf(chars[i]));<span class="comment">//将字符转换为字符串再转换整型</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="12-String字符串以及常用方法">12.String字符串以及常用方法</h4><ul><li><p>String str=“IU”;字符串常量不可以被更改只能被覆盖;存储在jvm堆中的静态常量区.</p></li><li><p><code>toCharArray();</code>此方法返回char型数组.</p></li><li><p><code>contains(&quot; &quot;)</code>判断是否包含空格</p></li><li><p><code>length();</code>返回字符串长度</p></li><li><p><code> String str3 = new String(chars, 3, 8);//aChinese,3:表示索引，8：索引开始取几个</code></p></li><li><p>比较两个字符串是否相等，equals比较的是字符串的序列化值是否相等，==比较值和是否是同一个对象</p></li><li><p>通过索引查找字符:<code>charAt(index);</code></p></li><li><p>判断结尾和开始：<code>startsWith(&quot;我爱中国&quot;)</code>,<code>endsWith(&quot;qq.com&quot;);</code></p></li><li><p>去掉字符串前后的空格：<code>str.trim();</code></p></li><li><p>查找字符串中指定字符索引：</p><ol><li><code>email.indexOf('@')</code>返回字符索引值</li><li><code>email.indexOf(&quot;.com&quot;)</code>返回字符串索引</li><li><code>email.indexOf('9',0)</code>从指定索引查找</li></ol></li><li><p><code>str.split(tag);//返回一个字符串数组</code></p></li><li><p>提取字串：</p><ol><li><code>substring(3);</code>从索引位置开始提取</li><li><code>substring(3, 12);//3：开索引始，12：索引结束(最后不取该值)</code></li></ol></li><li><p><code>toLowerCase();</code>转换为小写</p></li><li><p><code>toUpperCase();</code>转换为大写</p></li><li><p><code>replace(&quot;小&quot;, &quot;大&quot;);//将小替换为大</code></p></li><li><p>StringBuffer:<code>StringBuffer buffer = new StringBuffer(&quot;^_^ &quot;) </code></p><ol><li>StringBuffer是线上安全,线程同步的</li><li><code>buffer.append(&quot;qwq&quot;)</code>连接字符串</li></ol></li><li><p>StringBuilder:<code>StringBuilder stringBuilder = new StringBuilder(base);//构建可变字符串</code></p><ol><li><code>stringBuilder.toString();//返回连接的字符串</code></li><li>非线程同步，不涉及多线程使用比StringBuffer效率更高</li></ol></li></ul><h4 id="13-日期和时间类">13.日期和时间类</h4><ol><li>SimpleDateFormat实现对Date的字符串格式化，是DateFormat的子类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> sdf.format(<span class="built_in">this</span>.birthday);<span class="comment">//对日期对象进行格式化</span></span><br></pre></td></tr></table></figure><p>Calendar对象的创建和使用（抽象类，不能实例化对象）日历</p><p><code>Calendar cal = Calendar.getInstance();//使用默认时区并指向当前系统时间创建一个日历实例</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*获取年月日*/</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> cal.get(Calendar.YEAR);</span><br><span class="line">     <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> cal.get(Calendar.MONTH) + <span class="number">1</span>;<span class="comment">//月份从0开始到11,所以要加1</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">date</span> <span class="operator">=</span> cal.get(Calendar.DATE);</span><br></pre></td></tr></table></figure><p><code> Date currentDate = cal.getTime();</code>获取当前日历对象所对应的date对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">strCurrentDate</span> <span class="operator">=</span> sdf.format(currentDate);</span><br></pre></td></tr></table></figure><p><code>set(int year,int month, int date);</code>设置日历的年份，月份，日期值</p><h4 id="14-Math类">14.Math类</h4><ul><li>所有属性和方法都为static的，不需要创建实例，final修饰的终极类不能被继承</li><li><code>Math.abs(-12)</code>计算绝对值</li><li><code>Math.cbrt(27.0)</code>计算立方根</li><li><code>Math.max(a,b),Math.min(a,b)</code>比较大小</li><li><code>Math.pow(x,y)</code>计算x的y次方</li><li><code>Math.random()</code>返回0.0到1.0的随机数</li></ul><h4 id="15-集合">15.集合</h4><ol><li>Map接口（HashMap不是现程安全的。HashTable是线程同步的）</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; carMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">/*存储键值对在哈希表*/</span>        carMap.put(<span class="string">&quot;key0&quot;</span>, car0);        </span><br><span class="line">carMap.put(<span class="string">&quot;key2&quot;</span>, car2);        </span><br><span class="line">carMap.put(<span class="string">&quot;key3&quot;</span>, car3);</span><br></pre></td></tr></table></figure><p><code>carMap.get(&quot;key0&quot;)</code>通过键取值</p><p><code> /*获取所有键的集合*/ Set keySet = carMap.keySet();</code>不重复</p><p><code> /*取出哈希表中所有的值的集合*/ Collection coll = carMap.values();</code></p><p><code>carMap.containsKey(&quot;key0&quot;)</code>判断是否包含给定键</p><ol start="2"><li><p>List集合</p></li><li><p><code>List&lt;User&gt; userList = new ArrayList&lt;&gt;();//创建List集合对象</code></p></li><li><p><code>userList.contains(new User())//判断集合中是否包含给定对象</code></p></li><li><p><code>userList.clear();</code>清空集合元素</p></li><li><p>：list中根据索引将元素数值改变(替换)注意 .set(index, element); 和 .add(index, element)</p></li><li><p>Vector集合实现类：向量集合，适用场景在处理多线程应用中</p></li></ol><p><code> Vector&lt;User&gt; vector = new Vector&lt;&gt;();//创建集合向量</code></p><p><code>&quot;当前集合是否为空：&quot; + vector.isEmpty()</code></p><p><code>当前集合元素个数：&quot; + vector.size())</code></p><p><code>vector.remove(user3);//删除元素</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*获取Vector独有的新方法提供元素枚举迭代器*/</span>       </span><br><span class="line"><span class="type">Enumeration</span> <span class="variable">enu</span> <span class="operator">=</span> vector.elements();       </span><br><span class="line"><span class="keyword">while</span> (enu.hasMoreElements()) &#123;          </span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) enu.nextElement();<span class="comment">//将Object类型强制转换            System.out.println(user);       </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>Set接口：没有索引,不能存储重复数据，会覆盖。（对象不能一样）</p></li><li><p><code>Set&lt;Product&gt; set = new HashSet&lt;Product&gt;(16);//指定初始容量，默认是16，会自动扩容</code></p></li><li><p>TreeSet类接口，排序,效率比HashSet要低</p></li><li><p><code>TreeSet类接口，排序</code></p></li></ol><h4 id="16-异常">16.异常</h4><ul><li>Throwable是所有异常的父类，Error错误重启java虚拟机才行，Exception异常修改代码可解决。</li><li>使用throws关键字声明异常，多个异常逗号隔开；使用throw关键字满足条件时抛出异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;<span class="comment">//捕获异常 </span></span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException | IOException e) &#123;<span class="comment">//处理异常           </span></span><br><span class="line">   <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> e.getMessage();<span class="comment">//获取异常信息</span></span><br><span class="line">    System.err.println(errorMessage);</span><br><span class="line">    System.out.println(e.getClass().getName());         </span><br><span class="line">    e.printStackTrace();        </span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;<span class="comment">//强制执行块，用于释放被占用的资源           </span></span><br><span class="line">    <span class="keyword">try</span> &#123; <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;  </span><br><span class="line">        conn.close();               </span><br><span class="line">     &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123; </span><br><span class="line">        e.printStackTrace();       </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="17-File">17.File</h4><p>常用构造方法：</p><ol><li>File(File dir,String child)</li><li>File(String pathName)</li><li>File(String parent,String child)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">resFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;f:\\file\\java.data&quot;</span>)</span><br><span class="line"><span class="comment">/*判断file对象是否在硬盘上存在*/</span></span><br><span class="line">      <span class="comment">/*createNewFile方法必须确保被创建的文件的父目录都存在，否则出现IOException</span></span><br><span class="line"><span class="comment">       * 系统找不到指定的路径。</span></span><br><span class="line"><span class="comment">       * */</span></span><br><span class="line">        <span class="keyword">if</span> (resFile.exists()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件是可读的吗？&quot;</span> + resFile.canRead());</span><br><span class="line">            System.out.println(<span class="string">&quot;文件是可写入的嘛？&quot;</span> + resFile.canWrite());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;文件绝对路径：&quot;</span> + </span><br><span class="line">            resFile.getAbsolutePath());<span class="comment">//f:\file\java.data</span></span><br><span class="line">            System.out.println(<span class="string">&quot;基本路径：&quot;</span> + resFile.getPath());<span class="comment">//f:\file\java.data</span></span><br><span class="line">            System.out.println(<span class="string">&quot;父路径：&quot;</span> + resFile.getParent());<span class="comment">//f:\file</span></span><br><span class="line">            System.out.println(<span class="string">&quot;文件名称：&quot;</span> + resFile.getName());<span class="comment">//java.data</span></span><br><span class="line">            <span class="comment">/*判断文件是目录还是具体文件*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;文件是目录嘛？&quot;</span> + resFile.isDirectory());<span class="comment">//false</span></span><br><span class="line">            System.out.println(<span class="string">&quot;具体文件：&quot;</span> + resFile.isFile());<span class="comment">//true</span></span><br><span class="line"><span class="comment">//            System.out.println(resFile.delete());//删除文件</span></span><br></pre></td></tr></table></figure><h4 id="18-输入流（InputStream对目标文件进行读取操作）">18.输入流（InputStream对目标文件进行读取操作）</h4><ul><li><p>读取二进制文件，字节输入流:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*建立目标要读取的文件对象*/</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">       <span class="comment">/*基于目标文件建立输入流*/</span></span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">if</span> (file.exists()) &#123;<span class="comment">//如果文件存在，创建文件输入流</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);<span class="comment">//使用子类FileInputStream创建二进制输入流</span></span><br><span class="line">               <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//读取到的字节数</span></span><br><span class="line">               <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">124</span>];<span class="comment">//临时存储读取到的二进制文件</span></span><br><span class="line">               <span class="comment">/*将读取到的字节数存储到bytes字节中，每次从索引开始存储，存储的长度是</span></span><br><span class="line"><span class="comment">                bytes.length，覆盖*/</span></span><br><span class="line">               <span class="keyword">while</span> ((count = in.read(bytes, <span class="number">0</span>, bytes.length)) != -<span class="number">1</span>) &#123;<span class="comment">//循环处理读取，读到文件末尾count为-1</span></span><br><span class="line">                   <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, count);<span class="comment">//索引0开始，读取长度count</span></span><br><span class="line">                   System.out.println(s);</span><br><span class="line">               &#125;</span><br><span class="line">  </span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                       in.close();<span class="comment">//关闭流，释放资源</span></span><br><span class="line">                       System.out.println(<span class="string">&quot;关闭成功&quot;</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>字符输入流：读取文本文件不会出现乱码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">30</span>];</span><br><span class="line">                <span class="keyword">while</span> ((count = fileReader.read(chars, <span class="number">0</span>, chars.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars, <span class="number">0</span>, count);</span><br><span class="line">                    System.out.print(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fileReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                        fileReader.close();<span class="comment">//关闭流，释放资源</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;关闭成功&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用BufferedReader缓冲流：提高效率（字符输入流）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//基于文件的普通输入流</span></span><br><span class="line">     <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//基于某个Reader建立的字符缓冲流（处理流）</span></span><br><span class="line">     <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);<span class="comment">//基于文件建立普通文本输入流</span></span><br><span class="line">             br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fileReader);<span class="comment">//基于某个Reader建立文本缓冲流</span></span><br><span class="line">             <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">             <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">25</span>];</span><br><span class="line">             <span class="keyword">while</span> ((count = br.read(chars, <span class="number">0</span>, chars.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                 <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars, <span class="number">0</span>, count);</span><br><span class="line">                 System.out.print(s);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 br.close();</span><br><span class="line">                 fileReader.close();</span><br><span class="line">             &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                 e.printStackTrace();</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="19-输出流（OutputStream对目标文件进行写入操作）">19.输出流（OutputStream对目标文件进行写入操作）</h4><ul><li><p>二进制输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">binaryOutputStream</span><span class="params">(File file)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;start=D:\\java课程\\第十九天\\unit12 二级制输出流一(153).mp4&quot;</span>;</span><br><span class="line">    <span class="type">byte</span>[] bytes = str.getBytes();<span class="comment">//将字符串转换为字节数组</span></span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        out.write(bytes);<span class="comment">//调用write方法将字节数组的数据写入目标文件file</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据比较大时使用缓冲流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useBufferedOutputStream</span><span class="params">(File file)</span> &#123;</span><br><span class="line">       <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">BufferedOutputStream</span> <span class="variable">bs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;君不见高堂明镜悲白发，朝如青丝暮成雪。&quot;</span>;</span><br><span class="line">       <span class="type">byte</span>[] bys = str.getBytes();</span><br><span class="line">       <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               System.out.println(file.getAbsolutePath());</span><br><span class="line">               os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file.getAbsolutePath() + <span class="string">&quot;/诗词.doc&quot;</span>);</span><br><span class="line">               bs = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(os);<span class="comment">//基于某个OutputStream建立缓冲输出流</span></span><br><span class="line">               bs.write(bys, <span class="number">0</span>, bys.length);<span class="comment">//写入目标文件</span></span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   bs.close();</span><br><span class="line">                   os.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">  </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="20-文件的复制（流的对接）">20.文件的复制（流的对接）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copeFile</span><span class="params">(File target, File dir)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//文件输入流，读取文件</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//文件输出流，写入文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">copyFile</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (target.exists()) &#123;<span class="comment">//判断目标文件是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (!dir.exists()) &#123;<span class="comment">//如果目录不存在，创建目录</span></span><br><span class="line">                dir.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(target);<span class="comment">//基于文件建立输入流</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> target.getName();<span class="comment">//获取目标文件名称</span></span><br><span class="line">                <span class="comment">/*避免文件重名被覆盖，可以拍使用系统时间的毫秒作为文件前缀*/</span></span><br><span class="line">                copyFile = <span class="keyword">new</span> <span class="title class_">File</span>(dir + <span class="string">&quot;/&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().getTime() + fileName);</span><br><span class="line">                os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(copyFile, Boolean.parseBoolean(<span class="string">&quot;utf-8&quot;</span>));<span class="comment">//基于目标文件建立输出流</span></span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">//临时存储字节数据缓冲区</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//记录读取内容的长度</span></span><br><span class="line">                <span class="keyword">while</span> ((count = in.read(bytes, <span class="number">0</span>, bytes.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">//文件复制读取中......</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;文件复制读取中......&quot;</span>);</span><br><span class="line">                    os.write(bytes, <span class="number">0</span>, count);<span class="comment">//将临时缓冲区的内容写入目标文件</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件复制完成&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="21-序列化读写">21.序列化读写</h4><ul><li><p>序列化流，将一个java对象保存到目标文件（ObjectOutputStream）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">javaSerializableAction</span><span class="params">(Employee emp, File file)</span> &#123;</span><br><span class="line">       <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//序列化流</span></span><br><span class="line">       <span class="keyword">if</span> (emp != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">               oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(os);</span><br><span class="line">               oos.writeObject(emp);<span class="comment">//将序列化文件保存到目标文件</span></span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   oos.close();</span><br><span class="line">                   os.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>反序列化流，从目标文件读取序列化java对象到内存（ObjectInputStream）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Employee <span class="title function_">deserializableJavaObject</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//创建输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;<span class="comment">//如果文件存在</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">                <span class="comment">//进行反序列化（串行化）</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">                emp = object != <span class="literal">null</span> ? (Employee) object : <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> emp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="22-多线程">22.多线程</h4><ul><li><p>Thread线程类</p><ol><li>任何一个Thread实例调用start方法将启动运行一个线程</li><li>Thread的run方法是线程启动后自动执行的业务方法</li></ol></li><li><p>线程的生命周期</p><ol><li>第一阶段：新建状态（此时线程还没有运行）</li><li>第二阶段：运行状态（线程开始运行并自动执行run方法）</li><li>第三阶段：中断状态（多种原因使线程处于终止）</li><li>第四阶段：死亡状态（释放线程对象，不在回复运行）</li></ol></li><li><p>Runnable线程接口：有利于实现多个线程之间的数据共享，多个Thread实例共享此接口的run方法</p></li><li><p>interrupt()方法：中断某个线程的状态</p></li><li><p>线程之间的通信</p><ol><li><p>同步代码块：被同步的代码块在一个线程对象进行访问时，其他线程是没有访问权限的，只有这个当前线程对象完全执行完了这个代码块，释放了同步锁，其它线程才可以访问这个代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Syncode</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;<span class="comment">//那个类调用就是那个对象，com.znzz.multiThread.SynCode@8e6ae55</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();<span class="comment">//获取当前线程</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前执行同步代码块的线程名称是：&quot;</span> +       current.getName());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象同步锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynObject</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SynObject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dog == <span class="literal">null</span>) &#123;</span><br><span class="line">            dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (dog) &#123;<span class="comment">//对象同步锁</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();<span class="comment">//获取当前线程</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(current.getName() + <span class="string">&quot;正在修改dog名字：&quot;</span>);</span><br><span class="line">                dog.setName(<span class="string">&quot;米卡&quot;</span> + i);</span><br><span class="line">                System.out.println(<span class="string">&quot;名字被修改为&quot;</span> + dog.getName());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法同步锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynMethod</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        doMoney();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">doMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.getName().equals(<span class="string">&quot;会计&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(current.getName() + <span class="string">&quot; 正在入账......&quot;</span>);</span><br><span class="line">                money *= i;</span><br><span class="line">                System.out.println(<span class="string">&quot;账户：&quot;</span> + money);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (current.getName().equals(<span class="string">&quot;出纳&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(current.getName() + <span class="string">&quot; 正在分账......&quot;</span>);</span><br><span class="line">                money = money * i - <span class="number">0.2</span> * money;</span><br><span class="line">                System.out.println(<span class="string">&quot;账户：&quot;</span> + money);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;总帐：&quot;</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="23-网络编程">23.网络编程</h4><ul><li>**IP地址：**IP 地址（Internet Protocol Address）是互联网协议特有的一种地址，它是 IP 协议提供的一种统一的地址格式。IP 地址为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。与域名绑定。</li><li>**端口号：**ip地址是用来标志服务器的。但是一个服务器上会有很多个程序同时使用网络，那怎么保证他们的网络包不串线？好了，端口号就入场了，它是0-65535之间的一个数字。服务端是监听一个固定的端口，比如80，这样客户端在连接的时候都知道该连哪个应用。客户端是从未占用的里面随机挑选一个就可以（但一般不会选1024以下）。</li></ul><h4 id="24-枚举数据类型">24.枚举数据类型</h4><ol><li>枚举类用关键字enum修饰，用来定义不变的值，类似于final修饰的 常量；</li><li>枚举类中还可以定义方法，内部类，变量等，但都必须定义在枚举数据之后。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">枚举类型</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SignalLamp</span> &#123;<span class="comment">//交通信号灯</span></span><br><span class="line">    RED,</span><br><span class="line">    GREEN,</span><br><span class="line">    YELLOW;</span><br><span class="line">    <span class="comment">/*后面定义其他类型及方法*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*还可以定义接口*/</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Dao</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25-反射编程">25.反射编程</h4><ul><li><p>Java中的反射编程是通过JVM运行时获取某个类型的字节码（Class）对象，从而利用其反向获取此类型定义的内部信息实现编程的一种机制。</p></li><li><p>Class类：Class类的实例表示正在运行的Java应用程序中的类和接口，是字节码实例。</p></li><li><p>eg.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;com.znzz.practice.Student&quot;</span>);</span><br><span class="line">        <span class="comment">/*使用字节码对象获取关于这个类的对象实例*/</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) stuClass.newInstance();<span class="comment">//默认调用此类的无参构造实例化对象，返回对象是Object类型</span></span><br><span class="line">        System.out.println(stuClass.getName());<span class="comment">//com.znzz.practice.Student</span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">/*获取类的访问级别*/</span></span><br><span class="line">        System.out.println(stuClass.getModifiers() == Modifier.PUBLIC);<span class="comment">//true</span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">/*获取所有公共级别的字段*/</span></span><br><span class="line">        Field[] fields = stuClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            System.out.println(f);<span class="comment">//public java.lang.String com.znzz.practice.Student.name</span></span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        System.out.println(<span class="string">&quot;所有访问级别的字段数组长度：&quot;</span> + stuClass.getDeclaredFields().length);<span class="comment">//3</span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">/*获取类中定义的构造器*/</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con0</span> <span class="operator">=</span> stuClass.getConstructor(String.class, Integer.class);</span><br><span class="line">        System.out.println(con0 != <span class="literal">null</span>);<span class="comment">//true</span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">/*获取所有构造器*/</span></span><br><span class="line">        Constructor[] constructors = stuClass.getConstructors();</span><br><span class="line">        System.out.println(constructors.length);<span class="comment">//3个构造器</span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">/*获取类中定义的方法*/</span></span><br><span class="line">        Method[] methods = stuClass.getMethods();<span class="comment">//获取所有公共访问级别的方法,获取所有方法用stuClass.getDeclaredMethods()</span></span><br><span class="line">        System.out.println(methods.length);<span class="comment">//11包括父类中的方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            System.out.println(m.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Constructor类：表示某个类的构造方法实例类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;com.znzz.practice.Student&quot;</span>);<span class="comment">//获取字节码对象</span></span><br><span class="line">           <span class="comment">/*获取构造器*/</span></span><br><span class="line">           <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> stuClass.getConstructor(String.class, Integer.class);<span class="comment">//如果无参数就是无参构造器</span></span><br><span class="line">           <span class="comment">/*使用构造器反射方法实现对象的创建*/</span></span><br><span class="line">           <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) cons.newInstance(<span class="string">&quot;李知恩&quot;</span>, <span class="number">26</span>);<span class="comment">//返回Object类型，强制类型转换</span></span><br><span class="line">           System.out.println(student.getName() + <span class="string">&quot;  &quot;</span> + student.getAge());</span><br><span class="line">  </span><br><span class="line">           System.out.println(<span class="string">&quot;构造器的参数个数是：&quot;</span> + cons.getParameterCount());<span class="comment">//2</span></span><br><span class="line">           System.out.println(cons.getModifiers() == Modifier.PUBLIC);<span class="comment">//构造器的访问级别 true</span></span><br><span class="line">           System.out.println(cons.getName());<span class="comment">//com.znzz.practice.Student</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>Filed和Method类反射编程：Field提供有关类或接口的单个字段信息，以及对它的动态访问权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFieldAndMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;com.znzz.practice.Student&quot;</span>);<span class="comment">//加载类</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) stuClass.newInstance();<span class="comment">//通过反射获取一个实例对象</span></span><br><span class="line">            <span class="comment">/*获取某个成员字段*/</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> stuClass.getField(<span class="string">&quot;name&quot;</span>);<span class="comment">//获取公共级别的属性字段</span></span><br><span class="line">            nameField.set(student, <span class="string">&quot;lisa&quot;</span>);<span class="comment">//为公共字段赋值</span></span><br><span class="line">            <span class="comment">/*使用反射获取某个对象字段的属性值*/</span></span><br><span class="line">            System.out.println(nameField.get(student));<span class="comment">//lisa</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*获取不可见的字段属性private*/</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">ageField</span> <span class="operator">=</span> stuClass.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (ageField.getModifiers() == Modifier.PRIVATE) &#123;</span><br><span class="line">                <span class="comment">/*运行时动态改变私有字段的访问级别*/</span></span><br><span class="line">                ageField.setAccessible(<span class="literal">true</span>);<span class="comment">//访问级别设置为public</span></span><br><span class="line">                ageField.set(student, <span class="number">28</span>);</span><br><span class="line">                System.out.println(ageField.get(student));<span class="comment">//28</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">sexField</span> <span class="operator">=</span> stuClass.getDeclaredField(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!sexField.isAccessible()) &#123;</span><br><span class="line">                sexField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                sexField.set(student, <span class="string">&quot;女&quot;</span>);</span><br><span class="line">                System.out.println(sexField.get(student));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*Method反射编程*/</span></span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">            book.setName(<span class="string">&quot;《红楼梦》&quot;</span>);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> stuClass.getMethod(<span class="string">&quot;learn&quot;</span>, Book.class);<span class="comment">//方法名，参数类型</span></span><br><span class="line">            method.invoke(student, book);<span class="comment">//执行方法</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*获取非公共可见级别的方法*/</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method2</span> <span class="operator">=</span> stuClass.getDeclaredMethod(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!method2.isAccessible()) &#123;<span class="comment">//如果访问级别不是公共可见的</span></span><br><span class="line">                method2.setAccessible(<span class="literal">true</span>);<span class="comment">//运行时更改此方法的访问级别</span></span><br><span class="line">                method2.invoke(student);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go中如何进行单元测试案例</title>
      <link href="/posts/66ee455a.html"/>
      <url>/posts/66ee455a.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-基础介绍">一. 基础介绍</h2><h3 id="1-创建测试文件">1. 创建测试文件</h3><ul><li>测试文件通常与要测试的代码文件位于同一个包中。</li><li>测试文件的名称应该以 <code>_test.go</code> 结尾。例如，如果你要测试的文件是 <code>math.go</code>，那么测试文件可以命名为 <code>math_test.go</code>。</li></ul><h3 id="2-编写测试函数">2. 编写测试函数</h3><ul><li>测试函数必须导入 <code>testing</code> 包。</li><li>每个测试函数必须以 <code>Test</code> 开头，后跟一个首字母大写的名字，例如 <code>TestSum</code> 或 <code>TestSubtract</code>。</li><li>测试函数的签名应该接受一个指向 <code>testing.T</code> 类型的指针：<code>func TestXxx(t *testing.T) &#123; ... &#125;</code>。</li></ul><h3 id="3-使用-t-对象进行断言和日志记录">3. 使用 <code>t</code> 对象进行断言和日志记录</h3><ul><li><code>t</code> 对象用于记录测试信息和控制测试流程。</li><li>使用 <code>t.Error</code> 或 <code>t.Errorf</code> 报告失败，但继续执行当前测试。</li><li>使用 <code>t.Fatal</code> 或 <code>t.Fatalf</code> 报告失败并立即终止当前测试。</li></ul><h3 id="4-运行测试">4. 运行测试</h3><ul><li>在命令行中，进入包含测试文件的目录。</li><li>执行 <code>go test</code> 命令运行所有测试，或使用 <code>go test -v</code> 以详细模式运行（打印每个测试的名字和运行状态）。</li><li>使用 <code>go test -run</code> 加上正则表达式来运行特定的测试。例如，<code>go test -run TestSum</code> 仅运行名为 <code>TestSum</code> 的测试。</li></ul><h3 id="示例">示例</h3><p>假设有一个名为 <code>math.go</code> 的文件，其中定义了一个函数 <code>Sum</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">goCopy code<span class="comment">// math.go</span></span><br><span class="line"><span class="keyword">package</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sum</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个名为 <code>math_test.go</code> 的测试文件，其中包含以下内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">goCopy code<span class="comment">// math_test.go</span></span><br><span class="line"><span class="keyword">package</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSum</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    total := Sum(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> total != <span class="number">10</span> &#123;</span><br><span class="line">        t.Errorf(<span class="string">&quot;Sum was incorrect, got: %d, want: %d.&quot;</span>, total, <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在终端中运行 <code>go test</code> 或 <code>go test -v</code> 来执行测试。</p><h2 id="二-综合案例">二. 综合案例</h2><ol><li><h3 id="结构">结构</h3><p><img src="F:%5Cblog%5Ccoderyeah%5Csource_posts%5Cimg%5Cimage-20240115233924014.png" alt="image-20240115233924014"></p></li><li><h3 id="monster-go">monster.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test_case</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Age   <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">Skill <span class="type">string</span> <span class="string">`json:&quot;skill&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Store 将其序列化保存为文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Monster)</span></span> Store() <span class="type">bool</span> &#123;</span><br><span class="line">data, err := json.Marshal(m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;json parse Monster err &quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line">err = os.WriteFile(<span class="string">&quot;d:/monster.txt&quot;</span>, data, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;write file err &quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReStore 反序列化文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Monster)</span></span> ReStore() <span class="type">bool</span> &#123;</span><br><span class="line">data, err := os.ReadFile(<span class="string">&quot;d:/monster.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;read file err &quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将读取的数据进行反序列化</span></span><br><span class="line">err = json.Unmarshal(data, m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;json Unmarshal err &quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h3 id="monster-test-go">monster_test.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test_case</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStore</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    monster := &amp;Monster&#123;</span><br><span class="line">       Name:  <span class="string">&quot;小狐狸&quot;</span>,</span><br><span class="line">       Age:   <span class="number">200</span>,</span><br><span class="line">       Skill: <span class="string">&quot;魅惑&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    res := monster.Store()</span><br><span class="line">    <span class="keyword">if</span> !res &#123;</span><br><span class="line">       t.Fatalf(<span class="string">&quot;TestStore fail,expected is %v,but got %v&quot;</span>, <span class="literal">true</span>, res)</span><br><span class="line">    &#125;</span><br><span class="line">    t.Logf(<span class="string">&quot;TestStore 测试通过&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestReStore</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    monster := &amp;Monster&#123;&#125; <span class="comment">//空的结构体</span></span><br><span class="line"></span><br><span class="line">    res := monster.ReStore() <span class="comment">// 序列化后结构体就有数据</span></span><br><span class="line">    <span class="keyword">if</span> !res &#123;</span><br><span class="line">       t.Fatalf(<span class="string">&quot;TestReStore fail,expected is %v,but got %v&quot;</span>, <span class="literal">true</span>, res)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> monster.Name != <span class="string">&quot;小狐狸&quot;</span> &#123;</span><br><span class="line">       t.Fatalf(<span class="string">&quot;TestStore fail,expected monster.Name is %v,but got %v&quot;</span>, <span class="string">&quot;小狐狸&quot;</span>, monster.Name)</span><br><span class="line">    &#125;</span><br><span class="line">    t.Logf(<span class="string">&quot;TestStore 测试通过&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="F:%5Cblog%5Ccoderyeah%5Csource_posts%5Cimg%5Cimage-20240115234203156.png" alt="image-20240115234203156"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go中拷贝文件操作以及判断文件是否存在</title>
      <link href="/posts/c750ee54.html"/>
      <url>/posts/c750ee54.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-拷贝文件内容到另一个文件位置">一. 拷贝文件内容到另一个文件位置</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拷贝文件内容到另一个文件里面</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copyContent</span><span class="params">()</span></span> &#123;</span><br><span class="line">    filepath1 := <span class="string">&quot;d:/abc.txt&quot;</span></span><br><span class="line">    filepath2 := <span class="string">&quot;e:/eee.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取内容</span></span><br><span class="line">    data, err := os.ReadFile(filepath1) <span class="comment">// 使用os.ReadFile函数读取指定路径的文件内容</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(<span class="string">&quot;read file wrong:&quot;</span>, err) <span class="comment">// 若读取文件出错，则打印错误信息</span></span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;读取数据是：&quot;</span>, <span class="type">string</span>(data)) <span class="comment">// 打印读取到的数据（转换为字符串形式）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入内容</span></span><br><span class="line">    err = os.WriteFile(filepath2, data, <span class="number">0666</span>) <span class="comment">// 使用os.WriteFile函数将指定路径的文件写入内容</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(<span class="string">&quot;write file wrong:&quot;</span>, err) <span class="comment">// 若写入文件出错，则打印错误信息</span></span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;操作完成&quot;</span>) <span class="comment">// 操作完成提示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-判断文件是否存在">二. 判断文件是否存在</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PathExists 函数接受一个文件路径并返回两个值：一个布尔值和一个错误。</span></span><br><span class="line"><span class="comment">// 它用于判断指定路径的文件或目录是否存在。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PathExists</span><span class="params">(filepath <span class="type">string</span>)</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 os.Stat 函数获取文件或目录的状态信息。</span></span><br><span class="line">    <span class="comment">// os.Stat 返回两个值：一个 FileInfo 类型的 fileInfo 和一个错误值 err。</span></span><br><span class="line">    <span class="comment">// 如果文件不存在，os.Stat 将返回一个错误。</span></span><br><span class="line">    fileInfo, err := os.Stat(filepath)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印 fileInfo 和 err 的值。</span></span><br><span class="line">    fmt.Println(fileInfo, err)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 err 为 nil，表示没有错误发生，文件或目录存在。</span></span><br><span class="line">    <span class="comment">// 在这种情况下，函数返回 true 和 nil（表示没有错误）。</span></span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 os.IsNotExist 函数检查错误是否因为文件或目录不存在。</span></span><br><span class="line">    <span class="comment">// 如果是因为文件或目录不存在而出错，os.IsNotExist 将返回 true。</span></span><br><span class="line">    <span class="comment">// 在这种情况下，函数返回 false 和 nil（表示没有错误，只是文件不存在）。</span></span><br><span class="line">    <span class="keyword">if</span> os.IsNotExist(err) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果出现了其他类型的错误（不是文件不存在的错误），</span></span><br><span class="line">    <span class="comment">// 函数返回 false 和实际发生的错误。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-拷贝文件（图片、视频）">三. 拷贝文件（图片、视频）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CopyFile 函数用于拷贝一个文件到另一个文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CopyFile</span><span class="params">(distFileName <span class="type">string</span>, srcFileName <span class="type">string</span>)</span></span> (written <span class="type">int64</span>, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// 打开源文件</span></span><br><span class="line"><span class="comment">// os.Open 方法打开指定路径的源文件</span></span><br><span class="line">file, err := os.Open(srcFileName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 如果出现错误，打印错误信息并继续执行</span></span><br><span class="line">fmt.Println(<span class="string">&quot;open source file error:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个读取器，从源文件中读取内容</span></span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开目标文件，模式为写入并创建（如果不存在），权限为 666</span></span><br><span class="line">disFile, err := os.OpenFile(distFileName, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 如果出现错误，打印错误信息并返回</span></span><br><span class="line">fmt.Println(<span class="string">&quot;open destination file error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个写入器，向目标文件写入内容</span></span><br><span class="line">writer := bufio.NewWriter(disFile)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 io.Copy 方法将源文件的内容复制到目标文件中</span></span><br><span class="line">written, err = io.Copy(writer, reader)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="comment">// 返回已写入字节数和可能发生的错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四-测试">四. 测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//copyContent()</span></span><br><span class="line">    <span class="comment">//println(PathExists(filepath1))</span></span><br><span class="line">    dis := <span class="string">&quot;e:/666.png&quot;</span></span><br><span class="line">    src := <span class="string">&quot;c:/users/coderyeah/desktop/welt.jpg&quot;</span></span><br><span class="line"></span><br><span class="line">    written, err := CopyFile(dis, src)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(err)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;copy字节数：&quot;</span>, written)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;执行完成&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GO知识要点总结</title>
      <link href="/posts/21a8b8b7.html"/>
      <url>/posts/21a8b8b7.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-基本概念">一. 基本概念</h3><p>Go是一门编译型语言，Go语言的工具链将源代码及其依赖转换成计算机的机器指令（静态编译）。Go语言提供的工具都通过一个单独的命令<code>go</code>调用，<code>go</code>命令有一系列子命令。最简单的一个子命令就是run。这个命令编译一个或多个以.go结尾的源文件，链接库文件，并运行最终生成的可执行文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, 世界&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> run helloworld.<span class="keyword">go</span> <span class="comment">// 运行指令</span></span><br></pre></td></tr></table></figure><p><code>go build helloworld.go </code> 这个命令生成一个名为<code>helloworld</code>的可执行的二进制文件（译注：Windows系统下生成的可执行文件是helloworld.exe，增加了.exe后缀名），之后你可以随时运行它（译注：在Windows系统下在命令行直接输入helloworld.exe命令运行），不需任何处理（译注：因为<strong>静态编译</strong>，所以不用担心在系统库更新的时候冲突，幸福感满满）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> build helloworld.<span class="keyword">go</span> </span><br></pre></td></tr></table></figure><p>Go的标准库提供了100多个包，以支持常见功能，如输入、输出、排序以及文本处理。比如<code>fmt</code>包，就含有格式化输出、接收输入的函数。<code>Println</code>是其中一个基础函数，可以打印以空格间隔的一个或多个值，并在最后添加一个换行符，从而输出一整行。<code>main</code>包比较特殊。它定义了一个独立可执行的程序，而不是一个库。在<code>main</code>里的<code>main</code> <em>函数</em> 也很特殊，它是整个程序执行时的入口（译注：C系语言差不多都这样）。<code>main</code>函数所做的事情就是程序做的。当然了，<code>main</code>函数一般调用其它包里的函数完成很多工作（如：<code>fmt.Println</code>）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s, step <span class="type">string</span></span><br><span class="line"></span><br><span class="line">os.Args = []<span class="type">string</span>&#123;<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(os.Args); i++ &#123;</span><br><span class="line">s += step + os.Args[i]</span><br><span class="line">step = <span class="string">&quot; &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(s, <span class="string">&quot;\n&quot;</span>, <span class="built_in">len</span>(os.Args), os.Args)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------range-----------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">startTime := time.Now()</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> os.Args[<span class="number">0</span>:] &#123;</span><br><span class="line">s += step + v</span><br><span class="line">step = <span class="string">&quot; &quot;</span></span><br><span class="line">&#125;</span><br><span class="line">endTime := time.Now()</span><br><span class="line">fmt.Println(<span class="string">&quot;时间：&quot;</span>, endTime.Sub(startTime), s) <span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------join-----------------------------&quot;</span>)</span><br><span class="line">start := time.Now()</span><br><span class="line">join := strings.Join(os.Args[<span class="number">0</span>:], <span class="string">&quot;,&quot;</span>) <span class="comment">// 1 2 3</span></span><br><span class="line">end := time.Now()</span><br><span class="line">fmt.Println(end.Sub(start).Nanoseconds(), join)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二-变量声明方式">二.变量声明方式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> s <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> s <span class="type">string</span> = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>第一种形式，是一条短变量声明，最简洁，但只能用在函数内部，而不能用于包变量。第二种形式依赖于字符串的默认初始化零值机制，被初始化为&quot;&quot;。第三种形式用得很少，除非同时声明多个变量。第四种形式显式地标明变量的类型，当变量类型与初值类型相同时，类型冗余，但如果两者类型不同，变量类型就必须了。实践中一般使用前两种形式中的某个，初始值重要的话就显式地指定变量的类型，否则使用隐式初始化。</p><h3 id="三-查找重复行">三. 查找重复行</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="go语言中反射的应用介绍和综合应用案例">go语言中反射的应用介绍和综合应用案例</h2><h2 id="一-反射基础">一.反射基础</h2><p>反射在Go语言中是通过<code>reflect</code>包实现的。它允许程序在运行时检查对象的类型和值，甚至修改它们。Go语言中的每一个变量都包含两部分信息：类型（type）和值（value）。<code>reflect</code>包让我们能够在运行时获取这些信息。</p><h3 id="1-关键函数">1.关键函数</h3><ul><li><code>reflect.TypeOf()</code>：获取任何值的类型。</li><li><code>reflect.ValueOf()</code>：获取任何值的运行时表示。</li></ul><h2 id="二-反射的应用">二.反射的应用</h2><p>使用反射的一个主要场景是处理动态数据结构，例如解析JSON或处理数据库查询结果。它也常用于编写通用的函数和包，这些函数和包可以处理各种类型的值，而不仅仅是特定的类型。</p><h2 id="三-案例演示">三.案例演示</h2><p>假设有一个结构体<code>Person</code>，我们想动态地获取和修改其字段值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">88.08</span></span><br><span class="line">fmt.Println(<span class="string">&quot;a type:&quot;</span>, reflect.TypeOf(a))        <span class="comment">// a的类型为float64</span></span><br><span class="line">fmt.Println(<span class="string">&quot;a name:&quot;</span>, reflect.TypeOf(a).Name()) <span class="comment">// a的类型名称为float64</span></span><br><span class="line">fmt.Println(<span class="string">&quot;a bits:&quot;</span>, reflect.TypeOf(a).Bits()) <span class="comment">// a的位数为64</span></span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;a value:&quot;</span>, reflect.ValueOf(a)) <span class="comment">// a的值为88.08</span></span><br><span class="line">fmt.Println(<span class="string">&quot;a value:&quot;</span>, &amp;a)                 <span class="comment">// a的地址为0xc0000a6058</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------reflect person-----------------&quot;</span>)</span><br><span class="line">person := Person&#123;Name: <span class="string">&quot;Jany&quot;</span>, Age: <span class="number">18</span>&#125;</span><br><span class="line">reflectPerson(&amp;person)</span><br><span class="line">fmt.Println(<span class="string">&quot;----------------reflect int-----------------&quot;</span>)</span><br><span class="line">num := <span class="number">100</span></span><br><span class="line">reflectInt(num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectPerson</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">value := reflect.ValueOf(i).Elem()<span class="comment">// 返回指针指向的值</span></span><br><span class="line">fmt.Println(value)                 <span class="comment">//&#123;Jany 18&#125;    // 获取传入参数i的反射值</span></span><br><span class="line">fmt.Println(<span class="string">&quot;type:&quot;</span>, value.Type()) <span class="comment">// type: main.Person   // 获取value的类型</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; value.NumField(); i++ &#123;</span><br><span class="line">field := value.Field(i)</span><br><span class="line">fmt.Println(<span class="string">&quot;field type:&quot;</span>, field.Type(), field) <span class="comment">// 字段的类型和字段值   // 遍历value的所有字段，并打印字段的类型和字段值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改字段值</span></span><br><span class="line"><span class="keyword">if</span> nameField := value.FieldByName(<span class="string">&quot;Name&quot;</span>); nameField.IsValid() &amp;&amp; nameField.CanSet() &#123;</span><br><span class="line">nameField.SetString(<span class="string">&quot;Bob&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Modified:&quot;</span>, i.(*Person)) <span class="comment">// &amp;&#123;Bob 18&#125;    // 打印修改后的参数i的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectInt</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">rType := reflect.TypeOf(i)</span><br><span class="line">fmt.Println(<span class="string">&quot;i rType=&quot;</span>, rType)</span><br><span class="line"></span><br><span class="line">rVal := reflect.ValueOf(i)                       <span class="comment">//i rType= int</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;rVal:%v,rVal Type:%T\n&quot;</span>, rVal, rVal) <span class="comment">//rVal:100,rVal Type:reflect.Value</span></span><br><span class="line"></span><br><span class="line">a := <span class="number">10</span></span><br><span class="line">b := <span class="type">int64</span>(a) + rVal.Int() <span class="comment">// 同类型做运算</span></span><br><span class="line">fmt.Println(<span class="string">&quot;a+rVal=&quot;</span>, b)  <span class="comment">//110</span></span><br><span class="line"><span class="comment">// 将i变为原来类型</span></span><br><span class="line">c := rVal.Interface()</span><br><span class="line">num := c.(<span class="type">int</span>)           <span class="comment">// 只有接口才能断言</span></span><br><span class="line">fmt.Println(<span class="string">&quot;num:&quot;</span>, num) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四-Elem方法">四.Elem方法</h2><p>在Go语言中，<code>reflect</code>包的<code>Elem</code>方法是用于处理指针和接口类型的反射对象的一个重要方法。这个方法的核心作用是获取一个指针所指向的元素的反射对象，或者是一个接口所持有的值的反射对象。</p><h3 id="1-Elem方法的基本概念">1.<code>Elem</code>方法的基本概念</h3><p>当使用<code>reflect.ValueOf</code>获取一个变量的反射值时，如果这个变量是一个指针或者接口，将得到的反射对象并不直接代表指针指向的值或接口的动态值。在这种情况下，<code>Elem</code>方法就派上用场了。</p><ul><li>对于指针类型，<code>Elem</code>返回该指针所指向的实际元素的<code>reflect.Value</code>。</li><li>对于接口类型，<code>Elem</code>返回接口实际持有的对象的<code>reflect.Value</code>。</li></ul><h3 id="2-示例">2.示例</h3><p>假设有如下的结构体和函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintStructFields</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    val := reflect.ValueOf(i)</span><br><span class="line">    <span class="keyword">if</span> val.Kind() == reflect.Ptr &#123;</span><br><span class="line">        val = val.Elem()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设 i 是一个结构体</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; val.NumField(); i++ &#123;</span><br><span class="line">        field := val.Field(i)</span><br><span class="line">        fmt.Println(field.Type(), field)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>PrintStructFields</code>函数接受任意类型的参数。使用<code>reflect.ValueOf</code>获取<code>i</code>的反射值。如果<code>i</code>是一个指针，调用<code>Elem</code>来获取它所指向的实际元素。</p><p>这样，无论传递给<code>PrintStructFields</code>的是一个结构体还是一个指向结构体的指针，函数都能正确处理并打印出结构体字段的信息。</p><h3 id="3-使用注意">3.使用注意</h3><ul><li>在调用<code>Elem</code>之前，最好检查反射值的类型是否为指针或接口，这可以通过<code>reflect.Value</code>的<code>Kind</code>方法完成。</li><li>如果<code>Elem</code>被调用在一个非指针或非接口的<code>reflect.Value</code>上，它会引发<strong>panic</strong>。因此，安全的做法是先检查<code>Kind</code>。</li><li>当处理指针时，还应检查它是否为<code>nil</code>，因为在<code>nil</code>指针上调用<code>Elem</code>也会引发panic。</li></ul><h2 id="五-通过反射操作结构体的字段、方法、tag标签">五.通过反射操作结构体的字段、方法、tag标签</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name   <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age    <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">    Sex    <span class="type">string</span></span><br><span class="line">    Salary <span class="type">float64</span> <span class="string">`json:&quot;salary&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(em Employee)</span></span> Print() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;-----------开始打印-----------&quot;</span>)</span><br><span class="line">    fmt.Println(em)</span><br><span class="line">    fmt.Println(<span class="string">&quot;-----------结束打印-----------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(em Employee)</span></span> Set(name <span class="type">string</span>, age <span class="type">int</span>, sex <span class="type">string</span>, salary <span class="type">float64</span>) Employee &#123;</span><br><span class="line">    em.Name = name</span><br><span class="line">    em.Sex = sex</span><br><span class="line">    em.Salary = salary</span><br><span class="line">    em.Age = age</span><br><span class="line">    <span class="keyword">return</span> em</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(em Employee)</span></span> GetSum(a, b <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectEmployee</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    tp := reflect.TypeOf(i)</span><br><span class="line">    val := reflect.ValueOf(i)</span><br><span class="line">    kd := val.Kind() <span class="comment">//kd:struct</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;tp:%v, val:%v kd:%v\n&quot;</span>, tp, val, kd)</span><br><span class="line">    <span class="keyword">if</span> kd != reflect.Struct &#123;</span><br><span class="line">       fmt.Println(<span class="string">&quot;expect struct!!!!!!!!!!!&quot;</span>)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取字段数量</span></span><br><span class="line">    numField := val.NumField()</span><br><span class="line">    fmt.Println(<span class="string">&quot;numField:&quot;</span>, numField) <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历结构体</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numField; i++ &#123;</span><br><span class="line">       fmt.Printf(<span class="string">&quot;field%d 值为%v\n&quot;</span>, i, val.Field(i))</span><br><span class="line">       <span class="comment">// 获取struct标签 需要用reflect.Type来获取标签</span></span><br><span class="line">       tagVal := tp.Field(i).Tag.Get(<span class="string">&quot;json&quot;</span>) <span class="comment">// 获取键值对的值</span></span><br><span class="line">       <span class="keyword">if</span> tagVal != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">          fmt.Printf(<span class="string">&quot;field%d tag为%v\n&quot;</span>, i, tagVal)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取结构体有多少个方法</span></span><br><span class="line">    numMethod := val.NumMethod()</span><br><span class="line">    fmt.Println(<span class="string">&quot;numMethod:&quot;</span>, numMethod) <span class="comment">//3</span></span><br><span class="line">    <span class="comment">// 调用第二个方法 这里会调用Print方法 应为底层排序是按照方法名的ASCII排序的 GPS--012</span></span><br><span class="line">    val.Method(<span class="number">1</span>).Call(<span class="literal">nil</span>)</span><br><span class="line">    <span class="comment">// 调用第一个方法</span></span><br><span class="line">    <span class="keyword">var</span> params []reflect.Value</span><br><span class="line">    params = <span class="built_in">append</span>(params, reflect.ValueOf(<span class="number">99</span>))</span><br><span class="line">    params = <span class="built_in">append</span>(params, reflect.ValueOf(<span class="number">1</span>))</span><br><span class="line">    res := val.Method(<span class="number">0</span>).Call(params) <span class="comment">// 参数接收一个reflect.Value类型切片</span></span><br><span class="line">    <span class="comment">//fmt.Printf(&quot;type:%T,res=%v\n&quot;, res, res) //type:[]reflect.Value,res=[&lt;int Value&gt;]</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;type:%T,res=%v\n&quot;</span>, res, res[<span class="number">0</span>].Int()) <span class="comment">// 返回的结果是[]reflect.Value</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用第三个方法</span></span><br><span class="line">    <span class="keyword">var</span> params2 []reflect.Value</span><br><span class="line">    params2 = <span class="built_in">append</span>(params2, reflect.ValueOf(<span class="string">&quot;jojo&quot;</span>))</span><br><span class="line">    params2 = <span class="built_in">append</span>(params2, reflect.ValueOf(<span class="number">18</span>))</span><br><span class="line">    params2 = <span class="built_in">append</span>(params2, reflect.ValueOf(<span class="string">&quot;男&quot;</span>))</span><br><span class="line">    params2 = <span class="built_in">append</span>(params2, reflect.ValueOf(<span class="number">9999.99</span>))</span><br><span class="line">    call := val.Method(<span class="number">2</span>).Call(params2)</span><br><span class="line">    fmt.Println(<span class="string">&quot;call:&quot;</span>, call[<span class="number">0</span>]) <span class="comment">//call: &#123;jojo 18 男 9999.99&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    em := Employee&#123;Name: <span class="string">&quot;张三&quot;</span>, Age: <span class="number">22</span>, Sex: <span class="string">&quot;男&quot;</span>, Salary: <span class="number">11000.5</span>&#125;</span><br><span class="line">    <span class="comment">//em.Print()</span></span><br><span class="line">    reflectEmployee(em)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言中对文件的基本操作</title>
      <link href="/posts/cfb66bf5.html"/>
      <url>/posts/cfb66bf5.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-基本案例">一. 基本案例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span> <span class="comment">// 引入缓冲读写包</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span>   <span class="comment">// 引入格式化输出包</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span>    <span class="comment">// 引入基本的I/O操作包</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span>    <span class="comment">// 引入操作系统接口包</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 读取文件案例演示区域</span></span><br><span class="line">    <span class="comment">//test00()</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;-----------------------------------&quot;</span>)</span><br><span class="line">    <span class="comment">//test01()</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;-----------------------------------&quot;</span>)</span><br><span class="line">    <span class="comment">//test02()</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;----------------写出文件-------------------&quot;</span>)</span><br><span class="line">    <span class="comment">//test03()</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;-----------------------------------&quot;</span>)</span><br><span class="line">    <span class="comment">//test04()</span></span><br><span class="line">    <span class="comment">//test05()</span></span><br><span class="line">    test06()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取内容显示再写入追加内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test06</span><span class="params">()</span></span> &#123;</span><br><span class="line">    filepath := <span class="string">&quot;d:/abc.txt&quot;</span></span><br><span class="line">    file, err := os.OpenFile(filepath, os.O_RDWR, <span class="number">0666</span>) <span class="comment">// 读写模式打开 权限为666在wins没有作用</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line">    <span class="comment">// 读取文件内容</span></span><br><span class="line">    reader := bufio.NewReader(file)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">       readString, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">       <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       &#125;</span><br><span class="line">       fmt.Print(readString)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 写入内容</span></span><br><span class="line">    writer := bufio.NewWriter(file)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">       writer.WriteString(<span class="string">&quot;我是djjjjjjjjjjjjjj~~~\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    writer.Flush()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在原来的内容上追加内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test05</span><span class="params">()</span></span> &#123;</span><br><span class="line">    filepath := <span class="string">&quot;d:/abc.txt&quot;</span>                                         <span class="comment">// 文件路径</span></span><br><span class="line">    file, err := os.OpenFile(filepath, os.O_WRONLY|os.O_APPEND, <span class="number">666</span>) <span class="comment">// 打开指定路径的文件，以写入模式并追加到文件末尾，权限为666</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> file.Close() <span class="comment">// 延迟关闭文件</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(err) <span class="comment">// 打印错误信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    writer := bufio.NewWriter(file) <span class="comment">// 创建写入器</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">       writer.WriteString(<span class="string">&quot;我是灰灰灰~💴🔪999\n&quot;</span>) <span class="comment">// 写入字符串到写入器</span></span><br><span class="line">    &#125;</span><br><span class="line">    writer.Flush() <span class="comment">// 刷新写入器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空文件并重新写入内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test04</span><span class="params">()</span></span> &#123;</span><br><span class="line">    filepath := <span class="string">&quot;d:/abc.txt&quot;</span>                                        <span class="comment">// 文件路径</span></span><br><span class="line">    file, err := os.OpenFile(filepath, os.O_WRONLY|os.O_TRUNC, <span class="number">666</span>) <span class="comment">// 以写入模式打开文件，并清空原有内容</span></span><br><span class="line">    <span class="keyword">defer</span> file.Close()                                              <span class="comment">// 延迟关闭文件</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(err) <span class="comment">// 打印错误信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    writer := bufio.NewWriter(file) <span class="comment">// 创建写入器</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">       writer.WriteString(<span class="string">&quot;我是渣渣灰~一🔪999\n&quot;</span>) <span class="comment">// 写入字符串到写入器</span></span><br><span class="line">    &#125;</span><br><span class="line">    writer.Flush() <span class="comment">// 刷新写入器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写出文件函数</span></span><br><span class="line"><span class="comment">// 此函数用于打开指定路径的文件并进行写入操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test03</span><span class="params">()</span></span> &#123;</span><br><span class="line">    filepath := <span class="string">&quot;d:/abc.txt&quot;</span>                                          <span class="comment">// 设置文件路径</span></span><br><span class="line">    file, err := os.OpenFile(filepath, os.O_WRONLY|os.O_CREATE, <span class="number">0666</span>) <span class="comment">// 打开或创建文件，设置为写模式</span></span><br><span class="line">    <span class="keyword">defer</span> file.Close()                                                <span class="comment">// 确保关闭文件资源</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建带缓冲的写入器</span></span><br><span class="line">    writer := bufio.NewWriter(file)</span><br><span class="line">    str := <span class="string">&quot;Hello coderyeah!\n&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">       writeString, _ := writer.WriteString(str) <span class="comment">// 将字符串写入缓冲区，并返回写入字符个数</span></span><br><span class="line">       fmt.Println(writeString)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 刷新缓冲区，确保数据真正写入到文件中</span></span><br><span class="line">    writer.Flush()</span><br><span class="line">    fmt.Println(<span class="string">&quot;写入完成&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适用于读取较小文件的函数</span></span><br><span class="line"><span class="comment">// 此函数一次性读取指定路径的整个文件内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test02</span><span class="params">()</span></span> &#123;</span><br><span class="line">    filePath := <span class="string">&quot;d:/testgo.txt&quot;</span></span><br><span class="line">    <span class="comment">// 使用os.ReadFile替代ioutil.ReadFile一次性读取文件内容</span></span><br><span class="line">    str, err := os.ReadFile(filePath)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出读取到的文件内容</span></span><br><span class="line">    fmt.Print(<span class="type">string</span>(str))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓冲读取文件函数</span></span><br><span class="line"><span class="comment">// 此函数适用于读取较大的文件，通过逐行读取方式减少内存占用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test01</span><span class="params">()</span></span> &#123;</span><br><span class="line">    file, err := os.Open(<span class="string">&quot;d:/testgo.txt&quot;</span>) <span class="comment">// 打开文件</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> file.Close() <span class="comment">// 关闭文件资源</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个缓冲读取器</span></span><br><span class="line">    reader := bufio.NewReader(file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">       <span class="comment">// 读取一行数据直到遇到换行符</span></span><br><span class="line">       str, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">       <span class="keyword">if</span> err == io.EOF &#123; <span class="comment">// 如果读到文件末尾</span></span><br><span class="line">          fmt.Println(err)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       &#125;</span><br><span class="line">       fmt.Print(str) <span class="comment">// 输出当前行的内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;文件读取结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接读取文件函数</span></span><br><span class="line"><span class="comment">// 此函数以块的形式读取文件内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test00</span><span class="params">()</span></span> &#123;</span><br><span class="line">    file, err := os.Open(<span class="string">&quot;d:/testgo.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(file) <span class="comment">// 输出文件对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b []<span class="type">byte</span>         <span class="comment">// 定义一个字节切片</span></span><br><span class="line">    b = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">50</span>) <span class="comment">// 初始化切片大小为50</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">       <span class="comment">// 从文件中读取数据到b切片</span></span><br><span class="line">       n, err := file.Read(b)</span><br><span class="line">       fmt.Println(n, <span class="type">string</span>(b[:n])) <span class="comment">// 输出读取的字节数和对应的字符串内容</span></span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">             fmt.Println(<span class="string">&quot;EOF:&quot;</span>, err) <span class="comment">// 输出EOF信息</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             fmt.Println(<span class="string">&quot;err:&quot;</span>, err) <span class="comment">// 输出其他错误信息</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用匿名函数实现延迟关闭文件</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(file *os.File)</span></span> &#123;</span><br><span class="line">       err := file.Close()</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          fmt.Println(err)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;(file)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言网络编程通信案例</title>
      <link href="/posts/97b1f46c.html"/>
      <url>/posts/97b1f46c.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-服务端">一.服务端</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;服务器开始监听...&quot;</span>)</span><br><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:8889&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;监听错误：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 延时关闭</span></span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line">fmt.Println(<span class="string">&quot;listen地址:&quot;</span>, listen.Addr()) <span class="comment">//127.0.0.1:8888</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 接收连接</span></span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;接收连接失败：&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;接收连接conn:&quot;</span>, conn.RemoteAddr())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理连接请求</span></span><br><span class="line"><span class="keyword">go</span> handleConn(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleConn</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;等待客户端消息：&quot;</span>)</span><br><span class="line"><span class="comment">// 读取客户端发来的消息</span></span><br><span class="line"><span class="keyword">var</span> bf = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">n, err := conn.Read(bf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;服务端读取数据失败：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;服务端接收数据：&quot;</span>, <span class="type">string</span>(bf[:n]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二-客户端">二.客户端</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:8889&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;客户端连接服务端错误：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;请输入消息(输入exit退出客户端):&quot;</span>)</span><br><span class="line"><span class="comment">// 发送消息给服务端</span></span><br><span class="line">readString, err := bufio.NewReader(os.Stdin).ReadString(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">// 终端接收标准输入</span></span><br><span class="line">readString = strings.TrimSpace(readString)                    <span class="comment">// 去除字符串两端的空白字符</span></span><br><span class="line"><span class="keyword">if</span> readString == <span class="string">&quot;exit&quot;</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;终端读取数据失败：&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;即将发送数据：&quot;</span>, readString)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n, err := conn.Write([]<span class="type">byte</span>(readString))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;发送数据失败：&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;已发送数据字节数：&quot;</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;成功退出客户端！！！！！！！&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<hr><p>title: Go语言网络编程介绍以及案例运用<br>date: 2023-11-15 08:00:00<br>updated: 2023-11-20 15:30:00<br>tags:</p><ul><li>后端开发</li><li>Golang</li><li>网络编程<br>categories:</li><li>后端技术</li><li>Golang<br>​—</li></ul><h2 id="一-Go网络编程概述">一.Go网络编程概述</h2><h3 id="1-基本概念">1. 基本概念</h3><ul><li><strong>TCP 和 UDP</strong>: Go语言支持TCP（传输控制协议）和UDP（用户数据报协议）。TCP提供可靠的、面向连接的通信，而UDP提供无连接的快速数据传输。</li><li><strong>并发</strong>: Go语言的并发模型是通过goroutines实现的。每个网络请求都可以在自己的goroutine中处理，实现高效的并发。</li><li><strong>Channels</strong>: 用于在goroutines之间安全地传递数据。</li></ul><h3 id="2-net包">2. net包</h3><ul><li><strong>核心组件</strong>: <code>net</code>包提供了网络I/O的基础设施，包括TCP/UDP协议，以及DNS解析。</li></ul><h2 id="二-创建TCP服务器">二.创建TCP服务器</h2><h3 id="1-监听端口"><strong>1.监听端口</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">goCopy codeln, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:8080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-接受连接并处理"><strong>2.接受连接并处理</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">goCopy codefor &#123;</span><br><span class="line">    conn, err := ln.Accept()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">go</span> handleConnection(conn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-处理连接"><strong>3.处理连接</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">goCopy codefunc handleConnection(conn net.Conn) &#123;</span><br><span class="line">    <span class="comment">// 使用conn读取和写入数据</span></span><br><span class="line">    conn.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-创建TCP客户端">三.创建TCP客户端</h2><h3 id="1-建立连接"><strong>1.建立连接</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">goCopy codeconn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:8080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-发送和接收数据"><strong>2.发送和接收数据</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goCopy code<span class="comment">// 发送数据</span></span><br><span class="line">conn.Write([]<span class="type">byte</span>(<span class="string">&quot;hello\n&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line">bufio.NewReader(conn).ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-关闭连接"><strong>3.关闭连接</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">goCopy code</span><br><span class="line">conn.Close()</span><br></pre></td></tr></table></figure><h3 id="4-使用UDP">4.使用UDP</h3><ol><li><p><strong>建立UDP连接</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">goCopy code</span><br><span class="line">conn, err := net.Dial(<span class="string">&quot;udp&quot;</span>, <span class="string">&quot;localhost:8081&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>发送和接收数据</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">goCopy codeconn.Write([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">n, _, err := conn.ReadFromUDP(buf)</span><br></pre></td></tr></table></figure></li></ol><h2 id="四-综合案例">四.综合案例</h2><h3 id="1-服务端-server-go">1.服务端-server.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:8888&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;开启服务端错误：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listener.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;接收错误：&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span> <span class="comment">// 改为continue，可以处理下一个连接</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> handleConnection(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleConnection</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取客户端数据</span></span><br><span class="line">message, err := bufio.NewReader(conn).ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取错误：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Message Received:&quot;</span>, message)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回发数据</span></span><br><span class="line">response := <span class="string">&quot;收到你的消息了：&quot;</span> + message</span><br><span class="line">conn.Write([]<span class="type">byte</span>(response))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-客户端-client-go">2.客户端-client.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:8888&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;连接错误：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">message := <span class="string">&quot;玩游戏\n&quot;</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>(message))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;发送数据错误：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;发送数据：&quot;</span>, message)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取响应</span></span><br><span class="line">response, err := bufio.NewReader(conn).ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取响应错误：&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;收到响应：&quot;</span>, response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GO语言基础案例讲解</title>
      <link href="/posts/59ef0c79.html"/>
      <url>/posts/59ef0c79.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-字符打印">一. 字符打印</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">// 所属包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span> <span class="comment">// 导入fmt包用于打印</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">// 主函数程序运行入口</span></span><br><span class="line">    c1 := <span class="string">&#x27;0&#x27;</span> <span class="comment">// 定义字符</span></span><br><span class="line">    fmt.Println(c1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, c1) <span class="comment">// 默认使用int32</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> temp <span class="type">int64</span> = <span class="number">9999999999</span></span><br><span class="line">    fmt.Println(temp)</span><br><span class="line"></span><br><span class="line">    c2 := <span class="string">&#x27;z&#x27;</span></span><br><span class="line">    fmt.Println(c2)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T&quot;</span>, c2)</span><br><span class="line">    fmt.Println(<span class="string">&quot;--------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> c3 <span class="type">byte</span> = <span class="string">&#x27;F&#x27;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;类型：%T,ascll值:%d,字符值:%c\n&quot;</span>, c3, c3, c3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> c4 <span class="type">int</span> = <span class="number">23450</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%c\n&quot;</span>, c4) <span class="comment">// 定 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-类型转换">二. 类型转换</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int64</span> = <span class="number">99</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">float64</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">bool</span> </span><br><span class="line">d := <span class="string">&quot;hello 清清&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;type:%T,%v\n&quot;</span>, a, a)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, c)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, d)</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符转换 %d:十进制格式输出</span></span><br><span class="line"><span class="keyword">var</span> str <span class="type">string</span></span><br><span class="line">str = fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, a)                   <span class="comment">// %d:十进制格式输出</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;str type:%T,val:%s\n&quot;</span>, str, str) <span class="comment">// str type:string,val:99</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;str type:%T,val:%q\n&quot;</span>, str, str) <span class="comment">// str type:string,val:&quot;99&quot;</span></span><br><span class="line"></span><br><span class="line">str = fmt.Sprintf(<span class="string">&quot;%f&quot;</span>, b)                   <span class="comment">// %f:浮点格式输出</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;str type:%T,val:%v\n&quot;</span>, str, str) <span class="comment">// str type:string,val:0</span></span><br><span class="line"></span><br><span class="line">str = fmt.Sprintf(<span class="string">&quot;%t&quot;</span>, c)                   <span class="comment">// %t:布尔格式输出</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;str type:%T,val:%q\n&quot;</span>, str, str) <span class="comment">// str type:string,val:&quot;false&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// strconv 进制转换</span></span><br><span class="line">f := strconv.FormatInt(<span class="number">-87</span>, <span class="number">2</span>) <span class="comment">// 二进制</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;a:%s\n&quot;</span>, f)        <span class="comment">// -10111</span></span><br><span class="line"></span><br><span class="line">o := strconv.FormatUint(<span class="number">87</span>, <span class="number">2</span>) <span class="comment">// 二进制</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;87:%s\n&quot;</span>, o)       <span class="comment">// 10111</span></span><br><span class="line"></span><br><span class="line">g := strconv.FormatBool(c)</span><br><span class="line">fmt.Printf(<span class="string">&quot;c:%q\n&quot;</span>, g) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;------------------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">m := <span class="string">&quot;99&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T,%v\n&quot;</span>, m, m) <span class="comment">// string,99</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p <span class="type">int64</span> = <span class="type">int64</span>(b) <span class="comment">// 强制转换</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T,%v\n&quot;</span>, p, p) <span class="comment">// int64,0</span></span><br><span class="line"></span><br><span class="line">atoi, err := strconv.Atoi(m) <span class="comment">// 字符串转换为整型</span></span><br><span class="line">fmt.Println(<span class="string">&quot;atoi:&quot;</span>, atoi, err) <span class="comment">// atoi:99 &lt;nil&gt;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三-strconv包类型转换">三.<code>strconv</code>包类型转换</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">bool</span></span><br><span class="line">b, _ = strconv.ParseBool(str)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;b type:%T, b=%v \n&quot;</span>, b, b) <span class="comment">// b type:bool, b=true</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;123453&quot;</span></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int64</span></span><br><span class="line">num, _ = strconv.ParseInt(str2, <span class="number">10</span>, <span class="number">64</span>)      <span class="comment">// 10进制, 64位</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;num type:%T, b=%v \n&quot;</span>, num, num) <span class="comment">// num type:int64, b=123453</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="type">int</span> = <span class="type">int</span>(num)</span><br><span class="line">fmt.Printf(<span class="string">&quot;num type:%T, b=%v \n&quot;</span>, num2, num2) <span class="comment">// num type:int, b=123453</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;-------------------\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 <span class="type">string</span> = <span class="string">&quot;123.456&quot;</span></span><br><span class="line"><span class="keyword">var</span> f1 <span class="type">float64</span></span><br><span class="line">f1, _ = strconv.ParseFloat(str3, <span class="number">64</span>)      <span class="comment">// 64位</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;f1 type:%T, b=%v \n&quot;</span>, f1, f1) <span class="comment">// f1 type:float64, b=123.456</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">i, err := strconv.ParseInt(str4, <span class="number">10</span>, <span class="number">64</span>) <span class="comment">// 10进制, 64位</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;i:%T, i=%v\n&quot;</span>, i, i)         <span class="comment">// i:int64, i=0 </span></span><br><span class="line">fmt.Println(<span class="string">&quot;err:&quot;</span>, err)                 <span class="comment">//err: strconv.ParseInt: parsing &quot;hello&quot;: invalid syntax</span></span><br><span class="line"></span><br><span class="line">name := <span class="string">&quot;jojo&quot;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;my name is &quot;</span> + name) <span class="comment">// my name is jojo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unsafe.Sizeof 函数会返回一个 int 类型的值，表示指定类型的字节大小</span></span><br><span class="line">fmt.Print(unsafe.Sizeof(name)) <span class="comment">// 16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四-math和rand包的应用">四.<code>math和rand</code>包的应用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取当前时间的 Unix 纳秒时间戳 确保数列改变</span></span><br><span class="line">rand.Seed(time.Now().UnixNano()) <span class="comment">// 设置随机数种子</span></span><br><span class="line">fmt.Println(rand.Intn(<span class="number">10</span>))       <span class="comment">// 0-9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//%g是一个格式化字符，用于以科学计数法或十进制形式打印浮点数</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;my number is %g\n&quot;</span>, math.Sqrt(<span class="number">50</span>)) <span class="comment">//my number is 7.0710678118654755</span></span><br><span class="line">fmt.Println(math.Pi)                           <span class="comment">//3.141592653589793</span></span><br><span class="line"></span><br><span class="line">fmt.Println(add(<span class="number">21</span>, <span class="number">22</span>))</span><br><span class="line"></span><br><span class="line">a, b := swap(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(a, b) <span class="comment">//world hello</span></span><br><span class="line"></span><br><span class="line">fmt.Println(split(<span class="number">0</span>)) <span class="comment">//0 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, python, java <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">fmt.Println(c, python, java, i) <span class="comment">//false false false 0</span></span><br><span class="line">test1()</span><br><span class="line"></span><br><span class="line">fmt.Println(sum100()) <span class="comment">//5050</span></span><br><span class="line"></span><br><span class="line">fmt.Println(sqrt2(<span class="number">-9</span>), sqrt2(<span class="number">81</span>)) <span class="comment">//3 9</span></span><br><span class="line"></span><br><span class="line">fmt.Println(pow(<span class="number">3</span>, <span class="number">2</span>, <span class="number">10</span>)) <span class="comment">//9</span></span><br><span class="line">fmt.Println(pow(<span class="number">3</span>, <span class="number">3</span>, <span class="number">10</span>)) <span class="comment">//27</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pow(x,n,lim) calculates x^n and returns lim if overflow occurs 计算 x^n 并在发生溢出时返回 lim</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%g&gt;=%g\n&quot;</span>, v, lim)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sqrt2(x) returns the square root of x 计算 x 的平方根</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqrt2</span><span class="params">(x <span class="type">float64</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- math.Sqrt(-x)：表示需要格式化的浮点数，这里的math.Sqrt(-x)是为了示例负数开根号的情况。 </span></span><br><span class="line"><span class="comment">- &#x27;f&#x27;：表示使用固定点表示法进行格式化。 </span></span><br><span class="line"><span class="comment">- -1：表示小数点后的位数，-1表示使用默认位数。  精度</span></span><br><span class="line"><span class="comment">- 64：表示浮点数的位数，这里是64位的浮点数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> strconv.FormatFloat(math.Sqrt(-x), <span class="string">&#x27;f&#x27;</span>, <span class="number">-1</span>, <span class="number">64</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprint(math.Sqrt(x))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add(x,y) returns the sum of x and y 计算 x 和 y 的和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// swap(x</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// split(sum) returns two integers, x and y, that sum to sum 计算 sum 的两个整数 x 和 y</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="type">int</span>)</span></span> (x, y <span class="type">int</span>) &#123;</span><br><span class="line">x = sum * <span class="number">4</span> / <span class="number">9</span></span><br><span class="line">y = sum - x</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x, y <span class="type">int</span> = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">f := math.Sqrt(<span class="type">float64</span>(x*x + y*y))</span><br><span class="line">z := <span class="type">uint</span>(f) <span class="comment">//将f转换为uint类型</span></span><br><span class="line">fmt.Println(x, y, f, z) <span class="comment">//3 4 5 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sum100() returns the sum of 1+2+3+...+100 1+2+3+...+100 的和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum100</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++ &#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自身累加 每次翻倍 2 4 8 16 32 64 128 256 512 1024</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forTest</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;</span><br><span class="line">sum += sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foeTest2</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">100</span> &#123;</span><br><span class="line">sum += sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="五-switch的使用和牛顿法逼近平方根">五.<code>switch</code>的使用和牛顿法逼近平方根</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// z -= (z*z - x) / (2*z) 牛顿法逼近平方根</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqrt</span><span class="params">(x <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="comment">// 给定初始值</span></span><br><span class="line">z := <span class="number">1.0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">8</span>; i++ &#123;</span><br><span class="line">z -= (z*z - x) / (<span class="number">2</span> * z)</span><br><span class="line">fmt.Println(<span class="string">&quot;迭代次数&quot;</span>, i+<span class="number">1</span>, <span class="string">&quot;的值：&quot;</span>, z)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取运行系统</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">switchTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;GO runs on &quot;</span>)</span><br><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123; <span class="comment">//os := runtime.GOOS; 初始化语句分号隔开</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;darwin&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;OS X.&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;linux&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Linux.&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// freebsd, openbsd,</span></span><br><span class="line"><span class="comment">// plan9, windows...</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s.\n&quot;</span>, os) <span class="comment">// 打印默认值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">when</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;when&#x27;s saturday?&quot;</span>)</span><br><span class="line">today := time.Now().Weekday() <span class="comment">// 获取今天星期</span></span><br><span class="line"><span class="keyword">switch</span> time.Saturday &#123;        <span class="comment">// 6</span></span><br><span class="line"><span class="keyword">case</span> today + <span class="number">0</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Today&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> today + <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Tomorrow&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> today + <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;In two days&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> today + <span class="number">3</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;In three days&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> today + <span class="number">4</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;In four days&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Too far away.&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := time.Now().Hour()</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> t &lt; <span class="number">12</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Good morning!&quot;</span>, t)</span><br><span class="line"><span class="keyword">case</span> t &lt;= <span class="number">17</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Good afternoon!&quot;</span>, t)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Good evening!&quot;</span>, t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;计算值：&quot;</span>, sqrt(<span class="number">36</span>))        <span class="comment">//6</span></span><br><span class="line">fmt.Println(<span class="string">&quot;math库：&quot;</span>, math.Sqrt(<span class="number">36</span>)) <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line">switchTest()</span><br><span class="line"></span><br><span class="line">fmt.Println(runtime.GOOS) <span class="comment">// windows</span></span><br><span class="line"><span class="keyword">defer</span> when()              <span class="comment">// 延迟执行</span></span><br><span class="line"></span><br><span class="line">sayHi()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">GO runs on windows.</span></span><br><span class="line"><span class="comment">windows</span></span><br><span class="line"><span class="comment">Good afternoon! 14</span></span><br><span class="line"><span class="comment">when&#x27;s saturday?</span></span><br><span class="line"><span class="comment">Tomorrow</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="六-指针的使用和自定义结构体">六. 指针的使用和自定义结构体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testP1</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i, j <span class="type">float64</span> = <span class="number">42</span>, <span class="number">2701</span> <span class="comment">// 声明变量 i, j 并初始化</span></span><br><span class="line">p := &amp;i                     <span class="comment">// p 指向 i</span></span><br><span class="line">*p = <span class="number">21</span>                     <span class="comment">// 相当于 i = 21</span></span><br><span class="line">fmt.Println(*p)             <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line">p = &amp;j         <span class="comment">// p 指向 j</span></span><br><span class="line">*p = *p / <span class="number">2</span>    <span class="comment">// 相当于 j = j / 2</span></span><br><span class="line">fmt.Println(j) <span class="comment">// 1350.5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person 自定义结构体 类似于JAVA中的类</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span> <span class="comment">// 姓名</span></span><br><span class="line">Age  <span class="type">int</span>    <span class="comment">// 年龄</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vertex 自定义结构体 坐标</span></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X <span class="type">float64</span></span><br><span class="line">Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">testP1()</span><br><span class="line">fmt.Println(Person&#123;</span><br><span class="line"><span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">person := Person&#123;</span><br><span class="line"><span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(person.Name)<span class="comment">// 张三</span></span><br><span class="line"></span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(v.Y) <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">v1 = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">v2 = Vertex&#123;X: <span class="number">3</span>&#125;</span><br><span class="line">v3 = Vertex&#123;Y: <span class="number">6</span>&#125;</span><br><span class="line"><span class="comment">//p  = &amp;Vertex&#123;6, 6&#125;</span></span><br><span class="line">p = &amp;v1</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fmt.Println(v1, v2, v3, p.X) <span class="comment">// &#123;1 2&#125; &#123;3 0&#125; &#123;0 6&#125; 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="七-🔺数组和切片">七. 🔺数组和切片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testArr</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//var strs [2]string // 定义一个长度为2的字符串数组</span></span><br><span class="line">strs := [...]<span class="type">string</span>&#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125; <span class="comment">//[...]这个语法表示一个数组的长度可以使用 ... 让编译器计算数组的长度，基于提供的初始化值的数量</span></span><br><span class="line">strs[<span class="number">0</span>] = <span class="string">&quot;hello&quot;</span></span><br><span class="line">strs[<span class="number">1</span>] = <span class="string">&quot;world&quot;</span></span><br><span class="line">fmt.Println(strs[<span class="number">0</span>], strs[<span class="number">1</span>])</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(strs)) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">params := [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(params) <span class="comment">// [1 2 3 4 5 0] 最后默认值为0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">testArr()</span><br><span class="line"><span class="comment">// 切片</span></span><br><span class="line">primes := [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">fmt.Println(primes[<span class="number">0</span>:<span class="number">6</span>])<span class="comment">// [2 3 5 7 11 13]</span></span><br><span class="line">fmt.Println(<span class="string">&quot;------------------------------------&quot;</span>)</span><br><span class="line">names := [<span class="number">4</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;John&quot;</span>,</span><br><span class="line"><span class="string">&quot;Paul&quot;</span>,</span><br><span class="line"><span class="string">&quot;George&quot;</span>,</span><br><span class="line"><span class="string">&quot;Ringo&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">a := names[<span class="number">0</span>:<span class="number">2</span>] <span class="comment">// [John Paul]</span></span><br><span class="line">b := names[<span class="number">1</span>:<span class="number">3</span>]<span class="comment">// [Paul George]</span></span><br><span class="line">fmt.Println(a, b)<span class="comment">// [John Paul] [Paul George]</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="string">&quot;JOJO&quot;</span> <span class="comment">// 切片的元素是可以修改的</span></span><br><span class="line">fmt.Println(a, b)<span class="comment">// [JOJO Paul] [JOJO George]</span></span><br><span class="line">fmt.Println(<span class="string">&quot;------------------------------------&quot;</span>)</span><br><span class="line">q := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(q, <span class="built_in">len</span>(q))<span class="comment">// [1 2 3 4 5] 5</span></span><br><span class="line"></span><br><span class="line">r := []<span class="type">bool</span>&#123;<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>&#125;</span><br><span class="line">fmt.Println(r)<span class="comment">// [true false true true false true]</span></span><br><span class="line">fmt.Println(<span class="string">&quot;------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体切片</span></span><br><span class="line">s := []<span class="keyword">struct</span> &#123;</span><br><span class="line">i <span class="type">int</span></span><br><span class="line">b <span class="type">bool</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="number">2</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="number">6</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="八-切片和切片数组的使用（make）">八. 切片和切片数组的使用（make）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>&#125;</span><br><span class="line">printSlice(s) <span class="comment">// [2 3 5 7 11 13 17 19]</span></span><br><span class="line"></span><br><span class="line">s = s[:<span class="number">0</span>]     <span class="comment">// 长度为零</span></span><br><span class="line">printSlice(s) <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展长度</span></span><br><span class="line">s = s[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">printSlice(s) <span class="comment">// [2 3 5 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 舍弃前两个值</span></span><br><span class="line">s = s[<span class="number">2</span>:]</span><br><span class="line">printSlice(s) <span class="comment">// [5 7 11 13 17 19]</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;-------------------&quot;</span>)</span><br><span class="line">arr := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(arr), <span class="built_in">cap</span>(arr)) <span class="comment">// 8 8</span></span><br><span class="line">fmt.Println(<span class="string">&quot;-------------------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i []<span class="type">int</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(i), <span class="built_in">cap</span>(i), i) <span class="comment">// 0 0 []</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;i is nil&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------make---------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// make函数返回一个指定长度的切片，并用零值填充。 make初始化切片</span></span><br><span class="line">a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>) <span class="comment">// len(a) == 5, cap(a) == 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a:&quot;</span>, a)      <span class="comment">// a: [0 0 0 0 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数指定切片的容量，第三个参数指定切片的长度</span></span><br><span class="line">b := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">5</span>) <span class="comment">// len(b) == 0, cap(b) == 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b&quot;</span>, b)          <span class="comment">// b []</span></span><br><span class="line"></span><br><span class="line">c := b[:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c&quot;</span>, c) <span class="comment">// c [0 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新切片的容量会根据原始切片的容量和新切片的起始位置来计算。</span></span><br><span class="line">d := c[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d&quot;</span>, d)   <span class="comment">// d: []</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(d))<span class="comment">// 3</span></span><br><span class="line">ticTacToeGame() </span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加切片</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------append---------------------------&quot;</span>)</span><br><span class="line">addSlice()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addSlice</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s []<span class="type">int</span></span><br><span class="line">printSlice(s)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">printSlice(s)<span class="comment">// [1 2 3]</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">printSlice(s)<span class="comment">// [1 2 3 4 5]</span></span><br><span class="line">p := &amp;s</span><br><span class="line">fmt.Println(p)<span class="comment">// &amp;[1 2 3 4 5 6]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 井字游戏</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ticTacToeGame</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 二维数组</span></span><br><span class="line">border := [][]<span class="type">string</span>&#123;</span><br><span class="line">&#123;<span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">border[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&quot;X&quot;</span></span><br><span class="line">border[<span class="number">0</span>][<span class="number">2</span>] = <span class="string">&quot;O&quot;</span></span><br><span class="line">border[<span class="number">2</span>][<span class="number">2</span>] = <span class="string">&quot;X&quot;</span></span><br><span class="line">border[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">&quot;O&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, border[<span class="number">0</span>])</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, border[<span class="number">1</span>])</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, border[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;-------------------------------------------&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(border); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, strings.Join(border[i], <span class="string">&quot; &quot;</span>))<span class="comment">// X_O_X</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;s len=%d cap=%d %v\n&quot;</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s) <span class="comment">// %v 打印数组 cap(s)表示容量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(s <span class="type">string</span>, x []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s len=%d cap=%d %v\n&quot;</span>, s, <span class="built_in">len</span>(x), <span class="built_in">cap</span>(x), x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="九-range切片的遍历">九.<code>range</code>切片的遍历</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">range1()</span><br><span class="line">range2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">range2</span><span class="params">()</span></span> &#123;</span><br><span class="line">pow := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">11</span>)<span class="comment">// 声明切片 pow 长度为11</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pow &#123;<span class="comment">// 遍历切片i:索引</span></span><br><span class="line">pow[i] = <span class="number">1</span> &lt;&lt; <span class="type">uint</span>(i) <span class="comment">//1* 2**i 左移位运算</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(pow)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> pow &#123; <span class="comment">// 遍历切片v:值</span></span><br><span class="line">fmt.Print(v, <span class="string">&quot; &quot;</span>) <span class="comment">// 打印切片值 1 2 4 8 16 32 64 128...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">range1</span><span class="params">()</span></span> &#123;</span><br><span class="line">pow := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123; <span class="comment">// 遍历切片i:索引 v:值</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;2**%d=%d\n&quot;</span>, i, v) <span class="comment">// 打印索引和值 2**0=1 2**1=2 2**2=4 2**3=8 2**4=16 2**5=32 2**6=64 2**7=128</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十-自定义数值生成二维数组">十. 自定义数值生成二维数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切片 二维数组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(pic2(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pic2</span><span class="params">(dy, dx <span class="type">int</span>)</span></span> [][]<span class="type">uint8</span> &#123;</span><br><span class="line"><span class="comment">// 创建一个二维数组 容量为dy</span></span><br><span class="line">result := <span class="built_in">make</span>([][]<span class="type">uint8</span>, dy)</span><br><span class="line"><span class="comment">// 遍历二维数组</span></span><br><span class="line"><span class="keyword">for</span> x := <span class="number">0</span>; x &lt; dy; x++ &#123;</span><br><span class="line">result[x] = <span class="built_in">make</span>([]<span class="type">uint8</span>, dx)</span><br><span class="line"><span class="keyword">for</span> y := <span class="number">0</span>; y &lt; dx; y++ &#123;</span><br><span class="line">result[x][y] = <span class="type">uint8</span>(math.Pow(<span class="type">float64</span>(x), <span class="type">float64</span>(y)))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十一-🔺映射">十一. 🔺映射</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 映射</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建和初始化映射</span></span><br><span class="line"><span class="comment">//colors := map[string]string&#123;&#125;</span></span><br><span class="line"><span class="comment">// 创建映射</span></span><br><span class="line"><span class="keyword">var</span> colors <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> <span class="comment">// key类型为string，value类型为string</span></span><br><span class="line">fmt.Println(colors == <span class="literal">nil</span>)   <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 初始化映射后才可使用</span></span><br><span class="line">colors = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">fmt.Println(colors == <span class="literal">nil</span>) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 给映射赋值</span></span><br><span class="line">colors[<span class="string">&quot;red&quot;</span>] = <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line">colors[<span class="string">&quot;green&quot;</span>] = <span class="string">&quot;#00ff00&quot;</span></span><br><span class="line">colors[<span class="string">&quot;blue&quot;</span>] = <span class="string">&quot;#0000ff&quot;</span></span><br><span class="line">fmt.Println(colors)</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> colors &#123;<span class="comment">//遍历映射</span></span><br><span class="line">fmt.Println(i, v)<span class="comment">//i为key，v为value</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------first end----------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">fruits := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="comment">//创建映射 key为string，value为int类型</span></span><br><span class="line"><span class="string">&quot;apple&quot;</span>:  <span class="number">5</span>,</span><br><span class="line"><span class="string">&quot;pear&quot;</span>:   <span class="number">3</span>,</span><br><span class="line"><span class="string">&quot;banana&quot;</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(fruits)) <span class="comment">// 3</span></span><br><span class="line">fmt.Println(<span class="string">&quot;the number of bananas are&quot;</span>, fruits[<span class="string">&quot;banana&quot;</span>])<span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 删除 key</span></span><br><span class="line"><span class="built_in">delete</span>(fruits, <span class="string">&quot;apple&quot;</span>)</span><br><span class="line">fmt.Println(fruits)<span class="comment">//&#123;&quot;pear&quot;:3,&quot;banana&quot;:2&#125;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------second end----------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断key是否存在</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)<span class="comment">//创建映射</span></span><br><span class="line">fmt.Println(m == <span class="literal">nil</span>) <span class="comment">//false</span></span><br><span class="line">m[<span class="string">&quot;key1&quot;</span>] = <span class="number">1</span></span><br><span class="line">m[<span class="string">&quot;key2&quot;</span>] = <span class="number">2</span></span><br><span class="line">fmt.Println(m)<span class="comment">//&#123;&quot;key1&quot;:1,&quot;key2&quot;:2&#125;</span></span><br><span class="line"></span><br><span class="line">v, ok := m[<span class="string">&quot;key1&quot;</span>]<span class="comment">//获取key1的值</span></span><br><span class="line">fmt.Println(v, ok) <span class="comment">// 1, true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;key1 exists&quot;</span>, v)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;key1 not exists&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v, ok = m[<span class="string">&quot;key3&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;key3 exists&quot;</span>, v)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;key3 not exists&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;--------------------third end----------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">Lat, Long <span class="type">float64</span> <span class="comment">// 经纬度 都为float64类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建映射</span></span><br><span class="line"><span class="comment">//var s map[string]Vertex</span></span><br><span class="line"><span class="comment">// 初始化映射</span></span><br><span class="line">s := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]Vertex)<span class="comment">// key为string，value为Vertex类型</span></span><br><span class="line">fmt.Println(s == <span class="literal">nil</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strs []<span class="type">string</span> = strings.Fields(<span class="string">&quot;he sc sd&quot;</span>)<span class="comment">//按照空格进行字符串切割 </span></span><br><span class="line">fmt.Println(strs) <span class="comment">//[he sc sd]</span></span><br><span class="line"></span><br><span class="line">s[<span class="string">&quot;Bell Labs&quot;</span>] = Vertex&#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;</span><br><span class="line">s[<span class="string">&quot;Google&quot;</span>] = Vertex&#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>&#125;</span><br><span class="line">fmt.Println(s[<span class="string">&quot;Bell Labs&quot;</span>])<span class="comment">//&#123;40.68433 -74.39967&#125;</span></span><br><span class="line">fmt.Println(s[<span class="string">&quot;Google&quot;</span>])<span class="comment">//&#123;37.42202 -122.08408&#125;</span></span><br><span class="line">fmt.Println(s) <span class="comment">//map[Bell Labs:&#123;40.68433 -74.39967&#125; Google:&#123;37.42202 -122.08408&#125;]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十二-映射练习">十二. 映射练习</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;golang.org/x/tour/wc&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// WordCount 映射练习 计算字符串中每个单词出现的次数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WordCount</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> &#123;</span><br><span class="line">strs := strings.Fields(s)</span><br><span class="line"><span class="comment">// var strs []string = strings.Fields(s)</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>) <span class="comment">// 声明一个空的map</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(strs); i++ &#123;</span><br><span class="line">_, ok := m[strs[i]]</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">m[strs[i]] += <span class="number">1</span> <span class="comment">// 键值对自增</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">m[strs[i]] = <span class="number">1</span> <span class="comment">// 键值对赋值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wc.Test(WordCount)</span><br><span class="line"><span class="comment">// 测试结果如下：</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment"> f(&quot;I am learning Go!&quot;) =</span></span><br><span class="line"><span class="comment">  map[string]int&#123;&quot;Go!&quot;:1, &quot;I&quot;:1, &quot;am&quot;:1, &quot;learning&quot;:1&#125;</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment"> f(&quot;The quick brown fox jumped over the lazy dog.&quot;) =</span></span><br><span class="line"><span class="comment">  map[string]int&#123;&quot;The&quot;:1, &quot;brown&quot;:1, &quot;dog.&quot;:1, &quot;fox&quot;:1, &quot;jumped&quot;:1, &quot;lazy&quot;:1, &quot;over&quot;:1, &quot;quick&quot;:1, &quot;the&quot;:1&#125;</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment"> f(&quot;I ate a donut. Then I ate another donut.&quot;) =</span></span><br><span class="line"><span class="comment">  map[string]int&#123;&quot;I&quot;:2, &quot;Then&quot;:1, &quot;a&quot;:1, &quot;another&quot;:1, &quot;ate&quot;:2, &quot;donut.&quot;:2&#125;</span></span><br><span class="line"><span class="comment">PASS</span></span><br><span class="line"><span class="comment"> f(&quot;A man a plan a canal panama.&quot;) =</span></span><br><span class="line"><span class="comment">  map[string]int&#123;&quot;A&quot;:1, &quot;a&quot;:2, &quot;canal&quot;:1, &quot;man&quot;:1, &quot;panama.&quot;:1, &quot;plan&quot;:1&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十三-函数也可当作值传递">十三. 函数也可当作值传递</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数也可当作值传递 fn:参数 类型：func(float64, float64) float64 返回值：float64</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compute</span><span class="params">(fn <span class="keyword">func</span>(<span class="type">float64</span>, <span class="type">float64</span>)</span></span> <span class="type">float64</span>) <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 自定义函数计算平方根 原点到点（x,y）的距离</span></span><br><span class="line">hyp := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(x*x + y*y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数 参数为hyp</span></span><br><span class="line">fmt.Println(compute(hyp)) <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">fmt.Println(hyp(<span class="number">6</span>, <span class="number">8</span>)) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">fmt.Println(compute(math.Pow)) <span class="comment">// 81</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十四-🔺函数闭包">十四. 🔺函数闭包</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数闭包  也就是返回一个函数，内部函数控制外部函数的变量 使其可以在其他地方修改此函数的私有变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">new</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">sum := <span class="number">0</span>                 <span class="comment">// 定义一个变量</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="comment">// 定义一个返回函数</span></span><br><span class="line">sum += x</span><br><span class="line"><span class="keyword">return</span> sum <span class="comment">// 返回sum</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 返回一个闭包函数</span></span><br><span class="line">newer := <span class="built_in">new</span>() <span class="comment">// 赋值给新变量</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">fmt.Print(newer(i), <span class="string">&quot; &quot;</span>) <span class="comment">// 调用返回的函数控制函数内部变量sum</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十五-斐波那契数闭包练习">十五. 斐波那契数闭包练习</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契数 实现闭包练习 0, 1, 1, 2, 3, 5, ...</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">a, b := <span class="number">0</span>, <span class="number">1</span> <span class="comment">//初始化前两个值 后一个值是前两个值的和</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">result := a</span><br><span class="line">a, b = b, a+b</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := fibonacci() <span class="comment">// 返回函数</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">30</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">fmt.Print(f(), <span class="string">&quot; &quot;</span>) <span class="comment">//输出斐波那契数 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十六-🔺方法">十六. 🔺方法</h3><p><strong>方法的定义类似于函数，但在方法名之前有一个额外的参数（接收者），它定义了这个方法可以被哪个类型的实例调用。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Abs 方法 方法的定义类似于函数，但在方法名之前有一个额外的参数（接收者），它定义了这个方法可以被哪个类型的实例调用。</span></span><br><span class="line"><span class="comment">// 记住：方法只是个带接收者参数的函数</span></span><br><span class="line"><span class="comment">// Abs 定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex2)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y) <span class="comment">// 调用内置函数 math.Sqrt</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex2 <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">point</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 练习指针</span></span><br><span class="line">a := <span class="number">10</span></span><br><span class="line">b := &amp;a</span><br><span class="line">*b = <span class="number">10</span> * <span class="number">10</span>   <span class="comment">// 100</span></span><br><span class="line">fmt.Println(a) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex3 <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex3)</span></span> comp() &#123;</span><br><span class="line">v.X = v.X + <span class="number">1</span></span><br><span class="line">v.Y = v.Y + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex3)</span></span> comp2() &#123;</span><br><span class="line">v.X = v.X + <span class="number">1</span></span><br><span class="line">v.Y = v.Y + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyFloat 自定义类型</span></span><br><span class="line"><span class="keyword">type</span> MyFloat <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方法 MyFloat.fbs() float64 返回一个 float64 类型的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span></span> fbs() <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">float64</span>(-f)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//point()</span></span><br><span class="line">v := Vertex2&#123;<span class="number">6</span>, <span class="number">8</span>&#125;</span><br><span class="line">fmt.Println(v.Abs()) <span class="comment">// 10 调用方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 值接收者 有副本 原始 Vertex 实例不会被修改</span></span><br><span class="line">s := Vertex3&#123;<span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">s.comp() </span><br><span class="line">fmt.Println(s) <span class="comment">// &#123;9 10&#125; 不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针接收者</span></span><br><span class="line">m := &amp;Vertex3&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">m.comp2() </span><br><span class="line">fmt.Println(m) <span class="comment">// 2,3 值发生改变</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;--------------next----------------------&quot;</span>)</span><br><span class="line">f := MyFloat(-math.Sqrt2) <span class="comment">// 根号2</span></span><br><span class="line">fmt.Println(<span class="string">&quot;f:&quot;</span>, f) <span class="comment">// -1.4142135623730951</span></span><br><span class="line">fmt.Println(f.fbs()) <span class="comment">// 绝对值 1.4142135623730951</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十七-🔺接口">十七. 🔺接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 调用接口方法</span></span><br><span class="line">s := Square&#123;sideLength: <span class="number">10</span>&#125;</span><br><span class="line">fmt.Println(s.Area(), s.Perimeter()) <span class="comment">// 输出 100 40</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shape (形状) 定义通用接口 interface:接口</span></span><br><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span> &#123;</span><br><span class="line">Area() <span class="type">float64</span>      <span class="comment">// 面积</span></span><br><span class="line">Perimeter() <span class="type">float64</span> <span class="comment">// 周长</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Square 定义结构体类型</span></span><br><span class="line"><span class="keyword">type</span> Square <span class="keyword">struct</span> &#123; <span class="comment">// 正方形</span></span><br><span class="line">sideLength <span class="type">float64</span> <span class="comment">// 边长</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Area 实现接口中的方法Area float64</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Square)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.sideLength * s.sideLength</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perimeter 实现接口中的方法Perimeter float64</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Square)</span></span> Perimeter() <span class="type">float64</span> &#123;<span class="comment">// 周边长</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span> * s.sideLength</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十八-接口练习">十八. 接口练习</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// go-19.go接口练习</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化结构体</span></span><br><span class="line">d := Dog&#123;<span class="string">&quot;莱福&quot;</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment">// 调用结构体的方法</span></span><br><span class="line">d.eat(<span class="string">&quot;大肉骨头&quot;</span>)</span><br><span class="line">d.run(<span class="string">&quot;100km/h&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;------------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口赋值</span></span><br><span class="line"><span class="keyword">var</span> a animal</span><br><span class="line"><span class="comment">// 赋值结构体</span></span><br><span class="line">a = Dog&#123;<span class="string">&quot;小花&quot;</span>, <span class="number">1</span>&#125;</span><br><span class="line">a.eat(<span class="string">&quot;骨头&quot;</span>)</span><br><span class="line">a.run(<span class="string">&quot;10km/h&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;---------------end---------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i I = T&#123;<span class="string">&quot;hello world&quot;</span>&#125;</span><br><span class="line">i.M() <span class="comment">// 调用接口方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// animal接口</span></span><br><span class="line"><span class="keyword">type</span> animal <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 定义接口方法</span></span><br><span class="line">eat(s <span class="type">string</span>)</span><br><span class="line">run(s <span class="type">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog Dog结构体</span></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Cat Cat结构体</span></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog结构体的eat方法 (d Dog)为参与者 实现接口中的eat(s string)方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span></span> eat(s <span class="type">string</span>) &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;my dog&#x27;name is %v, 年龄：%v,它爱吃%v\n&quot;</span>, d.name, d.age, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog结构体的run方法 (d Dog)为参与者 实现接口中的run(s string)方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span></span> run(s <span class="type">string</span>) &#123;</span><br><span class="line">fmt.Println(d.name, <span class="string">&quot;跑得很快！！！时速：&quot;</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// I I接口</span></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T T结构体</span></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">S <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// M T结构体的M方法 (t T)为参与者 实现接口I中的M()方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span></span> M() &#123;</span><br><span class="line">fmt.Println(t.S)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十九-接口返回值和类型">十九. 接口返回值和类型</h3><p><strong>接口也是有返回值和类型的</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口也是有返回值和类型的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> m M</span><br><span class="line"></span><br><span class="line">describe(m) <span class="comment">// type:&lt;nil&gt;    value:&lt;nil&gt;</span></span><br><span class="line"></span><br><span class="line">m = MyInt(<span class="number">10</span>)</span><br><span class="line">describe(m) <span class="comment">// type:main.MyInt    value:10</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;-------------------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 空接口 可以存储任意类型的值</span></span><br><span class="line">testBlank(i)      <span class="comment">// 空接口： 类型：&lt;nil&gt; 值：&lt;nil&gt;</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">66</span></span><br><span class="line">testBlank(i) <span class="comment">// 空接口： 类型：int 值：66</span></span><br><span class="line"></span><br><span class="line">i = <span class="string">&quot;你好~&quot;</span></span><br><span class="line">testBlank(i) <span class="comment">// 空接口： 类型：string 值：你好~</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">420</span>              <span class="comment">// int</span></span><br><span class="line">v, ok := i.(<span class="type">float64</span>) <span class="comment">// 断言false 判断变量i的类型是否为float64 失败则为0</span></span><br><span class="line">fmt.Println(v, ok)   <span class="comment">// 0 false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// M 接口</span></span><br><span class="line"><span class="keyword">type</span> M <span class="keyword">interface</span> &#123;</span><br><span class="line">M() <span class="comment">// 接口方法 无返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// S 结构体</span></span><br><span class="line"><span class="keyword">type</span> S <span class="keyword">struct</span> &#123;</span><br><span class="line">s <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// M 接口方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s S)</span></span> M() &#123;</span><br><span class="line">fmt.Printf(s.s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyInt 自定义类型</span></span><br><span class="line"><span class="keyword">type</span> MyInt <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// M 接口方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i MyInt)</span></span> M() &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// describe 接口信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">describe</span><span class="params">(m M)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;type:%T    value:%v\n&quot;</span>, m, m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空接口可以存储任意类型的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testBlank</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;空接口： 类型：%T 值：%v\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二十-断言">二十. 断言</h3><p><strong>断言通常用于判断一个接口类型的值是否为特定的类型</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型选择</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 类型选择 interface&#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">i = <span class="number">55</span></span><br><span class="line">do(i)</span><br><span class="line"></span><br><span class="line">i = <span class="string">&quot;hello&quot;</span></span><br><span class="line">do(i)</span><br><span class="line"></span><br><span class="line">i = <span class="literal">true</span></span><br><span class="line">do(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123; <span class="comment">// 断言</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;my value is&quot;</span>, v)</span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;my value is&quot;</span>, v)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">n, err := fmt.Printf(<span class="string">&quot;i dont know %T~~~\n&quot;</span>, v)</span><br><span class="line">fmt.Println(n, err)</span><br><span class="line">s := <span class="string">&quot;Hello, 世界&quot;</span> <span class="comment">// 一个中文占三个字节</span></span><br><span class="line">r := <span class="string">&quot;i dont know bool~~~\n&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), unsafe.Sizeof(s), <span class="built_in">len</span>(r)) <span class="comment">// 这将输出字符串s的字节长度和字符串r的字节长度 13 16 20  </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二十一-stringer使用，自定义打印输出">二十一. stringer使用，自定义打印输出</h3><p>内置接口，自定义类型实现此方法就可自定义打印模板</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// stringer使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 自定义类型打印输出模板</span></span><br><span class="line">    a := People&#123;<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>&#125;</span><br><span class="line">    fmt.Println(a) <span class="comment">// (Name:张三,Age:18)</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;----------------Sprintf用法---------------------&quot;</span>)</span><br><span class="line">    <span class="comment">// 转换字符串</span></span><br><span class="line">    b := <span class="number">66</span></span><br><span class="line">    str := fmt.Sprintf(<span class="string">&quot;number is %d&quot;</span>, b)</span><br><span class="line">    fmt.Println(str) <span class="comment">// number is 66</span></span><br><span class="line"></span><br><span class="line">    ip := IPAddr&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    fmt.Println(ip) <span class="comment">// 1.2.3.4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现string接口方法String()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p People)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;(Name:%s,Age:%d)&quot;</span>, p.Name, p.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IPAddr 自定义类型字节数组</span></span><br><span class="line"><span class="keyword">type</span> IPAddr [<span class="number">4</span>]<span class="type">byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现string接口方法String()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ip IPAddr)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="comment">// 字节数组转换成字符串</span></span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%d.%d.%d.%d&quot;</span>, ip[<span class="number">0</span>], ip[<span class="number">1</span>], ip[<span class="number">2</span>], ip[<span class="number">3</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二十二-自定义错误函数">二十二. 自定义错误函数</h3><p>实现error接口中的Error()方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">Error() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 尝试将字符串转换为整数</span></span><br><span class="line">    i, err := strconv.Atoi(<span class="string">&quot;42&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否有错误发生</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="comment">// 如果有错误，打印错误并返回</span></span><br><span class="line">       fmt.Printf(<span class="string">&quot;couldn&#x27;t convert number: %v\n&quot;</span>, err)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有错误，打印转换后的整数</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Converted integer:&quot;</span>, i)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;-------------------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    err2 := doSomething()</span><br><span class="line">    <span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(err2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyError 自定义返回错误类型</span></span><br><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123;</span><br><span class="line">    msg  <span class="type">string</span></span><br><span class="line">    code <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体实现error接口中的Error方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MyError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;msg:%s\ncode:%d&quot;</span>, m.msg, m.code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个返回自定义错误的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;MyError&#123;<span class="string">&quot;something wrong&quot;</span>, <span class="number">100</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二十三-自定义错误返回练习">二十三. 自定义错误返回练习</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sqrt 自定义返回sqrt错误</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="type">float64</span>)</span></span> (<span class="type">float64</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, ErrNegativeSqrt(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(x), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(Sqrt(<span class="number">2</span>))</span><br><span class="line">fmt.Println(Sqrt(<span class="number">-2</span>))</span><br><span class="line">fmt.Println(Sqrt(<span class="number">-24</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ErrNegativeSqrt 自定义错误类型</span></span><br><span class="line"><span class="keyword">type</span> ErrNegativeSqrt <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Error 实现error接口中的Error方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ErrNegativeSqrt)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;cannot Sqrt negative number: %v&quot;</span>, <span class="type">float64</span>(e))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二十四-🔺io-Reader读取内容">二十四.  🔺<code>io.Reader</code>读取内容</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;golang.org/x/tour/reader&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// io reader</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := strings.NewReader(<span class="string">&quot;你好!!!&quot;</span>) <span class="comment">// 字符串读取器 返回一个 io.Reader</span></span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">6</span>)            <span class="comment">// 字节数组 一次读取 6 个字节</span></span><br><span class="line">    <span class="keyword">for</span> &#123;                           <span class="comment">// 循环读取</span></span><br><span class="line">       n, err := r.Read(b)             <span class="comment">// 读取到字节数组 b 中</span></span><br><span class="line">       fmt.Println(<span class="type">string</span>(b[:n]), err) <span class="comment">// 打印读取到的字节数组 - string() 是一个内置函数，它将给定的字节切片转换为对应的字符串。</span></span><br><span class="line">       <span class="keyword">if</span> err == io.EOF &#123;              <span class="comment">// 读取到 EOF表示读取结束</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;--------------------------------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    reader.Validate(MyReader&#123;&#125;) <span class="comment">// 验证 MyReader 是否实现了 io.Reader OK</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;--------------------------------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    my := MyReader&#123;&#125;</span><br><span class="line">    s := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">10</span>)</span><br><span class="line">    read, err := my.Read(s)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(read, err, <span class="type">string</span>(s)) <span class="comment">// 1 &lt;nil&gt; AAAAAAAAAAAA</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyReader <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 MyReader 添加一个 Read([]byte) (int, error) 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r MyReader)</span></span> Read(b []<span class="type">byte</span>) (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> b &#123;</span><br><span class="line">       b[i] = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(b), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二十五-rot13Reader加密算法">二十五. rot13Reader加密算法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// rot13Reader</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rot13Reader 结构体 定义了一个返回一个 io.Reader类型的参数</span></span><br><span class="line"><span class="keyword">type</span> rot13Reader <span class="keyword">struct</span> &#123;</span><br><span class="line">    r io.Reader</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read 实现了 io.Reader 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r rot13Reader)</span></span> Read(b []<span class="type">byte</span>) (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用 r.r.Read(b) 读取数据</span></span><br><span class="line">    n, err := r.r.Read(b)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">// 读取出错</span></span><br><span class="line">       <span class="keyword">return</span> n, err <span class="comment">// 返回错误信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123; <span class="comment">//n=读取的字节数</span></span><br><span class="line">       b[i] = rot13(b[i]) <span class="comment">// 调用 rot13 函数 加密 变为后面第13个字母</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := strings.NewReader(<span class="string">&quot;Lbh penpxrq gur pbqr!&quot;</span>)</span><br><span class="line">    r := rot13Reader&#123;s&#125;</span><br><span class="line">    io.Copy(os.Stdout, &amp;r) <span class="comment">// You cracked the code!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rot13加密算法 函数 返回字母 b 经过 13 位旋转后的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rot13</span><span class="params">(b <span class="type">byte</span>)</span></span> <span class="type">byte</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> b &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; b &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span> + (b-<span class="string">&#x27;A&#x27;</span>+<span class="number">13</span>)%<span class="number">26</span></span><br><span class="line">    <span class="keyword">case</span> b &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; b &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span> + (b-<span class="string">&#x27;a&#x27;</span>+<span class="number">13</span>)%<span class="number">26</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">       <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二十六-Image接口">二十六. Image接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;golang.org/x/tour/pic&quot;</span></span><br><span class="line">    <span class="string">&quot;image&quot;</span></span><br><span class="line">    <span class="string">&quot;image/color&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Image接口</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rgba := image.NewRGBA(image.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)) <span class="comment">// 100x100的RGBA图像</span></span><br><span class="line">    fmt.Println(rgba.Bounds()) <span class="comment">// &#123;0 0 100 100&#125;</span></span><br><span class="line">    fmt.Println(rgba.At(<span class="number">0</span>, <span class="number">0</span>))<span class="comment">// &#123;0 0 0 0&#125;</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;--------------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    image := Image&#123;<span class="number">100</span>, <span class="number">100</span>&#125; <span class="comment">// 100x100的图像</span></span><br><span class="line">    pic.ShowImage(image)<span class="comment">// 显示图像</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Image <span class="keyword">struct</span> &#123;</span><br><span class="line">    width, height <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bounds 方法返回图像的边界 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(img Image)</span></span> Bounds() image.Rectangle &#123;</span><br><span class="line">    <span class="keyword">return</span> image.Rect(<span class="number">0</span>, <span class="number">0</span>, img.width, img.height)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ColorModel 方法返回图像的颜色模型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(img Image)</span></span> ColorModel() color.Model &#123;</span><br><span class="line">    <span class="keyword">return</span> color.RGBAModel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// At 方法返回图像中指定点的颜色</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(img Image)</span></span> At(x, y <span class="type">int</span>) color.Color &#123;</span><br><span class="line">    v := <span class="type">uint8</span>(x + y)</span><br><span class="line">    <span class="keyword">return</span> color.RGBA&#123;R: v, G: v, B: <span class="number">255</span>, A: <span class="number">255</span>&#125; <span class="comment">// 返回一个RGBA颜色 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二十七-🔺GO信道">二十七. 🔺GO信道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 开启一个协程，并将参数传递给协程</span></span><br><span class="line">    <span class="keyword">go</span> say(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    say(<span class="string">&quot;world&quot;</span>) <span class="comment">// 主协程执行完毕后，会立即执行，不会等待协程执行完毕</span></span><br><span class="line"></span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)               <span class="comment">// 声明一个通道 chan int 通道中存放的是int类型的数据</span></span><br><span class="line">    <span class="keyword">go</span> printNumbers(c)                <span class="comment">// 开启一个协程，并将c作为参数传递给协程</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;type:%T, c:%v&quot;</span>, c, c) <span class="comment">//chan int 0xc00005e120</span></span><br><span class="line">    v := &lt;-c                          <span class="comment">// 接收数据 从通道中读取数据，并赋值给v</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num := <span class="keyword">range</span> c &#123; <span class="comment">// 遍历通道中的数据</span></span><br><span class="line">       fmt.Println(<span class="string">&quot;num:&quot;</span>, num)</span><br><span class="line">       fmt.Println(<span class="string">&quot;v:&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">       time.Sleep(<span class="number">500</span> * time.Millisecond) <span class="comment">// 500ms 等待执行完毕</span></span><br><span class="line">       fmt.Println(<span class="string">&quot;say:&quot;</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通道通信</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printNumbers</span><span class="params">(c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">       c &lt;- i <span class="comment">// 发送数据到通道</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(c) <span class="comment">// 关闭通道</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二十八-信道并发计算切片和">二十八. 信道并发计算切片和</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用信道计算和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)                      <span class="comment">// 创建一个信道 c</span></span><br><span class="line">    numbers := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">-9</span>, <span class="number">-8</span>, <span class="number">-9</span>, <span class="number">8</span>&#125; <span class="comment">// 定义一个 int 类型的切片</span></span><br><span class="line">    <span class="keyword">go</span> sum(numbers[:<span class="built_in">len</span>(numbers)/<span class="number">2</span>], c)      <span class="comment">// 启动一个协程，计算切片的前一半的和</span></span><br><span class="line">    <span class="keyword">go</span> sum(numbers[<span class="built_in">len</span>(numbers)/<span class="number">2</span>:], c)      <span class="comment">// 启动一个协程，计算切片的后一半的和</span></span><br><span class="line">    x, y := &lt;-c, &lt;-c                         <span class="comment">// 从 c 中取出两个值 x, y</span></span><br><span class="line">    <span class="built_in">println</span>(x, y, x+y)                       <span class="comment">// 打印 x, y, x+y</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算切片的和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(s []<span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span> <span class="comment">// 定义一个变量 sum</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;<span class="comment">// 遍历切片 s</span></span><br><span class="line">       sum += v</span><br><span class="line">    &#125;</span><br><span class="line">    c &lt;- sum <span class="comment">// 将和送入c 信道</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二十九-带缓冲的通道">二十九. 带缓冲的通道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带缓冲的通道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">5</span>) <span class="comment">// 缓冲区大小为5</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;            <span class="comment">// 开启一个协程</span></span><br><span class="line">       <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">          c &lt;- i</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;() <span class="comment">//()表示立即调用匿名函数</span></span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">2</span> * time.Second) <span class="comment">// 等待2秒</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;--&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">       v := &lt;-c <span class="comment">// 接收数据</span></span><br><span class="line">       <span class="built_in">println</span>(<span class="string">&quot;Received:&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三十-通道计算斐波那契数列">三十. 通道计算斐波那契数列</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>) <span class="comment">// 缓冲区为10</span></span><br><span class="line">    <span class="comment">// 关闭通道后，再往通道中写入数据，会导致panic异常</span></span><br><span class="line">    <span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(c), c) <span class="comment">// 开启一个协程，计算斐波那契数列</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;-----------------&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> c &#123; <span class="comment">// 遍历通道</span></span><br><span class="line">       fmt.Println(i, <span class="string">&quot; &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算斐波那契数列 n为通道的容量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">    fmt.Println(<span class="string">&quot;5s stop&quot;</span>)</span><br><span class="line">    x, y := <span class="number">0</span>, <span class="number">1</span>             <span class="comment">// 初始化斐波那契数列的初始值</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123; <span class="comment">// 循环n次，每次从通道中读取一个数</span></span><br><span class="line">       c &lt;- x        <span class="comment">// 将计算结果写入通道</span></span><br><span class="line">       x, y = y, x+y <span class="comment">// 计算下一个斐波那契数列的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(c) <span class="comment">// 关闭通道</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三十一-select选择通道">三十一. <code>select</code>选择通道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// select 等待多个通道的操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    channel1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>) <span class="comment">// 缓冲区为10</span></span><br><span class="line">    channel2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">    channel3 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">    channel1 &lt;- <span class="number">111</span> <span class="comment">// 向缓冲区中写入数据</span></span><br><span class="line">    channel2 &lt;- <span class="number">222</span> <span class="comment">// 向缓冲区中写入数据</span></span><br><span class="line">    <span class="comment">//close(channel1) // 关闭通道</span></span><br><span class="line">    <span class="comment">//close(channel2) // 关闭通道</span></span><br><span class="line">    msg3 := <span class="number">999</span></span><br><span class="line">    <span class="comment">/* go func() &#123;</span></span><br><span class="line"><span class="comment">       for i := 0; i &lt; 10; i++ &#123;</span></span><br><span class="line"><span class="comment">          channel1 &lt;- i</span></span><br><span class="line"><span class="comment">          channel2 &lt;- -i</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">       close(channel1)</span></span><br><span class="line"><span class="comment">       close(channel2)</span></span><br><span class="line"><span class="comment">    &#125;()*/</span></span><br><span class="line">    <span class="comment">//for c1 := range channel1 &#123;</span></span><br><span class="line">    <span class="comment">// fmt.Println(c1, &quot;  &quot;)</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//for c2 := range channel2 &#123;</span></span><br><span class="line">    <span class="comment">// fmt.Print(c2, &quot; &quot;)</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;--------select---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//time.Sleep(2 * time.Second)</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">       <span class="keyword">select</span> &#123; <span class="comment">// 选择一个可用的通道进行接收操作</span></span><br><span class="line">       <span class="comment">// 布尔值 ok 为 true 表示成功从通道接收到数据，而 false 则表示通道已被关闭且没有更多数据可接收</span></span><br><span class="line">       <span class="keyword">case</span> msg1, ok := &lt;-channel1:</span><br><span class="line">          fmt.Println(<span class="string">&quot;111&quot;</span>, msg1, ok) <span class="comment">// 没有数据可读取就会阻塞不会执行</span></span><br><span class="line">       <span class="keyword">case</span> msg2, ok := &lt;-channel2:</span><br><span class="line">          fmt.Println(<span class="string">&quot;222&quot;</span>, msg2, ok)</span><br><span class="line">       <span class="keyword">case</span> channel3 &lt;- msg3:</span><br><span class="line">          fmt.Println(<span class="string">&quot;send:&quot;</span>, msg3)</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">          fmt.Println(<span class="string">&quot;No channel is ready&quot;</span>)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>斐波那契数列</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)    <span class="comment">// 只能存储一个数据 int 没有缓冲</span></span><br><span class="line">    quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>) <span class="comment">// 只能存储一个数据</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">       <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">          c &lt;- i <span class="comment">// 向 c 写入数据</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">close</span>(c)</span><br><span class="line">    &#125;() <span class="comment">// 启动一个协程，从 c 读取数据 匿名函数 立即启动</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">       <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">          fmt.Print(&lt;-c, <span class="string">&quot; &quot;</span>) <span class="comment">// 从 c 读取数据</span></span><br><span class="line">       &#125;</span><br><span class="line">       quit &lt;- <span class="number">0</span> <span class="comment">// 向 quit 写入数据</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    fibonacci2(c, quit)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契数列</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci2</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123; <span class="comment">// 接收两个通道参数</span></span><br><span class="line">    x, y := <span class="number">0</span>, <span class="number">1</span> <span class="comment">// 初始化 x, y</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">       <span class="keyword">select</span> &#123; <span class="comment">// 选择一个可用的通道进行接收操作</span></span><br><span class="line">       <span class="keyword">case</span> c &lt;- x: <span class="comment">// 向 c 写入数据</span></span><br><span class="line">          x, y = y, x+y <span class="comment">// 计算下一个斐波那契数列的值</span></span><br><span class="line">       <span class="keyword">case</span> &lt;-quit:</span><br><span class="line">          fmt.Println(<span class="string">&quot;quit 程序结束&quot;</span>)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三十二-定时器通道">三十二. 定时器通道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个定时器，每隔100毫秒触发一次回调函数 每隔 100 毫秒发送当前时间的值到 tick 通道。</span></span><br><span class="line">    tick := time.Tick(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">    <span class="comment">// 创建一个定时器，在 500 毫秒后触发一次回调函数，在 500 毫秒后发送当前时间的值到 boom 通道。</span></span><br><span class="line">    boom := time.After(<span class="number">500</span> * time.Millisecond)</span><br><span class="line">    <span class="keyword">for</span> &#123; <span class="comment">// for &#123; ... &#125;: 这是一个无限循环，用于不断检查 tick 和 boom 通道。</span></span><br><span class="line">       <span class="keyword">select</span> &#123; <span class="comment">// 选择一个通道，当该通道有值时，执行对应的代码。</span></span><br><span class="line">       <span class="keyword">case</span> &lt;-tick:</span><br><span class="line">          fmt.Println(<span class="string">&quot;tick:&quot;</span>, &lt;-tick)</span><br><span class="line">       <span class="keyword">case</span> &lt;-boom:</span><br><span class="line">          fmt.Println(<span class="string">&quot;boom&quot;</span>)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">          fmt.Println(<span class="string">&quot;    .&quot;</span>)</span><br><span class="line">          time.Sleep(<span class="number">50</span> * time.Millisecond)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//for &#123;</span></span><br><span class="line">    <span class="comment">// fmt.Println(&lt;-tick)</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三十三-🔺等价二叉树比较">三十三.  🔺等价二叉树比较</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;golang.org/x/tour/tree&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树查找比较 等价二叉查找树</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t1 := tree.New(<span class="number">1</span>)         <span class="comment">// 返回树结构</span></span><br><span class="line">    t2 := tree.New(<span class="number">1</span>)         <span class="comment">// 返回树结构</span></span><br><span class="line">    b := compare(t1, t2)      <span class="comment">// 二叉树比较 等价二叉查找树</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;t1==t2:&quot;</span>, b) <span class="comment">// t1==t2: true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Walk 二叉树遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Walk</span><span class="params">(t *tree.Tree, ch <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> t == <span class="literal">nil</span> &#123; <span class="comment">// 空树 没有叶子节点</span></span><br><span class="line">       <span class="keyword">return</span> <span class="comment">// 递归函数结束条件</span></span><br><span class="line">    &#125;</span><br><span class="line">    Walk(t.Left, ch)  <span class="comment">// 左子树先序遍历</span></span><br><span class="line">    ch &lt;- t.Value     <span class="comment">// 根节点值传递 放入 ch 管道</span></span><br><span class="line">    Walk(t.Right, ch) <span class="comment">// 右子树后序遍历</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compare 二叉树比较 等价二叉查找树</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(t1, t2 *tree.Tree)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>) <span class="comment">// 管道 传递数据 无缓冲默认1，按顺序传递数据</span></span><br><span class="line">    c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> Walk(t1, c1)           <span class="comment">// 协程 协同执行 并行执行</span></span><br><span class="line">    <span class="keyword">go</span> Walk(t2, c2)           <span class="comment">// 协程 协同执行 并行执行</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123; <span class="comment">// 循环 10 次 10 条数据</span></span><br><span class="line">       x, y := &lt;-c1, &lt;-c2</span><br><span class="line">       fmt.Println(x, y) <span class="comment">// 打印 10 条数据</span></span><br><span class="line">       <span class="keyword">if</span> x != y &#123;       <span class="comment">// 循环结束条件</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 二叉树不等价 等价二叉查找树</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 二叉树等价 等价二叉查找树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三十四-🔺互斥锁">三十四.  🔺互斥锁</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 互斥锁的计数器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 并发安全的计数器</span></span><br><span class="line">    counter := SafeCounter&#123;v: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++ &#123;</span><br><span class="line">       <span class="keyword">go</span> counter.Increment(<span class="string">&quot;somekey&quot;</span>) <span class="comment">// 并发安全的计数器 Increment方法 调用1000次</span></span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(time.Second) <span class="comment">// 等待计数器完成 1s</span></span><br><span class="line">    fmt.Println(counter.Value(<span class="string">&quot;somekey&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SafeCounter 互斥锁的计数器</span></span><br><span class="line"><span class="keyword">type</span> SafeCounter <span class="keyword">struct</span> &#123;</span><br><span class="line">    v   <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> <span class="comment">// 共享变量</span></span><br><span class="line">    mux sync.Mutex     <span class="comment">// 互斥锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Increment 增加计数器的值 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span></span> Increment(key <span class="type">string</span>) &#123;</span><br><span class="line">    c.mux.Lock()   <span class="comment">// 加锁</span></span><br><span class="line">    c.v[key]++     <span class="comment">// 增加计数器的值</span></span><br><span class="line">    c.mux.Unlock() <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value 返回计数器的值 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span></span> Value(key <span class="type">string</span>) <span class="type">int</span> &#123;</span><br><span class="line">    c.mux.Lock() <span class="comment">// 加锁</span></span><br><span class="line">    <span class="comment">// lock后同一时刻只有一个goroutine访问c.v[key]</span></span><br><span class="line">    <span class="keyword">defer</span> c.mux.Unlock() <span class="comment">// 解锁 defer语句在函数执行完毕后执行</span></span><br><span class="line">    <span class="keyword">return</span> c.v[key]      <span class="comment">// 返回计数器的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三十五-模拟爬虫">三十五. 模拟爬虫</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟并行抓取</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fetcher 是一个接口，用于从一个 URL 下载内容。</span></span><br><span class="line"><span class="keyword">type</span> Fetcher <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// Fetch 返回 URL 的 body 内容，并且将在这个页面上找到的 URL 放到一个 slice 中。</span></span><br><span class="line">    Fetch(url <span class="type">string</span>) (body <span class="type">string</span>, urls []<span class="type">string</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Crawl 使用 fetcher 从某个 URL 开始递归的爬取页面，直到达到最大深度。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Crawl</span><span class="params">(url <span class="type">string</span>, depth <span class="type">int</span>, fetcher Fetcher)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> depth &lt;= <span class="number">0</span> &#123;</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    body, urls, err := fetcher.Fetch(url)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(err)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;found: %s %q\n&quot;</span>, url, body)</span><br><span class="line">    <span class="keyword">for</span> _, u := <span class="keyword">range</span> urls &#123;</span><br><span class="line">       Crawl(u, depth<span class="number">-1</span>, fetcher)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fakeFetcher 是返回若干结果的 Fetcher。</span></span><br><span class="line"><span class="keyword">type</span> fakeFetcher <span class="keyword">map</span>[<span class="type">string</span>]*fakeResult</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> fakeResult <span class="keyword">struct</span> &#123;</span><br><span class="line">    body <span class="type">string</span></span><br><span class="line">    urls []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f fakeFetcher)</span></span> Fetch(url <span class="type">string</span>) (<span class="type">string</span>, []<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> res, ok := f[url]; ok &#123;</span><br><span class="line">       <span class="keyword">return</span> res.body, res.urls, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;not found: %s&quot;</span>, url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetcher 是填充后的 fakeFetcher。</span></span><br><span class="line"><span class="keyword">var</span> fetcher = fakeFetcher&#123;</span><br><span class="line">    <span class="string">&quot;https://golang.org/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">       <span class="string">&quot;The Go Programming Language&quot;</span>,</span><br><span class="line">       []<span class="type">string</span>&#123;</span><br><span class="line">          <span class="string">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class="line">          <span class="string">&quot;https://golang.org/cmd/&quot;</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;https://golang.org/pkg/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">       <span class="string">&quot;Packages&quot;</span>,</span><br><span class="line">       []<span class="type">string</span>&#123;</span><br><span class="line">          <span class="string">&quot;https://golang.org/&quot;</span>,</span><br><span class="line">          <span class="string">&quot;https://golang.org/cmd/&quot;</span>,</span><br><span class="line">          <span class="string">&quot;https://golang.org/pkg/fmt/&quot;</span>,</span><br><span class="line">          <span class="string">&quot;https://golang.org/pkg/os/&quot;</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;https://golang.org/pkg/fmt/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">       <span class="string">&quot;Package fmt&quot;</span>,</span><br><span class="line">       []<span class="type">string</span>&#123;</span><br><span class="line">          <span class="string">&quot;https://golang.org/&quot;</span>,</span><br><span class="line">          <span class="string">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;https://golang.org/pkg/os/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">       <span class="string">&quot;Package os&quot;</span>,</span><br><span class="line">       []<span class="type">string</span>&#123;</span><br><span class="line">          <span class="string">&quot;https://golang.org/&quot;</span>,</span><br><span class="line">          <span class="string">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并行抓取</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">crawlURLs</span><span class="params">(urls []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line">    <span class="keyword">for</span> _, url := <span class="keyword">range</span> urls &#123;</span><br><span class="line">       Crawl(url, <span class="number">3</span>, fetcher)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    urls := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> url := <span class="keyword">range</span> fetcher &#123;</span><br><span class="line">       urls = <span class="built_in">append</span>(urls, url)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> crawlURLs(urls)</span><br><span class="line"></span><br><span class="line">    Crawl(<span class="string">&quot;https://golang.org/&quot;</span>, <span class="number">4</span>, fetcher)</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go语言GMP模式介绍以及协程案例展示</title>
      <link href="/posts/49506580.html"/>
      <url>/posts/49506580.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-MPG模式">一. MPG模式</h2><p>Go语言的调度模型被称为GMP，这是一个高效且复杂的调度系统，用于在可用的物理线程上调度goroutines（Go的轻量级线程）。GMP模型由三个主要组件构成：Goroutine、M（机器）和P（处理器）。下面详细介绍这三个组件以及它们如何协同工作。</p><h3 id="1-Goroutine（G）">1. Goroutine（G）</h3><ul><li><strong>Goroutine</strong> 是Go语言中的一个基本概念，类似于线程，但比线程更轻量。Goroutines在Go的运行时环境中被调度和管理，而非操作系统。</li><li>Goroutines非常轻量，启动快，且切换开销小。这是因为它们有自己的栈，这个栈可以根据需要动态增长和缩减。</li></ul><h3 id="2-Machine（M）">2. Machine（M）</h3><ul><li><strong>M</strong> 代表了真正的操作系统线程。每个M都由操作系统调度，并且拥有一个固定大小的内存栈用于执行C代码。</li><li>M负责执行Goroutines的代码。Go的运行时会尽量复用M，以减少线程的创建和销毁带来的开销。</li></ul><h3 id="3-Processor（P）">3. Processor（P）</h3><ul><li><strong>P</strong> 是Go运行时的一个资源，可以看作是执行Goroutines所需的上下文环境。P的数量决定了系统同时运行Goroutines的最大数量。</li><li>每个P都有一个本地的运行队列，用于存放待运行的Goroutines。</li><li>P的数量一般设置为等于机器的逻辑处理器数量，以充分利用多核的优势。</li></ul><h3 id="MPG-工作方式">MPG 工作方式</h3><ul><li>在程序启动时，Go运行时会根据可用的核心数创建一定数量的P。</li><li>每个P都会与一个M绑定在一起，这个M会从P的本地运行队列中取出一个G来执行。</li><li>当Goroutine阻塞时（比如等待I/O），执行它的M会被解绑，并且该Goroutine会被移动到全局队列或者等待队列中，让其他M可以接管这个P并继续执行其他Goroutines。</li><li>如果所有的M都阻塞了，运行时会创建额外的M来保证至少有一个M是非阻塞的，以继续执行Goroutines。</li></ul><h3 id="调度优势">调度优势</h3><ul><li>Go调度器的设计使得成千上万的Goroutines能够在数量较少的线程（M）上高效运行，这极大地减少了上下文切换的开销。</li><li>Go的调度器是协作式的，这意味着Goroutines需要自己释放控制权。通常，这发生在显式的阻塞操作（如I/O操作）或者隐式的调度点（如函数调用）时。</li></ul><h2 id="二-互斥锁实现阶乘计算">二.互斥锁实现阶乘计算</h2><h3 id="1-代码">1.代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多协程计算阶乘</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    myMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>) <span class="comment">// 全局变量</span></span><br><span class="line">    mu    sync.Mutex          <span class="comment">// 安全访问myMap</span></span><br><span class="line">    wg    sync.WaitGroup      <span class="comment">// 等待所有协程完成</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 开启协程</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">       wg.Add(<span class="number">1</span>)</span><br><span class="line">       <span class="keyword">go</span> factorial(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待所有协程完成后再打印</span></span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历myMap并打印结果</span></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> myMap &#123;</span><br><span class="line">       fmt.Println(i, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">factorial</span><span class="params">(n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    res := <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算阶乘</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">       res *= i</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递延地减少WaitGroup计数器</span></span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在修改myMap之前进行互斥锁操作</span></span><br><span class="line">    mu.Lock()</span><br><span class="line">    myMap[n] = res</span><br><span class="line">    mu.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-MPG模型解释">2.MPG模型解释</h3><p>Go语言的并发模型被称为MPG模型，其中：</p><ul><li><strong>M</strong> 代表机器（Machine），是对操作系统线程的抽象。</li><li><strong>P</strong> 代表处理器（Processor），是对M进行调度的上下文。</li><li><strong>G</strong> 代表Goroutine，是Go的轻量级线程，它在M上执行。</li></ul><p>当一个Go程序运行时：</p><ol><li><strong>Goroutines（G）</strong> 在**Processors（P）**上被调度。每个P都绑定到一个M（操作系统线程），但一个P可以调度多个G。</li><li>在这段代码中，当<code>main</code>函数启动多个goroutines时，这些G被分配到不同的P上，并且可能在不同的M上执行。</li><li>当一个G在执行阶乘计算时，如果它需要等待（例如，等待互斥锁），它会被P挂起，并且P会转而执行另一个G。</li><li>一旦所有的G都执行完毕（即<code>wg.Wait()</code>返回），程序进入最后阶段，遍历并打印<code>myMap</code>中存储的结果。</li></ol><h3 id="3-管道channel基本概念">3.管道channel基本概念</h3><h4 id="创建管道">创建管道</h4><ul><li>使用<code>make</code>关键字创建管道。可以创建有缓冲的管道或无缓冲的管道。</li><li>示例：<code>ch := make(chan int)</code> 创建一个传递整型数据的无缓冲管道。</li><li><strong>无缓冲管道</strong>：这种管道没有存储空间，因此发送操作（<code>ch &lt;- v</code>）会阻塞，直到另一端有goroutine准备好接收（<code>&lt;-ch</code>）。无缓冲管道确保同时只有一个数据在通道中传递，它强制发送者和接收者同步交换数据。</li><li><strong>有缓冲管道</strong>：这种管道有一个指定的容量，允许在接收者准备好接收之前存储有限数量的值。如果管道满了（即达到其容量限制），发送操作将阻塞；如果管道为空，接收操作将阻塞。有缓冲管道提供了一定程度的松耦合，允许发送者和接收者在缓冲区不满和不空的情况下独立操作。</li></ul><h4 id="发送和接收数据">发送和接收数据</h4><ul><li>使用箭头操作符（<code>&lt;-</code>）来发送和接收数据。</li><li>示例：<code>ch &lt;- v</code> 表示将值<code>v</code>发送到管道<code>ch</code>，<code>v := &lt;-ch</code> 表示从管道<code>ch</code>接收值并赋给变量<code>v</code>。</li></ul><h4 id="无缓冲与有缓冲">无缓冲与有缓冲</h4><ul><li>无缓冲管道：发送操作会阻塞，直到另一端有goroutine进行接收操作。</li><li>有缓冲管道：只有当缓冲区满时发送操作才会阻塞，只有当缓冲区空时接收操作才会阻塞。</li></ul><h4 id="使用场景">使用场景</h4><ul><li><strong>同步</strong>：管道可用于不同goroutines之间的同步。</li><li><strong>数据共享</strong>：通过管道安全地在goroutines之间传递数据，防止竞争条件。</li><li><strong>流程控制</strong>：通过有缓冲管道控制处理速度和压力。</li></ul><h4 id="重要特性">重要特性</h4><ul><li><p><strong>安全性</strong>：管道在内部实现了必要的同步机制，因此在多个goroutines访问时是安全的。</p></li><li><p><strong>阻塞性</strong>：无缓冲管道在发送或接收时会阻塞，直到另一端准备好。</p></li><li><p><strong>关闭管道</strong>：</p></li><li><p>使用<code>close</code>函数关闭管道。</p></li><li><p>关闭管道后，不能再向管道发送数据，但仍可以接收管道中已存在的数据。</p></li><li><p>尝试向已关闭的管道发送数据会引发panic。</p></li><li><p><strong>范围循环</strong>：可以使用<code>for range</code>循环从管道接收数据，直到管道被关闭。</p></li></ul><h4 id="注意事项">注意事项</h4><ul><li><strong>死锁</strong>：如果不正确使用管道，特别是在管道操作之间没有适当的同步时，可能导致死锁。</li><li><strong>资源管理</strong>：应确保在不再需要时关闭管道，以避免内存泄漏。</li></ul><h3 id="4-管道channel实现阶乘计算">4.管道channel实现阶乘计算</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ch  = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>) <span class="comment">// FIFO 队列 first in first out 线程安全</span></span><br><span class="line">wg2 sync.WaitGroup   <span class="comment">// 用于等待所有goroutine完成</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 添加WaitGroup的计数</span></span><br><span class="line">wg2.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> calChannel(i)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">wg2.Wait() <span class="comment">// 等待所有goroutine完成</span></span><br><span class="line"><span class="built_in">close</span>(ch)  <span class="comment">// 关闭通道</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 启动一个新的goroutine来打印管道中的值</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calChannel</span><span class="params">(n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg2.Done() <span class="comment">// 在函数退出时通知WaitGroup</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过通道计算阶乘</span></span><br><span class="line">res := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res *= i</span><br><span class="line">&#125;</span><br><span class="line">ch &lt;- res</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三-interface-类型">三. interface{}类型</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">3</span>)</span><br><span class="line">    ch &lt;- <span class="number">88</span></span><br><span class="line">    ch &lt;- <span class="string">&quot;i am god&quot;</span></span><br><span class="line">    cat := Cat&#123;Name: <span class="string">&quot;小花猫&quot;</span>, Age: <span class="number">4</span>&#125;</span><br><span class="line">    ch &lt;- cat</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 丢弃管道中的值</span></span><br><span class="line">    &lt;-ch</span><br><span class="line">    &lt;-ch</span><br><span class="line">    v := &lt;-ch</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T&quot;</span>, v)</span><br><span class="line">    fmt.Println()</span><br><span class="line">    <span class="comment">// 需要类型断言 ∵从管道中取出的值类型实际是interface&#123;&#125;类型 只有空接口类型才可以类型断言</span></span><br><span class="line">    val := v.(Cat)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v&quot;</span>, val.Name)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go实现判断20000数据范围内哪些是素数（只能被1和它本身整除的数）,采用多协程和管道实现</title>
      <link href="/posts/a6c3c701.html"/>
      <url>/posts/a6c3c701.html</url>
      
        <content type="html"><![CDATA[<p>实现一个并发程序，用于寻找 20000 以内的所有素数。使用了 Goroutines 和 Channels 来分发和处理任务，并通过 WaitGroup（实现为 <code>exitChan</code>）来同步 Goroutines 的退出。</p><h2 id="一-GO代码">一.GO代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断20000数据范围内哪些是素数（只能被1和它本身整除的数） 开启4个协程完成 采用管道同步通信 sync.WaitGroup</span></span><br><span class="line"><span class="comment">// WaitGroup 通常用于当只需要知道一组 Goroutines 何时结束，而不需要它们之间通信的场景</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建用于保存待检查数字的通道</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 创建用于保存素数结果的通道</span></span><br><span class="line">primeChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="comment">// 创建用于协调 Goroutines 退出的通道</span></span><br><span class="line">exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">4</span>) <span class="comment">// 协程数量并不是越多越快 根据CPU核数改变充分利用CPU性能</span></span><br><span class="line"><span class="comment">// 开始时间 时间戳</span></span><br><span class="line"><span class="comment">//startTime := time.Now().Unix()</span></span><br><span class="line">startTime := time.Now()</span><br><span class="line"><span class="comment">// 开启一个 Goroutine 向 intChan 写入数据</span></span><br><span class="line"><span class="keyword">go</span> putNum(intChan)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启 8 个 Goroutines 从 intChan 读取数据并判断是否为素数</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">cap</span>(exitChan); i++ &#123;</span><br><span class="line"><span class="keyword">go</span> primeNum(intChan, primeChan, exitChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启一个匿名 Goroutine 等待所有 primeNum Goroutines 完成</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">cap</span>(exitChan); i++ &#123;</span><br><span class="line">&lt;-exitChan <span class="comment">// 等待每个 primeNum Goroutine 的退出信号</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结束时间</span></span><br><span class="line">useTime := time.Now().Sub(startTime)</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------------所用时间：------------------------&quot;</span>, useTime) <span class="comment">// 所用时间： 3.1556ms</span></span><br><span class="line"><span class="built_in">close</span>(primeChan)                                                       <span class="comment">// 所有 primeNum Goroutines 完成后关闭 primeChan</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 primeChan 中读取并打印素数结果</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">//prime, ok := &lt;-primeChan</span></span><br><span class="line">_, ok := &lt;-primeChan</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// 如果 primeChan 被关闭，则退出循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fmt.Println(&quot;素数：&quot;, prime)</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;主线程退出！！！！！！！！！！&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// putNum 函数：向 intChan 中写入数字</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">putNum</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">20000</span>; i++ &#123;</span><br><span class="line">intChan &lt;- i <span class="comment">// 将数字 1 到 20000 写入 intChan</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(intChan) <span class="comment">// 写入完成后关闭 intChan</span></span><br><span class="line">fmt.Println(<span class="string">&quot;向intChan写入2000条数据完成&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// primeNum 函数：从 intChan 中读取数字并判断是否为素数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">primeNum</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>, primeChan <span class="keyword">chan</span> <span class="type">int</span>, exitChan <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">num, ok := &lt;-intChan <span class="comment">// 从 intChan 中读取数据</span></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;其中一个协程数据处理完毕~~~&quot;</span>)</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// 如果 intChan 被关闭，则退出循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断读取的数字是否为素数</span></span><br><span class="line"><span class="keyword">if</span> isPrime(num) &#123;</span><br><span class="line">primeChan &lt;- num <span class="comment">// 如果是素数，将其发送到 primeChan</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">exitChan &lt;- <span class="literal">true</span> <span class="comment">// 发送退出信号到 exitChan</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// isPrime 函数：判断一个数是否为素数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPrime</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 1 不是素数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i*i &lt;= n; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> n%i == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 如果 n 能被除了 1 和它本身以外的数整除，则不是素数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 如果不能被任何数整除，则是素数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-管道只读和只写">二.管道只读和只写</h2><p>在 Go 语言中，通道（Channel）是用于在不同的 Goroutines 之间传递数据的一种方式。通道可以是双向的，也可以是单向的。单向通道分为只读和只写通道。这种区分有助于提高程序的类型安全性和清晰性。</p><h3 id="1-只读通道（Receive-Only-Channel）">1.只读通道（Receive-Only Channel）</h3><p>只读通道是一种只能从中接收数据的通道。在函数参数中使用只读通道可以确保该函数不会意外地向通道发送数据。</p><p>声明只读通道的方式是：<code>&lt;-chan DataType</code>。</p><h3 id="2-只写通道（Send-Only-Channel）">2.只写通道（Send-Only Channel）</h3><p>只写通道是一种只能向其发送数据的通道。在函数参数中使用只写通道可以确保该函数不会意外地从通道读取数据。</p><p>声明只写通道的方式是：<code>chan&lt;- DataType</code>。</p><h3 id="3-示例">3.示例</h3><p>下面是一个简单的例子，展示了如何使用只读和只写通道：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">goCopy codepackage main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该函数接收一个只写通道参数，只能向该通道发送数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendOnly</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">ch &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(ch) <span class="comment">// 发送完数据后关闭通道</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该函数接收一个只读通道参数，只能从该通道读取数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">receiveOnly</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Received:&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> sendOnly(ch)       <span class="comment">// 启动一个 Goroutine 向通道发送数据</span></span><br><span class="line">receiveOnly(ch)       <span class="comment">// 在主 Goroutine 中从通道接收数据</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li><code>sendOnly</code> 函数有一个只写通道参数，它向该通道发送一系列整数，然后关闭通道。</li><li><code>receiveOnly</code> 函数有一个只读通道参数，它从该通道接收并打印数据，直到通道被关闭。</li><li>在 <code>main</code> 函数中，我们创建了一个双向通道 <code>ch</code>，然后启动 <code>sendOnly</code> 函数在一个新的 Goroutine 中运行，并在主 Goroutine 中调用 <code>receiveOnly</code> 函数</li></ul><p><img src="../blog/coderyeah/source/_posts/img/image-20240118170022894.png" alt="image-20240118170022894"></p><h2 id="三-select的应用介绍">三.select的应用介绍</h2><p>在 Go 语言中，<code>select</code> 语句是一种处理多个通道（Channel）的方式。它可以监听多个通道上的发送和接收操作，并且当任何一个通道准备就绪时，<code>select</code> 就会执行该操作。如果多个通道同时就绪，<code>select</code> 将随机选择一个执行。<code>select</code> 语句是非阻塞的，它可以与 Go 的并发特性结合，实现高效的任务处理和通信。</p><h3 id="1-基本语法">1.基本语法</h3><p><code>select</code> 语句的基本语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-chan1:</span><br><span class="line">    <span class="comment">// 执行通道 chan1 上的接收操作</span></span><br><span class="line"><span class="keyword">case</span> chan2 &lt;- value:</span><br><span class="line">    <span class="comment">// 向通道 chan2 发送值 value</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// 如果以上都没有准备就绪，则执行默认操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-示例">2.示例</h3><ul><li><p>启动多个协程，每个协程向各自的通道发送数据。</p></li><li><p>使用 <code>select</code> 语句来接收不同协程的数据，同时监控超时情况和程序结束信号。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendData</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="type">int</span>, id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟随机的发送间隔</span></span><br><span class="line">        time.Sleep(time.Duration(rand.Intn(<span class="number">3</span>)) * time.Second)</span><br><span class="line">        ch &lt;- id</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建两个通道</span></span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个超时通道</span></span><br><span class="line">    timeout := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个结束信号的通道</span></span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动协程发送数据</span></span><br><span class="line">    <span class="keyword">go</span> sendData(ch1, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> sendData(ch2, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动一个协程来控制超时</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(<span class="number">5</span> * time.Second) <span class="comment">// 设置超时时间为5秒</span></span><br><span class="line">        timeout &lt;- <span class="literal">true</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 select 处理不同的情况</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg := &lt;-ch1:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;Received from ch1: %d\n&quot;</span>, msg)</span><br><span class="line">        <span class="keyword">case</span> msg := &lt;-ch2:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;Received from ch2: %d\n&quot;</span>, msg)</span><br><span class="line">        <span class="keyword">case</span> &lt;-timeout:</span><br><span class="line">            fmt.Println(<span class="string">&quot;Operation timed out!&quot;</span>)</span><br><span class="line">            done &lt;- <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">case</span> &lt;-done:</span><br><span class="line">            fmt.Println(<span class="string">&quot;Program ended!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>有两个数据发送协程，每个协程向其通道 <code>ch1</code> 和 <code>ch2</code> 发送一个唯一的标识符。</li><li>设置了一个超时协程，如果在5秒内没有完成操作，则向 <code>timeout</code> 通道发送一个信号。</li><li>在 <code>main</code> 函数的 <code>select</code> 语句中，我们监听四种情况：从 <code>ch1</code> 接收数据、从 <code>ch2</code> 接收数据、超时和结束程序。</li><li>一旦超时发生，我们向 <code>done</code> 通道发送一个信号并结束程序。</li></ul></li></ul><h2 id="四-recover">四.recover</h2><p>在 Go 中，协程（Goroutines）是轻量级的线程，用于并发执行任务。当<strong>一个协程</strong>因为 panic 而异常中断时，它不会影响其他协程的运行，但是如果 panic 没有被捕获（recover），它会导致整个程序崩溃。因此，在协程中合理使用 <code>recover</code> 是处理 panic 的一种有效方法。每个协程都应该独立地处理它们自己的 panic。这意味着你应该在每个可能产生 panic 的协程中使用 <code>recover</code>。<code>recover</code> 需要在 <strong>defer</strong> 函数中使用，因为只有在延迟函数中它才能捕获到协程的 panic。</p><h3 id="1-示例">1.示例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 启动多个协程</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> safeGoroutine(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待足够长的时间以确保协程执行</span></span><br><span class="line">    time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">    fmt.Println(<span class="string">&quot;主程序结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">safeGoroutine</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;协程 %d 捕获到 panic: %v\n&quot;</span>, id, r)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里是协程可能会触发 panic 的地方</span></span><br><span class="line">    <span class="keyword">if</span> id == <span class="number">1</span> &#123; <span class="comment">// 假设只有 id 为 1 的协程会触发 panic</span></span><br><span class="line">        <span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;协程 %d 发生 panic&quot;</span>, id))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;协程 %d 执行完毕\n&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>main</code> 函数启动了 3 个协程。</li><li>每个协程都调用了 <code>safeGoroutine</code> 函数，在这个函数中，我们使用 <code>defer</code> 和 <code>recover</code> 来捕获并处理可能发生的 panic。</li><li>如果在协程中发生 panic，<code>recover</code> 会捕获到它，并允许协程优雅地处理 panic，而不是使整个程序崩溃。</li></ul><h3 id="2-位置">2.位置</h3><p>将 <code>defer func() &#123; ... &#125;()</code> 放在函数中的最上面是一种最佳实践。</p><ul><li><strong>确保覆盖整个函数：</strong> 将 <code>defer</code> 放在函数开始处可以确保无论 panic 在函数的哪个部分发生，<code>defer</code> 代码块都将被执行。这意味着，无论是由于哪个操作引发的 panic，都会被 <code>defer</code> 中的 <code>recover</code> 捕获和处理。</li><li><strong>防止遗漏 panic：</strong> 如果将 <code>defer</code> 放在函数中间或末尾，那么在 <code>defer</code> 之前的代码如果发生了 panic，<code>recover</code> 将无法捕获到这个 panic，因为 <code>defer</code> 语句本身还没有被执行。</li><li><strong>逻辑清晰：</strong> 将 <code>defer</code> 放在函数开头，可以让读代码的人立即知道这个函数有处理 panic 的逻辑，这使得代码的逻辑更清晰、更易于理解。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>fastDfs图片访问格式和Freemarker模板引擎的使用</title>
      <link href="/posts/e61860c5.html"/>
      <url>/posts/e61860c5.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-fastDfs图片访问介绍">一. fastDfs图片访问介绍</h3><ul><li><p>介绍</p><p><code>fastDfs</code><strong>分布式文件存储服务器</strong>中可以设置图片的不同尺寸，这样就一张图片就不需要因为尺寸不同而上传多张尺寸不同内容一样的图片。但是上传的时候就要上传大图或原图，根据后缀可以显示不同的尺寸。<code>fastDfs</code>会自动帮助我们转换成不同的尺寸。</p></li><li><p>原图或大图建议尺寸800x800 - 可以实现物品详情页面放大镜功能：</p><p><code>http://123.207.27.208/group1/M00/00/72/rBEAA2BHi8OALsmkAAuQph4FcRE527.png</code></p></li><li><p>封面350x350 - 分页列表显示的封面【分页列表本身有样式，所以这里后缀可以省略】:</p><p><code>http://123.207.27.208/group1/M00/00/72/rBEAA2BHi8OALsmkAAuQph4FcRE527.png_350x350</code></p></li><li><p>中图430x430 - 详情页面的封面:</p><p><code>http://123.207.27.208/group1/M00/00/72/rBEAA2BHi8OALsmkAAuQph4FcRE527.png_430x430</code></p></li><li><p>小图60x60 - 详情页面的小图:</p><p><code>http://123.207.27.208/group1/M00/00/72/rBEAA2BHi8OALsmkAAuQph4FcRE527.png_60x60</code></p></li></ul><h3 id="二-页面静态化">二. 页面静态化</h3><h4 id="1-为什么要做页面静态化">1. 为什么要做页面静态化</h4><p>比如首页，并发比较高，每次访问都要请求后台从Mysql重新查询数据，然后合并数据渲染页面，这个是很消耗服务器性能的，并发高的时候会导致页面反应变慢，服务器压力大，甚至页面访问不到，用户体验极差再加上页面内容也不怎么变，多次查询这个首页看到的内容都是一样，对于如上2种情况，可以做页面静态化。</p><p><strong>总结：页面并发高，页面内容不怎么该变，可以考虑做页面静态化</strong></p><p>ps：主流的大型互联网网站例如淘宝，京东等等都使用了页面静态化技术</p><h4 id="2-什么是页面静态化">2. 什么是页面静态化</h4><p>使用模板引擎【freemarker】生成静态页面html的过程。访问的时候直接返回html，不在需要重新查询数据渲染视图。减少数据库的查询次数，提高了加载效率，提升了用户体验度</p><p>原理就是：使用模板引擎【freemarker】将页面需要的数据 ，和模板事先进行合并，生成一个html</p><h4 id="3-没做页面静态化的页面渲染原理">3. 没做页面静态化的页面渲染原理</h4><p>当访问详情页面的时候，发送请求并传入id查询数据库，然后将响应回来的数据显示出来</p><h4 id="4-页面静态化原理">4. 页面静态化原理</h4><ul><li>在添加或修改的时候，通过当前对象和已经准备好的模板生成静态页面，并且将静态页面的名称保存在数据库中</li><li>当要访问详情页面的时候，直接跳转到之前生成好的静态页面即可，不用查询数据库</li></ul><h3 id="三-什么是FreeMarker">三. 什么是FreeMarker</h3><p>FreeMarker是其中的一款页面静态化技术，它是一款模板引擎： 基于模板和要改变的数据</p><p>全称：FreeMarker Template Language (FTL)，所以FreeMarker 的模板是以.ftl为后缀的</p><p>市面上常见的模板引擎有：FreeMarker、Velocity、JSP、Themeleaf（SpringBoot推荐）</p><h3 id="四-springboot集成FreeMarker">四. springboot集成FreeMarker</h3><h4 id="1-导入依赖">1. 导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-yml配置">2. yml配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line"> <span class="comment">#freemarker</span></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="attr">allow-request-override:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">check-template-location:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">charset:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.ftl</span></span><br><span class="line">    <span class="attr">templateEncoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">templateLoaderPath:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">expose-request-attributes:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">expose-session-attributes:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">expose-spring-macro-helpers:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">templatedir:</span> <span class="string">E:\springboot\pethome\src\main\resources\templates</span></span><br><span class="line"><span class="attr">htmldir:</span> <span class="string">E:\vue-project\vue-pethome\pethome-front-user\pet</span></span><br></pre></td></tr></table></figure><h4 id="3-准备模板">3. 准备模板</h4><p>准备一个html页面，将后缀改成ftl，里面的内容使用EL表达式取值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--价格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tb-detail-price&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;price iteminfo_price&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>促销价<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>¥<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;sys_item_price&quot;</span>&gt;</span>$&#123;saleprice&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span>  <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;price iteminfo_mktprice&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>原价<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>¥<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;sys_item_mktprice&quot;</span>&gt;</span>$&#123;saleprice*1.5&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-测试代码">4. 测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.TemplateException;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.pet.domain.Pet;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.pet.mapper.PetMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/26 19:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = PetHomeApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreemarkerTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PetMapper petMapper;</span><br><span class="line">    <span class="comment">// 注入模板配置</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FreeMarkerConfigurer freeMarkerConfigurer;</span><br><span class="line">    <span class="comment">// 获取配置文件中的值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;templatedir&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String templatedir;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;htmldir&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String htmldir;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TemplateException &#123;</span><br><span class="line">        <span class="comment">// 创建模板技术的核心配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> freeMarkerConfigurer.getConfiguration();</span><br><span class="line">        <span class="comment">// 设置页面中静态内容的编码集</span></span><br><span class="line">        configuration.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 指定模板的加载路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(templatedir);</span><br><span class="line">        <span class="comment">// 设置模板的默认加载路径</span></span><br><span class="line">        configuration.setDirectoryForTemplateLoading(file);</span><br><span class="line">        <span class="comment">// 获取模板对象</span></span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> configuration.getTemplate(<span class="string">&quot;petDetail.ftl&quot;</span>);</span><br><span class="line">        <span class="comment">// 查询一条数据测试</span></span><br><span class="line">        <span class="type">Pet</span> <span class="variable">pet</span> <span class="operator">=</span> petMapper.getPetById(<span class="number">2L</span>);</span><br><span class="line">        <span class="comment">// 待生成的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> System.currentTimeMillis() + <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(htmldir, filename));</span><br><span class="line">        <span class="keyword">final</span> <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        template.process(pet, osw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-使用流程（举例）">五. 使用流程（举例）</h3><ol><li><p>可以在后台系统列表中增加一个“页面静态化”按钮(也可以在新增、编辑的时候操作)</p></li><li><p>编写页面静态化逻辑<br>2.1. 事先准备好页面的模板：/templates/petDetail.ftl<br>2.2. 查询页面所需要的数据<br>2.3. 使用模板引擎合并模板生成html : petDetail_01(宠物ID).html<br>2.4. 把html保存到前端项目中的/views/pet/detail/petDetail_01(宠物ID).html<br>2.5. 把html路径和当前宠物数据绑定(可以在t_pet中添加一个url字段专门用来保存当前宠物的静态页面名称)<br>2.6. 在主站宠物列表点击的超链接指定为 /views/petDetail_01(宠物ID).html即可</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDfs的介绍和使用</title>
      <link href="/posts/68368424.html"/>
      <url>/posts/68368424.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-基本概念">一. 基本概念</h3><p>Fastdfs是用C语言编写的一款开源的分布式文件系统。Fastdfs为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用 Fastdfs很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p><p>Fastdfs架构包括<strong>Tracker server</strong>和<strong>Storage server</strong>。客户端请求Tracker server 进行文件上传、下载，通过 Tracker server 调度,最终由Storage server完成文件上传和下载。</p><p>Tracker server作用是<strong>负载均衡和调度</strong>，通过Tracker server在文件上传时可以根据一些策略找到Storage server 提供文件上传服务。可以将 tracker 称为追踪服务器或调度服务器。</p><h3 id="二-Fastdfs系统结构">二. Fastdfs系统结构</h3><p>Storage作用是文件存储，客户端上传的文件最终存储在Storage服务器上。</p><p>服务端两个角色：</p><ul><li><p>Tracker：作用是负载均衡和调度</p></li><li><p>Storage：作用是文件存储，客户端上传的文件最终存储在 Storage 服务器上</p></li><li><p>客户端上传文件后存储服务器将文件 ID 返回给客户端，此文件 ID 用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。如：<strong>/group1/M00/01/B2/CgAIC2Md0nWAKjOCAAQRef-xdIY168.jpg</strong></p></li><li><p>组名/卷：文件上传后所在的Storage组名称，在文件上传成功后有Storage服务器返回，需要客户端自行保存</p></li><li><p>虚拟磁盘路径：Storage配置的虚拟路径，与磁盘选项 store_path*对应。如果配置了store_path0 则是 M00，如果配置了 store_path1 则是 M01，以此类推</p></li><li><p>数据两级目录：Storage服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件</p></li><li><p>文件名：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：<strong>源存储服务器 IP 地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息</strong></p></li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0. storage会定期向tracker上传当前状态【心跳机制】</span><br><span class="line">1. 客户端发送请求，请求tracker【调度中心】</span><br><span class="line">2. tracker选择哪一个storage能使用，并且返回能用的storage</span><br><span class="line">3. 客户端把上传的附件，上传到storage中去</span><br><span class="line">4. storage会向客户端返回上传文件的路径</span><br></pre></td></tr></table></figure><ul><li>可以使用docker搭建fastdfs文件服务器</li></ul><h3 id="三-使用FastDfs系统">三. 使用FastDfs系统</h3><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--fastdfs--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.bestwu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用来获取文件扩展名的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置文件fdfs_client.conf 到资源文件夹</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tracker_server</span>=<span class="string">123.207.27.208:22122  </span></span><br><span class="line"><span class="comment">#22122是tracker的端口 - 上传</span></span><br><span class="line"><span class="comment">#访问直接使用域名：123.207.27.208</span></span><br></pre></td></tr></table></figure></li><li><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、加载配置文件，配置文件中的内容就是 tracker 服务的地址。</span></span><br><span class="line">ClientGlobal.init(<span class="string">&quot;D:/maven_work/fastDFS-demo/src/fdfs_client.conf&quot;</span>);</span><br><span class="line"><span class="comment">// 2、创建一个 TrackerClient 对象。直接 new 一个。</span></span><br><span class="line"><span class="type">TrackerClient</span> <span class="variable">trackerClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrackerClient</span>();</span><br><span class="line"><span class="comment">// 3、使用 TrackerClient 对象创建连接，获得一个 TrackerServer 对象。</span></span><br><span class="line"><span class="type">TrackerServer</span> <span class="variable">trackerServer</span> <span class="operator">=</span> trackerClient.getConnection();</span><br><span class="line"><span class="comment">// 4、创建一个 StorageServer 的引用，值为 null</span></span><br><span class="line"><span class="type">StorageServer</span> <span class="variable">storageServer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 5、创建一个 StorageClient 对象，需要两个参数 TrackerServer 对象、StorageServer 的引用</span></span><br><span class="line"><span class="type">StorageClient</span> <span class="variable">storageClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StorageClient</span>(trackerServer, storageServer);</span><br><span class="line"><span class="comment">// 6、使用 StorageClient 对象上传图片。</span></span><br><span class="line"><span class="comment">//扩展名不带“.”</span></span><br><span class="line">String[] strings = storageClient.upload_file(<span class="string">&quot;D:/pic/benchi.jpg&quot;</span>, <span class="string">&quot;jpg&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 7、返回数组。包含组名和图片的路径。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">组名：group1</span></span><br><span class="line"><span class="comment">路径: M00/01/B3/CgAIC2Md3KGAGa0xAAALg4Ak6_M929.jpg</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">    System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问上传图片</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.207.27.208/group1/M00/01/B3/CgAIC2Md3KGAGa0xAAALg4Ak6_M929.jpg</span><br></pre></td></tr></table></figure></li></ol><h3 id="四-FastDfsUtils工具类">四. FastDfsUtils工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fastDfs工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastDfsUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从classpath：resources中的内容最终会编译到classpath下</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">CONF_FILENAME</span> <span class="operator">=</span> FastDfsUtils.class.getClassLoader().getResource(<span class="string">&quot;fdfs_client.conf&quot;</span>).getFile();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> extName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">upload</span><span class="params">(<span class="type">byte</span>[] file, String extName)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClientGlobal.init(CONF_FILENAME);</span><br><span class="line"></span><br><span class="line">            <span class="type">TrackerClient</span> <span class="variable">tracker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrackerClient</span>();</span><br><span class="line">            <span class="type">TrackerServer</span> <span class="variable">trackerServer</span> <span class="operator">=</span> tracker.getConnection();</span><br><span class="line">            <span class="type">StorageServer</span> <span class="variable">storageServer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">StorageClient</span> <span class="variable">storageClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StorageClient</span>(trackerServer, storageServer);</span><br><span class="line"></span><br><span class="line">            String fileIds[] = storageClient.upload_file(file, extName, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(fileIds.length);</span><br><span class="line">            System.out.println(<span class="string">&quot;组名：&quot;</span> + fileIds[<span class="number">0</span>]);</span><br><span class="line">            System.out.println(<span class="string">&quot;路径: &quot;</span> + fileIds[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">//  /group1/M00/00/09/rBEACmKXF8-AUc6KAANsldwx3H4713.jpg</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/&quot;</span> + fileIds[<span class="number">0</span>] + <span class="string">&quot;/&quot;</span> + fileIds[<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> extName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">upload</span><span class="params">(String path, String extName)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClientGlobal.init(CONF_FILENAME);</span><br><span class="line"></span><br><span class="line">            <span class="type">TrackerClient</span> <span class="variable">tracker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrackerClient</span>();</span><br><span class="line">            <span class="type">TrackerServer</span> <span class="variable">trackerServer</span> <span class="operator">=</span> tracker.getConnection();</span><br><span class="line">            <span class="type">StorageServer</span> <span class="variable">storageServer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">StorageClient</span> <span class="variable">storageClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StorageClient</span>(trackerServer, storageServer);</span><br><span class="line">            String fileIds[] = storageClient.upload_file(path, extName, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(fileIds.length);</span><br><span class="line">            System.out.println(<span class="string">&quot;组名：&quot;</span> + fileIds[<span class="number">0</span>]);</span><br><span class="line">            System.out.println(<span class="string">&quot;路径: &quot;</span> + fileIds[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/&quot;</span> + fileIds[<span class="number">0</span>] + <span class="string">&quot;/&quot;</span> + fileIds[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] download(String groupName, String fileName) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ClientGlobal.init(CONF_FILENAME);</span><br><span class="line"></span><br><span class="line">            <span class="type">TrackerClient</span> <span class="variable">tracker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrackerClient</span>();</span><br><span class="line">            <span class="type">TrackerServer</span> <span class="variable">trackerServer</span> <span class="operator">=</span> tracker.getConnection();</span><br><span class="line">            <span class="type">StorageServer</span> <span class="variable">storageServer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">StorageClient</span> <span class="variable">storageClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StorageClient</span>(trackerServer, storageServer);</span><br><span class="line">            <span class="type">byte</span>[] b = storageClient.download_file(groupName, fileName);</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String groupName, String fileName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClientGlobal.init(CONF_FILENAME);</span><br><span class="line"></span><br><span class="line">            <span class="type">TrackerClient</span> <span class="variable">tracker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrackerClient</span>();</span><br><span class="line">            <span class="type">TrackerServer</span> <span class="variable">trackerServer</span> <span class="operator">=</span> tracker.getConnection();</span><br><span class="line">            <span class="type">StorageServer</span> <span class="variable">storageServer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">StorageClient</span> <span class="variable">storageClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StorageClient</span>(trackerServer, storageServer);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> storageClient.delete_file(groupName, fileName);</span><br><span class="line">            System.out.println(i == <span class="number">0</span> ? <span class="string">&quot;删除成功&quot;</span> : <span class="string">&quot;删除失败:&quot;</span> + i);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;删除异常,&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">//        FastDfsUtils.delete(&quot;group1&quot;,&quot;M00/00/0F/oYYBAGJ6IGaAWQeOAAbMJw3URKE510.gif&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-文件上传接口">五. 文件上传接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.coderyeah.basic.Result;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.basic.util.FastDfsUtils;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Api(value = &quot;文件的上传和下载接口&quot;, tags = &quot;fastDfs文件上传&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/fastDfs&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastDfsController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * // <span class="doctag">@RequestPart</span> 对复杂表单项的处理，默认name=&quot;file&quot;,与上传文件的name属性值一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;通过fastDfs文件上传到服务器&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping()</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestPart(value = &quot;file&quot;, required = true)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.截取文件后缀名 如png jpg</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2.将图片上传服务器将文件名返回前端</span></span><br><span class="line">            <span class="comment">// /group1/M00/01/B2/CgAIC2Md0nWAKjOCAAQRef-xdIY168.jpg</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">filepath</span> <span class="operator">=</span> FastDfsUtils.upload(file.getBytes(), suffix);</span><br><span class="line">            <span class="keyword">return</span> Result.success(filepath,<span class="literal">null</span>); <span class="comment">// 返回服务器文件路径</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;上传失败！&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除文件&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping()</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam(&quot;path&quot;)</span> String path)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.截取组名  /group1/M00/01/B2/CgAIC2Md0nWAKjOCAAQRef-xdIY168.jpg</span></span><br><span class="line">            <span class="comment">// 1.1临时路径</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">tempPath</span> <span class="operator">=</span> path.substring(<span class="number">1</span>); <span class="comment">// group1/M00/01/B2/CgAIC2Md0nWAKjOCAAQRef-xdIY168.jpg</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">groupName</span> <span class="operator">=</span> tempPath.substring(<span class="number">0</span>, tempPath.indexOf(<span class="string">&quot;/&quot;</span>)); <span class="comment">// group1</span></span><br><span class="line">            System.out.println(tempPath);</span><br><span class="line">            System.out.println(groupName);</span><br><span class="line">            <span class="comment">// 2.远程路径</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">remotePath</span> <span class="operator">=</span> tempPath.substring(tempPath.indexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">            FastDfsUtils.delete(groupName, remotePath);</span><br><span class="line">            <span class="keyword">return</span> Result.success(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;删除失败&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六-上传流程">六. 上传流程</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">前端：</span><br><span class="line">    <span class="number">1</span>.准备<span class="keyword">el</span>-upload上传组件</span><br><span class="line">    <span class="number">2</span>.当我们点击上传按钮的时候，其实是在触发<span class="keyword">el</span>-upload的action</span><br><span class="line">    <span class="number">3</span>.action调用后端接口：http://localhos<span class="variable">t:8080</span>/fastDfs</span><br><span class="line">    <span class="number">4</span>.后端上传成功之后，返回到<span class="keyword">el</span>-upload的:<span class="keyword">on</span>-success=<span class="string">&quot;handleSuccess&quot;</span></span><br><span class="line">    <span class="number">5</span>.在handleSuccess中，将后端返回的resultObj绑定给模型层的logo</span><br><span class="line">后端：</span><br><span class="line">    <span class="number">1</span>.接收请求@RequestPart MultipartFile <span class="keyword">file</span></span><br><span class="line">    <span class="number">2</span>.调用FastDfsUtils完成文件上传得到返回值path</span><br><span class="line">    <span class="number">3</span>.然后将path设置给封装结果类的data传回给前端</span><br></pre></td></tr></table></figure><h3 id="七-文件上传表单项">七. 文件上传表单项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item prop=&quot;logo&quot; label=&quot;店铺Logo&quot;&gt;</span><br><span class="line">  &lt;!--</span><br><span class="line">  :on-preview=&quot;handlePreview&quot; - 点击图片名时触发此函数 - 可以在这里做放大功能，这里不做</span><br><span class="line">  :on-remove=&quot;handleRemove&quot; - 点击删除时触发</span><br><span class="line">  :on-success=&quot;handleSuccess&quot; - 上传成功之后触发</span><br><span class="line">  :file-list=&quot;fileList&quot; - 文件列表</span><br><span class="line">  action=&quot;http://localhost:8080/fastDfs/&quot; - 文件上传接口地址</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;el-upload class=&quot;upload-demo&quot;</span><br><span class="line">             action=&quot;http://localhost:8080/fastDfs/&quot;</span><br><span class="line">             :on-preview=&quot;handlePreview&quot;</span><br><span class="line">             :on-remove=&quot;handleRemove&quot;</span><br><span class="line">             :on-success=&quot;handleSuccess&quot;</span><br><span class="line">             :file-list=&quot;fileList&quot;</span><br><span class="line">             list-type=&quot;picture&quot;&gt;</span><br><span class="line">    &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;点击上传&lt;/el-button&gt;</span><br><span class="line">    &lt;div slot=&quot;tip&quot; class=&quot;el-upload__tip&quot;&gt;只能上传jpg/png文件，且不超过500kb&lt;/div&gt;</span><br><span class="line">  &lt;/el-upload&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure><p>方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件上传的业务逻辑</span></span><br><span class="line"><span class="title function_">handleSuccess</span>(<span class="params">response, file, fileList</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">shop</span>.<span class="property">logo</span> = response.<span class="property">data</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件删除的业务逻辑</span></span><br><span class="line"><span class="title function_">handleRemove</span>(<span class="params">file, fileList</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> filePath = file.<span class="property">response</span>.<span class="property">data</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">delete</span>(<span class="string">&quot;/fastDfs?path=&quot;</span> + filePath)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">success</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;删除成功!&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;删除失败!&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DQMS</title>
      <link href="/posts/eff965f7.html"/>
      <url>/posts/eff965f7.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是dqms">一.什么是dqms</h3><p><strong>数字化质量管理系统</strong>（Digital Quality Management System，简称<strong>DQMS</strong>）通过质量数据自动采集、智能分析、智能预警，将隆基质量管理模式由被动救火转向质量管理前置消除质量风险。</p><h3 id="二-现状">二.现状</h3><p>质量管理模式以质量检验为主，对质量成本也有核算和管控的机制，但这些方面都的<strong>工作模式都较为传统</strong>，基本依靠人的经验和主动性完成，尚未形成<strong>数据驱动</strong>的质量持续改进模式；制造过程相关<strong>数据获取不充分</strong>，进一步限制了数据驱动的质量改进的实施。</p><h3 id="三-FMEA应用">三.FMEA应用</h3><ol><li>FMEA(Failure Mode and Effect Analysis,失效模式和影响分析)是一种用来确定潜在失效模式及其原因的<strong>分析方法</strong>。</li><li>通过实行FMEA，可在产品设计或生产工艺真正实现之前<strong>发现产品的弱点</strong>，可在原形样机阶段或在大批量生产之前确定产品缺陷。</li><li>FMEA实际上意味着是<strong>事件发生之前</strong>的行为，并非事后补救。因此要想取得最佳的效果，应该在工艺失效模式在产品中出现之前完成。产品开发的5个阶段包括：计划和界定、设计和开发、工艺设计、预生产、大批量生产。</li></ol><h3 id="四-质量管理存在相关痛点">四.质量管理存在相关痛点</h3><p>缺少基础数据、缺少后续行动的跟踪。</p><p>做好FMEA对于优化产品设计和工艺设计从而提高产品质量水平有重要的意义。</p><h3 id="五-直方图、正态分布图、Pareto">五.直方图、正态分布图、Pareto</h3><ol><li>直方图：直方图又称质量分布图，它是表示资料变化情况的一种主要工具。用直方图可以解析出资料的规则性，比较直观地看出产品质量特性的分布状态，对于资料分布状况一目了然，便于<strong>判断其总体质量分布情况</strong>；也是一种统计报告图，由一系列高度不等的纵向条纹或线段表示数据分布的情况。 一般用横轴表示数据类型，纵轴表示分布情况。</li><li>正态分布图：也称“常态分布”或“高斯分布”，是连续随机变量概率分布的一种，常常应用于<strong>质量管理控制</strong>：为了控制实验中的测量或实际误差，常以作为上、下警戒值，以 作为上、下控制值，这样做的依据是：正常情况下测量或实验误差服从正态分布。由于一般的正态总体其图像不一定关于y轴对称，对于任一正态总体，其取值小于x的概率。只要会用它求正态总体在某个特定区间的概率即可。</li><li>Pareto<ul><li>Pareto图又称<strong>排列图</strong>是一种按事件发生的<strong>频率排序</strong>而成，显示由于各种原因引起的缺陷数量或不一致的排列顺序，是找出影响项目产品或服务质量的主要因素的方法。</li><li>pareto图中根据柱图顶端生成的曲线为<strong>Pareto曲线</strong>，说明了项目实施失败的各种原因。其中，各影响因素的排列顺序用于指导纠正措施，即项目组应该首先解决引起更多缺陷的问题。</li></ul></li></ol><h3 id="六-名词释义">六.名词释义</h3><ul><li>MES:MES(manufacturing execution system)系统是一套面向制造企业车间执行层的<strong>生产信息化管理系统</strong>。</li><li>PLM:PLM，是一个英文缩写，表示<strong>产品生命周期管理</strong>(Product Lifecycle Management，PLM)。PLM是一种应用于在单一地点的企业内部、分散在多个地点的企业内部，以及在产品研发领域具有协作关系的企业之间的，支持产品全生命周期的信息的创建、管理、分发和应用的一系列应用解决方案，它能够集成与产品相关的人力资源、流程、应用系统和信息。</li><li>CAPP:CAPP<strong>计算机辅助工艺过程设计</strong>（Computer Aided Process Planning）是指借助于计算机软硬件技术和支撑环境，利用计算机进行数值计算、逻辑判断和推理等的功能来制定零件机械加工工艺过程。借助于CAPP系统，可以解决手工工艺设计效率低、一致性差、质量不稳定、不易达到优化等问题。</li><li>ERP:ERP是一种主要面向制造行业进行物质资源、资金资源和信息资源集成一体化管理的企业信息管理系统。ERP是一个以管理会计为核心可以提供跨地区、跨部门、甚至跨公司整合实时信息的企业管理软件。针对<strong>物资资源管理</strong>（物流）、人力资源管理（人流）、财务资源管理（财流）、信息资源管理（信息流）集成一体化的企业管理软件。</li><li>CRM:客户关系管理（Customer Relationship Management，简称CRM），是指企业为提高核心竞争力，利用相应的信息技术以及互联网技术协调企业与顾客间在销售、营销和服务上的交互，从而提升其管理方式，向客户提供创新式的个性化的客户交互和服务的过程。其最终目标是吸引新客户、保留老客户以及将已有客户转为忠实客户，增加市场。</li><li>IoT(<strong>物联网</strong>（Internet of Things，简称IoT）):物联网是一个基于互联网、传统电信网等的信息承载体。它让所有能够被独立寻址的普通物理对象形成互联互通的网络</li><li>BOM:BOM（Bill of Material）<strong>物料清单</strong>，也就是以数据格式来描述产品结构的文件，是计算机可以识别的产品结构数据文件，也是ERP的主导文件。</li><li>RPN：RPN(risk priority number)是<strong>事件发生的频率、严重程度和检测等级三者乘积</strong>，被称为风险系数 或 风险顺序数，其数值愈大潜在问题愈严重，用来衡量可能的工艺缺陷，以便采取可能的预防措施减少关键的工艺变化，使工艺更加可靠。对于工艺的矫正首先应集中在那些最受关注和风险程度最高的环节。RPN值范围从<strong>1（绝对最好）<strong>到</strong>1000（绝对最差）</strong>。确定从何处着手的最好方式是利用RPN的pareto图，筛选那些累积等级远低于80%的项目。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dom4j解析XML</title>
      <link href="/posts/51717.html"/>
      <url>/posts/51717.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是XML">一. 什么是XML</h3><p><code>XML(e**X**tensible **M**arkup **L**anguage)</code>，是一种可扩展的标记语言，是一种用于标记电子文件使其具有结构性的标记语言。</p><p>XML技术是****<code>W3C</code>****组织(World Wide Web Consortium万维网联盟)发布的，目前遵循的是<code>W3C</code>组织于1998年2月10日发布的<code>XML1.0</code>规范。</p><h3 id="二-示例">二. 示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">books</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;books.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;:&amp;lt;</span></span><br><span class="line"><span class="comment">&gt;:&amp;gt;</span></span><br><span class="line"><span class="comment">&amp;:&amp;amp;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span><span class="comment">&lt;!-- 根标签-头标签，不能有跟根标签平级的其他标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">&quot;001&quot;</span> <span class="attr">publish</span>=<span class="string">&quot;四川出版社&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>《斗罗大陆》<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>199.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">&quot;002&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>《斗破苍穹》<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>299.00<span class="symbol">&amp;amp;</span>199.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">&quot;003&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>《平凡的世界》<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>99.0 <span class="symbol">&amp;lt;</span> money <span class="symbol">&amp;lt;</span> 199.0<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--里面写特殊字符--&gt;</span></span><br><span class="line">        &lt;![CDATA[&gt;&amp;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三-语法">三. 语法</h3><ol><li><?xml version=*"1.0"* encoding=*"UTF-8"*?> <!-- 该代码是声明XML文件语法，必须在第一行。规定了版本和字符集 --></li><li><p>特殊字符</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220720153606.png" alt="image-20220720153606230"></p></li><li><p>XML文档约束</p><ul><li><p><code>dtd</code>约束：Document Type Definition文档类型定义，<strong>它使用一系列的合法元素来定义文档结构</strong>**。**</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">使用ELEMENT关键字来声明一个XML元素</span><br><span class="line">语法：<span class="meta">&lt;!ELEMENT 元素名称 使用规则&gt;</span></span><br><span class="line">文档类型声明以<span class="meta">&lt;!DOCTYPE开始，然后是根标签的名字。</span></span><br><span class="line"><span class="meta">使用规则：</span></span><br><span class="line"><span class="meta">(<span class="keyword">#PCDATA</span>):指示元素的主体内容只能是普通的文本. (<span class="keyword">Parsed</span> <span class="keyword">Character</span> <span class="keyword">Data</span>)</span></span><br><span class="line"><span class="meta"><span class="keyword">EMPTY</span>：用于指示元素的主体为空。比如&lt;br/&gt;</span></span><br><span class="line">ANY:用于指示元素的主体内容为任意类型</span><br><span class="line">(子元素)：指示元素中包含的子元素</span><br><span class="line">定义子元素及描述它们的关系:</span><br><span class="line">如果子元素用逗号分开，说明必须按照声明顺序去编写XML文档。</span><br><span class="line">如果子元素用“|”分开，说明任选其一。</span><br><span class="line">用+、*、？来表示元素出现的次数</span><br><span class="line">如果元素后面没有+*?:表示必须且只能出现一次</span><br><span class="line">+:表示至少出现一次，一次或多次</span><br><span class="line">*：任意次。表示可有可无，零次、一次或多次</span><br><span class="line">?:表示可以有也可以无，有的话只能有一次。零次或一次</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>对<code>books.xml</code>进行约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT books (book+)&gt;</span><br><span class="line">        &lt;!ELEMENT book (name,price)&gt;</span><br><span class="line">        &lt;!ELEMENT name (#PCDATA)&gt;</span><br><span class="line">        &lt;!ELEMENT price (#PCDATA)&gt;</span><br><span class="line">        &lt;!ATTLIST book id&gt;</span><br><span class="line">        &lt;!ATTLIST book publish&gt;</span><br></pre></td></tr></table></figure></li><li><p>schema约束</p><ul><li><p>在上面的<code>dtd</code>约束中，我们发现，约束文件本身只是一个文本文件，在属性约束文件的时候，也是容易出现错误的，所以，这种约束存在较大的限制性。所以，需要另外一种更加强大的约束：schema约束。Schema的功能比<code>dtd</code>更加强大,但是配置起来更加复杂!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;</span><br><span class="line">targetNamespace=&quot;http://coderyech.cn&quot; elementFormDefault=&quot;qualified&quot;&gt;</span><br><span class="line">&lt;xs:element name=&quot;books&quot;&gt;</span><br><span class="line">&lt;xs:complexType&gt;</span><br><span class="line">&lt;xs:sequence maxOccurs=&#x27;unbounded&#x27;&gt;</span><br><span class="line">&lt;xs:element name=&quot;book&quot;&gt;</span><br><span class="line">&lt;xs:complexType&gt;</span><br><span class="line">            &lt;xs:sequence&gt;</span><br><span class="line">&lt;xs:element name=&#x27;name&#x27; type=&#x27;xs:string&#x27; /&gt;</span><br><span class="line">&lt;xs:element name=&#x27;price&#x27; type=&#x27;xs:double&#x27; /&gt;</span><br><span class="line">            &lt;/xs:sequence&gt;</span><br><span class="line">&lt;xs:attribute name=&quot;id&quot; type=&quot;xs:long&quot; use=&quot;required&quot;/&gt;</span><br><span class="line">&lt;/xs:complexType&gt;</span><br><span class="line">&lt;/xs:element&gt;</span><br><span class="line">&lt;/xs:sequence&gt;</span><br><span class="line">&lt;/xs:complexType&gt;</span><br><span class="line">&lt;/xs:element&gt;</span><br><span class="line">&lt;/xs:schema&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h3 id="四-DOM模型">四. DOM模型</h3><ol><li>DOM：文档对象模型，将一个<code>XML(html)</code>文档的每一个****元素****解析成Java中的一个对象</li></ol><table><thead><tr><th style="text-align:center">D</th><th style="text-align:center">Document</th><th style="text-align:center">文档(XML文档)  ： 磁盘上面的<code>xml</code>文件</th></tr></thead><tbody><tr><td style="text-align:center">O</td><td style="text-align:center">Object</td><td style="text-align:center">对象(Java对象)  ： 把<code>xml</code>文件中成员转换成Java对象</td></tr><tr><td style="text-align:center">M</td><td style="text-align:center">Model</td><td style="text-align:center">模型：<code>xml</code>文件与Java中对象一一对应的关系</td></tr></tbody></table><ol start="2"><li><p>在Java使用了如下类型来描述上面的<code>xml</code>文档</p><table><thead><tr><th style="text-align:left">Node(节点)</th></tr></thead><tbody><tr><td style="text-align:left">Element (元素)</td></tr><tr><td style="text-align:left">Attribute(属性)</td></tr><tr><td style="text-align:left">Text(文本)</td></tr></tbody></table><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220720185539.png" alt="res" style="zoom:50%;" /></li></ol><h3 id="五-DOM4J-Document-Object-Model-for-Java">五. <code>DOM4J (Document  Object  Model  for  Java)</code></h3><ol><li><p>导入资源包，<a href="https://gitee.com/coderyeah/layui-module/tree/master/lib">地址</a></p></li><li><p>准备一个xml文件，对其进行增删改查</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">contacts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linkman</span> <span class="attr">id</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>gg<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>gg@coderyeah.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">address</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">group</span>&gt;</span>二仙桥<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linkman</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linkman</span> <span class="attr">id</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>lanyotech@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">address</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">group</span>&gt;</span>成华大道<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linkman</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linkman</span> <span class="attr">id</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>coderyeah<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>lanyotech@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">address</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">group</span>&gt;</span>松江大学城<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linkman</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linkman</span> <span class="attr">id</span>=<span class="string">&quot;600&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>莱昂纳多<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>12@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">address</span>&gt;</span>美国纽约<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">group</span>&gt;</span>好莱坞<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linkman</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">contacts</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dom4jTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDel</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\javabase\\practiceDemo\\src\\com\\lqs\\xmlTest\\dtd\\contacts.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除最后一个linkman节点</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Document</span> <span class="variable">dom</span> <span class="operator">=</span> reader.read(file);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> dom.getRootElement();</span><br><span class="line">        <span class="keyword">final</span> List&lt;Element&gt; elements = root.elements();</span><br><span class="line">        <span class="comment">//获取集合最后一个节点</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> elements.get(elements.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//通过获取父节点删除自身节点</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">remove</span> <span class="operator">=</span> element.getParent().remove(element);</span><br><span class="line">        <span class="comment">//将修改的dom写出文件去</span></span><br><span class="line">        <span class="type">XMLWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(file), OutputFormat.createPrettyPrint());</span><br><span class="line">        writer.write(dom);</span><br><span class="line">        writer.close();</span><br><span class="line">        <span class="keyword">if</span> (remove) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException, IOException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\javabase\\practiceDemo\\src\\com\\lqs\\xmlTest\\dtd\\contacts.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//在根节点新增一个linkman节点</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="comment">//获取dom对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Document</span> <span class="variable">dom</span> <span class="operator">=</span> saxReader.read(file);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> dom.getRootElement();<span class="comment">//得到根接点</span></span><br><span class="line">        <span class="comment">//添加新节点 返回的是新添加节点</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> rootElement.addElement(<span class="string">&quot;linkman&quot;</span>);</span><br><span class="line">        <span class="comment">//在新节点下添加其他节点 和属性</span></span><br><span class="line">        element.addAttribute(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;600&quot;</span>);</span><br><span class="line">        element.addElement(<span class="string">&quot;name&quot;</span>).setText(<span class="string">&quot;莱昂纳多&quot;</span>);</span><br><span class="line">        element.addElement(<span class="string">&quot;email&quot;</span>).setText(<span class="string">&quot;12@qq.com&quot;</span>);</span><br><span class="line">        element.addElement(<span class="string">&quot;address&quot;</span>).setText(<span class="string">&quot;美国纽约&quot;</span>);</span><br><span class="line">        element.addElement(<span class="string">&quot;group&quot;</span>).setText(<span class="string">&quot;好莱坞&quot;</span>);</span><br><span class="line">        <span class="comment">//同步文本到文件</span></span><br><span class="line">        <span class="type">OutputFormat</span> <span class="variable">format</span> <span class="operator">=</span> OutputFormat.createPrettyPrint();<span class="comment">//格式化写入 更美观</span></span><br><span class="line"><span class="comment">//        final OutputFormat format = OutputFormat.createCompactFormat();//使其不格式化 不美观</span></span><br><span class="line">        <span class="type">XMLWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(file), format);</span><br><span class="line">        writer.write(dom);</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException, IOException &#123;</span><br><span class="line">        <span class="comment">//修改linkman的id为500的name为coderyeah</span></span><br><span class="line">        <span class="comment">//1.创建对象</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\javabase\\practiceDemo\\src\\com\\lqs\\xmlTest\\dtd\\contacts.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.得到文本对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Document</span> <span class="variable">dom</span> <span class="operator">=</span> reader.read(file);</span><br><span class="line">        <span class="comment">//3.获取根节点</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> dom.getRootElement();</span><br><span class="line">        <span class="comment">//4.获取根节点下的所有子元素</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;Element&gt; elements = rootElement.elements();</span><br><span class="line">        <span class="comment">//5.遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;500&quot;</span>.equals(element.attributeValue(<span class="string">&quot;id&quot;</span>))) &#123;</span><br><span class="line">                <span class="comment">//6.获取当前节点下的name节点</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">Element</span> <span class="variable">name</span> <span class="operator">=</span> element.element(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="comment">//7.给节点text重新赋值</span></span><br><span class="line">                name.setText(<span class="string">&quot;coderyeah&quot;</span>);</span><br><span class="line">                <span class="comment">//8.同步文本--把内存中的文本同步到文件中</span></span><br><span class="line">                <span class="comment">//9.创建文本同步对象</span></span><br><span class="line">                <span class="type">XMLWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(file));</span><br><span class="line">                writer.write(dom);<span class="comment">//写出文档</span></span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException &#123;</span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="comment">//获取DOM文档对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> saxReader.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\javabase\\practiceDemo\\src\\com\\lqs\\xmlTest\\dtd\\contacts.xml&quot;</span>));</span><br><span class="line">        <span class="comment">//获取根节点</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">        System.out.println(rootElement);</span><br><span class="line">        <span class="comment">//获取根节点下所有linkman元素</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;Element&gt; elements = rootElement.elements();</span><br><span class="line">        System.out.println(elements.size());<span class="comment">//3</span></span><br><span class="line">        <span class="comment">//查询id为200的name值</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            <span class="comment">//获取id值</span></span><br><span class="line"><span class="comment">//            System.out.println(element.attribute(&quot;id&quot;));</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Attribute</span> <span class="variable">attribute</span> <span class="operator">=</span> element.attribute(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="comment">//            System.out.println(attribute.getValue());//得到所有id值</span></span><br><span class="line">            System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">            System.out.println(element.attributeValue(<span class="string">&quot;id&quot;</span>));<span class="comment">//也可以得到所有id值</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;500&quot;</span>.equals(element.attributeValue(<span class="string">&quot;id&quot;</span>))) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;d为200的name值=&quot;</span> + element.element(<span class="string">&quot;name&quot;</span>).getText());</span><br><span class="line">                System.out.println(<span class="string">&quot;d为200的address值=&quot;</span> + element.element(<span class="string">&quot;address&quot;</span>).getText());</span><br><span class="line">                System.out.println(<span class="string">&quot;d为200的group值=&quot;</span> + element.element(<span class="string">&quot;group&quot;</span>).getText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOne</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException &#123;</span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> saxReader.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\javabase\\practiceDemo\\src\\com\\lqs\\xmlTest\\dtd\\contacts.xml&quot;</span>));</span><br><span class="line">        System.out.println(document);<span class="comment">//获取文档</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectTest</span><span class="params">()</span> <span class="keyword">throws</span> DocumentException &#123;</span><br><span class="line">        <span class="comment">//建SaxReader对象</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="comment">//读取待解析的xml文件 得到文档模型</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> reader.read(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\javabase\\practiceDemo\\src\\com\\lqs\\xmlTest\\books.xml&quot;</span>));</span><br><span class="line">        <span class="comment">//获取根节点</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">        System.out.println(<span class="string">&quot;根节点标签名：&quot;</span> + rootElement.getName());<span class="comment">//books</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> rootElement.element(<span class="string">&quot;book&quot;</span>);</span><br><span class="line">        System.out.println(element.attribute(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cookie和session的相关使用</title>
      <link href="/posts/41425.html"/>
      <url>/posts/41425.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是会话">一. 什么是会话</h3><ol><li>用户开一个浏览器，访问某一个web站点，在这个站点点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一次会话。</li><li>客户端与服务端的多次请求和响应的一个过程称之为一次会话，一次会话可以有多次请求。</li></ol><h3 id="二-Cookie使用">二. Cookie使用</h3><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220817185327.jpg" alt="img"></p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220817185832.png" alt="image-20220817185832780"></p><ol><li><p>创建cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add-cookie&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCookie</span><span class="params">(HttpServletResponse resp)</span> &#123;</span><br><span class="line">    <span class="comment">//创建cookie对象</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;coderyeah&quot;</span>);</span><br><span class="line">    <span class="comment">//响应给客户端浏览器</span></span><br><span class="line">    resp.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/get-cookie&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getCookie</span><span class="params">(HttpServletRequest req)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="comment">//获取所有cookie数组</span></span><br><span class="line">    <span class="keyword">final</span> Cookie[] cookies = req.getCookies();</span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">        <span class="comment">//解码 对于中文需要编码和解码</span></span><br><span class="line">        System.out.println(cookie.getName() + <span class="string">&quot; : &quot;</span> + URLDecoder.decode(cookie.getValue(), <span class="string">&quot;UTF-8&quot;</span>));<span class="comment">//解码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/modify-cookie&quot;, produces = &quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyCookie</span><span class="params">(HttpServletResponse resp)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">       <span class="comment">//因为K-V键唯一可以通过覆盖的方式修改cookie</span></span><br><span class="line">       <span class="comment">//编码</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;喜羊羊&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">       <span class="keyword">final</span> <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;name&quot;</span>, encode);</span><br><span class="line">       <span class="comment">//设置cookie有效期 单位秒</span></span><br><span class="line">       <span class="comment">//1.正数：代表多少秒</span></span><br><span class="line">       <span class="comment">//2.0：就代表删除</span></span><br><span class="line">       <span class="comment">//3.负数：关闭浏览器时cookie失效</span></span><br><span class="line">       cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>);<span class="comment">//一周</span></span><br><span class="line">       <span class="comment">//设置cookie作用域</span></span><br><span class="line">       cookie.setPath(<span class="string">&quot;/&quot;</span>);<span class="comment">//根目录 整个服务器起作用</span></span><br><span class="line">       resp.addCookie(cookie);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>删除cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-cookie优缺点">三. cookie优缺点</h3><ol><li>缺点：<ul><li>不安全，cookie存在客户端；</li><li>操作中文麻烦，需要编码和解码；</li><li>cookie不能操作对象，只能操作字符串；</li><li>cookie大小限制在4kb之内；</li><li>一台服务器在一个客户端最多保存20个Cookie；</li><li>一个浏览器最多可以保存300个Cookie。</li></ul></li><li>优点：<ul><li>提升用户体验感；</li><li>可以设置保存很长的时间，降低服务器的压力。</li></ul></li></ol><h3 id="四-session">四. session</h3><ol><li><h4 id="session原理">session原理</h4><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220817191041.jpg" alt="img"></p></li><li><h4 id="session理解">session理解</h4><p>(1) Session是把数据保存到服务器端；</p><p>(2) Session底层依然使用Cookie。</p></li><li><h4 id="创建session">创建session</h4><p><code>HttpSession session = req.getSession();</code></p><p>(1) 如果有session，那么直接拿到session;</p><p>(2) 如果没有session,创建一个session，再拿到这个session;</p></li><li><h3 id="session的api">session的<code>api</code></h3><ul><li>设置值：<code>session.setAttribute(String key, Object obj);</code></li><li>获取指定的数据：<code>req.getSession().getAttribute(String key);</code></li><li>移除指定数据：根据一个key删除session中的一条记录,<code> req.getSession().removeAttribute(&quot;name&quot;);</code></li><li>销毁整个Session对象: <code>req.getSession().invalidate();</code></li></ul></li><li><h4 id="session的生命周期">session的生命周期</h4><p>出生：创建Session对象；</p><p>销毁：销毁session对象。</p><p>① 调用session对象的invalidate()方法：登出/注销</p><p>② 过期时间结束【从不操作开始算起】：最大非活动间隔</p><p>(1) 代码方式：<code>session.setMaxInactiveInterval(int s)</code></p><p>(2) web.xml方式：<session-config>,单位是分钟</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 全局session时间 默认30分钟  </span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3) 默认是30分钟，在Tomcat的web.xml查看</p></li><li><h4 id="session优缺点">session优缺点</h4><ul><li>优点：<ul><li>由于session是将数据保存在服务器端，安全性高相对较高；</li><li>大小相对于Cookie来说大得多；</li><li>数据类型没有限制；</li></ul></li><li>缺点：<ul><li>数据量太大，会影响服务器的性能</li></ul></li></ul></li></ol><h3 id="五-用户登录主要功能代码案例">五. 用户登录主要功能代码案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AjaxResult <span class="title function_">getUser</span><span class="params">(User user, HttpSession session, Integer remember, HttpServletResponse resp)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> userMapper.getUser(user);</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;登录失败：用户名或密码错误！&quot;</span>);</span><br><span class="line"><span class="comment">//            throw new RuntimeException(&quot;登录失败：用户名或密码错误！&quot;);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//存入session</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;USER_INFO&quot;</span>, u);</span><br><span class="line">            <span class="keyword">if</span> (remember != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//响应cookie给浏览器</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">Cookie</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, u.getUsername());</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Cookie</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;password&quot;</span>, u.getPassword());</span><br><span class="line">                <span class="comment">//设置有效期</span></span><br><span class="line">                c1.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>);</span><br><span class="line">                c2.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>);</span><br><span class="line">                <span class="comment">//设置作用域</span></span><br><span class="line">                c1.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                c2.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                resp.addCookie(c1);</span><br><span class="line">                resp.addCookie(c2);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//清空cookie</span></span><br><span class="line">                <span class="comment">//响应cookie给浏览器</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">Cookie</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, u.getUsername());</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Cookie</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;password&quot;</span>, u.getPassword());</span><br><span class="line">                <span class="comment">//设置有效期</span></span><br><span class="line">                c1.setMaxAge(<span class="number">0</span>);</span><br><span class="line">                c2.setMaxAge(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//设置作用域</span></span><br><span class="line">                c1.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                c2.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                resp.addCookie(c1);</span><br><span class="line">                resp.addCookie(c2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> AjaxResult.success();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">//页面加载事件</span></span><br><span class="line">    <span class="comment">//记住密码</span></span><br><span class="line">    <span class="title function_">remember</span>();</span><br><span class="line">    $(<span class="string">&#x27;#loginButton&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">login</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *通过回车实现登录</span></span><br><span class="line"><span class="comment">     * e表示事件源 keypress就是一个事件源 13表示键盘回车符代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;keypress&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">keyCode</span> == <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="title function_">login</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;<span class="comment">//登录函数</span></span><br><span class="line">        <span class="comment">//通过表单发送Ajax请求</span></span><br><span class="line">        $(<span class="string">&#x27;#loginForm&#x27;</span>).<span class="title function_">ajaxSubmit</span>(&#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">success</span>) &#123;</span><br><span class="line">                    <span class="comment">//登录成功</span></span><br><span class="line">                    location.<span class="property">href</span> = <span class="string">&quot;/system/index&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(res.<span class="property">msg</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记住密码</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">remember</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;username&#x27;</span>) != -<span class="number">1</span>) &#123;<span class="comment">//存在cookie</span></span><br><span class="line">            <span class="comment">//document.cookie=&#x27;username=root; password=123&#x27;</span></span><br><span class="line">            <span class="keyword">var</span> username = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> password = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">//设置默认值</span></span><br><span class="line">            $(<span class="string">&#x27;#username&#x27;</span>).<span class="title function_">val</span>(username);</span><br><span class="line">            $(<span class="string">&#x27;#password&#x27;</span>).<span class="title function_">val</span>(password);</span><br><span class="line">            $(<span class="string">&#x27;#remember&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1>0.安装Docker</h1><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。</p><p>Docker CE 分为 <code>stable</code> <code>test</code> 和 <code>nightly</code> 三个更新频道。</p><p>官方网站上有各种环境下的 <a href="https://docs.docker.com/install/">安装指南</a>，这里主要介绍 Docker CE 在 CentOS上的安装。</p><h1>1.CentOS安装Docker</h1><p>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10， CentOS 7 满足最低内核的要求，所以我们在CentOS 7安装Docker。</p><h2 id="1-1-卸载（可选）">1.1.卸载（可选）</h2><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum</span> remove docker <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>                  docker-client <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>                  docker-client-latest <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>                  docker-common <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>                  docker-latest <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>                  docker-latest-logrotate <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>                  docker-logrotate <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>                  docker-selinux <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>                  docker-engine-selinux <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>                  docker-engine <span class="punctuation">\</span></span><br><span class="line"><span class="punctuation"></span>                  docker-ce</span><br></pre></td></tr></table></figure><h2 id="1-2-安装docker">1.2.安装docker</h2><p>首先需要大家虚拟机联网，安装yum工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure><p>然后更新本地镜像源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>然后输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><p>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。</p><h2 id="1-3-启动docker">1.3.启动docker</h2><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>通过命令启动docker：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker  <span class="comment"># 启动docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl stop docker  <span class="comment"># 停止docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker  <span class="comment"># 重启docker服务</span></span><br></pre></td></tr></table></figure><p>然后输入命令，可以查看docker版本：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker -v</span></span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="assets/image-20210418154704436.png" alt="image-20210418154704436"></p><h2 id="1-4-配置镜像加速">1.4.配置镜像加速</h2><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p><p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><h1>2.CentOS7安装DockerCompose</h1><h2 id="2-1-下载">2.1.下载</h2><p>Linux下需要通过命令下载：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果下载速度较慢，或者下载失败，可以使用课前资料提供的docker-compose文件：</p><p><img src="assets/image-20210417133020614.png" alt="image-20210417133020614"></p><p>上传到<code>/usr/local/bin/</code>目录也可以。</p><h2 id="2-2-修改文件权限">2.2.修改文件权限</h2><p>修改文件权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="2-3-Base自动补全命令：">2.3.Base自动补全命令：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 补全命令</span></span><br><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure><p>如果这里出现错误，需要修改自己的hosts文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;199.232.68.133 raw.githubusercontent.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h1>3.Docker镜像仓库</h1><p>搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现。</p><p>官网地址：<a href="https://hub.docker.com/_/registry">https://hub.docker.com/_/registry</a></p><h2 id="3-1-简化版镜像仓库">3.1.简化版镜像仓库</h2><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p><p>搭建方式比较简单，命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --name registry\</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v registry-data:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure><p>命令中挂载了一个数据卷registry-data到容器内的/var/lib/registry 目录，这是私有镜像库存放数据的目录。</p><p>访问http://YourIp:5000/v2/_catalog 可以查看当前私有镜像服务中包含的镜像</p><h2 id="3-2-带有图形化界面版本">3.2.带有图形化界面版本</h2><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./registry-data:/var/lib/registry</span></span><br><span class="line">  <span class="attr">ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">joxit/docker-registry-ui:static</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_TITLE=传智教育私有仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_URL=http://registry:5000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registry</span></span><br></pre></td></tr></table></figure><h2 id="3-3-配置Docker信任地址">3.3.配置Docker信任地址</h2><p>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开要修改的文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 添加内容：</span></span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;http://192.168.150.101:8080&quot;</span>]</span><br><span class="line"><span class="comment"># 重加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GO实现结构体切片的自定义排序规则</title>
      <link href="/posts/54e2d2bf.html"/>
      <url>/posts/54e2d2bf.html</url>
      
        <content type="html"><![CDATA[<p>结构体排序需要实现Interface接口，实现其中三个方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口最佳实践</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    intSlice := []<span class="type">int</span>&#123;<span class="number">-2</span>, <span class="number">60</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">99</span>, <span class="number">78</span>, <span class="number">22</span>&#125;</span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    sort.Ints(intSlice)</span><br><span class="line">    fmt.Println(intSlice)</span><br><span class="line">    fmt.Println(<span class="string">&quot;----------------/学生结构体切片排序前\\----------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> stuSlice studentSlice</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">       stu := student&#123;</span><br><span class="line">          name:  fmt.Sprintf(<span class="string">&quot;清清~%d&quot;</span>, i),</span><br><span class="line">          age:   rand.Intn(<span class="number">100</span>) + <span class="number">1</span>,</span><br><span class="line">          score: <span class="type">float64</span>(rand.Intn(<span class="number">101</span>)),</span><br><span class="line">       &#125;</span><br><span class="line">       stuSlice = <span class="built_in">append</span>(stuSlice, stu)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(stuSlice)</span><br><span class="line">    fmt.Println(<span class="string">&quot;----------------/学生结构体切片排序后\\----------------------&quot;</span>)</span><br><span class="line">    sort.Sort(stuSlice)</span><br><span class="line">    fmt.Println(stuSlice)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="type">string</span></span><br><span class="line">    age   <span class="type">int</span></span><br><span class="line">    score <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> studentSlice []student</span><br><span class="line"></span><br><span class="line"><span class="comment">// Len 返回切片长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stuSlice studentSlice)</span></span> Len() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(stuSlice)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Less 排序规则</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stuSlice studentSlice)</span></span> Less(i, j <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">//return stuSlice[i].score &lt; stuSlice[j].score // 分数升序</span></span><br><span class="line">    <span class="keyword">return</span> stuSlice[i].name &gt; stuSlice[j].name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Swap 满足排序规则就交换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stuSlice studentSlice)</span></span> Swap(i, j <span class="type">int</span>) &#123;</span><br><span class="line">    stuSlice[i], stuSlice[j] = stuSlice[j], stuSlice[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> Golang </tag>
            
            <tag> 结构体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO语言实现冒泡排序、顺序查找、二分查找</title>
      <link href="/posts/3e108bf6.html"/>
      <url>/posts/3e108bf6.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">23</span>, <span class="number">56</span>, <span class="number">2</span>, <span class="number">117</span>, <span class="number">88</span>&#125; <span class="comment">// 创建一个长度为5的整型数组arr，并赋值</span></span><br><span class="line">    fmt.Println(arr)                  <span class="comment">// 打印arr数组</span></span><br><span class="line">    BubbleSort(&amp;arr)                  <span class="comment">// 调用BubbleSort函数对arr进行排序</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;sort:&quot;</span>, arr)         <span class="comment">// 打印排序后的arr数组</span></span><br><span class="line">    <span class="comment">//SequentialLookup() // 调用SequentialLookup函数</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;------------------------------&quot;</span>) <span class="comment">// 打印分隔线</span></span><br><span class="line"></span><br><span class="line">    arrs := [<span class="number">10</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">23</span>, <span class="number">45</span>, <span class="number">78</span>, <span class="number">90</span>, <span class="number">115</span>, <span class="number">456</span>, <span class="number">980</span>, <span class="number">1000</span>, <span class="number">1200</span>&#125; <span class="comment">// 创建一个长度为10的整型数组arrs，并赋值</span></span><br><span class="line">    search := binarySearch(arrs, <span class="number">1</span>)                               <span class="comment">// 调用binarySearch函数在arrs中搜索元素1，并将结果赋值给search</span></span><br><span class="line">    <span class="keyword">if</span> search == <span class="number">-1</span> &#123;                                             <span class="comment">// 如果search为-1</span></span><br><span class="line">       fmt.Println(<span class="string">&quot;不存在&quot;</span>) <span class="comment">// 打印&quot;不存在&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       fmt.Println(search) <span class="comment">// 打印search</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BinaryFind(&amp;arrs, <span class="number">0</span>, <span class="built_in">len</span>(arrs)<span class="number">-1</span>, <span class="number">15</span>) <span class="comment">// 调用BinaryFind函数在arrs中查找元素15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BubbleSort 冒泡排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BubbleSort</span><span class="params">(arr *[5]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(*arr)<span class="number">-1</span>; i++ &#123;</span><br><span class="line">       swap := <span class="literal">false</span> <span class="comment">// 判断是否交换</span></span><br><span class="line">       <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(*arr)<span class="number">-1</span>-i; j++ &#123;</span><br><span class="line">          <span class="keyword">if</span> (*arr)[j] &gt; (*arr)[j+<span class="number">1</span>] &#123; <span class="comment">// 如果arr[j]大于arr[j+1]</span></span><br><span class="line">             (*arr)[j], (*arr)[j+<span class="number">1</span>] = (*arr)[j+<span class="number">1</span>], (*arr)[j] <span class="comment">// 交换arr[j]和arr[j+1]</span></span><br><span class="line">             swap = <span class="literal">true</span>                                     <span class="comment">// 将swap设为true</span></span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> !swap &#123; <span class="comment">// 如果没有发生交换</span></span><br><span class="line">          <span class="keyword">break</span> <span class="comment">// 跳出循环</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顺序查找函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SequentialLookup</span><span class="params">()</span></span> &#123;</span><br><span class="line">    names := [<span class="number">5</span>]<span class="type">string</span>&#123;<span class="string">&quot;JOJO&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;打怪&quot;</span>, <span class="string">&quot;小怪&quot;</span>, <span class="string">&quot;lyrics&quot;</span>&#125; <span class="comment">// 创建一个长度为5的字符串数组names，并赋值</span></span><br><span class="line">    <span class="keyword">var</span> yourName <span class="type">string</span>                                     <span class="comment">// 创建一个字符串变量yourName</span></span><br><span class="line">    fmt.Scanln(&amp;yourName)                                   <span class="comment">// 从命令行读取yourName的值</span></span><br><span class="line">    index := <span class="number">-1</span>                                             <span class="comment">// 创建一个整型变量index，并赋值为-1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(names); i++ &#123;                       <span class="comment">// 遍历names数组</span></span><br><span class="line">       <span class="keyword">if</span> yourName == names[i] &#123; <span class="comment">// 如果yourName等于names[i]</span></span><br><span class="line">          index = i <span class="comment">// 将index设为i</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> index != <span class="number">-1</span> &#123; <span class="comment">// 如果index不等于-1</span></span><br><span class="line">       fmt.Println(<span class="string">&quot;找到&quot;</span>, yourName) <span class="comment">// 打印&quot;找到&quot;和yourName</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       fmt.Println(<span class="string">&quot;没找到&quot;</span>, index, yourName) <span class="comment">// 打印&quot;没找到&quot;、index和yourName</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分查找函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binarySearch</span><span class="params">(arrs [10]<span class="type">int</span>, key <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    left := <span class="number">0</span>              <span class="comment">// 搜索范围左边界</span></span><br><span class="line">    right := <span class="built_in">len</span>(arrs) - <span class="number">1</span> <span class="comment">// 搜索范围右边界</span></span><br><span class="line">    <span class="keyword">for</span> right &gt;= left &#123;    <span class="comment">// 当右边界大于等于左边界时</span></span><br><span class="line">       mid := left + (right-left)/<span class="number">2</span> <span class="comment">// 计算中间值的索引</span></span><br><span class="line">       <span class="keyword">if</span> arrs[mid] == key &#123;        <span class="comment">// 如果中间值等于key</span></span><br><span class="line">          <span class="keyword">return</span> mid <span class="comment">// 返回中间值的索引</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> key &gt; arrs[mid] &#123; <span class="comment">// 如果key大于中间值</span></span><br><span class="line">          left = mid + <span class="number">1</span> <span class="comment">// 将左边界设为mid+1</span></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          right = mid - <span class="number">1</span> <span class="comment">// 将右边界设为mid-1</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span> <span class="comment">// 返回-1表示未找到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BinaryFind 二分查找递归实现函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BinaryFind</span><span class="params">(arr *[10]<span class="type">int</span>, left, right, key <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> left &gt; right &#123; <span class="comment">// 如果左边界大于右边界</span></span><br><span class="line">       fmt.Println(<span class="string">&quot;不存在&quot;</span>, key) <span class="comment">// 打印&quot;不存在&quot;和key</span></span><br><span class="line">       <span class="keyword">return</span>                  <span class="comment">// 结束函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    mid := (left + right) / <span class="number">2</span> <span class="comment">// 计算中间值的索引</span></span><br><span class="line">    <span class="keyword">if</span> key &gt; (*arr)[mid] &#123;    <span class="comment">// 如果key大于中间值</span></span><br><span class="line">       <span class="comment">// 在右边查找</span></span><br><span class="line">       BinaryFind(arr, mid+<span class="number">1</span>, right, key)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> key &lt; (*arr)[mid] &#123; <span class="comment">// 如果key小于中间值</span></span><br><span class="line">       <span class="comment">// 在左边查找</span></span><br><span class="line">       BinaryFind(arr, left, mid<span class="number">-1</span>, key)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// arr[mid]==key</span></span><br><span class="line">       fmt.Println(<span class="string">&quot;找到了值：&quot;</span>, key, <span class="string">&quot; &quot;</span>, mid) <span class="comment">// 打印&quot;找到了值：&quot;、key和mid</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
          <category> Golang </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> Golang </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go的协程和管道运用案例</title>
      <link href="/posts/8e3438c.html"/>
      <url>/posts/8e3438c.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-同时向管道读写数据">一.同时向管道读写数据</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    writeChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">20</span>)   <span class="comment">// 写入通道，缓冲大小为20</span></span><br><span class="line">    exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)   <span class="comment">// 退出通道</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> readData(writeChan, exitChan)   <span class="comment">// 启动readData协程</span></span><br><span class="line">    <span class="keyword">go</span> writeData(writeChan)   <span class="comment">// 启动writeData协程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        v, ok := &lt;-exitChan   <span class="comment">// 接收退出通道值</span></span><br><span class="line">        <span class="keyword">if</span> ok &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;完成:&quot;</span>, v)   <span class="comment">// 打印完成信息</span></span><br><span class="line">            <span class="keyword">break</span>   <span class="comment">// 退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeData</span><span class="params">(writeChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++ &#123;</span><br><span class="line">        writeChan &lt;- i   <span class="comment">// 将i写入通道</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;写入数据~~:&quot;</span>, i)   <span class="comment">// 打印写入数据信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(writeChan)   <span class="comment">// 关闭通道</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readData</span><span class="params">(writeChan <span class="keyword">chan</span> <span class="type">int</span>, exitChan <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> v := <span class="keyword">range</span> writeChan &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;读取数据~~：&quot;</span>, v)   <span class="comment">// 打印读取数据信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结束</span></span><br><span class="line">    exitChan &lt;- <span class="literal">true</span>   <span class="comment">// 向退出通道发送完成信号</span></span><br><span class="line">    <span class="built_in">close</span>(exitChan)   <span class="comment">// 关闭通道</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二-协程案例-计算2000个数各个数的累加和">二.协程案例-计算2000个数各个数的累加和</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">wg3 sync.WaitGroup <span class="comment">// wg3用于等待PutData函数执行完成</span></span><br><span class="line">wg4 sync.WaitGroup <span class="comment">// wg4用于等待SumUp函数执行完成</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">numChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">2000</span>) <span class="comment">// 创建一个缓冲大小为2000的整型通道</span></span><br><span class="line">wg3.Add(<span class="number">2000</span>) <span class="comment">// 将等待计数器设置为2000</span></span><br><span class="line"><span class="keyword">go</span> PutData(numChan) <span class="comment">// 启动PutData协程，向numChan通道写入数据</span></span><br><span class="line">wg3.Wait() <span class="comment">// 等待PutData协程执行完成</span></span><br><span class="line"><span class="built_in">close</span>(numChan) <span class="comment">// 关闭numChan通道</span></span><br><span class="line">fmt.Println(<span class="string">&quot;num:&quot;</span>, <span class="built_in">len</span>(numChan)) <span class="comment">// 打印numChan通道内的数据个数（应为2000）</span></span><br><span class="line">wg4.Add(<span class="number">2000</span>) <span class="comment">// 将等待计数器设置为2000</span></span><br><span class="line">resChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">2000</span>) <span class="comment">// 创建一个缓冲大小为2000的映射整型到映射整型的通道</span></span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> numChan &#123;</span><br><span class="line"><span class="keyword">go</span> SumUp(n, resChan) <span class="comment">// 启动SumUp协程，计算numChan中的每个数字的累加和并存储到resChan通道</span></span><br><span class="line">&#125;</span><br><span class="line">wg4.Wait() <span class="comment">// 等待所有SumUp协程执行完成</span></span><br><span class="line"><span class="built_in">close</span>(resChan) <span class="comment">// 关闭resChan通道</span></span><br><span class="line">fmt.Println(<span class="string">&quot;res:&quot;</span>, <span class="built_in">len</span>(resChan)) <span class="comment">// 打印resChan通道内的数据个数（应为2000）</span></span><br><span class="line"><span class="keyword">for</span> res := <span class="keyword">range</span> resChan &#123;</span><br><span class="line"><span class="keyword">for</span> key, val := <span class="keyword">range</span> res &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;res[%v]=%v\n&quot;</span>, key, val) <span class="comment">// 遍历输出resChan通道中的结果</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SumUp 计算累加和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SumUp</span><span class="params">(n <span class="type">int</span>, resChan <span class="keyword">chan</span> <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">sumMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>) <span class="comment">// 创建一个整型到整型的映射</span></span><br><span class="line">res := <span class="number">0</span> <span class="comment">// 初始化res为0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res += i <span class="comment">// 将i累加到res上</span></span><br><span class="line">&#125;</span><br><span class="line">sumMap[n] = res <span class="comment">// 将res存储到sumMap中对应的n位置</span></span><br><span class="line">resChan &lt;- sumMap <span class="comment">// 将sumMap发送到resChan通道</span></span><br><span class="line"><span class="keyword">defer</span> wg4.Done() <span class="comment">// 在协程结束时，将等待计数器减1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PutData</span><span class="params">(numChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">2000</span>; i++ &#123;</span><br><span class="line">numChan &lt;- i <span class="comment">// 将i发送到numChan通道</span></span><br><span class="line">wg3.Done() <span class="comment">// 等待发送完成后，将等待计数器减1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三-生产1000个数据保存文件，读取文件排序后另存文件">三.生产1000个数据保存文件，读取文件排序后另存文件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    wg5 sync.WaitGroup <span class="comment">// wg5用于等待所有goroutine完成</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// goroutine+channel实现写入文件和排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg5.Add(<span class="number">1000</span>)        <span class="comment">// 增加1000个等待的goroutine</span></span><br><span class="line">    <span class="keyword">go</span> writeDataToFile() <span class="comment">// 启动写入数据到文件的goroutine</span></span><br><span class="line">    wg5.Wait()           <span class="comment">// 等待所有goroutine完成</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;文件写入完成!!!!!!!!!!&quot;</span>)</span><br><span class="line">    fmt.Println()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;读取所写文件对其排序生成新的文件!!!!!!!&quot;</span>)</span><br><span class="line">    dataChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1000</span>) <span class="comment">// 创建一个容量为1000的整型通道</span></span><br><span class="line">    readDataToChannel(dataChan)      <span class="comment">// 启动读取数据到通道的goroutine</span></span><br><span class="line">    sortToSave(dataChan)             <span class="comment">// 对通道中的数据进行排序和保存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数据放入切片 对切片排序 再写入文件保存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortToSave</span><span class="params">(dataChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    dataSlice := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(dataChan)) <span class="comment">// 创建一个与通道长度相同的切片</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(dataSlice); i++ &#123;</span><br><span class="line">       <span class="keyword">for</span> data := <span class="keyword">range</span> dataChan &#123; <span class="comment">// 从通道中接收数据</span></span><br><span class="line">          dataSlice[i] = data</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(dataSlice)) <span class="comment">// 打印切片长度, 为1000</span></span><br><span class="line">    QuickSort(dataSlice)        <span class="comment">// 使用快速排序</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;排序后：&quot;</span>, dataSlice)</span><br><span class="line"></span><br><span class="line">    file, err := os.OpenFile(<span class="string">&quot;d:/go-test/sortData.txt&quot;</span>, os.O_WRONLY|os.O_TRUNC|os.O_APPEND|os.O_CREATE, <span class="number">0666</span>) <span class="comment">// 打开或创建文件</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(<span class="string">&quot;open file err &quot;</span>, err)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> file.Close()              <span class="comment">// 函数返回前关闭文件</span></span><br><span class="line">    writer := bufio.NewWriter(file) <span class="comment">// 创建写入器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(dataSlice); i++ &#123;</span><br><span class="line">       _, err := writer.WriteString(strconv.Itoa(dataSlice[i]) + <span class="string">&quot;,&quot;</span>) <span class="comment">// 将切片中的数据写入文件</span></span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          fmt.Println(<span class="string">&quot;write file err &quot;</span>, err)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    writer.Flush() <span class="comment">// 刷新写入器</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;有序文件写入完成！！！！！&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机生产1000个数据写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeDataToFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())                                                                      <span class="comment">// 使用当前时间作为随机数种子</span></span><br><span class="line">    file, err := os.OpenFile(<span class="string">&quot;d:/go-test/data.txt&quot;</span>, os.O_WRONLY|os.O_TRUNC|os.O_APPEND|os.O_CREATE, <span class="number">0666</span>) <span class="comment">// 打开或创建文件</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(<span class="string">&quot;open file err &quot;</span>, err)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> file.Close() <span class="comment">// 函数返回前关闭文件</span></span><br><span class="line"></span><br><span class="line">    writer := bufio.NewWriter(file) <span class="comment">// 创建写入器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">       _, err := writer.WriteString(strconv.Itoa(rand.Intn(<span class="number">1000</span>)+<span class="number">1</span>) + <span class="string">&quot;,&quot;</span>) <span class="comment">// 随机生成1000个数据并写入文件</span></span><br><span class="line">       wg5.Done()                                                          <span class="comment">// wg5计数减1</span></span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">          fmt.Println(<span class="string">&quot;write file err &quot;</span>, err)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    writer.Flush() <span class="comment">// 刷新写入器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件中读取数据到通道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readDataToChannel</span><span class="params">(dataChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    file, err := os.Open(<span class="string">&quot;d:/go-test/data.txt&quot;</span>) <span class="comment">// 打开文件</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Println(<span class="string">&quot;open file err &quot;</span>, err)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> file.Close()              <span class="comment">// 函数返回前关闭文件</span></span><br><span class="line">    reader := bufio.NewReader(file) <span class="comment">// 创建读取器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">       dataStr, errRead := reader.ReadString(<span class="string">&#x27;,&#x27;</span>) <span class="comment">// 从文件中读取数据直到文件末尾或发生错误</span></span><br><span class="line">       <span class="keyword">if</span> errRead != <span class="literal">nil</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> errRead == io.EOF &#123;</span><br><span class="line">             fmt.Println(<span class="string">&quot;读取结束！！！！&quot;</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             fmt.Println(<span class="string">&quot;读取错误：&quot;</span>, errRead)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">       &#125;</span><br><span class="line">       atoi, _ := strconv.Atoi(strings.Trim(dataStr, <span class="string">&quot;,&quot;</span>)) <span class="comment">// 将字符串转换为整数</span></span><br><span class="line">       dataChan &lt;- atoi                                    <span class="comment">// 将整数发送到通道</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(dataChan)                   <span class="comment">// 在写入所有数据后关闭通道</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;长度：&quot;</span>, <span class="built_in">len</span>(dataChan)) <span class="comment">// 打印通道长度, 为1000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QuickSort 快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 结束条件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt; <span class="number">2</span> &#123;</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    left, right := <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span> <span class="comment">// 定义分区点的左右指针</span></span><br><span class="line">    pivot := right               <span class="comment">// 将分区点设置为数组的最后一个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">       <span class="keyword">if</span> arr[i] &lt; arr[pivot] &#123;</span><br><span class="line">          arr[left], arr[i] = arr[i], arr[left] <span class="comment">// 将较小的元素交换到左边</span></span><br><span class="line">          left++</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arr[left], arr[right] = arr[right], arr[left] <span class="comment">// 将分区点交换到中间</span></span><br><span class="line">    QuickSort(arr[:left])                         <span class="comment">// 对分区点左边的子数组进行递归排序</span></span><br><span class="line">    QuickSort(arr[left+<span class="number">1</span>:])                       <span class="comment">// 对分区点右边的子数组进行递归排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> Golang </tag>
            
            <tag> 协程和管道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务的实现方案和redis缓存配置</title>
      <link href="/posts/88ca2de9.html"/>
      <url>/posts/88ca2de9.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是分布式事务">一.什么是分布式事务</h3><p>针对于单数据库的事务我们叫着本地事务/传统事务，在分布式环境中一个请求可能涉及到多个数据库的写操作(多数据源)，要保证多数据源的一致性必须用到分布式事务。</p><h3 id="二-为什么需要分布式事务">二.为什么需要分布式事务</h3><p>系统微服务化后，一个看似简单的功能，内部可能需要调用多个服务并操作多个数据库实现，服务调用的分布式事务问题变的非常突出。</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221023200145.png" alt="image-20221023200145848"></p><p>一个下单请求同时设计到订单库，优惠券库，库存库的写操作，需要保证三个库写操作的一致性，就要用到分布式事务 即：分布式事务就是要解决一个请求同时对多个数据库写操作的一致性</p><p>注意：微服务拆分原则，尽量让大部分操作都不要跨微服务操作，也就是跨库。 分布式事务比本地事务耗费的资源更多。</p><h3 id="三-分布式事务解决方案">三.分布式事务解决方案</h3><ol><li><h4 id="2PC方案">2PC方案</h4><p>2PC即<strong>两阶段提交协议</strong>,是将整个事务流程分为两个阶段,准备阶段( Prepare phase).提交阶段( pphase ) , 2是指两个阶段, P是指准备阶段, C是指提交阶段。</p><p>在第一阶段(准备阶段)，事务管理器先事务参与者(资源)们发送准备请求，大家都返回OK状态，那么就进入第二阶段，提交事务，如果在第一阶段有任何一个参与者没有OK，那么事务协调器通知其他所有事务参与者(资源)回滚事务。2PC常见的标准是XA, JTA，Seata等。</p></li><li><h4 id="基于Seata的2pc">基于Seata的2pc</h4><p>Seata是由<code>阿里中间件团队</code>发起的开源项目Fescar ,后更名为Seata ,它是一个是<code>开源的分布式事务框架</code>。传统2PC的问题在Seata中得到了解决,它通过对<code>本地关系数据库的分支事务的协调来驱动完成全局事务</code>,是<code>工作在应用层的中间件</code>。主要优点是<code>性能较好,且不长时间占用连接资源,它以高效并且对业务0侵入的方式</code>解决微服务场景下面临的分布式事务问题,它目前提供AT模式(即2PC)及TCC模式的分布式事务解决方案。</p><ul><li>Transaction Coordinator(TC):事务协调器,它是独立的中间件,需要独立部署运行,它维护全局事务的运行状态,接收TM指令发起全局事务的提交与回滚,负责与RM通信协调各各分支事务的提交或回滚。 相当于是一个软件需要单独部署</li><li>Transaction Manager ™:事务管理器, TM需要嵌入应用程序中工作,它负责开启一个全局事务,并最终向TC发起全局提交或全局回滚的指令。</li><li>Resource Manager (RM):资源管理器控制分支事务, 负责分支注册、状态汇报,并接收事务协调器TC的指令, 驱动分支(本地)事务的提交和回滚。</li></ul></li><li><p>事务流程如下</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221023214811.png" alt="image-20221023214811148"></p><p>具体的执行流程如下:</p><ol><li>用户服务的TM向TC申请开启一个全局事务,全局事务创建成功并生成一个全局唯一的XID。</li><li>用户服务的RM向TC注册分支事务,该分支事务在用户服务执行新增用户逻辑,并将其纳入XID对应全局事务的管辖。</li><li>用户服务执行分支事务,向用户表插入一条记录。</li><li>逻辑执行到远程调用积分服务时(XID在微服务调用链路的，上下文中传播)。积分服务的RM向TC注册分支事务,该分支事务执行增加积分的逻辑,并将其纳入XID对应全局事务的管辖。</li><li>积分服务执行分支事务,向积分记录表插入一条记录,执行完毕后,返回用户服务。</li></ol><p>Seata 分布式事务：<a href="https://blog.csdn.net/u014494148/article/details/105781920">https://blog.csdn.net/u014494148/article/details/105781920</a></p></li></ol><h3 id="四-注册集成Seata">四.注册集成Seata</h3><h4 id="1-下载">1.下载</h4><ul><li>下载：<a href="https://github.com/seata/seata/tags">https://github.com/seata/seata/tags</a></li><li>启动：seata-server.bat -p 8091 -h 127.0.0.1 -m file</li></ul><ol start="2"><li><h4 id="导入依赖">导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="yml配置">yml配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">enableAutoDataSourceProxy:</span> <span class="literal">false</span> <span class="comment">#关闭DataSource代理的自动配置，我们要手动配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">fsp_tx_group</span> <span class="comment">#这里和file.conf中事务组名一样</span></span><br></pre></td></tr></table></figure></li><li><h4 id="拷贝配置">拷贝配置</h4><h5 id="1-resources-file-conf">1.resources/file.conf</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">transport &#123;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">tcp udt unix-domain-socket</span></span><br><span class="line">  type = &quot;TCP&quot;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">NIO NATIVE</span></span><br><span class="line">  server = &quot;NIO&quot;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="built_in">enable</span> heartbeat</span></span><br><span class="line">  heartbeat = true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">the client batch send request <span class="built_in">enable</span></span></span><br><span class="line">  enableClientBatchSendRequest = true</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">thread factory <span class="keyword">for</span> netty</span></span><br><span class="line">  threadFactory &#123;</span><br><span class="line">    bossThreadPrefix = &quot;NettyBoss&quot;</span><br><span class="line">    workerThreadPrefix = &quot;NettyServerNIOWorker&quot;</span><br><span class="line">    serverExecutorThread-prefix = &quot;NettyServerBizHandler&quot;</span><br><span class="line">    shareBossWorker = false</span><br><span class="line">    clientSelectorThreadPrefix = &quot;NettyClientSelector&quot;</span><br><span class="line">    clientSelectorThreadSize = 1</span><br><span class="line">    clientWorkerThreadPrefix = &quot;NettyClientWorkerThread&quot;</span><br><span class="line">    # netty boss thread size,will not be used for UDT</span><br><span class="line">    bossThreadSize = 1</span><br><span class="line">    #auto default pin or 8</span><br><span class="line">    workerThreadSize = &quot;default&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  shutdown &#123;</span><br><span class="line">    # when destroy server, wait seconds</span><br><span class="line">    wait = 3</span><br><span class="line">  &#125;</span><br><span class="line">  serialization = &quot;seata&quot;</span><br><span class="line">  compressor = &quot;none&quot;</span><br><span class="line">&#125;</span><br><span class="line">service &#123;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">transaction service group mapping</span></span><br><span class="line">  vgroupMapping.fsp_tx_group = &quot;default&quot;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">only support when registry.type=file, please don<span class="string">&#x27;t set multiple addresses</span></span></span><br><span class="line">  default.grouplist = &quot;127.0.0.1:8091&quot;</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="string">degrade, current not support</span></span></span><br><span class="line">  enableDegrade = false</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="string">disable seata</span></span></span><br><span class="line">  disableGlobalTransaction = false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client &#123;</span><br><span class="line">  rm &#123;</span><br><span class="line">    asyncCommitBufferLimit = 10000</span><br><span class="line">    lock &#123;</span><br><span class="line">      retryInterval = 10</span><br><span class="line">      retryTimes = 30</span><br><span class="line">      retryPolicyBranchRollbackOnConflict = true</span><br><span class="line">    &#125;</span><br><span class="line">    reportRetryCount = 5</span><br><span class="line">    tableMetaCheckEnable = false</span><br><span class="line">    reportSuccessEnable = false</span><br><span class="line">  &#125;</span><br><span class="line">  tm &#123;</span><br><span class="line">    commitRetryCount = 5</span><br><span class="line">    rollbackRetryCount = 5</span><br><span class="line">  &#125;</span><br><span class="line">  undo &#123;</span><br><span class="line">    dataValidation = true</span><br><span class="line">    logSerialization = &quot;jackson&quot;</span><br><span class="line">    logTable = &quot;undo_log&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  log &#123;</span><br><span class="line">    exceptionRate = 100</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-resources-registry-conf">2.resources/registry.conf</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  <span class="comment"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class="line">  <span class="built_in">type</span> = <span class="string">&quot;file&quot;</span></span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    namespace = <span class="string">&quot;&quot;</span></span><br><span class="line">    cluster = <span class="string">&quot;default&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  eureka &#123;</span><br><span class="line">    serviceUrl = <span class="string">&quot;http://localhost:8761/eureka&quot;</span></span><br><span class="line">    application = <span class="string">&quot;default&quot;</span></span><br><span class="line">    weight = <span class="string">&quot;1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  redis &#123;</span><br><span class="line">    serverAddr = <span class="string">&quot;localhost:6379&quot;</span></span><br><span class="line">    db = <span class="string">&quot;0&quot;</span></span><br><span class="line">    password = <span class="string">&quot;&quot;</span></span><br><span class="line">    cluster = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="built_in">timeout</span> = <span class="string">&quot;0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    cluster = <span class="string">&quot;default&quot;</span></span><br><span class="line">    serverAddr = <span class="string">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">    username = <span class="string">&quot;&quot;</span></span><br><span class="line">    password = <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    cluster = <span class="string">&quot;default&quot;</span></span><br><span class="line">    serverAddr = <span class="string">&quot;127.0.0.1:8500&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    cluster = <span class="string">&quot;default&quot;</span></span><br><span class="line">    serverAddr = <span class="string">&quot;http://localhost:2379&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  sofa &#123;</span><br><span class="line">    serverAddr = <span class="string">&quot;127.0.0.1:9603&quot;</span></span><br><span class="line">    application = <span class="string">&quot;default&quot;</span></span><br><span class="line">    region = <span class="string">&quot;DEFAULT_ZONE&quot;</span></span><br><span class="line">    datacenter = <span class="string">&quot;DefaultDataCenter&quot;</span></span><br><span class="line">    cluster = <span class="string">&quot;default&quot;</span></span><br><span class="line">    group = <span class="string">&quot;SEATA_GROUP&quot;</span></span><br><span class="line">    addressWaitTime = <span class="string">&quot;3000&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = <span class="string">&quot;file.conf&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line">  <span class="comment"># file、nacos 、apollo、zk、consul、etcd3、springCloudConfig</span></span><br><span class="line">  <span class="built_in">type</span> = <span class="string">&quot;file&quot;</span></span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    namespace = <span class="string">&quot;&quot;</span></span><br><span class="line">    group = <span class="string">&quot;SEATA_GROUP&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    serverAddr = <span class="string">&quot;127.0.0.1:8500&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  apollo &#123;</span><br><span class="line">    app.id = <span class="string">&quot;seata-server&quot;</span></span><br><span class="line">    apollo.meta = <span class="string">&quot;http://192.168.1.204:8801&quot;</span></span><br><span class="line">    namespace = <span class="string">&quot;application&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    serverAddr = <span class="string">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">    username = <span class="string">&quot;&quot;</span></span><br><span class="line">    password = <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    serverAddr = <span class="string">&quot;http://localhost:2379&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = <span class="string">&quot;file.conf&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h5 id="排除DataSource自动配置">排除DataSource自动配置</h5><p>@SpringBootApplication(exclude = { DataSourceAutoConfiguration.class})</p></li><li><h5 id="MybatisPlus版本">.MybatisPlus版本</h5><p>把DataSource交给Seata代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mapper.xml路径</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mybatis-plus.mapper-locations&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mapperLocations;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动配置bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">druidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisSqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSourceProxy dataSourceProxy)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//处理MybatisPlus</span></span><br><span class="line">        <span class="type">MybatisSqlSessionFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisSqlSessionFactoryBean</span>();</span><br><span class="line">        factory.setDataSource(dataSourceProxy);</span><br><span class="line">        factory.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(mapperLocations));</span><br><span class="line">        <span class="comment">//事务管理工厂</span></span><br><span class="line">        factory.setTransactionFactory(<span class="keyword">new</span> <span class="title class_">SpringManagedTransactionFactory</span>());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceProxy <span class="title function_">dataSourceProxy</span><span class="params">(DataSource druidDataSource)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProxy</span>(druidDataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mybatis版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用seata对DataSource进行代理</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceProxyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mapper.xml路径</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mybatis.mapper-locations&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mapperLocations;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动配置bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">druidDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">sessionFactory</span><span class="params">(DataSourceProxy dataSourceProxy)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class="line">        sessionFactoryBean.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(mapperLocations));</span><br><span class="line">        <span class="comment">//事务管理工厂</span></span><br><span class="line">        sessionFactoryBean.setTransactionFactory(<span class="keyword">new</span> <span class="title class_">SpringManagedTransactionFactory</span>());</span><br><span class="line">        <span class="keyword">return</span> sessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceProxy <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProxy</span>(druidDataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="业务方法">业务方法</h4><p>方法上贴 : @GlobalTransactional(rollbackFor = Exception.class) 开启Seata全局事务</p><h4 id="2-6-注释事务开启注解">2.6.注释事务开启注解</h4><p>注意：不能加@<em>EnableTransactionManagement</em> <em>注解了 ， 也不需要加</em>@Transactional</p><h4 id="2-7-undolog表">2.7.undolog表</h4><p>数据库中创建表，涉及到事务的表都需要添加undolog</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 注意此处0.3.0+ 增加唯一索引 ux_undo_log</span><br><span class="line">CREATE TABLE `undo_log` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `branch_id` bigint(20) NOT NULL,</span><br><span class="line">  `xid` varchar(100) NOT NULL,</span><br><span class="line">  `context` varchar(128) NOT NULL,</span><br><span class="line">  `rollback_info` longblob NOT NULL,</span><br><span class="line">  `log_status` int(11) NOT NULL,</span><br><span class="line">  `log_created` datetime NOT NULL,</span><br><span class="line">  `log_modified` datetime NOT NULL,</span><br><span class="line">  `ext` varchar(100) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h3 id="五-redis分布式缓存">五.redis分布式缓存</h3><ol><li><h4 id="导入依赖-2">导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="yml配置-2">yml配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-user</span> <span class="comment">#服务名</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">43.136</span><span class="number">.61</span><span class="number">.70</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">2000ms</span></span><br></pre></td></tr></table></figure></li><li><h5 id="Redis序列化配置">Redis序列化配置</h5><p>我们通常以JSON格式将数据存储到Redis中，这种格式是所有编程语言通用的，所以我们可以把Redis的序列化方式配置为JSON ,这样的话我们就可以不用自己去转JSON了.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓存的配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory factory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用JSON进行序列化</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//JSON格式序列化</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">genericJackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">         <span class="comment">//key的序列化</span></span><br><span class="line">        redisTemplate.setKeySerializer(genericJackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//value的序列化</span></span><br><span class="line">        redisTemplate.setValueSerializer(genericJackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//hash结构key的虚拟化</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">//hash结构value的虚拟化</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(genericJackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;CourseType&gt; list = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> redisTemplate.opsForValue().get(YmccConstants.CACHE_COURSE_TYPE);</span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">null</span> != o) &#123;</span><br><span class="line">          <span class="comment">// 从redis中读取返回数据</span></span><br><span class="line">          list = (List&lt;CourseType&gt;) o;</span><br><span class="line">          System.out.println(<span class="string">&quot;-------redis&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          list = getCourseTypes();</span><br><span class="line">          <span class="comment">// 存入redis</span></span><br><span class="line">          redisTemplate.opsForValue().set(YmccConstants.CACHE_COURSE_TYPE, list);</span><br><span class="line">          System.out.println(<span class="string">&quot;-------mysql&quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="六-SpringCache缓存">六.SpringCache缓存</h3><ol><li><p>SpringCahce对缓存流程进行了简化封装，提供了一些注解，我们通过简单的打注解就能实现缓存的添加，修改，删除等,注解如下：</p><ul><li><p>@Cacheable:触发缓存写入。</p></li><li><p>@CacheEvict:触发缓存清除。</p></li><li><p>@CachePut:更新缓存(不会影响到方法的运行)。</p></li><li><p>@Caching:重新组合要应用于方法的多个缓存操作。</p></li><li><p>@CacheConfig:设置类级别上共享的一些常见缓存设置。</p></li></ul></li><li><h4 id="配置SpringCache">配置SpringCache</h4><p>继承 CachingConfigurerSupport 对SpringCache进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.interceptor.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 自定义生成redis-key ， 类名.方法名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyGenerator <span class="title function_">keyGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (o, method, objects) -&gt; &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            sb.append(o.getClass().getName()).append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            sb.append(method.getName()).append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Object obj : objects) &#123;</span><br><span class="line">                sb.append(obj.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;keyGenerator=&quot;</span> + sb.toString());</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CacheResolver <span class="title function_">cacheResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleCacheResolver</span>(cacheManager());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CacheErrorHandler <span class="title function_">errorHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 用于捕获从Cache中进行CRUD时的异常的回调处理器。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleCacheErrorHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//缓存管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">cacheConfiguration</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                        .disableCachingNullValues() <span class="comment">//不允许空值</span></span><br><span class="line">                        .serializeValuesWith(RedisSerializationContext.SerializationPair</span><br><span class="line">                                             <span class="comment">//值使用JSON序列化</span></span><br><span class="line">                                             .fromSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>()));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(factory).cacheDefaults(cacheConfiguration).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><h4 id="开启SpringCache">开启SpringCache</h4><p>在启动类注解：@EnableCaching</p></li><li><h4 id="【特别注意】">【<code>特别注意</code>】</h4><p>缓存注解不能加在内部方法上，比如：方法A调用方法B，给方法B加上缓存注解会失效，因为内部方法调用代理会失效。在A方法上打注解即可。</p></li><li><p>添加缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = YmccConstants.CACHE_COURSE_TYPE, key = &quot;&#x27;all&#x27;&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CourseType&gt; <span class="title function_">treeData</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="comment">/* List&lt;CourseType&gt; list = null;</span></span><br><span class="line"><span class="comment">    final Object o = redisTemplate.opsForValue().get(YmccConstants.CACHE_COURSE_TYPE);</span></span><br><span class="line"><span class="comment">    if (null != o) &#123;</span></span><br><span class="line"><span class="comment">        // 从redis中读取返回数据</span></span><br><span class="line"><span class="comment">        list = (List&lt;CourseType&gt;) o;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;-------redis&quot;);</span></span><br><span class="line"><span class="comment">    &#125; else &#123;</span></span><br><span class="line"><span class="comment">        list = getCourseTypes();</span></span><br><span class="line"><span class="comment">        // 存入redis</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForValue().set(YmccConstants.CACHE_COURSE_TYPE, list);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;-------mysql&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    log.debug(<span class="string">&quot;=============查询了数据库============&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> getCourseTypes();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从数据库中查询</span></span><br><span class="line"><span class="keyword">private</span> List&lt;CourseType&gt; <span class="title function_">getCourseTypes</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有分类</span></span><br><span class="line">    List&lt;CourseType&gt; courseTypes = selectList(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 将集合转换为map</span></span><br><span class="line">    Map&lt;Long, CourseType&gt; map = courseTypes.stream().collect(Collectors.toMap(CourseType::getId, courseType -&gt; courseType));</span><br><span class="line">    <span class="comment">// 返回给前端的集合</span></span><br><span class="line">    List&lt;CourseType&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    courseTypes.forEach(courseType -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (courseType.getPid() == <span class="literal">null</span> || courseType.getPid() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 顶级</span></span><br><span class="line">            list.add(courseType);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 找到父级</span></span><br><span class="line">            <span class="type">CourseType</span> <span class="variable">type</span> <span class="operator">=</span> map.get(courseType.getPid());</span><br><span class="line">            <span class="keyword">if</span> (type != <span class="literal">null</span>) &#123;</span><br><span class="line">                type.getChildren().add(courseType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="剔除缓存">剔除缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 剔除缓存</span></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames = YmccConstants.CACHE_COURSE_TYPE, key = &quot;&#x27;all&#x27;&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(CourseType entity)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.insert(entity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames = YmccConstants.CACHE_COURSE_TYPE, key = &quot;&#x27;all&#x27;&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteById</span><span class="params">(Serializable id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.deleteById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames = YmccConstants.CACHE_COURSE_TYPE, key = &quot;&#x27;all&#x27;&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateById</span><span class="params">(CourseType entity)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.updateById(entity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见中间件ES和RocketMQ的面试题</title>
      <link href="/posts/e3470f99.html"/>
      <url>/posts/e3470f99.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-RocketMQ如何防止消息丢失">一. RocketMQ如何防止消息丢失</h2><p>MQ的消息生成到消费主要经历三个阶段：MQ消息生产、RocketMQ Broker存储消息、消费者消息对应的消息。如下图:</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221208092750.png" alt="image-20221208092750417"></p><h4 id="消息丢失情况">消息丢失情况</h4><ul><li><p>消息生产者将消息发送到RocketMQ Broker的这个过程可能出现消息丢失。</p><p>生产者只要接收到返回的ack，就代表这个阶段的消息未丢失。</p><p>生产者通过网络将消息发送到Broker，然后等待Broker响应ack，此时的网络是不可靠的，极有可能导致消息发不出去，或者Broker在ack时网络故障导致生产者收不到ack。</p></li><li><p>RocketMQ Broker接收到生产者发送的消息存储的过程消息可能丢失。</p><p>Broker收到消息后是先存储在内存中的，然后再持久化到磁盘，Broker刚收到Producer消息存储在内存中，然后发生宕机，就会导致消息丢失。</p><h4 id="RocketMQ的持久化消息有两种方式："><code>RocketMQ</code>的持久化消息有两种方式：</h4><p>同步刷盘：Broker收到消息后会在持久化到磁盘完成后才发送ack</p><p>异步刷盘：Broker收到消息存到内存后返回ack，然后Broker定期将一组消息持久化到磁盘</p><p>默认是异步刷盘，要保证存储阶段不丢失消息，可以修改为同步刷盘，即确保消息持久化后再ack</p></li><li><p>消费者处理失败，但是将错误进行捕捉，导致消息出现虚假的消费成功。实际上没有消费，但是在MQ看来消费完成了消费。</p></li></ul><h4 id="RocketMQ消息生产方式">RocketMQ消息生产方式</h4><ul><li><strong>同步发送消息：</strong> 重要的通知(订单状态的更新)、短信系统。</li><li><strong>异步发送消息：</strong> 通常用于响应时间敏感的业务场景。</li><li><strong>One-way：</strong> 主要用于对可靠性要求不高的场景，在金融的场景下不适用。一般是用于日志收集。</li></ul><ol><li>one-way 的消息发送模式本身就是不对消息的不丢失无法保证。如果你的系统对消息丢失零容忍不能使用 one-way 的方式发送。</li><li>同步发送消息和异步发送消息 都可以判断消息的<strong>发送状态</strong>判断消息是否已经发送到<strong>Broker</strong>。这里是选择同步发送还是异步发送消息看业务的需要，同步发送比较关心发送后返回的结果对<strong>时间</strong>的要求不是那么敏感。异步发送对消息返回时间敏感。</li></ol><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221208093336.png" alt="image-20221208093336427"></p><h4 id="Producer如何保证发送阶段消息可达">Producer如何保证发送阶段消息可达</h4><p>失败会自动重试，重试后仍然失败，那么Producer会知道消息没发送成功，这个时候可以进行补偿，或者业务做兜底处理。</p><p>Broker是集群部署，高可用，挂了一个节点仍然可以提供服务。</p><h4 id="存储阶段">存储阶段</h4><p>想要在存储阶段保证消息不丢失，可以同步刷盘和主从同步后再发送ack，但是性能肯定会差。</p><h4 id="消费阶段">消费阶段</h4><p>在消费时失败了也会导致消息丢失，这个阶段采用重试也可以解决消息不丢失。</p><h2 id="二-RocketMQ如何保证消息有序">二.RocketMQ如何保证消息有序</h2><p>**全局有序：**整个 <code>RocketMQ</code> 系统的所有消息严格按照队列先入先出顺序进行消费。</p><p>**局部有序：**只保证一部分关键消息的消费顺序。</p><p>按照发送的顺序进行消费就是顺序消息，遵循（FIFO）, 默认生产者以 Round Robin轮询方式把消息发送到不同的 Queue 分区队列；消费者从多个队列中消费消息，这种情况没法保证顺序。RocketMQ 分为全局有序和部分有序：全局有序是一个 topic 下的所有消息都要保证顺序，如果要保证消息全局顺序消费，就需要保证使用一个队列存放消息，一个消费者从这一个队列消费消息就能保证顺序，即：单线程执行部分顺序消息只要保证某一组消息被顺序消费，即：只需要保证一个队列中的消息有序消费即可。比如：保证同一个订单 ID 的生成、付款、发货消息按照顺序消费即可实现。</p><h2 id="三-RocketMQ如何快速处理积压消息">三.RocketMQ如何快速处理积压消息</h2><ol><li>如果是机器本⾝的原因，⽐如消费者组有⼏个消费者服务挂掉了，剩下少量消费者消费能⼒不⾜导致的消费积压，那就正常重新启动,然后慢慢再去消费积压的消息。</li><li>如果是⽣产者端由业务暴增引起的⽣产过快，⽽消费者端消费能⼒不⾜，这个时候就可以采取⽣产者端限流或者进⾏消费者扩容；这个时候要注意，如果⽣产者只是短期暴增或者消息的业务不是很重要可以采⽤限流，如果是长期暴增真正的业务量上涨就必须要进⾏消费者扩</li><li>⽐如说消费者挂了，然后broker堆积了很多消息，然后可以先把堆积的消息读到别的地⽅⽐如mysql或者es然后去后续进⾏处理，然后把RocketMQ堆积的消息删掉，启动消费者保障消费者正常消费，这⾥要注意的是删除堆积消息之前，需要停⽌mq。</li></ol><h2 id="四-RocketMQ延迟消息级别-消费模式">四.RocketMQ延迟消息级别,消费模式</h2><p>延时消息是指发送到 RocketMQ 后不会马上被消费者拉取到，而是等待固定的时间，才能被消费者拉取到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">messageDelayLevel</span> <span class="operator">=</span> <span class="string">&quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里延时级别有 18 个，延迟级别是 3，消息会延迟 10s 后消费者才能拉取。</p><h3 id="消费模式">消费模式</h3><p>消息到消费分为：拉取式 <strong>pull</strong> ,和推送是 <strong>push</strong></p><ol><li>Pull:拉取式，需要消费者间隔一定时间就去遍历关联的 Queue,实时性差但是便于应用控制消息的拉取</li><li>Push:推送式，封装了 Queue 的遍历，实时性强，但是对系统资源占用比较多。</li></ol><h2 id="五-RocketMQ事务消息原理">五.RocketMQ事务消息原理</h2><p>事务消息解决的就是，事务发送方执行本地事务和事务消息的原子性。</p><ol><li>首先事务发起方:往 MQ 中发送一个事务消息-half 半消息(准备消息)，该消息不可被消费;</li><li>然后事务发送方执行本地事务，并发送 commit 给 MQ，如果是执行失败就会发送rollback 给 MQ;</li><li>然后事务发送方执行本地事务，并发送 commit 给 MQ，如果是执行失败就会发送rollback 给 MQ;</li><li>事务参与者，也就是消费者会消费这个消息，然后执行相关的逻辑处理。如果是Rollback 消息就不会被消费，而是丢弃;</li><li>如果事务参与方并没有发送 commit 或者 rollback 指令 MQ，MQ 回调用事务发送方的回到方法来检查，我们需要去实现这个本地事务检查接口，通过返回 commit 或者rollback 来告知 MQ 本地事务是否执行成功。</li></ol><h2 id="六-为什么要使用es-跟sql模糊查询比如何">六.为什么要使用es,跟sql模糊查询比如何</h2><p>查询速度快，传统搜索比如 mysql 的 like 关键字查询，它的搜索方式就是全文扫表，查询性能很低；</p><p>ES 是基于 Lucene 的全文检索引擎，它采用的是倒排索引结构，在存储时先对文档进行分词，再做一些标点符号去除，大小写时态转换等优化处理，最后按照字母顺序去重，排序，形成一个倒排索引文档，我们在检索时，就可以通过二分查找的方式找到目标值。</p><h2 id="七-es的版本-es的分层结构-index下面是什么">七.es的版本,es的分层结构,index下面是什么</h2><ol><li>Index：索引库，包含有一堆相似结构的文档数据，类比 Mysql 中的数据库</li><li>Type：类型，它是 index 中的一个逻辑数据分类，类比 Mysql 中的表</li><li>Document：文档：是 ES 中的最小数据单元，通常用 json 结构标识，类比 Mysql 中的一行数据</li><li>Field：字段：类比 Mysql 中的一个列</li><li>从 ES7.0 开始，Type 被干掉了，从此库表合一即一个 Index 中只有一个默认的 Type</li></ol><h2 id="八-es的keyword和text区别">八.es的keyword和text区别</h2><ol><li>keyword：不分词，直接建立索引，支持模糊查询，精确查询，聚合查询;</li><li>text：分词后建立索引，支持模糊查询，精确查询，不支持聚合查询;</li><li>keyword 通常用于通常用于存储年龄，性别，邮编，邮箱号码等等，直接将完整数据保存的场景;</li><li>text 通常存储全文搜索的数据，例如地址，文章内容的保存。</li></ol><h2 id="九-es分词器">九.es分词器</h2><p>ES会将text格式的字段按照分词器进行分词，并编排成倒排索引，正是因为如此，es的查询才如此之快。</p><ol><li>standard分词器 —— ES默认分词器，对于中文会按每个字分开处理，会忽略特殊字符；</li><li>ik 分词器 —— 适用于根据词语查询整个内容信息，同样忽略其他特殊字符以及英文字符；</li><li>pinyin 分词器 —— 适用于通过拼音查询到对应字段信息，同时忽略特殊字符。</li></ol><h2 id="十-DSL语法">十.DSL语法</h2><ol><li>DSL 是一种以 json 形式标识的，由 ES 提供的一种查询语言，它由两部分组成，DSL查询和 DSL 过滤。</li><li>DSL 过滤类似于模糊查询，DSL 查询类似于精确查询。</li></ol><h2 id="十一-es怎么保证并发安全性">十一.es怎么保证并发安全性</h2><p>ES采取的是乐观锁机制;ES是靠内部维护的一个_version版本号字段进行乐观锁的。</p><p>每个索引文档都有一个版本号。默认情况下，使用从 1 开始的内部版本控制，每次更新都会增加，包括删除。版本号可以设置为外部值（例如，如果在数据库中维护）。</p><h2 id="十二-Elasticsearch如何保证读写一致？">十二.Elasticsearch如何保证读写一致？</h2><p>1、可以通过版本号使用乐观并发控制，以确保新版本不会被旧版本覆盖，由应用层来处理具体的冲突；</p><p>2、另外对于写操作，一致性级别支持 quorum/one/all，默认为 quorum，即只有当大多数分片可用时才允许写操作。但即使大多数可用，也可能存在因为网络 等原因导致写入副本失败，这样该副本被认为故障，分片将会在一个不同的节点 上重建。</p><p>3、对于读操作，可以设置 replication 为 sync(默认)，这使得操作在主分片和副 本分片都完成后才会返回；如果设置 replication 为 async 时，也可以通过设置搜索请求参数_preference 为 primary 来查询主分片，确保文档是最新版本。</p><h2 id="十三-ES如何实现高亮">十三.ES如何实现高亮</h2><p>使用 HighlightBuilder 对关键字作高亮处理，由于我们项目使用的是 SpringBoot 整合 ES的 jar 包，结果没有进行高亮处理，我们使用 ElasticsearchTemplate 的 queryForPage 方法来获取结果，再手动进行分页封装返回前台。</p><h2 id="十四-ES有哪些聚合查询？">十四.ES有哪些聚合查询？</h2><ol><li>指标聚合，比如求和，求最大值，最小值，平均数</li><li>数量统计聚合，计算满足条件数据的总条数，相当于 sql 中的 count</li><li>Q 去重聚合，它会计算非重复的数据个数，相当于 sql 中的 distinct</li><li>桶聚合，它会将某个 field 的每个唯一值当成一个桶，并计算每个桶内的文档个数，相当于 sql 中的 group by</li><li>最高权值聚合，它会匹配每组前 n 条数据，相当于 sql 中的 group by 后取出前 n 条。</li></ol><h2 id="十五-es集群-分片机制-了解">十五.es集群,分片机制(了解)</h2><h3 id="集群">集群</h3><p>ES可以作为一个独立的单个搜索服务器。不过，为了处理大型[数据集]，实现容错和高可用性，ES可以运行在许多互相合作的服务器上。这些服务器的集合称为集群，集群内的节点的cluster.name相同。</p><h3 id="分片">分片</h3><p>当有大量的文档时，由于内存的限制、磁盘处理能力不足、无法足够快的响应客户端的请求等，一个节点可能不够。</p><p>这种情况下，数据可以分为较小的分片。每个分片放到不同的服务器上。 当你查询的索引分布在多个分片上时，ES会把查询发送给每个相关的分片，并将结果组合在一起，而应用程序并不知道分片的存在。即：这个过程对用户来说是透明的。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见数据库优化面试题</title>
      <link href="/posts/bb6ee00a.html"/>
      <url>/posts/bb6ee00a.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-在项目中如何定位慢查询">一.在项目中如何定位慢查询</h3><ul><li>通过 druid 连接池的内置监控来定位慢 SQL。</li><li>通过 MySQL 的慢查询日志查看慢 SQL。</li><li>通过 show processlist，查看当前数据库 SQL 执行情况来定位慢 SQL。</li></ul><h3 id="二-如何查看sql语句索引命中情况">二.如何查看sql语句索引命中情况</h3><p>在 SQL 语句前加上 explain，结果中的 key 就是实际用到的索引</p><h3 id="三-说说数据库锁表的场景和解决方法">三.说说数据库锁表的场景和解决方法</h3><ol><li><p>产生场景</p><p>锁表通常发生在 DML（ insert 、update 、delete ）语句中，例如：程序 A 对 A 表的 a 数据 进行修改，修改过程中产生错误，没有 commit 也没有 rollback ，这个时候程序 B 对 A 表的 a 数据进行修改，会产生资源正忙的异常，也就是锁表。</p><p>DDL也会引发锁表，例如在 MySql 操作一张大表，利用 alter 语句修改或新增字段的时候，恰巧有一个长事务（包括读）在操作此表，会触发修改等待，造成锁表。</p></li><li><p>原因</p><p>当多个事务处理对多个资源同时访问时，若双方已锁定一部分资源但也都需要对方已锁定的资源时，无法在有限的时间内完全获得所需的资源，就会处于无限的等待状态，从而造成其对资源需求的死锁，导致锁表。</p></li><li><p>MySQL解决办法</p><ul><li><p>执行SQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from information_schema.processlist where command not in (&#x27;Sleep&#x27;) ORDER BY time desc</span><br></pre></td></tr></table></figure></li><li><p>sql 已经按照阻塞时长从大到小排序，找到耗时长的记录 id ，kill 即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill pid</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="四-truncate和delete的区别">四.truncate和delete的区别</h3><p>1.delete是DML语句，truncate是DDL语句；</p><p>2.delete后面可以有where条件，truncate后面不能加where条件；</p><p>3.delete操作后，事务提交后才会生效，truncate操作后立即生效，所以truncate要比delete得执行效率高（数据量大的话就比较明显了）；</p><p>4.delete操作后，是按行删除，原数据会放到rollback segment中，可进行回滚。truncate执行是立即生效的，不记录行删除信息，而是直接重构表，所以不能回滚；</p><p>5.delete执行后，会产生数据碎片，只删除数据，不会改变表空间大小。truncate执行后，数据库表会恢复至初始状态。</p><h3 id="五-union与union-all的区别">五.union与union all的区别</h3><p>1、union: 对两个结果集进行并集操作, <strong>不包括重复行</strong>,相当于distinct, 同时进行默认规则的排序;会对获取的结果进行<strong>排序</strong>操作</p><p>2、union all: 对两个结果集进行并集操作, <strong>包括重复行</strong>, 即所有的结果全部显示, 不管是不是重复;不会对获取的结果进行排序操作</p><p><strong>union all只是合并查询结果，并不会进行去重和排序操作，在没有去重的前提下，使用union all的执行效率要比union高</strong></p><h3 id="六-left-join-right-join-inner-join区别">六.left join,right join inner join区别</h3><ul><li><p>LEFT JOIN 左连接，以左侧表为主，右侧表与其相匹配，匹配不上的记录 ，以null 做替补；</p></li><li><p>RIGHT JOIN右连接，以右侧表为主，左侧表与其相匹配，匹配不上得记录，以null做替补;</p></li><li><p>INNER JOIN内连接，取交集。</p></li></ul><h3 id="七-MySQL执行流程">七.MySQL执行流程</h3><ol><li>客户端发起 SQL 查询，首先通过连接器，它会检查用户的身份，包括校验账户密码，权限，然后会查询缓存，如果缓存命中直接返回，如果没有命中再执行后续操作，但是MySQL8.0 之后已经删除了缓存功能；</li><li>接下来到达分析器，主要检查语法词法，比如 SQL 有没有写错，总共有多少关键字；要查询哪些东西；</li><li>然后到达优化器，他会以自己的方式优化我们的 SQL；</li><li>最后到达执行器，调用存储引擎执行 SQL 并返回结果。</li></ol><h3 id="八-MySQL语句执行顺序">八.MySQL语句执行顺序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from-&gt;on-&gt;join-&gt;where-&gt;group by-&gt;having-&gt;select-&gt;distinct-&gt;order by-&gt;limit</span><br></pre></td></tr></table></figure><h3 id="九-说说数据库设计三范式">九.说说数据库设计三范式</h3><ol><li>第一范式：任何一张表都应该有自己的主键，并且每一个字段的原子性都是不可再分的。<ul><li>列唯一，每一个字段具有原子性不可再分；</li><li>每一张表都有主键。</li></ul></li><li>第二范式：在第一范式的基础上，要求所有的非主键字段完全依赖主键，不能产生部分依赖。<ul><li>行唯一</li></ul></li><li>第三范式：在第二范式的基础上，所有非主键只能依赖于主键，不能产生传递依赖。<ul><li>存在外键，比如学生表中可以有班级表的主键进行关联。</li></ul></li></ol><h3 id="十-CHAR-和-VARCHAR-的区别">十.CHAR 和 VARCHAR 的区别</h3><p>char是一种固定长度的类型，无论储存的数据有多少都会固定长度，如果插入的长度小于定义长度，则可以用空格进行填充。而varchar是一种可变长度的类型，当插入的长度小于定义长度时，插入多长就存多长。</p><ol><li>char最大长度是255字符，varchar最大长度是65535个字节。</li><li>char是定长的，不足的部分用隐藏空格填充，varchar是不定长的。</li><li>char会浪费空间，varchar会更加节省空间。</li><li>char查找效率会很高，varchar查找效率会更低。</li><li>尾部空格：char插入时可省略，varchar插入时不会省略，查找时省略。</li></ol><h3 id="十一-DDL-DML优化手段有哪些-批量插入">十一.DDL,DML优化手段有哪些,批量插入</h3><ol><li><p>DDL:在导入数据时，可以通过禁用索引来提高导入数据性能 。这个操作主要针对有数据的表，追加数据。</p></li><li><p>DML:变多次事务提交为一次事务提交。批量插入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into test values(1,2),(1,3),(1,4);</span><br></pre></td></tr></table></figure></li></ol><h3 id="十二-MySQL存储引擎">十二.MySQL存储引擎</h3><ol><li><h4 id="InnoDB存储引擎"><strong>InnoDB存储引擎</strong></h4><p>InnoDB是事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。</p><ul><li>支持事务，行锁，表锁，不支持全文索引，数据库宕机后可以恢复数据。</li></ul></li><li><h4 id="MyISAM存储引擎"><strong>MyISAM存储引擎</strong></h4><p>MyISAM拥有较高的插入、查询速度，但<strong>不支持事物</strong>。</p><ul><li>不支持外键，数据崩溃后无法恢复，只支持表锁。</li></ul></li><li><h4 id="MEMORY存储引擎"><strong>MEMORY存储引擎</strong></h4><p>不支持事务</p><p>表级锁定</p><p>读写相互阻塞，写入不能读，读时不能写</p><p>只缓存索引</p><p>不支持外键约束</p><p>不支持聚簇索引</p><p>读取数据较快，占用资源少</p><p>不支持MVCC 高并发 (多版本并发控制机制)</p><p>崩溃恢复性较差</p><p>mysql 5.5.5 前的默认数据引擎（show engines; 查看）</p><ul><li>不支持外键</li></ul><table><thead><tr><th><strong>功 能</strong></th><th><strong>MYISAM</strong></th><th><strong>Memory</strong></th><th><strong>InnoDB</strong></th><th><strong>Archive</strong></th></tr></thead><tbody><tr><td>存储限制</td><td>256TB</td><td>RAM</td><td>64TB</td><td>None</td></tr><tr><td>支持事物</td><td>No</td><td>No</td><td>Yes</td><td>No</td></tr><tr><td>支持全文索引</td><td>Yes</td><td>No</td><td>No</td><td>No</td></tr><tr><td>支持数索引</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>支持哈希索引</td><td>No</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>支持数据缓存</td><td>No</td><td>N/A</td><td>Yes</td><td>No</td></tr><tr><td>支持外键</td><td>No</td><td>No</td><td>Yes</td><td>No</td></tr></tbody></table></li></ol><h3 id="十三-MySQL行锁与表锁">十三.MySQL行锁与表锁</h3><ol><li><p><strong>行锁</strong>：MySQL中锁定粒度最细的一种锁，表示只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，但加锁的开销也最大。<strong>行级锁分为共享锁和排他锁</strong>。<strong>InnoDB存储引擎默认采用行锁</strong>。<strong>InnoDB与MyISAM的最大不同有两点：一是支持事务（TRANSACTION）;二是采用了行级锁。</strong></p><p>特点：行锁开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p></li><li><p><strong>表锁</strong>：MySQL中锁定粒度最大的一种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分MySQL引擎支持。最常使用的MyISAM与InnoDB都支持表级锁定。表级锁定分为表共享读锁（共享锁）与表独占写锁（排他锁）。</p><p>特点：表锁开销小，加锁快，无死锁，锁定粒度大，发生锁冲突的概率最高，并发最低。</p></li></ol><h3 id="十四-MySQL索引有哪些类型">十四.MySQL索引有哪些类型</h3><ol><li>普通索引：允许重复的值</li><li>唯一索引：不允许有重复的值</li><li>主键索引：数据库自动为我们的主键创建索引，如果我们没有指定主键，它会根据没有 null 的唯一索引创建主键索引，否则会默认根据一个隐藏的 rowId 作为主键索引</li><li>全文索引，用来对文本域进行索引，比如 text，varchar，只针对 MyISAM 有效</li></ol><h3 id="十五-索引方式有哪些">十五.索引方式有哪些</h3><p>B+树和 hash，Myisam 和 innodb 都不支持 hash。</p><h3 id="十六-索引失效的情况有哪些">十六.索引失效的情况有哪些</h3><ol><li><strong>like 以%开头，索引无效；当like前缀没有%，后缀有%时，索引有效。</strong></li><li><strong>or语句前后没有同时使用索引。</strong><ul><li>当or左右查询字段只有一个是索引，该索引失效，只有当or左右查询字段均为索引时，才会生效</li></ul></li><li><strong>组合索引，不是使用第一列索引，索引失效。</strong></li><li><strong>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来，否则不使用索引</strong><ul><li>数据类型出现隐式转化。如varchar不加单引号的话可能会自动转换为int型，使索引无效，产生全表扫描。</li></ul></li><li><strong>在索引列上使用 IS NULL 或 IS NOT NULL操作。</strong><ul><li>索引是不索引空值的，所以这样的操作不能使用索引</li></ul></li><li><strong>在索引字段上使用not，&lt;&gt;，!=。</strong><ul><li>不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 优化方法： key&lt;&gt;0 改为 key&gt;0 or key&lt;0。</li></ul></li><li><strong>对索引字段进行计算操作、字段上使用函数。</strong></li><li><strong>当全表扫描速度比索引速度快时，mysql会使用全表扫描，此时索引失效。</strong><ul><li>如果mysql估计使用全表扫描要比使用索引快,则不使用索引</li></ul></li></ol><h3 id="十七-MySQL索引的数据结构-B-树的特点">十七.MySQL索引的数据结构,B+树的特点</h3><ol><li>数据结构：B+树，HASH。</li><li>特点<ul><li>非叶子节点仅具有索引作用，也就是说，非叶子节点只能存储Key,不能存储value</li><li>树的所有叶节点构成一个有序链表，可以按照key排序的次序依次遍历全部数据。</li></ul></li></ol><h3 id="十八-MySQL主从复制原理">十八.MySQL主从复制原理</h3><ol><li>主要依靠 binlog 来实现的，它记录的是所有的 DDL，DML，TCL 操作</li><li>当主库的数据发生改变时，会将改变记录保存到 binloga2 中</li><li>主库新开一个线程将 binlog 内容发送到从库</li><li>从库会发起一个 I/O 线程请求主库的 binlog，并保存到中继日志中</li><li>从库新开一个 SQL 线程，读取中继日志并解析成具体操作，从而将主库更新的内容写到了从库中</li></ol><h3 id="十九-集群模式有哪些-分别有什么优缺点">十九.集群模式有哪些,分别有什么优缺点?</h3><ol><li>主从复制：一主一从，一主多从，主负责读写，从只能读，一对一或一对多关系。</li><li>哨兵模式：基于主从模式，哨兵实际上是一个单独进程，用来监听主服务是否宕机，如果宕机则将从转为主，并且通知其他的服务器修改配置文件，让它们切换主机。哨兵模式也可配置多哨兵，多哨兵之间互相监控。</li><li>集群模式：集群是将应用复制成多个相同应用，分散在不同服务器，每个服务器都独立运行相同的代码，可以分散服务器压力解决高并发问题，同时也能预防单点节点故障，就是一台服务器故障并不影响其他服务器正常运行，但没有解决单体应用代码臃肿，业务复杂，维护性差等问题。</li></ol><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的并发面试题</title>
      <link href="/posts/73d7ae5.html"/>
      <url>/posts/73d7ae5.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-进程与线程的区别">一.进程与线程的区别?</h3><ol><li>进程是操作系统进行资源分配的最小单元，线程是操作系统进行运算调度的最小单元。</li><li>进程中包含了线程，线程属于进程。</li><li>进程的内存和资源是该进程下的线程所共享的。</li></ol><h3 id="二-创建线程的方式以及区别">二.创建线程的方式以及区别?</h3><ul><li><p>继承Thread类：需要实现 run() 方法。通过 Thread 调用 start() 方法来启动线程。</p></li><li><p>实现Runnable接口：同样也是需要实现 run() 方法，并且最后也是调用 start() 方法来启动线程。</p></li><li><p>实现Callable 接口：与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装。</p></li><li><p>使用ExecutorService、Callable、Future实现有返回结果的多线程。</p></li></ul><p>实现接口会更好一些，因为：Java 不支持多继承，因此继承了 Thread 类就无法继承其它类，但是可以实现多个接口；类可能只要求可执行即可，继承整个 Thread 类开销会过大。</p><h4 id="Thread和Runable的区别和联系"><strong>Thread和Runable的区别和联系</strong></h4><ul><li><p>Thread类实现了Runable接口。都需要重写里面Run方法。</p></li><li><p>不同：实现Runnable的类更具有健壮性，避免了单继承的局限。</p></li><li><p>Runnable更容易实现资源共享，能多个线程同时处理一个资源。</p></li></ul><h3 id="三-线程的状态有哪些">三.线程的状态有哪些?</h3><p><strong>新建状态</strong></p><p>使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。</p><p><strong>就绪状态</strong></p><p>当线程对象调用了**start()**方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p><p><strong>运行状态</strong></p><p>如果就绪状态的线程获取 CPU 资源，就可以执行 <strong>run()</strong>，此时线程便处于运行状态。处于运行状态的线程最为复杂，它<strong>可以变为阻塞状态、就绪状态和死亡状态</strong>。</p><p><strong>阻塞状态</strong></p><p>如果一个线程执行了<strong>sleep</strong>（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从<strong>运行状态进入阻塞状态</strong>。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：</p><ul><li><p>等待阻塞：运行状态中的线程执行 <strong>wait()</strong> 方法，使线程进入到等待阻塞状态。</p></li><li><p>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</p></li><li><p>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。</p></li></ul><p><strong>死亡状态</strong></p><p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p><h3 id="四-sleep与wait区别">四.sleep与wait区别?</h3><ol><li>sleep是线程类（Thread）的方法；wait是Object类的方法</li><li>sleep是使线程休眠，不会释放对象锁；wait是使线程等待，释放锁;<br>sleep让出的是cpu,如果此时代码是加锁的，那么即使让出了CPU,其他线程也无法运行，因为没有得到锁；wait是让自己暂时等待，放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。</li><li>调用sleep进入阻塞状态；调用wait进入等待状态，调用notify进入就绪状态。</li></ol><h3 id="五-线程通信方式-volatile关键字的理解">五.线程通信方式?volatile关键字的理解</h3><ol><li>线程通信的第一种方式：[volatile]关键字基于volatile关键字来实现线程间通信是基于<strong>共享内存</strong>的思想：多个线程同时监听某个变量，当该变量发生变量的时候，线程能够感知并执行相应的业务。</li><li>volatile关键字保证了共享变量的可见性，任何线程需要读取时都要到内存中读取（确保获得最新值）。synchronized关键字确保只能同时有一个线程访问方法或者变量，保证了线程访问的可见性和排他性。<br>synchronized底层是基于监视器（Monitor）的获取，每个对象都有自己的监视器，线程必须获得监视器才能继续执行内容。</li><li>ThreadLocal()<br>ThreadLocal，即线程本地变量（每个线程唯一），每个线程只能访问自己的，底层是一个ThreadLocalMap来存储信息，以ThreadLocal对象为键、任意对象为值，key是弱引用，value是强引用，所以使用完毕后要及时清理(尤其使用线程池时)。</li></ol><h3 id="六-保证线程安全的方式有哪些">六.保证线程安全的方式有哪些?</h3><ol><li><p>第一种实现线程安全的方式：同步代码块，即用synchronized关键字</p></li><li><p>第二种方法：同步方法，也是用synchronized关键字，只是这个关键字用在方法上了，把线程共享的数据块抽象成方法，在方法上加了同步锁。</p></li><li><p>第三种方法：使用Lock锁机制，对线程不安全的代码块采用lock()加锁，使用unlock()解锁。</p></li></ol><p>ps：①<code>synchronized</code>是在JVM层面实现的，因此系统可以监控锁的释放与否；而<code>ReentrantLock</code>是使用代码实现的，系统无法自动释放锁，需要在代码中的finally子句中显式释放锁<code>lock.unlock()</code>。</p><p>②<code>synchronized</code>适合并发量小，并发量高使用<code>ReentrantLock</code>。</p><p>③在使用synchronized 代码块时,可以与wait()、notify()、nitifyAll()一起使用，从而进一步实现线程的通信。</p><p>④wait()方法会释放占有的对象锁，当前线程进入等待池，释放cpu,而其他正在等待的线程即可抢占此锁，获得锁的线程即可运行程序；线程的sleep()方法则表示，当前线程会休眠一段时间，休眠期间，会暂时释放cpu，但并不释放对象锁，也就是说，在休眠期间，其他线程依然无法进入被同步保护的代码内部，当前线程休眠结束时，会重新获得cpu执行权,从而执行被同步保护的代码。<br><strong>wait()和sleep()最大的不同在于wait()会释放对象锁，而sleep()不会释放对象锁。</strong></p><h3 id="七-Synchronized与lock的区别">七.Synchronized与lock的区别?</h3><p>lock是一个接口，主要有以下几个方法：</p><ul><li><p>lock()：获取锁，如果锁被暂用则一直等待</p></li><li><p>unlock():释放锁</p></li><li><p>tryLock(): 注意返回类型是boolean，如果获取锁的时候锁被占用就返回false，否则返回true</p></li><li><p>tryLock(long time, TimeUnit unit)：比起tryLock()就是给了一个时间期限，操作这个时间期限拿不到锁就返回false。</p></li></ul><p>1.<code>synchronized</code>是关键字,Lock是接口;</p><p>2.<code>synchronized</code>是隐式的加锁,lock是显式的加锁;</p><p>3.<code>synchronized</code>可以作用于方法上,lock只能作用于方法块;</p><p>4.<code>synchronized</code>底层采用的是<code>objectMonitor</code>,lock采用的<code>AQS</code>;</p><p>5.<code>synchronized</code>是<strong>阻塞式加锁</strong>,lock是非阻塞式加锁支持可中断式加锁,支持超时时间的加锁;</p><p>6.<code>synchronized</code>在进行加锁解锁时,只有一个同步队列和一个等待队列, lock有一个同步队列,可以有多个等待队列;</p><p>7.<code>synchronized</code>只支持非公平锁,lock支持非公平锁和公平锁;</p><p>8.<code>synchronized</code>使用了object类的wait和notify进行等待和唤醒, lock使用了condition接口进行等待和唤醒(await和signal);</p><p>9.<code>lock</code>支持个性化定制, 使用了模板方法模式,可以自行实现lock方法;</p><p>10.一旦synchronized 块结束，就会自动释放对<code>someObject</code>的占用。 lock却必须调用unlock方法进行<strong>手动释放</strong>，为了保证释放的执行，往往会把unlock() 放在finally中进行；</p><h3 id="八-Synchronized底层实现原理-锁升级过程">八.Synchronized底层实现原理,锁升级过程?</h3><p>Synchronized底层通过⼀个monitor的对象来完成，每个对象有⼀个监视器锁（monitor）。当monitor被占⽤时就会处于锁定状态，线程执⾏monitorenter指令时尝 试获取monitor的所有权，过程如下：</p><pre><code>（1）如果monitor的进⼊数为0，则该线程进⼊monitor，然后将进⼊数设置为1，该线程即为monitor的所有者。（2）如果线程已经占有该monitor，只是重新进⼊，则进⼊monitor的进⼊数加1。（3）如果其他线程已经占⽤了monitor，则该线程进⼊阻塞状态，直到monitor的进⼊数为0，再重新尝试获取monitor的所有权。</code></pre><p>执⾏monitorexit的线程必须是object所对应的monitor的所有者。指令执⾏时，monitor的进⼊数减1，如果减1 后进⼊数为0，那线程退出monitor，不再是这个monitor的所有者。其他被这个monitor阻塞的线程可以尝试去获 取这个monitor的所有权。<br><strong>Synchronized是可重入锁。</strong></p><p><strong>简单理解</strong>：Synchronized基于JVM内置锁实现，通过内部对象Monitor(监视器锁)实现，通过进入与退出对象的Monitor来实现方法与代码块同步。对象的JDK1.5之后 ，Synchronized会从无锁升级为偏向锁，再升级为轻量级锁，最后升级为重量级锁。</p><h4 id="锁升级">锁升级</h4><p>对象头：每个对象都拥有对象头，对象头由Mark World ，指向类的指针，以及数组长度三部分组成，锁升级主要依赖Mark Word中的锁标志位和释放偏向锁标识位。</p><ul><li>偏向锁（无锁）</li></ul><p>大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得。偏向锁的目的是在某个线程获得锁之后（线程的id会记录在对象的Mark Word锁标志位中），消除这个线程锁重入（CAS）的开销，看起来让这个线程得到了偏护。(第二次还是这个线程进来就不需要重复加锁，基本无开销)，如果自始至终使用锁的线程只有一个，很明显偏向锁几乎没有额外开销，性能极高。</p><ul><li>轻量级锁（CAS）：</li></ul><p>轻量级锁是由偏向锁升级来的，偏向锁运行在一个线程进入同步块的情况下，当第二个线程加入锁争用的时候，偏向锁就会升级为轻量级锁自旋锁）；没有抢到锁的线程将自旋，获取锁的操作。轻量级锁的意图是在没有多线程竞争的情况下，通过CAS操作尝试将MarkWord锁标志位更新为指向LockRecord的指针，减少了使用重量级锁的系统互斥量产生的性能消耗。</p><p>长时间的自旋操作是非常消耗资源的，一个线程持有锁，其他线程就只能在原地空耗CPU，执行不了任何有效的任务，这种现象叫做忙等（busy-waiting）</p><ul><li>重量级锁：</li></ul><p>如果锁竞争情况严重，某个达到最大自旋次数(10次默认)的线程，会将轻量级锁升级为重量级锁，重量级锁则直接将自己挂起，在JDK1.6之前，synchronized直接加重量级锁，很明显现在得到了很好的优化。</p><p>虚拟机使用CAS操作尝试将MarkWord更新为指向LockRecord的指针，如果更新成功表示线程就拥有该对象的锁；如果失败，会检查MarkWord是否指向当前线程的栈帧，如果是，表示当前线程已经拥有这个锁；如果不是，说明这个锁被其他线程抢占，此时膨胀为重量级锁。</p><h3 id="九-悲观锁与乐观锁">九.悲观锁与乐观锁</h3><h4 id="悲观锁（悲观并发控制）">悲观锁（悲观并发控制）</h4><p>当我们要对数据库中的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对该数据进行加锁以防止并发的发生。</p><p>为什么叫做悲观锁呢？因为这是一种对数据的修改抱有悲观态度的并发控制方式。我们一般认为数据被并发修改的概率比较大，所以需要在修改之前先加锁。</p><p>数据库中的行锁，表锁，读锁，写锁，以及 syncronized 实现的锁均为悲观锁。</p><h4 id="乐观锁">乐观锁</h4><p>乐观锁是对于数据冲突保持一种乐观态度，操作数据时不会对操作的数据进行加锁，只有到数据提交的时候才通过一种机制来验证数据是否存在冲突。</p><p>乐观锁通常是通过在表中增加一个版本(version)或时间戳(timestamp)来实现，其中，版本最为常用。</p><p>乐观锁每次在执行数据的修改操作时，都会带上一个版本号，一旦版本号和数据的版本号一致就可以执行修改操作并对版本号执行 +1 操作，否则就执行失败。</p><h3 id="十-乐观锁的实现方式">十.乐观锁的实现方式?</h3><ol><li><h4 id="版本号机制">版本号机制</h4><p>​    一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。</p></li><li><h3 id="CAS算法">CAS算法</h3><p>​    即compare and swap（比较与交换），是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。CAS算法涉及到三个操作数:</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">需要读写的内存值 V</span><br><span class="line"></span><br><span class="line">进行比较的值 <span class="selector-tag">A</span></span><br><span class="line"></span><br><span class="line">拟写入的新值 <span class="selector-tag">B</span></span><br></pre></td></tr></table></figure></blockquote><p>​    当且仅当 V 的值等于 A时，CAS通过原子方式用新值B来更新V的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个自旋操作，即不断的重试。</p></li></ol><h3 id="十一-什么是ABA问题">十一.什么是ABA问题?</h3><p>ABA 问题是乐观锁一个常见的问题</p><p>如果一个<strong>变量V</strong>初次读取的时候是<strong>A值</strong>，并且在准备赋值的时候检查到它仍然是A值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回A，那<strong>CAS</strong>操作就会误认为它从来没有被修改过。这个问题被称为CAS操作的 &quot;ABA&quot;问题。</p><h3 id="十二-i-是线程安全的吗？如何解决线程安全性？">十二.i++是线程安全的吗？如何解决线程安全性？</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">1、i</span><span class="literal">++</span><span class="comment">作用域在局部方法中是不会出现线程安全问题的，只有在全局变量中才会出现线程安全问题</span></span><br><span class="line"> <span class="comment">2、volatile只能保证变量对其他线程的可见性，并不能保证原子性操作</span></span><br><span class="line"> <span class="comment">3、可以对i</span><span class="literal">++</span><span class="comment">操作使用同步锁，或者使用Atomic*包修饰共享变量，来保证原子性操作</span></span><br></pre></td></tr></table></figure><p><strong>如果i是全局变量，则会出现安全问题；如果i是局部变量，则是线程安全的</strong></p><h4 id="java中对共享变量的操作原理">java中对共享变量的操作原理</h4><p>共享变量存储在主内存中，当某个线程需要对共享变量进行操作时，需要将共享变量拷贝一份到自己的工作内存中（线程私有），操作完成之后，就会将最新的结果刷新到主存中。这里的线程安全问题就在于，当一个线程将主存中的数据读取到自己的工作内存之后，没来操作完成，那另一个线程又将主存数据读取并操作，很显然，前者对于主存变量的操作就会被覆盖，从而引发线程安全问题。</p><h4 id="解决方案">解决方案</h4><ol><li><p>使用volatile字段对共享变量进行修饰。<br>volatile字段的作用是让改变量对其他所有线程可见，但是并不能保证操作的原子性。仍然会出现多个线程同时读取主内存变量的情况。</p></li><li><p>加同步锁，比如使用synchronized关键字修饰，保证只有一个线程可以对主存变量进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span> &#123;</span><br><span class="line">        value++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Atomic*类修饰来保证原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span> &#123;</span><br><span class="line">        value.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="十三-ThreadLocal原理-应用场景以及会产生的问题-key弱引用">十三.ThreadLocal原理,应用场景以及会产生的问题(key弱引用)</h3><p><code>ThreadLocal</code>，即线程本地变量。如果你创建了一个<code>ThreadLocal</code>变量，那么访问这个变量的每个线程都会有这个变量的一个本地拷贝，多个线程操作这个变量的时候，实际是在操作自己本地[内存]里面的变量，从而起到<strong>线程隔离</strong>的作用，避免了并发场景下的线程安全问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个ThreadLocal变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; localVariable = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221207131653.png" alt="image-20221207131653060"></p><ul><li><code>Thread</code>类中，有个<code>ThreadLocal.ThreadLocalMap</code> 的成员变量。</li><li><code>ThreadLocalMap</code>内部维护了<code>Entry</code>数组，每个<code>Entry</code>代表一个完整的对象，<code>key</code>是<code>ThreadLocal</code>本身，<code>value</code>是<code>ThreadLocal</code>的泛型对象值。</li></ul><h4 id="原理：">原理：</h4><ol><li>Thread线程类有一个类型为ThreadLocal.ThreadLocalMap的实例变量threadLocals，即每个线程都有一个属于自己的ThreadLocalMap。</li><li>ThreadLocalMap内部维护着Entry数组，每个Entry代表一个完整的对象，key是ThreadLocal本身，value是ThreadLocal的泛型值。</li><li>并发多线程场景下，每个线程Thread，在往ThreadLocal里设置值的时候，都是往自己的ThreadLocalMap里存，读也是以某个ThreadLocal作为引用，在自己的map里找对应的key，从而可以实现了线程隔离。</li></ol><ul><li>强引用:我们平时new了一个对象就是强引用，例如 Object obj = new Object();即使在内存不足的情况下，JVM宁愿抛出OutOfMemory错误也不会回收这种对象。</li><li>软引用：如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。</li><li>弱引用:具有弱引用的对象拥有更短暂的生命周期。如果一个对象只有弱引用存在了，则下次GC将会回收掉该对象（不管当前内存空间足够与否）。</li><li>虚引用:如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动。</li></ul><h4 id="内存泄漏">内存泄漏</h4><ol><li>如果Key使用强引用：当ThreadLocal的对象被回收了，但是ThreadLocalMap还持有ThreadLocal的强引用的话，如果没有手动删除，ThreadLocal就不会被回收，会出现Entry的内存泄漏问题。</li><li>如果Key使用弱引用：当ThreadLocal的对象被回收了，因为ThreadLocalMap持有ThreadLocal的弱引用，即使没有手动删除，ThreadLocal也会被回收。value则在下一次ThreadLocalMap调用set,get，remove的时候会被清除。</li></ol><h4 id="ThreadLocal的应用场景和使用注意点">ThreadLocal的应用场景和使用注意点</h4><p>hreadLocal的很重要一个注意点，就是使用完，要手动调用remove()。</p><p>ThreadLocal的应用场景主要有以下这几种：</p><ol><li>使用日期工具类，当用到<code>SimpleDateFormat</code>，使用<code>ThreadLocal</code>保证线性安全</li><li>全局存储用户信息（用户信息存入<code>ThreadLocal</code>，那么当前线程在任何地方需要时，都可以使用）</li><li>保证同一个线程，获取的数据库连接Connection是同一个，使用<code>ThreadLocal</code>来解决线程安全的问题</li><li>使用<code>MDC</code>保存日志信息。</li></ol><h3 id="十四-分布式锁的实现方式以及运用场景">十四.分布式锁的实现方式以及运用场景?</h3><p><a href="https://blog.csdn.net/qq_49195366/article/details/128195242?spm=1001.2014.3001.5502">https://blog.csdn.net/qq_49195366/article/details/128195242?spm=1001.2014.3001.5502</a></p><h3 id="十五-线程池的原理-执行流程">十五.线程池的原理,执行流程?</h3><ol><li><p>线程池七大参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">     <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">     <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">     TimeUnit unit,</span></span><br><span class="line"><span class="params">     BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">     ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">     RejectedExecutionHandler handler)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>ThreadPoolExecutor 构造器</p><ul><li><p>CorePoolSize: 核心线程数，不会被销毁</p></li><li><p>MaximumPoolSize : 最大线程数 (核心+非核心) ，非核心线程数用完之后达到空闲时间会被销毁</p></li><li><p>KeepAliveTime: 非核心线程的最大空闲时间，到了这个空闲时间没被使用，非核心线程销毁</p></li><li><p>Unit: 空闲时间单位</p></li><li><p>WorkQueue:是一个BlockingQueue阻塞队列，超过核心线程数的任务会进入队列排队</p><ol><li><p>SynchronousQueue：这个队列比较特殊，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务；</p></li><li><p>LinkedBlockingQueue：基于链表的先进先出队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；</p></li><li><p>ArrayBlockingQueue：基于数组的先进先出队列，此队列创建时必须指定大小</p></li></ol></li></ul><p>ThreadFactory：使用ThreadFactory创建新线程。 推荐使用Executors.defaultThreadFactory</p><ul><li><p>Handler: 拒绝策略，任务超过 最大线程数+队列排队数 ，多出来的任务该如何处理取决于Handler</p><ol><li>AbortPolicy丢弃任务并抛出RejectedExecutionException异常；</li><li>DiscardPolicy丢弃任务，但是不抛出异常；</li><li>DiscardOldestPolicy丢弃队列最前面的任务，然后重新尝试执行任务；</li><li>CallerRunsPolicy由调用线程处理该任务；</li></ol><p>可以定义和使用其他种类的RejectedExecutionHandler类来定义拒绝策略。</p></li></ul><h4 id="线程池执行流程">线程池执行流程</h4><p>corePoolSize，maximumPoolSize，workQueue之间关系。</p><ol><li><p>当线程池中线程数小于corePoolSize时，新提交任务将创建一个新线程(使用核心)执行任务，即使此时线程池中存在空闲线程。</p></li><li><p>当线程池中线程数达到corePoolSize时(核心用完)，新提交任务将被放入workQueue中，等待线程池中任务调度执行 。</p></li><li><p>当workQueue已满，且maximumPoolSize &gt; corePoolSize时，新提交任务会创建新线程(非核心)执行任务。</p></li><li><p>当workQueue已满，且提交任务数超过maximumPoolSize(线程用完，队列已满)，任务由RejectedExecutionHandler处理。</p></li><li><p>当线程池中线程数超过corePoolSize，且超过这部分的空闲时间达到keepAliveTime时，回收这些线程。</p></li><li><p>当设置allowCoreThreadTimeOut(true)时，线程池中corePoolSize范围内的线程空闲时间达到keepAliveTime也将回收。</p></li></ol><p><strong>线程池执行流程 ：</strong> 核心线程 =&gt; 等待队列 =&gt; 非核心线程 =&gt; 拒绝策略</p></li></ol><h3 id="十六-jdk提供的常见4种线程池-以及带来的问题-为什么阿里规范">十六.jdk提供的常见4种线程池,以及带来的问题,为什么阿里规范</h3><p>建议自定义线程池</p><ol><li><p><code>Executors.newFixedThreadPool(10)</code> ：固定大小 core = 自定义的线程数，但阻塞[队列]是无界队列，会<code>OOM</code>内存溢出</p><p>它的核心线程数 和 最大线程数是一样，都是nThreads变量的值，该变量由用户自己决定，所以说是固定大小线程池。此外，它的每隔0毫秒回收一次线程，换句话说就是不回收线程，因为它的核心线程数 和 最大线程数是一样，回收了没有任何意义。此外，使用了<strong>LinkedBlockingQueue</strong>队列，该队列其实是有界队列，很多人误解了，只是它的初始大小比较大是integer的最大值。</p></li><li><p><code>Executors.newCachedThreadPool():</code></p><p>它的核心线程数是0，最大线程数是integer的最大值，每隔60秒回收一次空闲线程，使用<code>SynchronousQueue</code>队列。<code>SynchronousQueue</code>队列比较特殊，内部只包含一个元素，插入元素到队列的线程被阻塞，直到另一个线程从队列中获取了队列中存储的元素。同样，如果线程尝试获取元素并且当前不存在任何元素，则该线程将被阻塞，直到线程将元素插入队列。</p></li><li><p><code>Executors.newSingleThreadExecutor(); </code>单线程的线程池，后台从队列里取，挨个执行。阻塞队列是无界队列，会<code>OOM</code>内存溢出。</p><ul><li><p>有且仅有一个工作线程执行任务,核心线程数固定是1</p></li><li><p>所有任务按照指定顺序执行，即遵循队列的入队出队规则。</p></li><li><p>适用：一个任务一个任务执行的场景。 如同队列</p></li></ul></li><li><p><code>Executors.newScheduledThreadPool(); </code>带有定时任务的线程池。</p><p>它的核心线程数是corePoolSize变量，需要用户自己决定，最大线程数是integer的最大值，同样，它的每隔0毫秒回收一次线程，换句话说就是不回收线程。使用了DelayedWorkQueue队列，该队列具有延时的功能。</p></li></ol><h3 id="十七-线程池最大线程数怎么配">十七.线程池最大线程数怎么配?</h3><ol><li><h4 id="经验值">经验值</h4><p>配置线程数量之前，首先要看任务的类型是 IO密集型，还是CPU密集型？</p><pre><code>什么是IO密集型？比如：频繁读取磁盘上的数据，或者需要通过网络远程调用接口。什么是CPU密集型？比如：非常复杂的调用，循环次数很多，或者递归调用层次很深等。</code></pre><p>IO密集型配置线程数经验值是：2N，其中N代表CPU核数。</p><p>CPU密集型配置线程数经验值是：N + 1，其中N代表CPU核数。</p><p>如果获取N的值？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">availableProcessors</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br></pre></td></tr></table></figure><h4 id="2-最佳线程数目算法">2.最佳线程数目算法</h4><p>除了上面介绍是经验值之外，其实还提供了计算公式：</p><p>最佳线程数目 = （（线程等待时间+线程CPU时间）/线程CPU时间 ）* CPU数目</p><pre><code>很显然线程等待时间所占比例越高，需要越多线程。线程CPU时间所占比例越高，需要越少线程。虽说最佳线程数目算法更准确，但是线程等待时间和线程CPU时间不好测量，实际情况使用得比较少，一般用经验值就差不多了。再配合系统压测，基本可以确定最适合的线程数。</code></pre></li></ol><p>比如平均每个线程CPU运行时间为0.5s，而线程等待时间（非CPU运行时间，比如IO）为1.5s，CPU核心数为8，那么根据上面这个公式估算得到：((0.5+1.5)/0.5)*8=32。</p><h3 id="十八-Synchronized与Volatile的区别">十八.Synchronized与Volatile的区别</h3><p>1、volatile关键字是线程同步的轻量级实现，所以volatile性能肯定比synchronized要好；volatile只能修饰变量，而synchronized可以修饰方法，代码块。随着JDK新版本的发布，synchronized的执行效率也有较大的提升，在开发中使用synchronized的比率还是很大的。</p><p>2、多线程访问volatile变量不会发生阻塞，而synchronized可能会阻塞。</p><p>3、volatile能保证数据的可见性，但是不能保证原子性；而synchronized可以保证原子性，也可以保证可见性。</p><p>4、关键字volatile解决的是变量在多个线程之间的可见性；synchronized关键字解决多个线程之间访问公共资源的同步性。</p><h3 id="十九-线程三大特性">十九.线程三大特性</h3><p><strong>1、原子性：</strong></p><p>多线程中的原子性，即一个操作或多个操作要么全部执行并且执行过程不能被打断，或者要么全部不执行。</p><p><strong>2、可见性：</strong></p><p>可见性是指多线程在访问一个变量时，一个线程修改了这个变量值，其他线程能够立刻看得到想修改指，显然对于单线程来说，可见性问题是不存在的。</p><p><strong>3、有序性：</strong></p><p>有序性指程序执行的顺序按照代码的先后顺序执行。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写一个可以增加行和删除行的表格组件</title>
      <link href="/posts/d3c92ebf.html"/>
      <url>/posts/d3c92ebf.html</url>
      
        <content type="html"><![CDATA[<p><img src="F:%5Cblog%5Ccoderyeah%5Csource_posts%5Cimg%5Cimage-20230209115606598.png" alt="image-20230209115606598"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">  &lt;!-- 添加对话框 --&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-plus&quot; size=&quot;mini&quot; @click=&quot;handleAddDetails&quot;&gt;添加&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-delete&quot; size=&quot;mini&quot; @click=&quot;handleDeleteDetails&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;danger&quot; icon=&quot;el-icon-delete&quot; size=&quot;mini&quot; @click=&quot;handleDeleteAllDetails&quot;&gt;清空&lt;/el-button&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      style=&quot;width: 100%;margin-top: 20px&quot;</span><br><span class="line">      :header-cell-style=&quot;&#123;background:&#x27;#8be6c1&#x27;&#125;&quot;</span><br><span class="line">      :data=&quot;handleList&quot;</span><br><span class="line">      :row-class-name=&quot;rowClassName&quot;</span><br><span class="line">      @selection-change=&quot;handleDetailSelectionChange&quot;</span><br><span class="line">      ref=&quot;tb&quot;&gt;</span><br><span class="line">      &lt;el-table-column type=&quot;selection&quot; width=&quot;45&quot; align=&quot;center&quot;/&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;序号&quot; align=&quot;center&quot; prop=&quot;xh&quot; width=&quot;50&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;不良类型&quot; align=&quot;center&quot; prop=&quot;badType&quot; width=&quot;130&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-select</span><br><span class="line">            clearable</span><br><span class="line">            v-model=&quot;handleList[scope.row.xh-1].badType&quot;&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for=&quot;item in badTypes&quot;</span><br><span class="line">              :key=&quot;item.id&quot;</span><br><span class="line">              :label=&quot;item.name&quot;</span><br><span class="line">              :value=&quot;item.id&quot;/&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;行动项&quot; align=&quot;center&quot; prop=&quot;actionItem&quot; width=&quot;130&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-input v-model.trim=&quot;handleList[scope.row.xh-1].actionItem&quot; type=&quot;text&quot; size=&quot;small&quot;</span><br><span class="line">                    placeholder=&quot;请输入行动项&quot;/&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;负责人&quot; width=&quot;130&quot; prop=&quot;masterPerson&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-select</span><br><span class="line">            clearable</span><br><span class="line">            v-model=&quot;handleList[scope.row.xh-1].masterPerson&quot;&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for=&quot;item in employees&quot;</span><br><span class="line">              :key=&quot;item.id&quot;</span><br><span class="line">              :label=&quot;item.name&quot;</span><br><span class="line">              :value=&quot;item.id&quot;/&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;部门&quot; width=&quot;130&quot; prop=&quot;deptName&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-select</span><br><span class="line">            clearable</span><br><span class="line">            v-model=&quot;handleList[scope.row.xh-1].dept&quot;&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for=&quot;item in depts&quot;</span><br><span class="line">              :key=&quot;item.id&quot;</span><br><span class="line">              :label=&quot;item.deptName&quot;</span><br><span class="line">              :value=&quot;item.id&quot;/&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;指派日期&quot; width=&quot;200&quot; prop=&quot;assignTime&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">            &lt;el-date-picker</span><br><span class="line">              v-model=&quot;handleList[scope.row.xh-1].assignTime&quot;</span><br><span class="line">              type=&quot;datetime&quot;</span><br><span class="line">              placeholder=&quot;选择日期时间&quot;</span><br><span class="line">              align=&quot;right&quot;</span><br><span class="line">              :picker-options=&quot;pickerOptions&quot;&gt;</span><br><span class="line">            &lt;/el-date-picker&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;完成日期&quot; width=&quot;200&quot; prop=&quot;finishTime&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">            &lt;el-date-picker</span><br><span class="line">              v-model=&quot;handleList[scope.row.xh-1].finishTime&quot;</span><br><span class="line">              type=&quot;datetime&quot;</span><br><span class="line">              placeholder=&quot;选择日期时间&quot;</span><br><span class="line">              align=&quot;right&quot;</span><br><span class="line">              :picker-options=&quot;pickerOptions&quot;&gt;</span><br><span class="line">            &lt;/el-date-picker&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;状态&quot; align=&quot;center&quot; prop=&quot;status&quot; width=&quot;130&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-select</span><br><span class="line">            clearable</span><br><span class="line">            v-model=&quot;handleList[scope.row.xh-1].status&quot;&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for=&quot;item in states&quot;</span><br><span class="line">              :key=&quot;item.value&quot;</span><br><span class="line">              :label=&quot;item.label&quot;</span><br><span class="line">              :value=&quot;item.value&quot;/&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Table2&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // 表单参数</span><br><span class="line">      form: &#123;&#125;,</span><br><span class="line">      employees: [],</span><br><span class="line">      depts: [],</span><br><span class="line">      states: [&#123;</span><br><span class="line">        value: &#x27;0&#x27;,</span><br><span class="line">        label: &#x27;未处理&#x27;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        value: &#x27;1&#x27;,</span><br><span class="line">        label: &#x27;处理中&#x27;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        value: &#x27;2&#x27;,</span><br><span class="line">        label: &#x27;完成&#x27;</span><br><span class="line">      &#125;],</span><br><span class="line">      pickerOptions: &#123;</span><br><span class="line">        shortcuts: [&#123;</span><br><span class="line">          text: &#x27;今天&#x27;,</span><br><span class="line">          onClick(picker) &#123;</span><br><span class="line">            picker.$emit(&#x27;pick&#x27;, new Date())</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          text: &#x27;昨天&#x27;,</span><br><span class="line">          onClick(picker) &#123;</span><br><span class="line">            const date = new Date()</span><br><span class="line">            date.setTime(date.getTime() - 3600 * 1000 * 24)</span><br><span class="line">            picker.$emit(&#x27;pick&#x27;, date)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          text: &#x27;一周前&#x27;,</span><br><span class="line">          onClick(picker) &#123;</span><br><span class="line">            const date = new Date()</span><br><span class="line">            date.setTime(date.getTime() - 3600 * 1000 * 24 * 7)</span><br><span class="line">            picker.$emit(&#x27;pick&#x27;, date)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      // 选中的从表数据</span><br><span class="line">      checkedDetail: [],</span><br><span class="line">      handleList: [],</span><br><span class="line">      badTypes: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    // 清空数据</span><br><span class="line">    handleDeleteAllDetails() &#123;</span><br><span class="line">      if (this.handleList == undefined &amp;&amp; this.handleList.length==0) &#123;</span><br><span class="line">        this.$alert(&quot;没有可删除的数据&quot;, &quot;提示&quot;, &#123;</span><br><span class="line">          confirmButtonText: &quot;确定&quot;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.$modal.confirm(&#x27;确认删除所有行吗?&#x27;).then(res =&gt; &#123;</span><br><span class="line">          this.handleList = undefined</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 删除一行</span><br><span class="line">    handleDeleteDetails() &#123;</span><br><span class="line">      if (this.checkedDetail.length == 0) &#123;</span><br><span class="line">        this.$alert(&quot;请先选择要删除的数据&quot;, &quot;提示&quot;, &#123;</span><br><span class="line">          confirmButtonText: &quot;确定&quot;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.handleList.splice(this.checkedDetail[0].xh - 1, 1)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 添加一行</span><br><span class="line">    handleAddDetails() &#123;</span><br><span class="line">      if (this.handleList == undefined) &#123;</span><br><span class="line">        this.handleList = new Array()</span><br><span class="line">      &#125;</span><br><span class="line">      let obj = &#123;&#125;</span><br><span class="line">      obj.badType = 1</span><br><span class="line">      obj.actionItem = &#x27;&#x27;</span><br><span class="line">      obj.masterPerson = &#x27;&#x27;</span><br><span class="line">      obj.assignTime = &#x27;&#x27;</span><br><span class="line">      obj.finishTime = &#x27;&#x27;</span><br><span class="line">      obj.status = &#x27;&#x27;</span><br><span class="line">      this.handleList.push(obj)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 单选框选中数据</span><br><span class="line">    handleDetailSelectionChange(selection) &#123;</span><br><span class="line">      if (selection.length &gt; 1) &#123;</span><br><span class="line">        this.$refs.tb.clearSelection()</span><br><span class="line">        this.$refs.tb.toggleRowSelection(selection.pop())</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.checkedDetail = selection</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    rowClassName(&#123;row, rowIndex&#125;) &#123;</span><br><span class="line">      row.xh = rowIndex + 1</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菜单权限和按钮权限的实现,以及JWT的使用</title>
      <link href="/posts/ebd0d3e.html"/>
      <url>/posts/ebd0d3e.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-概述">一. 概述</h3><ol><li>一个系统中用户登陆之后看到的菜单，必须是当前登录人拥有权限的菜单才能展示，没有权限的菜单直接不显示；</li><li>使用无状态token方案，登录只存储了loginInfo信息，没有登录人相关的权限（菜单、按钮权限）；</li><li>难道我们在登录的时候需要将登录人相关的权限信息也一并存储到redis中码？<br>答：如果人数多，并发量大，redis就不是一个好的方案：redis是一个内存数据库，内存有局限，数据量越大，内存占用率高，影响读取性能。</li></ol><h3 id="二-无状态的token方案">二. 无状态的token方案</h3><ol><li><p>后端验证登录信息成功之后，会生成一个随机串作为<strong>token</strong>将用户信息保存在<strong>redis</strong>，并将token令牌传回给浏览器；</p></li><li><p>后续浏览器只需要将token携带到服务器，服务器就可以根据浏览器的token令牌获取redis的信息<br>2.1. 如果获取不到信息，说明token令牌无效<br>2.2. 获取到信息，就向客户端返回请求的数据</p></li><li><p><strong>缺点：</strong></p></li></ol><ul><li><p>每次请求都需要查库【查询redis数据库】，效率低</p></li><li><p>如果redis保存的数据多【用户登录信息，当前用户的权限信息，当前用户的菜单信息】，会影响性能。</p></li></ul><h3 id="三-JWT方案">三. JWT方案</h3><h4 id="1-为什么要用JWT">1. 为什么要用JWT ?</h4><pre><code>如果将登录信息放在redis - 只存登录信息也还行如果1.并发量高  2.保存的不只是登录信息，还有菜单和权限  redis保存的数据就非常多。redis内存数据库，影响服务器的性能jwt：登录成功，把登录信息还有菜单和权限进行加密【jwt - json web token = 加密之后的字符串】将jwt保存在浏览器的localStorage中</code></pre><h4 id="2-什么是JWT">2. 什么是JWT</h4><p><code>JSON Web Token【JWT】</code>是一个非常轻巧的规范。这个规范允许我们使用<code>JWT</code>在用户和服务器之间传递安全可靠的信息</p><p>通俗地说，<strong>JWT的本质就是一个字符串</strong>，它是将<strong>用户信息</strong>保存到一个<strong>Json</strong>字符串中，然后进行编码后得到一个<code>JWT token</code>，<strong>并且这个<code>JWT token</code>带有签名信息，接收后可以校验是否被篡改</strong>。所以可以用于在各方之间安全地将信息作为Json对象传输。</p><p>服务器生成<code>JWT token</code>后，响应给浏览器客户端。客户端保存起来。在后续的请求中，客户端将<code>JWT token</code>连同请求内容一起发送给服务器，服务器收到请求后通过<code>JWT token</code>验证用户，如果验证不通过则不返回请求的数据 。验证通过就会向客户端返回请求的数据。</p><p>总结：使用JWT生产的Token是安全的，可以理解成就是在无状态的token方案基础上，将token从随机串换成包含登录人信息、权限等内容，且做了加密处理之后的串，实现了数据的安全传输。</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220923184833.png" alt="image-20220923184833243"></p><h4 id="3-JWT特点">3. JWT特点</h4><ul><li>基于JSON，方便解析，因为JSON的通用性，所以JWT可以跨语言支持</li><li>可以在令牌中定义内容，方便扩展。他不是一个随机token串，而是可以携带自定义内容的加密token串</li><li>使用非对称加密算法中提供数字签名，JWT防篡改</li><li>后端服务使用JWT可以不依赖redis即可完成权限校验</li></ul><h4 id="4-JWT组成">4. JWT组成</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JWT是由三段信息构成的，将这三段信息文本用.链接一起就构成了JWT字符串。就像这样：</span><br><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br><span class="line">第一部分：我们称它为头部（<span class="built_in">header</span>），用于存放<span class="built_in">token</span>类型和加密协议，一般都是固定的</span><br><span class="line">第二部分：我们称其为载荷（payload），用户数据就存放在里面</span><br><span class="line">第三部分：是签证（signature），主要用于服务端的验证</span><br></pre></td></tr></table></figure><ul><li><h5 id="头部【header】：-JSON格式，描述JWT的最基本的信息："><strong>头部</strong>【header】： JSON格式，描述JWT的最基本的信息：</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  &#x27;typ&#x27;<span class="punctuation">:</span> &#x27;JWT&#x27;<span class="punctuation">,</span></span><br><span class="line">  &#x27;alg&#x27;<span class="punctuation">:</span> &#x27;HS256&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>jwt</strong> 的头部承载两部分信息：</p><ul><li>声明类型 , 告知这里是 jwt</li><li>声明加密的算法 通常直接使用 HMAC, SHA256</li></ul><p>在使用过程中会对该<code>JSON</code>进行<code>BASE64</code>编码，得到Jwt的第一部分：<code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code></p></li><li><h5 id="载荷【playload】-：JSON格式，用户数据就存放在里面，也需要BASE64编码："><strong>载荷</strong>【playload】 ：JSON格式，用户数据就存放在里面，也需要BASE64编码：</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="string">&quot;admin&quot;</span>: true</span><br><span class="line">&#125;</span><br><span class="line">然后将其进行<span class="keyword">BASE64加密，得到Jwt的第二部分：</span></span><br><span class="line"><span class="keyword"></span>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br><span class="line"></span><br><span class="line">载荷playload也包含三部分：</span><br><span class="line"><span class="number">1</span>. 标准中注册的声明（建议但不强制使用）</span><br><span class="line"><span class="symbol">    iss:</span> <span class="keyword">jwt签发者</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">    sub:</span> <span class="keyword">jwt所面向的用户zs</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">    aud:</span> 接收<span class="keyword">jwt的一方</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">    exp:</span> <span class="keyword">jwt的过期时间，这个过期时间必须要大于签发时间</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">    nbf:</span> 定义在什么时间之前，该<span class="keyword">jwt都是不可用的</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">    iat:</span> <span class="keyword">jwt的签发时间</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">    jti:</span> <span class="keyword">jwt的唯一身份标识，主要用来作为一次性token</span></span><br><span class="line"><span class="keyword"></span><span class="number">2</span>. 公共的声明：公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密</span><br><span class="line"><span class="number">3</span>. 私有的声明：私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为<span class="keyword">base64是对称解密的，意味着该部分信息可以归类为明文信息</span></span><br></pre></td></tr></table></figure></li><li><h5 id="签名-【signature】：-jwt的第三部分是一个签证信息，通过指定的算法生成哈希，以确保数据不会被篡改，这个签证信息由三部分组成："><strong>签名</strong> 【signature】： jwt的第三部分是一个签证信息，通过指定的算法生成哈希，以确保数据不会被篡改，这个签证信息由三部分组成：</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">head</span>(base64编码后的)</span><br><span class="line"><span class="title">playload</span>(base64编码后的)</span><br><span class="line"><span class="title">secret</span>(秘钥)</span><br></pre></td></tr></table></figure><p>这个部分需要<code>BASE64</code>加密后的<code>header</code>和<code>BASE64</code>加密后的<code>payload</code>使用<code>.</code>连接组成的字符串，然后通过<code>header</code>中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了<code>jwt</code>的第三部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> encodedString = <span class="title function_">base64UrlEncode</span>(header) + <span class="string">&#x27;.&#x27;</span> + <span class="title function_">base64UrlEncode</span>(payload);</span><br><span class="line"><span class="keyword">let</span> signature = <span class="title class_">HMACSHA256</span>(encodedString, <span class="string">&#x27;密钥&#x27;</span>);</span><br></pre></td></tr></table></figure><p>加密之后，得到signature签名信息，即<code>Jwt</code>的第三部分：<br><code>TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</code></p></li><li><h5 id="将这三部分用-连接成一个完整的字符串，就构成了最终的Jwt："><strong>将这三部分用<code>.</code>连接成一个完整的字符串，就构成了最终的Jwt：</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure></li></ul><h3 id="四-加密算法介绍">四. 加密算法介绍</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">明文：加密之前的内容，原始内容</span><br><span class="line">暗文：加密之后的内容</span><br><span class="line">公钥：可见的公共的钥匙</span><br><span class="line">私钥：不可见的私有的钥匙</span><br></pre></td></tr></table></figure><h4 id="1-不可逆加密算法">1. 不可逆加密算法</h4><p>特征：只能加密不能解密<br>技术：md5<br>作用：一般对登录密码处理，用于做密码比对<br>问题：只能加密，不能解密，不能用来对网络中传输的数据进行加密</p><h4 id="2-可逆对称加密算法">2. 可逆对称加密算法</h4><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">特征：</span><br><span class="line">    <span class="number">1</span>. 可以加密，也可以解密</span><br><span class="line">    <span class="number">2</span>. 加密和解密的密钥是同一个</span><br><span class="line">实现：DES，AES</span><br><span class="line">作用：对数据库密码进行加密</span><br><span class="line">算法：</span><br><span class="line">密文为s<span class="punctuation">,</span>加解密算法为AES<span class="punctuation">,</span>秘钥为k，明文为<span class="keyword">c</span></span><br><span class="line">加密：s <span class="operator">=</span> AES（k<span class="punctuation">,</span><span class="keyword">c</span>）</span><br><span class="line">解密：<span class="keyword">c</span> <span class="operator">=</span> AES(k<span class="punctuation">,</span>s)</span><br><span class="line">问题：</span><br><span class="line"><span class="number">1</span>. 数据可能会被其他人解密</span><br><span class="line"><span class="number">2</span>. 数据可能会被篡改</span><br></pre></td></tr></table></figure><h4 id="3-可逆非对称加密算法">3. 可逆非对称加密算法</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">特征：</span><br><span class="line"><span class="number">1</span>. 可以加密，也可以解密</span><br><span class="line"><span class="number">2</span>. 加密和解密的密钥不是同一个。但是是成对出现的。一个私钥就对应一个公钥。如果使用私钥加密，</span><br><span class="line">   只能使用与之对应公钥来解决。反之如果使用公钥加密，只能使用与之对应私钥解密</span><br><span class="line">实现：RSA，RSA2</span><br><span class="line">作用：网络传输中对数据进行加解密</span><br><span class="line">算法：</span><br><span class="line">密文为s，加解密算法为RSA私钥为<span class="built_in">k1</span>，公钥为<span class="built_in">k2</span>，明文为c</span><br><span class="line">第一组：私钥加密公钥解密</span><br><span class="line">加密：s = rsa(<span class="built_in">k1</span>,c)</span><br><span class="line">解密：c = rsa(<span class="built_in">k2</span>,s)</span><br><span class="line">第二组：公钥加密私钥解决</span><br><span class="line">加密：s = rsa(<span class="built_in">k2</span>,c)</span><br><span class="line">解密：c = rsa(<span class="built_in">k1</span>,s)</span><br><span class="line">注意：加密一次不安全，要加密两次，解密两次。第一次加密和解密并不是真正的数据，而是数字签名和签名认证/确认身份</span><br></pre></td></tr></table></figure><h4 id="4-网络加密技术有哪些？">4. .网络加密技术有哪些？</h4><ul><li><p>​1.不可逆【只能加密不能解密】的加密技术：md5</p><p>​       用来对比密码，不能用来传输数据</p></li><li><p>​2.可逆【可以加密也能解密】对称【加密和解密使用的是同一个秘钥】加密算法：AES,DES</p><p>​风险：截取数据</p><p>​   篡改数据</p></li><li><p>​3.可逆非对称【加密和解密使用的不是同一个秘钥，使用公钥和私钥】</p><p>​前提：交换公钥</p><p>​加密：篡改数据</p><p><strong>加密2次，解密2次：</strong></p><p>​先用对方的公钥加密，然后再用自己的私钥加密</p><p>​先用对方的公钥解密，然后再用自己的私钥解密</p></li></ul><h3 id="五-常用工具类">五.  常用工具类</h3><p>生成JWT，需要先获取公钥，私钥</p><h4 id="1-依赖">1. 依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--     JWT   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-RsaUtils">2. RsaUtils</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.jwt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RSA工具类   负责对RSA密钥的创建、读取功能(公钥和私钥)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RsaUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_KEY_SIZE</span> <span class="operator">=</span> <span class="number">2048</span>;  <span class="comment">// 生成的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从文件中读取公钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename 公钥保存路径，相对于classpath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 公钥对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PublicKey <span class="title function_">getPublicKey</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = readFile(filename);</span><br><span class="line">        <span class="keyword">return</span> getPublicKey(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从文件中读取密钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 私钥对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PrivateKey <span class="title function_">getPrivateKey</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = readFile(filename);</span><br><span class="line">        <span class="keyword">return</span> getPrivateKey(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取公钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 公钥的字节形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PublicKey <span class="title function_">getPublicKey</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            bytes = Base64.getDecoder().decode(bytes);</span><br><span class="line">            <span class="type">X509EncodedKeySpec</span> <span class="variable">spec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(bytes);</span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> factory.generatePublic(spec);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取密钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 私钥的字节形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PrivateKey <span class="title function_">getPrivateKey</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, InvalidKeySpecException &#123;</span><br><span class="line">        bytes = Base64.getDecoder().decode(bytes);</span><br><span class="line">        <span class="type">PKCS8EncodedKeySpec</span> <span class="variable">spec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(bytes);</span><br><span class="line">        <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factory.generatePrivate(spec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据密文，生存rsa公钥和私钥,并写入指定文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKeyFilename  公钥文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKeyFilename 私钥文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secret             生成密钥的密文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generateKey</span><span class="params">(String publicKeyFilename,</span></span><br><span class="line"><span class="params">                                   String privateKeyFilename,</span></span><br><span class="line"><span class="params">                                   String secret, <span class="type">int</span> keySize)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">keyPairGenerator</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">        <span class="type">SecureRandom</span> <span class="variable">secureRandom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecureRandom</span>(secret.getBytes());</span><br><span class="line">        keyPairGenerator.initialize(Math.max(keySize, DEFAULT_KEY_SIZE), secureRandom);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="comment">// 获取公钥并写出</span></span><br><span class="line">        <span class="type">byte</span>[] publicKeyBytes = keyPair.getPublic().getEncoded();</span><br><span class="line">        publicKeyBytes = Base64.getEncoder().encode(publicKeyBytes);</span><br><span class="line">        writeFile(publicKeyFilename, publicKeyBytes);</span><br><span class="line">        <span class="comment">// 获取私钥并写出</span></span><br><span class="line">        <span class="type">byte</span>[] privateKeyBytes = keyPair.getPrivate().getEncoded();</span><br><span class="line">        privateKeyBytes = Base64.getEncoder().encode(privateKeyBytes);</span><br><span class="line">        writeFile(privateKeyFilename, privateKeyBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] readFile(String fileName) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> Files.readAllBytes(<span class="keyword">new</span> <span class="title class_">File</span>(fileName).toPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">(String destPath, <span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destPath);</span><br><span class="line">        <span class="keyword">if</span> (!dest.exists()) &#123;</span><br><span class="line">            dest.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        Files.write(dest.toPath(), bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//1 生成秘钥对 xxx_rsa.pub xxxx_rsa</span></span><br><span class="line">        generateKey(<span class="string">&quot;E:\\springboot\\pethome\\src\\main\\resources\\auth_rsa.pub&quot;</span>,</span><br><span class="line">                <span class="string">&quot;E:\\springboot\\pethome\\src\\main\\resources\\auth_rsa.pri&quot;</span>,<span class="string">&quot;coderyeah&quot;</span>,<span class="number">2048</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-JwtUtils">3. JwtUtils</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.jwt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jws;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.PrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.PublicKey;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT 密钥的解析和加密 工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_PAYLOAD_USER_KEY</span> <span class="operator">=</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">createJTI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(UUID.randomUUID().toString().getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥加密token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userInfo   载荷中的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire     过期时间，单位分钟</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateTokenExpireInMinutes</span><span class="params">(Object userInfo, PrivateKey privateKey, <span class="type">int</span> expire)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .claim(JWT_PAYLOAD_USER_KEY, JSONObject.toJSONString(userInfo))</span><br><span class="line">                .setId(createJTI())</span><br><span class="line">                <span class="comment">//当前时间往后加多少分钟</span></span><br><span class="line">                .setExpiration(DateTime.now().plusMinutes(expire).toDate())</span><br><span class="line">                .signWith(SignatureAlgorithm.RS256,privateKey)</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥加密token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userInfo   载荷中的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey 私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire     过期时间，单位秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateTokenExpireInSeconds</span><span class="params">(Object userInfo, PrivateKey privateKey, <span class="type">int</span> expire)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .claim(JWT_PAYLOAD_USER_KEY, JSONObject.toJSONString(userInfo))</span><br><span class="line">                .setId(createJTI())</span><br><span class="line">                .setExpiration(DateTime.now().plusSeconds(expire).toDate())</span><br><span class="line">                .signWith(SignatureAlgorithm.RS256,privateKey)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥解析token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     用户请求中的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Jws&lt;Claims&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Jws&lt;Claims&gt; <span class="title function_">parserToken</span><span class="params">(String token, PublicKey publicKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser().setSigningKey(publicKey).parseClaimsJws(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token中的用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     用户请求中的令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Payload&lt;T&gt; <span class="title function_">getInfoFromToken</span><span class="params">(String token, PublicKey publicKey, Class&lt;T&gt; userType)</span> &#123;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = parserToken(token, publicKey);</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">body</span> <span class="operator">=</span> claimsJws.getBody();</span><br><span class="line">        Payload&lt;T&gt; claims = <span class="keyword">new</span> <span class="title class_">Payload</span>&lt;&gt;();</span><br><span class="line">        claims.setId(body.getId());</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> JSONObject.parseObject(body.get(JWT_PAYLOAD_USER_KEY).toString(),userType);</span><br><span class="line">        claims.setLoginData(t);</span><br><span class="line">        claims.setExpiration(body.getExpiration());</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token中的载荷信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     用户请求中的令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Payload&lt;T&gt; <span class="title function_">getInfoFromToken</span><span class="params">(String token, PublicKey publicKey)</span> &#123;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = parserToken(token, publicKey);</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">body</span> <span class="operator">=</span> claimsJws.getBody();</span><br><span class="line">        Payload&lt;T&gt; claims = <span class="keyword">new</span> <span class="title class_">Payload</span>&lt;&gt;();</span><br><span class="line">        claims.setId(body.getId());</span><br><span class="line">        claims.setExpiration(body.getExpiration());</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1 获取token</span></span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> RsaUtils.getPrivateKey(JwtUtils.class.getClassLoader().getResource(<span class="string">&quot;auth_rsa.pri&quot;</span>).getFile());</span><br><span class="line">        System.out.println(privateKey);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> generateTokenExpireInSeconds(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;zs&quot;</span>), privateKey, <span class="number">10</span>);</span><br><span class="line">        System.out.println(token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 解析token里面内容</span></span><br><span class="line">        <span class="type">PublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> RsaUtils.getPublicKey(JwtUtils.class.getClassLoader().getResource(<span class="string">&quot;auth_rsa.pub&quot;</span>).getFile());</span><br><span class="line">        Payload&lt;User&gt; payload = getInfoFromToken(token, publicKey, User.class);</span><br><span class="line">        System.out.println(payload);</span><br><span class="line">        Thread.sleep(<span class="number">11000</span>); <span class="comment">//超时后继续解析</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Long id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-载荷数据">4. 载荷数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.jwt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payload</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;  <span class="comment">// jwt的id(token)</span></span><br><span class="line">    <span class="keyword">private</span> T loginData;  <span class="comment">// 用户信息：用户数据，不确定，可以是任意类型</span></span><br><span class="line">    <span class="keyword">private</span> Date expiration;  <span class="comment">// 过期时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getLoginData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> loginData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginData</span><span class="params">(T loginData)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loginData = loginData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getExpiration</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expiration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExpiration</span><span class="params">(Date expiration)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.expiration = expiration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Payload&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, loginData=&quot;</span> + loginData +</span><br><span class="line">                <span class="string">&quot;, expiration=&quot;</span> + expiration +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-需要保存到前端的数据">5. 需要保存到前端的数据</h4><p><code>LoginData</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.jwt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.coderyeah.system.domain.Menu;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.user.domain.LoginInfo;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.user.domain.User;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginData</span> &#123;</span><br><span class="line">   <span class="comment">//1.登录信息对象Lonininfo对象 - 在前端显示用户数据信息的【</span></span><br><span class="line">    <span class="keyword">private</span> Logininfo logininfo;</span><br><span class="line">    <span class="comment">//2.当前登录人的所有权限的sn - 按钮或资源权限【没有访问该资源的按钮直接不显示】</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permissions;</span><br><span class="line">    <span class="comment">//3.当前登录人的菜单信息 - 菜单权限【不同的人登录之后菜单是不一样的】</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; menus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六-业务实现">六. 业务实现</h3><h4 id="1-用户登录成功后使用jwt返回客户端数据">1. 用户登录成功后使用jwt返回客户端数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对登录成功的用户信息进行jwt加密</span></span><br><span class="line">   <span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">loginSuccessJwtHandler</span><span class="params">(LoginInfo loginInfo)</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">final</span> <span class="type">LoginData</span> <span class="variable">loginData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginData</span>();</span><br><span class="line">       <span class="comment">// 登录信息</span></span><br><span class="line">       loginInfo.setSalt(<span class="literal">null</span>);</span><br><span class="line">       loginInfo.setPassword(<span class="literal">null</span>);</span><br><span class="line">       map.put(<span class="string">&quot;loginInfo&quot;</span>, loginInfo);</span><br><span class="line">       loginData.setLoginInfo(loginInfo);</span><br><span class="line">       <span class="keyword">if</span> (loginInfo.getType() == <span class="number">0</span>) &#123;<span class="comment">// 管理员用户</span></span><br><span class="line">           <span class="comment">// 获取登录用户所有权限</span></span><br><span class="line">           <span class="keyword">final</span> List&lt;String&gt; permissions = employeeMapper.getPermissionSnByLoginInfoId(loginInfo.getId());</span><br><span class="line">           map.put(<span class="string">&quot;permissions&quot;</span>, permissions);</span><br><span class="line">           loginData.setPermissions(permissions);</span><br><span class="line">           <span class="comment">// 获取登录用户所有菜单</span></span><br><span class="line">           List&lt;Menu&gt; menus = employeeMapper.getMenus(loginInfo.getId());</span><br><span class="line">           map.put(<span class="string">&quot;menus&quot;</span>, menus);</span><br><span class="line">           loginData.setMenus(menus);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 生成私钥</span></span><br><span class="line">           <span class="keyword">final</span> <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> RsaUtils.getPrivateKey(LoginInfoServiceImpl.class.getClassLoader().getResource(<span class="string">&quot;auth_rsa.pri&quot;</span>).getFile());</span><br><span class="line">           <span class="comment">// 使用私钥对登录数据进行加密</span></span><br><span class="line">           <span class="keyword">final</span> <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtils.generateTokenExpireInMinutes(loginData, privateKey, <span class="number">30</span>);</span><br><span class="line">           map.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> map;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>获取登录用户所有菜单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> &lt;resultMap id=&quot;menuMap&quot; type=&quot;io.coderyeah.system.domain.Menu&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;mid&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;mname&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;icon&quot; column=&quot;micon&quot;/&gt;</span><br><span class="line">        &lt;collection property=&quot;children&quot; ofType=&quot;io.coderyeah.system.domain.Menu&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;component&quot; column=&quot;component&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;url&quot; column=&quot;url&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;icon&quot; column=&quot;icon&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;index&quot; column=&quot;index&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;parentId&quot; column=&quot;parent_id&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;intro&quot; column=&quot;intro&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;state&quot; column=&quot;state&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    </span><br><span class="line">&lt;select id=&quot;getMenus&quot; resultMap=&quot;menuMap&quot;&gt;</span><br><span class="line">    select tm1.id mid, tm1.name mname, tm1.icon micon, tm2.*</span><br><span class="line">    from t_menu tm1</span><br><span class="line">             join</span><br><span class="line">         (</span><br><span class="line">             select tm.*</span><br><span class="line">             from t_employee te</span><br><span class="line">                      join t_employee_role ter on te.id = ter.employee_id</span><br><span class="line">                      join t_role tr on tr.id = ter.role_id</span><br><span class="line">                      join t_role_menu trm on tr.id = trm.role_id</span><br><span class="line">                      join t_menu tm on trm.menu_id = tm.id</span><br><span class="line">             where te.logininfo_id = #&#123;id&#125;</span><br><span class="line">         ) tm2</span><br><span class="line">         on tm1.id = tm2.parent_id</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="2-账号登录-示例">2. 账号登录(示例)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 账户登录</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">accountLogin</span><span class="params">(LoginDto loginDto)</span> &#123;</span><br><span class="line">        <span class="comment">// 效验空值</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(loginDto.getAccount()) || StrUtil.isBlank(loginDto.getCheckPass())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;信息不能为空!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 账号效验</span></span><br><span class="line">        <span class="type">LoginInfo</span> <span class="variable">loginInfo</span> <span class="operator">=</span> checkLogin(loginDto);</span><br><span class="line">        <span class="comment">// 效验密码</span></span><br><span class="line">        <span class="keyword">if</span> (!DigestUtil.md5Hex(loginInfo.getSalt() + loginDto.getCheckPass()).equals(loginInfo.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;账号或密码错误!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!loginInfo.getDisable()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;该账号被禁用，请联系管理员!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        生成token，并将登录信息保存到redis数据库，设置30有效</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; map = loginSuccessJwtHandler(loginInfo);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-登录拦截器核心代码">3. 登录拦截器核心代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取token</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"><span class="comment">//3.如果有token，通过token获取redis的登录信息</span></span><br><span class="line"><span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">     LoginInfo info=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// （私钥加密）获取公钥解密</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">PublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> RsaUtils.getPublicKey(LoginInterceptor.class.getClassLoader().getResource(<span class="string">&quot;auth_rsa.pub&quot;</span>).getFile());</span><br><span class="line">        <span class="comment">// 获取用户信息</span></span><br><span class="line">        <span class="keyword">final</span> Payload&lt;LoginData&gt; payload = JwtUtils.getInfoFromToken(token, publicKey, LoginData.class);</span><br><span class="line">        info = payload.getLoginData().getLoginInfo();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123; <span class="comment">//jwt过期时抛出的异常</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;timeout\&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-前端后置拦截器">4.前端后置拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//======================axios的后置拦截器【处理后台登录拦截的结果】====================//</span></span><br><span class="line">axios.interceptors.response.use(res =&gt; &#123;</span><br><span class="line">    <span class="comment">//后端响应的是没有登录的信息</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === res.data.success &amp;&amp; <span class="string">&quot;noLogin&quot;</span> === res.data.message) &#123;</span><br><span class="line">        localStorage.removeItem(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        localStorage.removeItem(<span class="string">&quot;loginInfo&quot;</span>);</span><br><span class="line">        localStorage.removeItem(<span class="string">&quot;menus&quot;</span>);</span><br><span class="line">        localStorage.removeItem(<span class="string">&quot;permissions&quot;</span>);</span><br><span class="line">        router.push(&#123;path: <span class="string">&#x27;/login&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === res.data.success &amp;&amp; <span class="string">&quot;noPermission&quot;</span> === res.data.message) &#123;</span><br><span class="line">        Message.warning(<span class="string">&#x27;您没有访问权限&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === res.data.success &amp;&amp; <span class="string">&quot;timeout&quot;</span> === res.data.message) &#123;</span><br><span class="line">        localStorage.removeItem(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        localStorage.removeItem(<span class="string">&quot;loginInfo&quot;</span>);</span><br><span class="line">        localStorage.removeItem(<span class="string">&quot;menus&quot;</span>);</span><br><span class="line">        localStorage.removeItem(<span class="string">&quot;permissions&quot;</span>);</span><br><span class="line">        Message.error(<span class="string">&#x27;超时啦&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">    Promise.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//======================axios的后置拦截器【处理后台登录拦截的结果】====================//</span></span><br></pre></td></tr></table></figure><h4 id="5-登录成功时需要存储信息到浏览器本地">5. 登录成功时需要存储信息到浏览器本地</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;登录成功&quot;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> &#123;token, loginInfo, menus, permissions&#125; = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>, token)</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;loginInfo&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(loginInfo))</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;menus&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(menus))</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;permissions&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(permissions))</span><br></pre></td></tr></table></figure><h3 id="七-动态菜单">七. 动态菜单</h3><h4 id="1-router-js中的需要动态展示的路由配置需要去掉-保留5个">1. router.js中的需要动态展示的路由配置需要去掉 (<strong>保留5个</strong>)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;./views/404.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;./views/charts/echarts.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ShopRegister</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./views/ShopRegister&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">ShopRegister</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,  <span class="comment">//不需显示name没有意义</span></span><br><span class="line">        <span class="attr">hidden</span>: <span class="literal">true</span> <span class="comment">//不需要在菜单显示</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Login</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">NotFound</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;图形化数据展示&#x27;</span>,</span><br><span class="line">        <span class="attr">iconCls</span>: <span class="string">&#x27;el-icon-s-data&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;<span class="attr">path</span>: <span class="string">&#x27;/echarts&#x27;</span>, <span class="attr">component</span>: echarts, <span class="attr">name</span>: <span class="string">&#x27;echarts&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">        <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">redirect</span>: &#123;<span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes;</span><br></pre></td></tr></table></figure><h4 id="2-login-vue页面登录成功之后需要刷新一下本地的路由缓存">2.login.vue页面登录成功之后需要刷新一下本地的路由缓存</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;token, loginInfo, menus, permissions&#125; = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>, token)</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;loginInfo&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(loginInfo))</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;menus&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(menus))</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;permissions&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(permissions))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line"><span class="comment">//跳转到后台首页</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>: <span class="string">&#x27;/echarts&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// 刷新路由缓存</span></span><br><span class="line">location.<span class="title function_">reload</span>()</span><br></pre></td></tr></table></figure><h4 id="3-main-js配置动态路由（vue中的-符号表示在src路径下）">3. main.js配置动态路由（vue中的@符号表示在<strong>src</strong>路径下）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理页面刷新动态路由失效问题</span></span><br><span class="line"><span class="title function_">initIndexRouters</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initIndexRouters</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 判断本地是否有当前用户的菜单权限</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">localStorage</span>.<span class="property">menus</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//防止重复配置路由：5就是main.js中路由的个数 - 如果你的静态路由是6个这里要写成6</span></span><br><span class="line">    <span class="keyword">if</span> (router.<span class="property">options</span>.<span class="property">routes</span>.<span class="property">length</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取本地登录用户的菜单</span></span><br><span class="line">    <span class="keyword">let</span> menus = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;menus&#x27;</span>);</span><br><span class="line">    <span class="comment">// 将保存在本地的json字符串转化为json对象</span></span><br><span class="line">    menus = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(menus);</span><br><span class="line">    <span class="keyword">let</span> tempRouters = [];</span><br><span class="line">    <span class="comment">// 遍历当前用户所有的菜单</span></span><br><span class="line">    menus.<span class="title function_">forEach</span>(<span class="function"><span class="params">menu</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> indexRouter = &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">iconCls</span>: menu.<span class="property">icon</span>,</span><br><span class="line">            <span class="attr">name</span>: menu.<span class="property">name</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;@/views/Home&#x27;</span>], resolve),</span><br><span class="line">            <span class="attr">children</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历所有子级菜单</span></span><br><span class="line">        menu.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">cMenu</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> cr = &#123;</span><br><span class="line">                <span class="attr">path</span>: cMenu.<span class="property">url</span>,</span><br><span class="line">                <span class="attr">name</span>: cMenu.<span class="property">name</span>,</span><br><span class="line">                <span class="attr">iconCls</span>: cMenu.<span class="property">icon</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;@/views/&#x27;</span> + cMenu.<span class="property">component</span>], resolve)</span><br><span class="line">            &#125;</span><br><span class="line">            indexRouter.<span class="property">children</span>.<span class="title function_">push</span>(cr)</span><br><span class="line">        &#125;)</span><br><span class="line">        tempRouters.<span class="title function_">push</span>(indexRouter)</span><br><span class="line">        router.<span class="property">options</span>.<span class="property">routes</span>.<span class="title function_">push</span>(indexRouter)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//动态路由配置</span></span><br><span class="line">    router.<span class="title function_">addRoutes</span>(tempRouters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八-按钮权限的实现">八. 按钮权限的实现</h3><h4 id="1-获取当前登录用户的所有权限">1. 获取当前登录用户的所有权限</h4><p>前面登录成功会将登录人的权限数据封装permissions并返回给前端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getPermissionSnByLoginInfoId&quot; resultType=&quot;java.lang.String&quot;&gt;</span><br><span class="line">    select tp.sn</span><br><span class="line">    from t_employee te</span><br><span class="line">             join t_employee_role ter on te.id = ter.employee_id</span><br><span class="line">             join t_role tr on ter.role_id = tr.id</span><br><span class="line">             join t_role_permission trp on tr.id = trp.role_id</span><br><span class="line">             join t_permission tp on tp.id = trp.permission_id</span><br><span class="line">    where te.logininfo_id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="2-自定义vue指令">2. 自定义vue指令</h4><p>语法格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;指令名&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">    <span class="attr">inserted</span>: <span class="function">(<span class="params">el, binding, vnode</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// 需要完成的操作。。。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-定义vue权限指令">3. 定义vue权限指令</h4><ul><li><h4 id="可在src-common-js-permission-js中定义权限指令">可在<code>src/common/js/permission.js</code>中定义权限指令</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">// 注册一个全局自定义指令 `v-perm`</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;perm&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">    <span class="attr">inserted</span>: <span class="function">(<span class="params">el, binding, vnode</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//获取自定义标签v-perm的值</span></span><br><span class="line">        <span class="keyword">const</span> value = binding.<span class="property">value</span>;</span><br><span class="line">        <span class="comment">//json格式字符串</span></span><br><span class="line">        <span class="keyword">let</span> permissions = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;permissions&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (permissions) &#123;</span><br><span class="line">            <span class="comment">//转成json对象</span></span><br><span class="line">            <span class="keyword">let</span> auths = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(permissions);</span><br><span class="line">            <span class="comment">//将数组中的每一个元素按照,号进行拼接  然后 再检索</span></span><br><span class="line">            <span class="keyword">if</span> (auths.<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>).<span class="title function_">indexOf</span>(value) == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//如果不包含权限就移除</span></span><br><span class="line">                el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-在main-js中引用">4. 在main.js中引用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> permission <span class="keyword">from</span> <span class="string">&#x27;./common/js/permission&#x27;</span></span><br><span class="line"><span class="comment">//@ 等价于 /src 这个目录，避免写麻烦又易错的相对路径</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/common/js/permission&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="5-使用举例">5. 使用举例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; v-on:click=&quot;keywordQuery&quot; v-perm=&quot;&#x27;department:list&#x27;&quot; &gt;</span><br><span class="line">        关键字查询</span><br><span class="line">    &lt;/el-button&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line">&lt;el-form-item&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; v-perm=&quot;&#x27;department:save&#x27;&quot; @click=&quot;handleAdd&quot;&gt;</span><br><span class="line">        新增</span><br><span class="line">    &lt;/el-button&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">&lt;el-button size=&quot;small&quot; v-perm=&quot;&#x27;department:update&#x27;&quot; @click=&quot;handleEdit(scope.$index, scope.row)&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;danger&quot; size=&quot;small&quot; v-perm=&quot;&#x27;department:delete&#x27;&quot; @click=&quot;handleDel(scope.$index, scope.row)&quot;&gt;删除&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端开发 </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BootStrap简单应用</title>
      <link href="/posts/12644.html"/>
      <url>/posts/12644.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>官网地址：<a href="https://v3.bootcss.com/css">https://v3.bootcss.com/css</a></p></li><li><p>在<code>html</code>页面中引入布局文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入bootstrap css文件   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;static/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  引入jquery文件  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;static/jquery/jquery-2.1.3.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  使用bootstrap的js之前先引入jquery的js文件  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按钮使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">id</span>=<span class="string">&quot;add-btn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-plus&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span>添加</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>table</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>模态框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--删除模态框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">id</span>=<span class="string">&quot;del-dialog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--也可以是添加修改表单--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>您确认要删除吗?删除后的数据将不可恢复！<span class="symbol">&amp;hellip;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">id</span>=<span class="string">&quot;confirm-btn&quot;</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-dialog --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>委托事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       $(<span class="string">&#x27;tbody&#x27;</span>).<span class="title function_">empty</span>();</span><br><span class="line">       <span class="comment">//获取列表</span></span><br><span class="line">       <span class="title function_">getList</span>();</span><br><span class="line">       <span class="comment">//将事件委托给tbody 交给.del处理 因为tbody是一直存在的</span></span><br><span class="line">       $(<span class="string">&#x27;tbody&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.del&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="comment">//获取eid</span></span><br><span class="line">           <span class="keyword">var</span> eid = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&#x27;eid&#x27;</span>);</span><br><span class="line">           <span class="comment">//开启模态框</span></span><br><span class="line">           $(<span class="string">&#x27;#del-dialog&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;show&#x27;</span>);</span><br><span class="line">           <span class="comment">//取消时解除绑定事件</span></span><br><span class="line">           $(<span class="string">&#x27;#confirm-btn&#x27;</span>).<span class="title function_">off</span>(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">           <span class="comment">//是否确认删除</span></span><br><span class="line">           <span class="comment">/*   var b = confirm(&quot;确定要删除吗?&quot;);</span></span><br><span class="line"><span class="comment">              if (!b) &#123;</span></span><br><span class="line"><span class="comment">                  return;</span></span><br><span class="line"><span class="comment">              &#125;*/</span></span><br><span class="line">   </span><br><span class="line">           $(<span class="string">&#x27;#confirm-btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">               <span class="comment">//隐藏模态框</span></span><br><span class="line">               $(<span class="string">&#x27;#del-dialog&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">               <span class="comment">//发送请求</span></span><br><span class="line">               $.<span class="title function_">get</span>(<span class="string">&#x27;/emp/del&#x27;</span>, &#123;<span class="string">&#x27;eid&#x27;</span>: eid&#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (res.<span class="property">success</span>) &#123;<span class="comment">//删除成功</span></span><br><span class="line">                       <span class="title function_">getList</span>();</span><br><span class="line">                       <span class="title function_">alert</span>(<span class="string">&quot;删除成功&quot;</span>)</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;<span class="comment">//删除失败</span></span><br><span class="line">                       <span class="title function_">alert</span>(<span class="string">&quot;删除失败！&quot;</span> + res.<span class="property">msg</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;, <span class="string">&#x27;json&#x27;</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>按钮绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span> <span class="attr">class</span>=<span class="string">&#x27;btn btn-warning update&#x27;</span> <span class="attr">data-emp</span>=<span class="string">&#x27;&quot; + JSON.stringify(emp) + &quot;&#x27;</span>&gt;</span>&quot; +//绑定对象</span><br><span class="line">                        &quot;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&#x27;glyphicon glyphicon-pencil&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 修改&quot; +</span><br><span class="line">                        &quot;<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;emsp;</span>&quot; +</span><br><span class="line">                        &quot;<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span> <span class="attr">class</span>=<span class="string">&#x27;btn btn-danger del&#x27;</span> <span class="attr">data-eid</span>=<span class="string">&#x27;&quot; + emp.eid + &quot;&#x27;</span>&gt;</span>&quot; +</span><br><span class="line">                        &quot;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&#x27;glyphicon glyphicon-trash&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 删除&quot; +</span><br><span class="line">                        &quot;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>@RequestBody</code>用法,接收<code>json</code><strong>字符串数据</strong> 前端指定 <strong><code>contentType</code>:<code>'application/json;charset=utf-8'</code>,</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/add&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">//@RequestBody用于接收json字符串数据 前端指定 contentType:&#x27;application/json;charset=utf-8&#x27;,</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> EmpDTO empDTO)</span> &#123;</span><br><span class="line">        System.out.println(empDTO);</span><br><span class="line">        <span class="keyword">return</span> empService.saveEmp(empDTO);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
            <tag> 前端开发 </tag>
            
            <tag> CSS框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/2013454d.html"/>
      <url>/posts/2013454d.html</url>
      
        <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
