<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coderyeah🍉</title>
  
  
  <link href="https://www.fomal.cc/atom.xml" rel="self"/>
  
  <link href="https://www.fomal.cc/"/>
  <updated>2022-09-21T12:35:08.775Z</updated>
  <id>https://www.fomal.cc/</id>
  
  <author>
    <name>Coderyeah🍉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义注解实现系统启动时后端权限数据生成</title>
    <link href="https://www.fomal.cc/posts/c5539480.html"/>
    <id>https://www.fomal.cc/posts/c5539480.html</id>
    <published>2025-05-20T08:38:30.658Z</published>
    <updated>2022-09-21T12:35:08.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-注解介绍"><a href="#一-注解介绍" class="headerlink" title="一. 注解介绍"></a>一. 注解介绍</h3><ol><li><p>注解Annotation是一种引用数据类型，编译之后也是生成.class类型的java文件</p><p>语法：修饰符 @interface 注解类型名</p><ul><li>注解可以出现在类上、方法上、属性上、甚至注解上等…</li><li>JDK中内置的注解@Override(复写)、@SuppressWarnings(忽略编译器的警告)等</li></ul></li><li><p>元注解</p><ul><li><p>元注解就是用来修饰注解的，是注解上的注解；常见的元注解有@Target、@Retention、@Documented、@Inherited.</p></li><li><p>@Target：表示当前注解使用在什么位置</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如<span class="number">1</span>：@<span class="keyword">Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">Target</span>内部的值使用枚举ElementType表示，表示的主要位置有：注解、构造方法、属性、局部变量、函数、包、参数和类(默认值)。</span><br><span class="line">例如<span class="number">2</span>：@<span class="keyword">Target</span>(&#123;ElementType.METHOD,ElementType.<span class="keyword">TYPE</span>&#125;)</span><br><span class="line">多个位置使用数组的写法</span><br></pre></td></tr></table></figure></li><li><p>@Retention：定义被它所标记的注解能保留多久</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Retention注解有一个属性value，是RetentionPolicy类型的，Enum RetentionPolicy是一个枚举类型</span><br><span class="line">这个枚举决定了Retention注解应该如何去保持，也可理解为Rentention搭配 RententionPolicy使用</span><br><span class="line">RetentionPolicy有<span class="number">3</span>个值：<span class="keyword">CLASS</span>，<span class="keyword">RUNTIME</span>，<span class="keyword">SOURCE</span></span><br><span class="line"></span><br><span class="line">@Retention(RetentionPolicy.<span class="keyword">SOURCE</span>)：注解只保留在源文件，当Java文件编译成<span class="keyword">class</span>文件的时候，注解被遗弃</span><br><span class="line">@Retention(RetentionPolicy.<span class="keyword">CLASS</span>)：注解被保留到<span class="keyword">class</span>文件，但jvm加载<span class="keyword">class</span>文件时候被遗弃，这是默认的生命周期</span><br><span class="line">@Retention(RetentionPolicy.<span class="keyword">RUNTIME</span>)：注解不仅被保存到<span class="keyword">class</span>文件中，jvm加载<span class="keyword">class</span>文件之后，仍然存在</span><br></pre></td></tr></table></figure></li><li><p>@Documented：加了这个注解的注解，在生成文档的时候，可以在文档中显示出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> A&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Inherited：加了这个注解的注解，能被继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> A&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="二-自定义权限注解，项目启动时扫描注解加权限"><a href="#二-自定义权限注解，项目启动时扫描注解加权限" class="headerlink" title="二. 自定义权限注解，项目启动时扫描注解加权限"></a>二. 自定义权限注解，项目启动时扫描注解加权限</h3><h4 id="1-定义注解"><a href="#1-定义注解" class="headerlink" title="1. 定义注解"></a>1. 定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><span class="comment">//注解能作用在方法上、类上</span></span><br><span class="line"><span class="comment">//Java中的反射：在运行时，动态获取类的各种信息的一种能力</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//可以通过反射读取注解</span></span><br><span class="line"><span class="meta">@Inherited</span><span class="comment">//可以被继承</span></span><br><span class="line"><span class="meta">@Documented</span><span class="comment">//可以被javadoc工具提取成文档，可以不加</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PreAuthorize &#123;</span><br><span class="line">    <span class="comment">//对应t_permission表中的sn</span></span><br><span class="line">    String <span class="title function_">sn</span><span class="params">()</span>; <span class="comment">//department:patchDel</span></span><br><span class="line"><span class="comment">//对应t_permission表中的name</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>; <span class="comment">//部门批量删除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后在方法或类上加了这个<code>@PreAuthorize</code> 注解，都会去执行一段业务代码【例如：添加权限到<code>t_promission</code>】，但是要先扫描这个注解，然后解析这个注解，再去执行相应的业务代码</p><h4 id="2-例子"><a href="#2-例子" class="headerlink" title="2. 例子"></a>2. 例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DepartmentService departmentService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptDTO 部门查询参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PreAuthorize(name = &quot;部门列表&quot;, sn = &quot;department:list&quot;)</span></span><br><span class="line"><span class="meta">@LogAnnotation(module = &quot;部门模块&quot;, operate = &quot;分页查询部门列表&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;查询部门列表&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">(<span class="meta">@RequestBody(required = false)</span> DeptDTO deptDTO)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> departmentService.list(deptDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-扫描注解加权限"><a href="#3-扫描注解加权限" class="headerlink" title="3. 扫描注解加权限"></a>3. 扫描注解加权限</h4><p>注解定义之后，需要扫描。就像业务代码中@Service注解，服务启动的时候就会去扫描，生成业务对象。并注入到Controller使用。如果启动的时候业务代码中没有添加@Service注解，启动会报错的。</p><h4 id="4-自定义的注解怎么扫描呢？而且要在服务器启动的时候自动扫描？"><a href="#4-自定义的注解怎么扫描呢？而且要在服务器启动的时候自动扫描？" class="headerlink" title="4. 自定义的注解怎么扫描呢？而且要在服务器启动的时候自动扫描？"></a>4. 自定义的注解怎么扫描呢？而且要在服务器启动的时候自动扫描？</h4><ul><li>可以通过Web三大组件：Servlet、过滤器Filter、监听器Listenter</li></ul><ul><li><p>在SpringBoot项目中，如果想自定义Servlet、Filter、Listenter，我们只需要完成两个步骤：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 自己写一个类实现父接口或者继承父类：Spring提供的的Servlet、<span class="keyword">Filter</span>、Listenter，并在实现类上打上注解</span><br><span class="line"><span class="number">1.1</span>. 自定义servlet：继承HttpServlet，打注解<span class="variable">@WebServlet</span></span><br><span class="line">  <span class="number">1.2</span>. 自定义<span class="keyword">Filter</span>：实现<span class="keyword">Filter</span>，打注解<span class="variable">@WebFilter</span></span><br><span class="line"><span class="number">1.3</span>. 自定义Listenter：实现ServletContextListener，打注解<span class="variable">@WebListener</span> </span><br><span class="line">注意：SpringBoot项目中没有web.xml，不能通过xml配置实现。但是可以通过注解</span><br><span class="line"><span class="number">2.</span> 交给容器扫描：在启动类上打注解：<span class="variable">@ServletComponentScan</span>扫描Servlet、<span class="keyword">Filter</span>、Listenter的包即可</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-权限注解扫描监听器"><a href="#5-权限注解扫描监听器" class="headerlink" title="5 .权限注解扫描监听器"></a>5 .权限注解扫描监听器</h4><p>监听器：监听四大作用域的变化和属性的变更<br>application的类型：<code>ServletContext</code> - 这个对象会在服务器启动的时候自动生成，而且是唯一一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.system.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.coderyeah.system.service.PermissionScanService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span><span class="comment">//申明自定义的web监听器，被容器注册和使用</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionScanInitListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IPermissionScanService permissionScanService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//spring容器初始化结束之后被调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        <span class="comment">//这里面的业务随着接口的变多，可能执行时间会非常久，影响性能。影响主线程的启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;<span class="comment">//不用主线程去执行，用一个新的线程去执行</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//可以在这里扫描我们自定义的注解@PreAuthorize，然后将信息存储到t_permission表</span></span><br><span class="line">                <span class="comment">//这样就无需手动录入信息到权限t_permission表了</span></span><br><span class="line">                log.info(<span class="string">&quot;权限初始化开始******************************************&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;权限初始化开始******************************************&quot;</span>);</span><br><span class="line">                permissionScanService.scanPermission();</span><br><span class="line">                System.out.println(<span class="string">&quot;权限初始化结束******************************************&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//容器销毁的时候执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-启动类"><a href="#6-启动类" class="headerlink" title="6. 启动类"></a>6. 启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;io.coderyeah.*.mapper&quot;)</span></span><br><span class="line"><span class="comment">//加载Listener - 本来监听器只要服务器一启动就会执行，但是SpringBoot项目中是通过启动类开启服务的，所以要加这个注解去加载listener，listener才会起作用</span></span><br><span class="line"><span class="meta">@ServletComponentScan(value = &#123;&quot;io.coderyeah.system.listener&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PetHomeApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PetHomeApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试：启动项目就会打印输出信息</span></span><br></pre></td></tr></table></figure><h4 id="7-业务接口"><a href="#7-业务接口" class="headerlink" title="7. 业务接口"></a>7. 业务接口</h4><p>此业务接口专门用来解析注解<code>@PreAuthorize(name = &quot;部门列表&quot;,sn= &quot;department:list&quot;)</code>和注解上的参数，并获取出来添加到权限表t_permission。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.找包 - 找类 - 找方法 - 找注解</span></span><br><span class="line"><span class="comment">//2.解析这个注解拿到：sn,name</span></span><br><span class="line"><span class="comment">//3.当前方法的url地址</span></span><br><span class="line"><span class="comment">//4.创建一个Permisson对象 - 添加到数据库</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.system.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.basic.annotation.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.basic.util.ClassUtils;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.system.domain.Permission;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.system.mapper.PermissionMapper;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.system.service.PermissionService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coderyeah</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 针对表【t_permission】的数据库操作Service实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2022-09-21 11:00:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;PermissionMapper, Permission&gt; <span class="keyword">implements</span> <span class="title class_">PermissionService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PKG_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;io.coderyeah.&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PKG_SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;.controller&quot;</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionMapper permissionMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scanPermission</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取 io.coderyeah 下面所有的模块目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getResource(<span class="string">&quot;/&quot;</span>).getPath() + <span class="string">&quot;/io/coderyeah/&quot;</span>;</span><br><span class="line">        <span class="comment">// 当前包路径下的文件对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="comment">// 过滤出当前包下所有目录的文件数组</span></span><br><span class="line">        File[] files = file.listFiles(<span class="keyword">new</span> <span class="title class_">FileFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File file)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> file.isDirectory();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取io.coderyeah.*.controller里面所有的类</span></span><br><span class="line">        Set&lt;Class&gt; clazzes = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">assert</span> files != <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (File fileTmp : files) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;===============权限注解解析：获取所有的包==============&quot;</span>);</span><br><span class="line">            System.out.println(fileTmp.getName());</span><br><span class="line">            <span class="comment">// 将所有类对象放进set集合</span></span><br><span class="line">            clazzes.addAll(ClassUtils.getClasses(PKG_PREFIX + fileTmp.getName() + PKG_SUFFIX));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历类对象集合</span></span><br><span class="line">        <span class="keyword">for</span> (Class clazz : clazzes) &#123;</span><br><span class="line">            <span class="comment">// 获取当前类的所有方法</span></span><br><span class="line">            Method[] methods = clazz.getMethods();</span><br><span class="line">            <span class="comment">// 判断是否有方法存在</span></span><br><span class="line">            <span class="keyword">if</span> (methods == <span class="literal">null</span> || methods.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历当前类中所有的方法</span></span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                <span class="comment">// 获取接口执行路径</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> getUri(clazz, method);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">PreAuthorize</span> <span class="variable">preAuthorizeAnno</span> <span class="operator">=</span> method.getAnnotation(PreAuthorize.class);</span><br><span class="line">                    <span class="keyword">if</span> (preAuthorizeAnno == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 跳出当前循环</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> preAuthorizeAnno.name();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">permissionSn</span> <span class="operator">=</span> preAuthorizeAnno.sn();</span><br><span class="line">                    <span class="type">Permission</span> <span class="variable">permissionTmp</span> <span class="operator">=</span> permissionMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;Permission&gt;().eq(Permission::getSn, permissionSn));</span><br><span class="line">                    <span class="comment">//如果不存在就添加</span></span><br><span class="line">                    <span class="keyword">if</span> (permissionTmp == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">Permission</span> <span class="variable">permission</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permission</span>();</span><br><span class="line">                        permission.setName(name);       <span class="comment">//t_permission表中的权限名</span></span><br><span class="line">                        permission.setSn(permissionSn); <span class="comment">//t_permission表中的权限编号</span></span><br><span class="line">                        permission.setUrl(uri);           <span class="comment">//t_permission表中的权限路径</span></span><br><span class="line">                        permissionMapper.insert(permission);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//如果存在就修改</span></span><br><span class="line">                        permissionTmp.setName(name);</span><br><span class="line">                        permissionTmp.setSn(permissionSn);</span><br><span class="line">                        permissionTmp.setUrl(uri);</span><br><span class="line">                        permissionMapper.updateById(permissionTmp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取t_permission表中的url  //@RequestMapping(&quot;/department&quot;) //@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getUri</span><span class="params">(Class clazz, Method method)</span> &#123;</span><br><span class="line">        <span class="comment">//获取类上的请求路径：/department</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取当前类的@RequestMapping注解</span></span><br><span class="line">        <span class="type">Annotation</span> <span class="variable">annotation</span> <span class="operator">=</span> clazz.getAnnotation(RequestMapping.class);</span><br><span class="line">        <span class="comment">// 判断注解是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 类型强转</span></span><br><span class="line">            <span class="type">RequestMapping</span> <span class="variable">requestMapping</span> <span class="operator">=</span> (RequestMapping) annotation;</span><br><span class="line">            <span class="comment">// 获取@RequestMapping注解的数组值</span></span><br><span class="line">            String[] values = requestMapping.value();</span><br><span class="line">            <span class="comment">// 判断值是否为空</span></span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 将请求路径赋值给classPath</span></span><br><span class="line">                classPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(classPath) &amp;&amp; !classPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    classPath = <span class="string">&quot;/&quot;</span> + classPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以下是获取方法上的请求路径：/&#123;id&#125;</span></span><br><span class="line">        <span class="type">GetMapping</span> <span class="variable">getMapping</span> <span class="operator">=</span> method.getAnnotation(GetMapping.class);</span><br><span class="line">        <span class="comment">// 方法上的请求路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (getMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取注解上的值</span></span><br><span class="line">            String[] values = getMapping.value();</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                methodPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(methodPath) &amp;&amp; !methodPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    methodPath = <span class="string">&quot;/&quot;</span> + methodPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">PostMapping</span> <span class="variable">postMapping</span> <span class="operator">=</span> method.getAnnotation(PostMapping.class);</span><br><span class="line">        <span class="keyword">if</span> (postMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">            String[] values = postMapping.value();</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                methodPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(methodPath) &amp;&amp; !methodPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    methodPath = <span class="string">&quot;/&quot;</span> + methodPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">DeleteMapping</span> <span class="variable">deleteMapping</span> <span class="operator">=</span> method.getAnnotation(DeleteMapping.class);</span><br><span class="line">        <span class="keyword">if</span> (deleteMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">            String[] values = deleteMapping.value();</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                methodPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(methodPath) &amp;&amp; !methodPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    methodPath = <span class="string">&quot;/&quot;</span> + methodPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">PutMapping</span> <span class="variable">putMapping</span> <span class="operator">=</span> method.getAnnotation(PutMapping.class);</span><br><span class="line">        <span class="keyword">if</span> (putMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">            String[] values = putMapping.value();</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                methodPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(methodPath) &amp;&amp; !methodPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    methodPath = <span class="string">&quot;/&quot;</span> + methodPath;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">PatchMapping</span> <span class="variable">patchMapping</span> <span class="operator">=</span> method.getAnnotation(PatchMapping.class);</span><br><span class="line">        <span class="keyword">if</span> (patchMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">            String[] values = patchMapping.value();</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                methodPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(methodPath) &amp;&amp; !methodPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    methodPath = <span class="string">&quot;/&quot;</span> + methodPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">RequestMapping</span> <span class="variable">requestMapping</span> <span class="operator">=</span> method.getAnnotation(RequestMapping.class);</span><br><span class="line">        <span class="keyword">if</span> (requestMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">            String[] values = requestMapping.value();</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                methodPath = values[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(methodPath) &amp;&amp; !methodPath.startsWith(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">                    methodPath = <span class="string">&quot;/&quot;</span> + methodPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classPath + methodPath;  <span class="comment">// /department/&#123;id&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getPermissionSn</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\[(.*?)]&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?&lt;=\\()[^\\)]+&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(value);</span><br><span class="line">        <span class="type">String</span> <span class="variable">permissionSn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (m.find()) &#123;</span><br><span class="line">            permissionSn = m.group(<span class="number">0</span>).substring(<span class="number">1</span>, m.group().length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> permissionSn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-工具类：ClassUtils-java"><a href="#8-工具类：ClassUtils-java" class="headerlink" title="8. 工具类：ClassUtils.java"></a>8. 工具类：ClassUtils.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassUtils</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从传入的包中获取所有的类的字节码对象:</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LEIYU</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getClasses(String pack) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个class类的集合</span></span><br><span class="line">Set&lt;Class&lt;?&gt;&gt; classes = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;Class&lt;?&gt;&gt;();</span><br><span class="line"><span class="comment">// 是否循环迭代</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">recursive</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 获取包的名字 并进行替换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> pack;</span><br><span class="line"><span class="type">String</span> <span class="variable">packageDirName</span> <span class="operator">=</span> packageName.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"><span class="comment">// 定义一个枚举的集合 并进行循环来处理这个目录下的things</span></span><br><span class="line">Enumeration&lt;URL&gt; dirs;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);</span><br><span class="line"><span class="comment">// 循环迭代下去</span></span><br><span class="line"><span class="keyword">while</span> (dirs.hasMoreElements()) &#123;</span><br><span class="line"><span class="comment">// 获取下一个元素</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> dirs.nextElement();</span><br><span class="line"><span class="comment">// 得到协议的名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> url.getProtocol();</span><br><span class="line"><span class="comment">// 如果是以文件的形式保存在服务器上</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;file&quot;</span>.equals(protocol)) &#123;</span><br><span class="line"><span class="comment">// 获取包的物理路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> URLDecoder.decode(url.getFile(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 以文件的方式扫描整个包下的文件 并添加到集合中</span></span><br><span class="line">findAndAddClassesInPackageByFile(packageName, filePath, recursive, classes);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> classes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.以文件的形式来获取包下的所有Class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以文件的形式来获取包下的所有Class</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> packageName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> packagePath</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> recursive</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> classes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findAndAddClassesInPackageByFile</span><span class="params">(String packageName, String packagePath, <span class="keyword">final</span> <span class="type">boolean</span> recursive,</span></span><br><span class="line"><span class="params">Set&lt;Class&lt;?&gt;&gt; classes)</span> &#123;</span><br><span class="line"><span class="comment">// 获取此包的目录 建立一个File</span></span><br><span class="line"><span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(packagePath);</span><br><span class="line"><span class="comment">// 如果不存在或者 也不是目录就直接返回</span></span><br><span class="line"><span class="keyword">if</span> (!dir.exists() || !dir.isDirectory()) &#123;</span><br><span class="line"><span class="comment">// log.warn(&quot;用户定义包名 &quot; + packageName + &quot; 下没有任何文件&quot;);</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果存在 就获取包下的所有文件 包括目录</span></span><br><span class="line">File[] dirfiles = dir.listFiles(<span class="keyword">new</span> <span class="title class_">FileFilter</span>() &#123;</span><br><span class="line"><span class="comment">// 自定义过滤规则 如果可以循环(包含子目录) 或则是以.class结尾的文件(编译好的java类文件)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File file)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (recursive &amp;&amp; file.isDirectory()) || (file.getName().endsWith(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 循环所有文件</span></span><br><span class="line"><span class="keyword">for</span> (File file : dirfiles) &#123;</span><br><span class="line"><span class="comment">// 如果是目录 则继续扫描</span></span><br><span class="line"><span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">findAndAddClassesInPackageByFile(packageName + <span class="string">&quot;.&quot;</span> + file.getName(), file.getAbsolutePath(), recursive,</span><br><span class="line">classes);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果是java类文件 去掉后面的.class 只留下类名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> file.getName().substring(<span class="number">0</span>, file.getName().length() - <span class="number">6</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 添加到集合中去</span></span><br><span class="line"><span class="comment">// classes.add(Class.forName(packageName + &#x27;.&#x27; +</span></span><br><span class="line"><span class="comment">// className));</span></span><br><span class="line"><span class="comment">// 经过回复同学的提醒，这里用forName有一些不好，会触发static方法，没有使用classLoader的load干净</span></span><br><span class="line">classes.add(</span><br><span class="line">Thread.currentThread().getContextClassLoader().loadClass(packageName + <span class="string">&#x27;.&#x27;</span> + className));</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// log.error(&quot;添加用户自定义视图类错误 找不到此类的.class文件&quot;);</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-注解介绍&quot;&gt;&lt;a href=&quot;#一-注解介绍&quot; class=&quot;headerlink&quot; title=&quot;一. 注解介绍&quot;&gt;&lt;/a&gt;一. 注解介绍&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;注解Annotation是一种引用数据类型，编译之后也是生成.class类型的java</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://www.fomal.cc/posts/46563.html"/>
    <id>https://www.fomal.cc/posts/46563.html</id>
    <published>2025-05-20T08:38:30.655Z</published>
    <updated>2022-07-20T03:06:31.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-简介-happy"><a href="#一-简介-happy" class="headerlink" title="一. 简介:happy:"></a>一. 简介:happy:</h3><ol><li><p>? 通配符匹配文件名中的 0 个或 1 个字符，而 * 通配符匹配零个或多个字符。</p></li><li><p>正则表达式在线测试工具：(<a href="https://c.runoob.com/front-end/854/">https://c.runoob.com/front-end/854/</a>)</p></li><li><p>例子：像 <code>data(\w)?\.dat</code> 这样的模式将查找下列文件：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data.dat</span><br><span class="line">data1.dat</span><br><span class="line">data2.dat</span><br><span class="line">datax.dat</span><br><span class="line">dataN.dat</span><br></pre></td></tr></table></figure></li><li><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220715155152.png" alt="image-20220715155152077"></p><ul><li><code>^</code> 为匹配输入字符串的开始位置。</li><li><code>[0-9]+</code>匹配多个数字， <code>[0-9]</code> 匹配单个数字，<code>+</code> 匹配一个或者多个。</li><li><code>abc$</code>匹配字母 <code>abc</code> 并以 <code>abc</code> 结尾，<code>$</code> 为匹配输入字符串的结束位置。</li></ul></li><li><p>例子①：我们在写用户注册表单时，只允许用户名包含字符、数字、下划线和连接字符 -，并设置用户名的长度，我们就可以使用以下正则表达式来设定。（<code>^[a-z0-9_-]&#123;3,20&#125;$</code>）</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220715160155.png" alt="image-20220715160155236" style="zoom: 50%;" /></p></li><li><p>例子②</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/^[0-9]+abc$/</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">match</span>(patt1));</span><br></pre></td></tr></table></figure><p>匹配结果是：<code>123.abc</code></p></li></ol><h3 id="二-语法"><a href="#二-语法" class="headerlink" title="二. 语法"></a>二. 语法</h3><ol><li><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p></li><li><p><code>runoo+b</code>，可以匹配 <strong><code>runoob</code>、<code>runooob</code>、<code>runoooooob</code></strong> 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。</p></li><li><p><code>runoo*b</code>，可以匹配 <strong><code>runob</code>、<code>runoob</code>、<code>runoooooob</code></strong> 等，* 号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</p></li><li><p><code>colou?r</code> 可以匹配 <strong><code>color</code></strong> 或者 <strong><code>colour</code></strong>，? 问号代表前面的字符最多只可以出现一次（0次或1次）。</p></li><li><h4 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h4><ul><li><p><code>[ABC]</code>: 匹配 […] 中的所有字符，例如 <code>[aeiou]</code> 匹配字符串 “<code>google runoob taobao</code>“ 中所有的 e o u a 字母。</p></li><li><p><code>[^ABC]</code>: 匹配除了 […] 中字符的所有字符，例如<code>[^aeiou]</code>匹配字符串 “<code>google runoob taobao</code>“ 中除了 e o u a 字母的所有字母。</p></li><li><p><code>[A-Z]</code>: <code>[A-Z]</code> 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</p></li><li><p><code>.</code>: 匹配除换行符（\n、\r）之外的任何单个字符，相等于 <code>[^\n\r]</code>。</p></li><li><p><code>[\s\S]</code>: 匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;google runoob taobao\nRUnoob\ntaobao&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/[\s\S]/g</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">match</span>(patt1));</span><br></pre></td></tr></table></figure><p>结果：<code>g,o,o,g,l,e, ,r,u,n,o,o,b, ,t,a,o,b,a,o, ,R,U,n,o,o,b, ,t,a,o,b,a,o</code></p></li><li><p><code>[\w]</code>: 匹配字母、数字、下划线。等价于 <code>[A-Za-z0-9_]</code> </p></li></ul></li><li><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><ul><li>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 <code>runoo*b</code> 中的 <em>，简单的说就是表示任何字符串的意思。如果要查找字符串中的 </em> 符号，则需要对 <em> 进行转义，即在其前加一个 \，`runo\</em>ob<code>匹配字符串 **</code>runo*ob`**。</li></ul></li><li><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><p>| <em>     | 匹配前面的子表达式零次或多次。例如，`zo</em><code>能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于&#123;0,&#125;。 || ----- | :----------------------------------------------------------: || +     | 匹配前面的子表达式一次或多次。例如，</code>‘zo+’<code>能匹配</code>“zo<code>&quot; 以及</code>“zoo”<code>，但不能匹配 &quot;z&quot;。+ 等价于 &#123;1,&#125;。 || ?     | 匹配前面的子表达式零次或一次。例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 、 &quot;does&quot; 中的 &quot;does&quot; 、 &quot;</code>doxy<code>&quot; 中的 &quot;do&quot; 。? 等价于 &#123;0,1&#125;。 || &#123;n&#125;   | n 是一个非负整数。匹配确定的 n 次。例如，&#39;o&#123;2&#125;&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但是能匹配 &quot;food&quot; 中的两个 o。 || &#123;n,&#125;  | n 是一个非负整数。至少匹配n 次。例如，&#39;o&#123;2,&#125;&#39; 不能匹配 &quot;Bob&quot; 中的 &#39;o&#39;，但能匹配 &quot;</code>foooood<code>&quot; 中的所有 o。&#39;o&#123;1,&#125;&#39; 等价于 &#39;o+&#39;。&#39;o&#123;0,&#125;&#39; 则等价于 &#39;o*&#39;。 || &#123;n,m&#125; | m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，&quot;o&#123;1,3&#125;&quot; 将匹配 &quot;</code>fooooood`” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。 |</p></li></ol><p><code>*</code>和 <code>+</code> 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 <code>?</code> 就可以实现非贪婪或最小匹配.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>RUNOOB-菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>贪婪</strong>：<code>/&lt;.*&gt;/</code>===&gt;&gt;&gt;匹配所有内容<code>&lt;h1&gt;RUNOOB-菜鸟教程&lt;/h1&gt;</code></li><li><strong>非贪婪</strong>：<code>/&lt;.*?&gt;/</code>===&gt;&gt;&gt;<code>&lt;h1&gt;</code>或者<code>/&lt;\w+?&gt;/</code>===&gt;&gt;&gt;<code>&lt;h1&gt;</code></li><li>通过在 *、+ 或 ? 限定符之后放置 ?，该表达式从”贪婪”表达式转换为”非贪婪”表达式或者最小匹配。</li></ul><ol><li><strong>定位符</strong></li></ol><ul><li>定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。</li><li>下面的表达式匹配单词 Chapter 的开头三个字符，因为这三个字符出现在单词边界后面：<code>/\bCha/</code></li><li>下面的表达式匹配单词 Chapter 中的字符串 <code>ter</code>，因为它出现在单词边界的前面：<code>/ter\b/</code></li><li>下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：<code>\Bapt</code></li><li>不匹配 Chapter 中的 <code>Cha</code>：<code>/\Bcha/</code></li></ul><ol><li><p><strong>例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;https://www.runoob.com:80/html/html-tutorial.html&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/</span>;</span><br><span class="line">arr = str.<span class="title function_">match</span>(patt1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> ; i++) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(arr[i]);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三行代码 <code>str.match(patt1)</code> 返回一个数组，实例中的数组包含 5 个元素，索引 0 对应的是整个字符串，索引 1 对应第一个匹配符（括号内），以此类推。</li><li>第一个括号子表达式包含 <strong><code>https</code></strong> </li><li>第二个括号子表达式包含 <strong><code>www.runoob.com</code></strong></li><li>第三个括号子表达式包含 <strong>:80</strong> </li><li>第四个括号子表达式包含 <strong><code>/html/html-tutorial.html</code></strong></li></ul></li></ol><h3 id="三-修饰符-pattern-flags"><a href="#三-修饰符-pattern-flags" class="headerlink" title="三. 修饰符 /pattern/flags"></a>三. 修饰符 <code>/pattern/flags</code></h3><div class="table-container"><table><thead><tr><th>i</th><th>ignore - 不区分大小写</th><th style="text-align:left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</th></tr></thead><tbody><tr><td>g</td><td>global - 全局匹配</td><td style="text-align:left">查找所有的匹配项。</td></tr><tr><td>m</td><td>multi line - 多行匹配</td><td style="text-align:left">使边界字符 ^ 和 $ 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td>s</td><td>特殊字符圆点 . 中包含换行符 \n</td><td style="text-align:left">默认情况下的圆点 . 是匹配除换行符 \n 之外的任何字符，加上 s 修饰符之后, . 中包含换行符 \n。</td></tr></tbody></table></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Google runoob taobao runoob&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> n1=str.<span class="title function_">match</span>(<span class="regexp">/runoob/</span>);   <span class="comment">// 查找第一次匹配项 runoob</span></span><br><span class="line"><span class="keyword">var</span> n2=str.<span class="title function_">match</span>(<span class="regexp">/runoob/g</span>);  <span class="comment">// 查找所有匹配项 runoob,runoob</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Google runoob taobao RUNoob&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> n1=str.<span class="title function_">match</span>(<span class="regexp">/runoob/g</span>);   <span class="comment">// 区分大小写 runoob</span></span><br><span class="line"><span class="keyword">var</span> n2=str.<span class="title function_">match</span>(<span class="regexp">/runoob/gi</span>);  <span class="comment">// 不区分大小写 runoob,RUNoob</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;runoobgoogle\ntaobao\nrunoobweibo&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n1=str.<span class="title function_">match</span>(<span class="regexp">/^runoob/g</span>);   <span class="comment">// 匹配一个 runoob</span></span><br><span class="line"><span class="keyword">var</span> n2=str.<span class="title function_">match</span>(<span class="regexp">/^runoob/gm</span>);  <span class="comment">// 多行匹配 runoob,runoob</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;google\nrunoob\ntaobao&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n1=str.<span class="title function_">match</span>(<span class="regexp">/google./</span>);   <span class="comment">// 没有使用 s，无法匹配\n. </span></span><br><span class="line"><span class="keyword">var</span> n2=str.<span class="title function_">match</span>(<span class="regexp">/runoob./</span>s);  <span class="comment">// 使用 s，匹配\n. runoob</span></span><br></pre></td></tr></table></figure><p><strong>匹配邮箱</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcd 112306@qq.com 1234&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/\b[\w.%+-]+@[\w.-]+\.[a-zA-Z]&#123;2,6&#125;\b/g</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">match</span>(patt1)); <span class="comment">//112306@qq.com</span></span><br></pre></td></tr></table></figure><h3 id="四-实例"><a href="#四-实例" class="headerlink" title="四. 实例"></a>四. 实例</h3><p>ONE:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc123-_def&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/[a-zA-Z0-9_-]+/</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">match</span>(patt));<span class="comment">//abc123-_def</span></span><br></pre></td></tr></table></figure><p>TWO:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc123def&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;abc123_def&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/[a-zA-Z0-9_]+/</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">match</span>(patt));<span class="comment">//abc123def</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str2.<span class="title function_">match</span>(patt));<span class="comment">//abc123_def</span></span><br></pre></td></tr></table></figure><p>THREE: 匹配所有 <code>img</code> 标签：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">&lt;</span>img.<span class="operator">*</span><span class="operator">?</span>src<span class="operator">=</span><span class="string">&quot;(.*?)&quot;</span>.<span class="operator">*</span><span class="operator">?</span><span class="punctuation">\</span><span class="operator">/</span><span class="operator">?</span><span class="operator">&gt;</span><span class="operator">/</span>gi</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220715194304.jpg" alt="2" style="zoom:50%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-简介-happy&quot;&gt;&lt;a href=&quot;#一-简介-happy&quot; class=&quot;headerlink&quot; title=&quot;一. 简介:happy:&quot;&gt;&lt;/a&gt;一. 简介:happy:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;? 通配符匹配文件名中的 0 个或 1 个字符，而</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>怎么实现对登录用户访问权限的拦截</title>
    <link href="https://www.fomal.cc/posts/9a421b.html"/>
    <id>https://www.fomal.cc/posts/9a421b.html</id>
    <published>2025-05-20T08:38:30.651Z</published>
    <updated>2022-09-23T07:06:57.350Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-自定义权限注解"><a href="#一-自定义权限注解" class="headerlink" title="一.  自定义权限注解"></a>一.  自定义权限注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PreAuthorize &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">sn</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-在接口方法上使用注解"><a href="#二-在接口方法上使用注解" class="headerlink" title="二. 在接口方法上使用注解"></a>二. 在接口方法上使用注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptDTO 部门查询参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PreAuthorize(name = &quot;部门列表&quot;, sn = &quot;department:list&quot;)</span></span><br><span class="line"><span class="meta">@LogAnnotation(module = &quot;部门模块&quot;, operate = &quot;分页查询部门列表&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;查询部门列表&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">(<span class="meta">@RequestBody(required = false)</span> DeptDTO deptDTO)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> departmentService.list(deptDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-登录拦截器"><a href="#三-登录拦截器" class="headerlink" title="三. 登录拦截器"></a>三. 登录拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.basic.annotation.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.basic.constant.Constants;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.org.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.user.domain.LoginInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 静态资源放行</span></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//3.如果有token，通过token获取redis的登录信息</span></span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">loginInfo</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(Constants.LOGIN_TOKEN + token); <span class="comment">// LoginInfo对象</span></span><br><span class="line">            <span class="keyword">if</span> (loginInfo != <span class="literal">null</span>) &#123;<span class="comment">//登录成功，而且没有过期</span></span><br><span class="line">                <span class="comment">//5.如果登录信息不为null - 放行 + 刷新过期时间[重新添加到redis]</span></span><br><span class="line">                stringRedisTemplate.opsForValue().set(Constants.LOGIN_TOKEN + token, loginInfo, <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">LoginInfo</span> <span class="variable">info</span> <span class="operator">=</span> JSON.parseObject(loginInfo, LoginInfo.class);</span><br><span class="line">                <span class="keyword">if</span> (info.getType() == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 前端用户直接放行</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 后端管理员 需要判断权限</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line">                <span class="comment">// 获取访问的方法上的权限注解</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">PreAuthorize</span> <span class="variable">p</span> <span class="operator">=</span> handlerMethod.getMethodAnnotation(PreAuthorize.class);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == p) &#123;</span><br><span class="line">                    <span class="comment">// 此方法上没有该注解直接放行 公用资源</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 需要判断该登录用户是否具备此接口的操作权限</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">sn</span> <span class="operator">=</span> p.sn();</span><br><span class="line">                <span class="comment">// 查询该登录用户的所有权限集合</span></span><br><span class="line">                List&lt;String&gt; ownPermissions = employeeMapper.getPermissionSnByLoginInfoId(info.getId());</span><br><span class="line">                <span class="keyword">if</span> (ownPermissions.contains(sn)) &#123;</span><br><span class="line">                    <span class="comment">// 包含该权限</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 没有权限返回json信息给客户端</span></span><br><span class="line">                resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">                writer.print(<span class="string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;noPermission\&quot;&#125;&quot;</span>);</span><br><span class="line">                writer.close();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;noLogin\&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-查询当前登录用户的所有权限涉及到多张表"><a href="#四-查询当前登录用户的所有权限涉及到多张表" class="headerlink" title="四. 查询当前登录用户的所有权限涉及到多张表"></a>四. 查询当前登录用户的所有权限涉及到多张表</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPermissionSnByLoginInfoId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">    select tp.sn</span><br><span class="line">    from t_employee te</span><br><span class="line">             join t_employee_role ter on te.id = ter.employee_id</span><br><span class="line">             join t_role tr on ter.role_id = tr.id</span><br><span class="line">             join t_role_permission trp on tr.id = trp.role_id</span><br><span class="line">             join t_permission tp on tp.id = trp.permission_id</span><br><span class="line">    where te.logininfo_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220923112147.png" alt="网络传输数据安全"></p><h3 id="五-前端后置拦截器处理"><a href="#五-前端后置拦截器处理" class="headerlink" title="五. 前端后置拦截器处理"></a>五. 前端后置拦截器处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//======================axios的后置拦截器【处理后台登录拦截的结果】====================//</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//后端响应的是没有登录的信息</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === res.<span class="property">data</span>.<span class="property">success</span> &amp;&amp; <span class="string">&quot;noLogin&quot;</span> === res.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;loginInfo&quot;</span>);</span><br><span class="line">        router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === res.<span class="property">data</span>.<span class="property">success</span> &amp;&amp; <span class="string">&quot;noPermission&quot;</span> === res.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">      <span class="title class_">Message</span>.<span class="title function_">info</span>(<span class="string">&#x27;您没有访问权限&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//======================axios的后置拦截器【处理后台登录拦截的结果】====================//</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-自定义权限注解&quot;&gt;&lt;a href=&quot;#一-自定义权限注解&quot; class=&quot;headerlink&quot; title=&quot;一.  自定义权限注解&quot;&gt;&lt;/a&gt;一.  自定义权限注解&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在maven中使用RocketMQ发布消息和消费消息</title>
    <link href="https://www.fomal.cc/posts/75f7075c.html"/>
    <id>https://www.fomal.cc/posts/75f7075c.html</id>
    <published>2025-05-20T08:38:30.648Z</published>
    <updated>2022-11-03T02:57:45.546Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-创建maven项目并导入依赖"><a href="#一-创建maven项目并导入依赖" class="headerlink" title="一. 创建maven项目并导入依赖"></a>一. 创建maven项目并导入依赖</h3><p><strong>PS: 需要自行安装RocketMQ并启动服务</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二-同步消息"><a href="#二-同步消息" class="headerlink" title="二. 同步消息"></a>二. 同步消息</h3><p>同步发送是指发送的消息需要<strong>等待获取到返回结果</strong>后再执行第二条消息发送,采用的是一种阻塞模型，安全，但效率会降低一丢丢。</p><ol><li><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 9:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123; <span class="comment">// 生产者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建生产者 </span></span><br><span class="line">        <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;producer-demo&quot;</span>);</span><br><span class="line">        <span class="comment">// 连接服务</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">        producer.start();</span><br><span class="line"><span class="comment">// 消息参数依次是主题、标签、发送的消息</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;demo-topic&quot;</span>, <span class="string">&quot;demo&quot;</span>, <span class="string">&quot;aaa I am a monster! nice to see ya!!!&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="type">SendResult</span> <span class="variable">result</span> <span class="operator">=</span> producer.send(message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"><span class="comment">// 关闭生产者</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 9:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;<span class="comment">// 消费者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建消费者</span></span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;demo-consumer&quot;</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">        <span class="comment">// 订阅需要消费的主题和标签下的消息</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;demo-topic&quot;</span>, <span class="string">&quot;demo&quot;</span>);</span><br><span class="line">        <span class="comment">// 实现消息监听接口</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    list.forEach(l -&gt; &#123;</span><br><span class="line">                        <span class="comment">// 获取消息</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;body:&quot;</span> +<span class="keyword">new</span> <span class="title class_">String</span>(l.getBody()));</span><br><span class="line">                        System.out.println(<span class="string">&quot;context:&quot;</span> + consumeConcurrentlyContext);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息消息启动成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="三-异步消息"><a href="#三-异步消息" class="headerlink" title="三. 异步消息"></a>三. 异步消息</h3><p>异步消息是指发送的消息到MQ队列不用等待其返回结果，继续发送其它消息，效率快。</p><ol><li><h4 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendCallback;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 9:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;<span class="comment">// 异步生产者发送消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;producer-demo&quot;</span>);</span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;demo-topic&quot;</span>, <span class="string">&quot;demo-async&quot;</span>, <span class="string">&quot;this is a async message and lqs is freaking awesome!&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// 设置延时(过了一定时间再发送到MQ对列) 5秒</span></span><br><span class="line">      <span class="comment">//  message.setDelayTimeLevel(2);// 指定延迟等级 比如2 表示5秒</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 异步回调获取返回结果</span></span><br><span class="line">        producer.send(message, <span class="keyword">new</span> <span class="title class_">SendCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult sendResult)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;发送结果:&quot;</span>+sendResult);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;失败原因:&quot;</span>+throwable.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 9:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;demo-consumer&quot;</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">        consumer.subscribe(<span class="string">&quot;demo-topic&quot;</span>, <span class="string">&quot;demo-async&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现消息监听接口</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    list.forEach(l -&gt; &#123;</span><br><span class="line">                        <span class="comment">// 获取消息</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;body:&quot;</span> +<span class="keyword">new</span> <span class="title class_">String</span>(l.getBody()));</span><br><span class="line">                        System.out.println(<span class="string">&quot;context:&quot;</span> + consumeConcurrentlyContext);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">// 返回状态表示消息已经被消费，不可再次消费</span></span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// 消费失败 可再次消费</span></span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息消息启动成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="四-事务消息"><a href="#四-事务消息" class="headerlink" title="四. 事务消息"></a>四. 事务消息</h3><ol><li><h4 id="事务监听"><a href="#事务监听" class="headerlink" title="事务监听"></a>事务监听</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.LocalTransactionState;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.TransactionListener;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 10:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTransactionCheckListener</span> <span class="keyword">implements</span> <span class="title class_">TransactionListener</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o       事物消息携带的额外参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LocalTransactionState <span class="title function_">executeLocalTransaction</span><span class="params">(Message message, Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;事务发布消息:&quot;</span> + message);</span><br><span class="line">            System.out.println(<span class="string">&quot;事务参数（额外数据）:&quot;</span> + o);</span><br><span class="line">            <span class="comment">// 事务返回状态</span></span><br><span class="line">            <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LocalTransactionState <span class="title function_">checkLocalTransaction</span><span class="params">(MessageExt messageExt)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="生成者"><a href="#生成者" class="headerlink" title="生成者"></a>生成者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.TransactionMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 10:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;<span class="comment">// 事务消息生产者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.创建生产者对象</span></span><br><span class="line">        <span class="type">TransactionMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionMQProducer</span>(<span class="string">&quot;trans-demo&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接NameServer</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">        <span class="comment">//3.创建线程</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        producer.setExecutorService(executorService);</span><br><span class="line">        <span class="comment">//4.指定线程的事物监听</span></span><br><span class="line">        producer.setTransactionListener(<span class="keyword">new</span> <span class="title class_">MyTransactionCheckListener</span>());</span><br><span class="line">        <span class="comment">//3.启动</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;demo-topic&quot;</span>, <span class="string">&quot;demo-trans&quot;</span>, <span class="string">&quot;this is a trans message and lqs is freaking awesome!&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        producer.sendMessageInTransaction(message, <span class="string">&quot;事务demo参数&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 9:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;demo-trans&quot;</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">        consumer.subscribe(<span class="string">&quot;demo-topic&quot;</span>, <span class="string">&quot;demo-trans&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现消息监听接口</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    list.forEach(l -&gt; &#123;</span><br><span class="line">                        <span class="comment">// 获取消息</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;body:&quot;</span> +<span class="keyword">new</span> <span class="title class_">String</span>(l.getBody()));</span><br><span class="line">                        System.out.println(<span class="string">&quot;context:&quot;</span> + consumeConcurrentlyContext);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息消息启动成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="五-RocketMQ事务消息工作流程"><a href="#五-RocketMQ事务消息工作流程" class="headerlink" title="五. RocketMQ事务消息工作流程"></a>五. <code>RocketMQ</code>事务消息工作流程</h3><ul><li>事务消息解决的就是，事务发送方执行本地事务和事务消息的原子性。</li></ul><ol><li><p>首先事务发起方:往MQ中发送一个事务消息-half半消息(准备消息)，该消息不可被消费;</p></li><li><p>然后事务发送方执行本地事务，并发送commit给MQ，如果是执行失败就会发送rollback给MQ;</p></li><li><p>MQ搜到commit指令，代表本地事务执行成功，之前的half消息就会成为可以被commit提交的消</p><p>息，否则就是Rollback消息;</p></li><li><p>事务参与者，也就是消费者会消费这个消息，然后执行相关的逻辑处理。如果是Rollback消息就不</p><p>会被消费，而是丢弃;</p></li><li><p>如果事务参与方并没有发送commit或者rollback指令MQ，MQ回调用事务发送方的回到方法来检</p><p>查，我们需要去实现这个本地事务检查接口，通过返回commit或者rollback来告知MQ本地事务是</p><p>否执行成功。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-创建maven项目并导入依赖&quot;&gt;&lt;a href=&quot;#一-创建maven项目并导入依赖&quot; class=&quot;headerlink&quot; title=&quot;一. 创建maven项目并导入依赖&quot;&gt;&lt;/a&gt;一. 创建maven项目并导入依赖&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;PS: </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>用java比较两个二叉搜索树是否等价</title>
    <link href="https://www.fomal.cc/posts/c73d9d2.html"/>
    <id>https://www.fomal.cc/posts/c73d9d2.html</id>
    <published>2025-05-20T08:38:30.644Z</published>
    <updated>2023-12-06T08:02:09.231Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-定义树的的节点"><a href="#一-定义树的的节点" class="headerlink" title="一. 定义树的的节点"></a>一. 定义树的的节点</h3><p>​    不同二叉树的叶节点上可以保存相同的值序列。例如，以下两个二叉树都保存了序列 <code>1，1，2，3，5，8，13</code>。  </p><p><img src="../blog/coderyeah/source/_posts/img/tree.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wedoo.coderyeah.<span class="keyword">module</span>.iot.algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/6 15:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123; <span class="comment">// 比较两个二叉搜索树是否等价</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode Left; <span class="comment">// 左边的树结构</span></span><br><span class="line">    <span class="keyword">private</span> Integer Value; <span class="comment">// 树节点的数值</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode Right; <span class="comment">// 右边的树结构</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    TreeNode(<span class="type">int</span> x) &#123;</span><br><span class="line">        Value = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-具体实现"><a href="#二-具体实现" class="headerlink" title="二. 具体实现"></a>二. 具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wedoo.coderyeah.<span class="keyword">module</span>.iot.algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/6 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于保存每个节点值 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveNodeValues</span><span class="params">(TreeNode node, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归调用自己 左树</span></span><br><span class="line">        saveNodeValues(node.getLeft(), list);</span><br><span class="line">        <span class="comment">// 将值保存在集合中 最后所得是整棵树的各节点值</span></span><br><span class="line">        list.add(node.getValue());</span><br><span class="line">         <span class="comment">// 递归调用自己 右树</span></span><br><span class="line">        saveNodeValues(node.getRight(), list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于比较两棵树是否等价</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">compare</span><span class="params">(TreeNode tree1, TreeNode tree2)</span> &#123;</span><br><span class="line">        <span class="comment">// 准备集合保存节点值</span></span><br><span class="line">        List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        saveNodeValues(tree1, list1);</span><br><span class="line">        saveNodeValues(tree2, list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list1:&quot;</span> + list1);<span class="comment">//list1:[2, 1, 9]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list2:&quot;</span> + list2);<span class="comment">//list2:[2, 1, 3]</span></span><br><span class="line"><span class="comment">// 比较集合是否相等</span></span><br><span class="line">        <span class="keyword">return</span> list1.equals(list2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 构造第一颗二叉树</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">        treeNode.setLeft(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>));</span><br><span class="line">        treeNode.setRight(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// 构造第二颗二叉树</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">treeNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">        treeNode2.setLeft(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>));</span><br><span class="line">        treeNode2.setRight(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">9</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> compare(treeNode2, treeNode);</span><br><span class="line">        System.out.println(<span class="string">&quot;aBoolean: &quot;</span> + aBoolean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-GO实现"><a href="#三-GO实现" class="headerlink" title="三. GO实现"></a>三. GO实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;golang.org/x/tour/tree&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树查找比较 等价二叉查找树</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t1 := tree.New(<span class="number">1</span>)</span><br><span class="line">    t2 := tree.New(<span class="number">1</span>)</span><br><span class="line">    b := compare(t1, t2)</span><br><span class="line">    fmt.Println(<span class="string">&quot;t1==t2:&quot;</span>, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Walk</span><span class="params">(t *tree.Tree, ch <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> t == <span class="literal">nil</span> &#123; <span class="comment">// 空树 没有叶子节点</span></span><br><span class="line">       <span class="keyword">return</span> <span class="comment">// 递归函数结束条件</span></span><br><span class="line">    &#125;</span><br><span class="line">    Walk(t.Left, ch)</span><br><span class="line">    ch &lt;- t.Value</span><br><span class="line">    Walk(t.Right, ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">(t1, t2 *tree.Tree)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>) <span class="comment">// 管道 传递数据 无缓冲默认1，按顺序传递数据</span></span><br><span class="line">    c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> Walk(t1, c1)</span><br><span class="line">    <span class="keyword">go</span> Walk(t2, c2)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">       x, y := &lt;-c1, &lt;-c2</span><br><span class="line">       fmt.Println(x, y)</span><br><span class="line">       <span class="keyword">if</span> x != y &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-定义树的的节点&quot;&gt;&lt;a href=&quot;#一-定义树的的节点&quot; class=&quot;headerlink&quot; title=&quot;一. 定义树的的节点&quot;&gt;&lt;/a&gt;一. 定义树的的节点&lt;/h3&gt;&lt;p&gt;​    不同二叉树的叶节点上可以保存相同的值序列。例如，以下两个二叉树都保存了</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>一篇带你了解什么是事务及其原理</title>
    <link href="https://www.fomal.cc/posts/9447ebf6.html"/>
    <id>https://www.fomal.cc/posts/9447ebf6.html</id>
    <published>2025-05-20T08:38:30.641Z</published>
    <updated>2022-12-11T08:45:40.032Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-什么是事务"><a href="#一-什么是事务" class="headerlink" title="一.什么是事务"></a>一.什么是事务</h3><p><strong>事务:</strong> 指作为单个逻辑工作单元(Service方法)执行的一系列操作（数据库操作），要么全部执行，要么全部不执行。事务可以看做是一组任务，通常对应了一个业务方法,这些任务要么全部成功,要么全部失败。</p><p>本地事务有这么几个特征:</p><ul><li><p>一次事务只连接一个支持事务的数据库（一般来说都是关系型数据库）</p></li><li><p>事务的执行结果保证[ACID]</p></li><li><p>会用到数据库锁</p><p>事务具有原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）四个特性，简称 ACID，缺一不可。</p></li></ul><h3 id="二-原子性-Atomicity"><a href="#二-原子性-Atomicity" class="headerlink" title="二.原子性 Atomicity"></a>二.原子性 Atomicity</h3><p><strong>官方解释</strong></p><blockquote><p>Atomicity requires that each transaction be <strong>“all or nothing”</strong>: if one part of the transaction fails, then the entire transaction fails, and the database state is left unchanged. An atomic system must guarantee atomicity in each and every situation, including power failures, errors and crashes. To the outside world, a committed transaction appears (by its effects on the database) to be <strong>indivisible</strong> (“atomic”), and an aborted transaction does not happen.</p></blockquote><p><strong>关键词在于：</strong></p><ul><li><p>all or nothing，它的意思是数据库要么被修改了，要么保持原来的状态。所谓保持原来的状态不是我先insert再delete，而是压根就没有发生过任何操作。因为insert然后再delete实际上还是修改了数据库状态的，至少在数据库日志层面是这样。</p></li><li><p>indivisible，不可分割，<strong>一个事务就是一个最小的无法分割的独立单元，不允许部分成功部分失败。</strong> </p></li></ul><p>利用<strong>Innodb</strong>的undo log，<strong>undo log</strong>名为回滚日志，是实现原子性的关键，当事务回滚时能够撤销所有已经成功执行的sql语句，他需要记录你要回滚的相应日志信息。 例如:</p><ul><li><p>当你delete一条数据的时候，就需要记录这条数据的信息，回滚的时候，insert这条旧数据;</p></li><li><p>当你update一条数据的时候，就需要记录之前的旧值，回滚的时候，根据旧值执行update操作;</p></li><li><p>当年insert一条数据的时候，就需要这条记录的主键，回滚的时候，根据主键执行delete操作</p></li></ul><p>undo log记录了这些回滚需要的信息，当事务执行失败或调用了rollback，导致事务需要回滚，便可以利用undo log中的信息将数据回滚到修改之前的样子。</p><h3 id="三-Consistency-一致性"><a href="#三-Consistency-一致性" class="headerlink" title="三.Consistency 一致性"></a>三.Consistency 一致性</h3><p><strong>官方解释</strong></p><blockquote><p>The consistency property ensures that any transaction will bring the database from one valid state to another. <strong>Any data written to the database must be valid according to all defined rules, including constraints, cascades, triggers, and any combination thereof</strong>. This does not guarantee correctness of the transaction in all ways the application programmer might have wanted (that is the responsibility of application-level code), but merely that any programming errors cannot result in the violation of any defined rules.</p></blockquote><p>一致性要求任何写到数据库的数据都必须满足于预先定义的规则（比如余额不能小于0、外键约束等），简单来说就是在任何时间点都不能出现违反一致性要求的状态。几个并行执行的事务，其执行结果必须与按某一顺序 串行执行的结果相一致，<strong>Mysql通过排他锁来保证一致性</strong>.</p><h3 id="四-Durability-持久性"><a href="#四-Durability-持久性" class="headerlink" title="四.Durability 持久性"></a>四.Durability 持久性</h3><p>官方解释</p><blockquote><p>The durability property ensures that <strong>once a transaction has been committed, it will remain so, even in the event of power loss, crashes, or errors</strong>. In a relational database, for instance, once a group of SQL statements execute, the results need to be stored permanently (even if the database crashes immediately thereafter). To defend against power loss, transactions (or their effects) must be recorded in a non-volatile memory.</p></blockquote><p>持久性的关键在于一旦“完成提交”（committed），那么数据就不会丢失。<strong>undolog实现事务原子性，redolog实现事务的持久性</strong>,<strong>Redo Log记录的是新数据的备份。</strong>在事务提交前，只要将Redo Log持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，但是Redo Log已经持久化。系统可以根据Redo Log的内容，将所有数据恢复到最新的状态。</p><h4 id="Undo-Redo事务的简化过程"><a href="#Undo-Redo事务的简化过程" class="headerlink" title="Undo + Redo事务的简化过程"></a>Undo + Redo事务的简化过程</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.A.事务开始. </span><br><span class="line">2.B.记录<span class="attribute">A</span>=1到undo log. </span><br><span class="line">3.C.修改<span class="attribute">A</span>=3. </span><br><span class="line">4.D.记录<span class="attribute">A</span>=3到redo log. </span><br><span class="line">5.E.记录<span class="attribute">B</span>=2到undo log. </span><br><span class="line">6.F.修改<span class="attribute">B</span>=4. </span><br><span class="line">7.G.记录<span class="attribute">B</span>=4到redo log. </span><br><span class="line">8.H.将redo log写入磁盘。 </span><br><span class="line">I.事务提交</span><br></pre></td></tr></table></figure><p>通过<strong>undolog</strong>（记录旧数据用来反悔）保证事务的原子性，<strong>redolog</strong>(记录新数据用来保存到磁盘)保证持久性。</p><h4 id="采用redo-log的好处"><a href="#采用redo-log的好处" class="headerlink" title="采用redo log的好处"></a>采用redo log的好处</h4><p>redo log进行刷盘比对数据页刷盘效率高，具体表现如下</p><ul><li><p>redo log体积小，毕竟只记录了哪一页修改了啥，因此体积小，刷盘快。</p></li><li><p>redo log是一直往末尾进行追加，属于顺序IO。效率显然比随机IO来的快。</p></li></ul><h3 id="五-Isolation-隔离性"><a href="#五-Isolation-隔离性" class="headerlink" title="五.Isolation 隔离性"></a>五.Isolation 隔离性</h3><p>隔离性要求如果两个事务修改同一个数据，则必须按顺序执行，并且前一个事务如果未完成，那么未完成的中间状态对另一个事务不可见。</p><h3 id="六-事务隔离级别"><a href="#六-事务隔离级别" class="headerlink" title="六.事务隔离级别"></a>六.事务隔离级别</h3><ol><li><h4 id="线程并发和事务隔离"><a href="#线程并发和事务隔离" class="headerlink" title="线程并发和事务隔离"></a>线程并发和事务隔离</h4><p>SQL 标准定义了四种隔离级别，MySQL 全都支持。这四种隔离级别分别是：</p><ul><li><p>读未提交（READ UNCOMMITTED）</p></li><li><p>读提交 （READ COMMITTED）</p></li><li><p>可重复读 （REPEATABLE READ）</p></li><li><p>串行化 （SERIALIZABLE）</p><p><strong>以上几个概念是事务隔离级别要实际解决的问题：脏读，不可重复读，幻读</strong></p></li></ul></li><li><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>脏读指的是读到了其他事务<strong>未提交的数据</strong>，未提交意味着这些数据可能会回滚，也就是可能最终不会存到数据库中，也就是不存在的数据。读到了不一定最终存在的数据，这就是脏读。<strong>读未提交会造成脏读;读提交可以解决脏读问题。</strong></p></li><li><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p>可重复读指的是在一个事务内，最开始读到的数据和事务结束前的任意时刻读到的同一批数据都是一致的，那不可重复读就是一个事务多次读取到的数据是不一致的，<strong>通常针对数据更新（UPDATE）操作</strong>。即：<strong>同一个事务中多次使用相同条件读取到的数据是不一样的。</strong></p><p><code>set global transaction isolation level repeatable read;</code><strong>可重复读</strong>，这也是<code>Mysql</code>默认的事务隔离策略，但是该事务隔离级别没办法解决幻读问题。</p></li><li><h4 id="幻读"><a href="#幻读" class="headerlink" title=".幻读"></a>.幻读</h4><p>事务A 按照一定条件进行数据读取， 期间事务B 插入了相同搜索条件的新数据，事务A再次按照原先条件进行读取时，发现了事务B 新插入的数据 称为幻读 , 即：<strong>事物A两次读取相同条件的数据读到的条数不一样。</strong></p><p>MySQL 的可重复读隔离级别其实解决了幻读问题，它使用到了“间隙锁”。</p></li><li><h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>串行化是4种事务隔离级别中隔离效果最好的，解决了脏读、可重复读、幻读的问题，但是效果最差，它将事务的执行变为顺序执行，与其他三个隔离级别相比，它就相当于单线程，后一个事务的执行必须等待前一个事务结束。</p><p>事务隔离其实就是为了解决上面提到的脏读、不可重复读、幻读这几个问题，下面展示了 4 种隔离级别对这三个问题的解决程度</p><p>| <strong>隔离级别</strong>               | <strong>脏读</strong> | <strong>不可重复读</strong> | <strong>幻读</strong> |<br>| ————————————— | ———— | ——————— | ———— |<br>| 读未提交(Read uncommitted) | 可能     | 可能           | 可能     |<br>| 读提交(Read committed)     | 不可能   | 可能           | 可能     |<br>| 可重复读(Repeatable reads) | 不可能   | 不可能         | 可能     |<br>| 串行化(Serializable)       | 不可能   | 不可能         | 不可能   |</p></li></ol><p>MySQL 事务隔离其实是依靠锁来实现的，加锁自然会带来性能的损失。而读未提交隔离级别是不加锁的，所以它的性能是最好的，没有加锁、解锁带来的性能开销。但有利就有弊，这基本上就相当于裸奔啊，所以它连脏读的问题都没办法解决。</p><h3 id="七-事务隔离级别原理-MVCC"><a href="#七-事务隔离级别原理-MVCC" class="headerlink" title="七.事务隔离级别原理-MVCC"></a>七.事务隔离级别原理-MVCC</h3><ol><li><h4 id="利用的是锁和MVCC机制"><a href="#利用的是锁和MVCC机制" class="headerlink" title="利用的是锁和MVCC机制"></a>利用的是锁和MVCC机制</h4><p><strong>MVCC</strong>的全称是<strong>“多版本并发控制”</strong>(Multi Version Concurrency Control),。这项技术使得InnoDB的事务隔离级别下执行一致性读操作有了保证，换言之，就是为了查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值，一个行记录数据有多个版本对快照数据，这些<strong>快照数据在undo log中</strong>。 如果一个事务读取的行正在做DELELE或者UPDATE操作，读取操作不会等行上的锁释放，而是<strong>读取该行的快照版本</strong>。</p><p>这是一个可以用来<strong>增强并发性</strong>的强大的技术，因为这样的一来的话查询就不用等待另一个事务释放锁。这项技术在数据库领域并不是普遍使用的。一些其它的数据库产品，以及<code>mysql</code>其它的存储引擎并不支持它。</p><p>可重复读是在事务开始的时候生成一个当前事务全局性的快照，而读提交则是每次执行语句的时候都重新生成一次快照。</p></li></ol><h3 id="八-丢失更新问题"><a href="#八-丢失更新问题" class="headerlink" title="八.丢失更新问题"></a>八.丢失更新问题</h3><p>脏读，幻读，不可重复读，都是发生在一个事务在写，一个事务在读的时候出现的问题，而丢失更新发生在两个事务都在做写操作的时候出现的，丢失更新分为：<strong>回滚丢失更新(一类)和覆盖丢失更新(二类)</strong></p><ul><li>第一类丢失更新(回滚丢失，Lost update) （通过设置隔离级别可以防止 Repeatable Read）</li><li>第二类丢失更新(覆盖丢失/两次更新问题，Second lost update) A事务覆盖B事务已经提交的数据，造成B事务所做操作丢失</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-什么是事务&quot;&gt;&lt;a href=&quot;#一-什么是事务&quot; class=&quot;headerlink&quot; title=&quot;一.什么是事务&quot;&gt;&lt;/a&gt;一.什么是事务&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;事务:&lt;/strong&gt; 指作为单个逻辑工作单元(Service方法)执行的一系列操</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>图形验证码的使用详情</title>
    <link href="https://www.fomal.cc/posts/a48e7149.html"/>
    <id>https://www.fomal.cc/posts/a48e7149.html</id>
    <published>2025-05-20T08:38:30.637Z</published>
    <updated>2022-09-29T14:17:46.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-关于js的启动服务"><a href="#一-关于js的启动服务" class="headerlink" title="一. 关于js的启动服务"></a>一. 关于js的启动服务</h3><p>传统导入js开发的模式没法直接服务器方式调试，需要安装live-server服务器，这个服务器就是node一个模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">安装：npm install -g live-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定端口80</span> </span><br><span class="line">启动项目：live-server --port=80 </span><br><span class="line">注意：live-server服务器自带热刷新</span><br></pre></td></tr></table></figure><h3 id="二-使用图形验证码"><a href="#二-使用图形验证码" class="headerlink" title="二. 使用图形验证码"></a>二. 使用图形验证码</h3><h4 id="1-前端代码"><a href="#1-前端代码" class="headerlink" title="1. 前端代码"></a>1. 前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user-phone&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;imageCode&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;am-icon-check am-icon-sm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 180px;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;phoneUserForm.imageCode&quot;</span> <span class="attr">id</span>=<span class="string">&quot;imageCode&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入图片验证码&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;captcha-image-temp&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getImageCode&quot;</span><span class="attr">:src</span>=<span class="string">&quot;base64ImageCode&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;captcha-image-temp&quot;</span>  <span class="attr">alt</span>=<span class="string">&quot;点击换图&quot;</span> <span class="attr">title</span>=<span class="string">&quot;点击换图&quot;</span> <span class="attr">style</span>=<span class="string">&quot;vertical-align: middle; cursor: pointer;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-流程分析"><a href="#2-流程分析" class="headerlink" title="2. 流程分析"></a>2. 流程分析</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 前端页面一加载或点击重新获取使用axios发送异步请求获取验证码</span><br><span class="line">2. 后端生成图形验证码，并将验证码保存在redis</span><br><span class="line">3. 后端使用Base64将图片编码成字符串，响应给前端</span><br><span class="line">4. 前端使用vue指令base64编码之后的字符串放在对应位置，最终显示图片</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;这里&quot;</span>/&gt;</span></span><br><span class="line">5. 在点击获取手机验证码的时候验证图形验证码是否正确</span><br><span class="line">防止非法人员通过脚本恶意点击获取手机验证码</span><br><span class="line"></span><br><span class="line">后端redis怎么保存图形验证码？</span><br><span class="line">1. 设置过期时间 - 简单</span><br><span class="line">2. key：UUID - 需要在前后端之间进行传输。浏览器的localStorage保存</span><br><span class="line">   value：验证码</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 请求图片验证码之前判断localStorage是否有KEY，如果没就创建，然后保存到localStorage，如果有自己直接作为参数发送Ajax请求获取图片验证码</span><br><span class="line"><span class="bullet">2.</span> 前端通过ajax发送一个图片验证码请求，携带者KEY</span><br><span class="line"><span class="bullet">3.</span> 后端收到请求，生成验证码的值</span><br><span class="line"><span class="bullet">4.</span> 把验证码的存储到Redis，以前段传入的key作为Redis的key</span><br><span class="line"><span class="bullet">5.</span> 把验证码合并到一个图片中</span><br><span class="line"><span class="bullet">6.</span> 把图片基于Base64编码层字符串，响应给前端</span><br><span class="line"><span class="bullet">7.</span> 前端拿到base64字符串，进行图片的展示，用户输入图片验证码</span><br><span class="line"></span><br><span class="line">校验过程：前台提交注册请求 ，验证图片验证码(key也要携带)，后端把前端传入的图片验证码的值和Redis中的图片验证码的值做比较 </span><br></pre></td></tr></table></figure><h4 id="3-前端存储数据"><a href="#3-前端存储数据" class="headerlink" title="3.  前端存储数据"></a>3.  前端存储数据</h4><p><strong><code>sessionStorage</code></strong>：存放的数据只在当前窗口有效。基本不用。不可以跨窗口；<br><strong><code>localStorage</code></strong>：持久化存储。只要不删除，在当前浏览器永远有效。可以跨窗口，不能跨浏览器。但是不同的域名共享数据的，即在后台系统保存在<code>localStorage</code>的数据在前台系统是获取不到的。</p><h4 id="4-前端功能代码"><a href="#4-前端功能代码" class="headerlink" title="4. 前端功能代码"></a>4. 前端功能代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            base64ImageCode: &#x27;&#x27;, //获取图形验证码响应一个base64位的字符串</span><br><span class="line">            base64ImageCodePrefix: &#x27;data:image/jpeg;base64,&#x27;,</span><br><span class="line">            phoneUserForm: &#123;</span><br><span class="line">                imageCode: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            //生成随机图形验证码的key</span><br><span class="line">            createUUID() &#123;</span><br><span class="line">                let s = [];</span><br><span class="line">                let hexDigits = &quot;0123456789abcdefghi&quot;;</span><br><span class="line">                for (let i = 0; i &lt; 36; i++) &#123;</span><br><span class="line">                    s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);</span><br><span class="line">                &#125;</span><br><span class="line">                s[14] = &quot;4&quot;; // bits 12-15 of the time_hi_and_version field to 0010</span><br><span class="line">                s[19] = hexDigits.substr((s[19] &amp; 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01</span><br><span class="line">                s[8] = s[13] = s[18] = s[23] = &quot;-&quot;;</span><br><span class="line">                let uuid = s.join(&quot;&quot;);</span><br><span class="line">                return uuid;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 获取图形验证码</span><br><span class="line">            getImageCode() &#123;</span><br><span class="line">                //获取localhost的键值 verifyCodeKey</span><br><span class="line">                let key = localStorage.getItem(&#x27;verifyCodeKey&#x27;)</span><br><span class="line">                if (!key) &#123;// 如果key不存在就重新生成存储到本地</span><br><span class="line">                    key = this.createUUID();</span><br><span class="line">                    localStorage.setItem(&#x27;verifyCodeKey&#x27;, key)</span><br><span class="line">                &#125;</span><br><span class="line">                //发送异步请求获取base64编码</span><br><span class="line">                this.$http.get(&#x27;/verifyCode/image/&#x27; + key).then((res) =&gt; &#123;</span><br><span class="line">                    // 在回调函数获取响应的数据与拼接前缀 绑定到src</span><br><span class="line">                    this.base64ImageCode = this.base64ImageCodePrefix + res.data.msg</span><br><span class="line">                &#125;).catch(() =&gt; &#123;</span><br><span class="line">                    alert(&#x27;服务器繁忙，请稍后再试！！！&#x27;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            this.getImageCode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="5-后端业务实现"><a href="#5-后端业务实现" class="headerlink" title="5. 后端业务实现"></a>5. 后端业务实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyCodeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">VerifyCodeService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getImgCode</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取随机验证码长度为4</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> VerifyCodeUtils.generateVerifyCode(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 将验证码的值存入redis中 有效期五分钟</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;cache:code:image:&quot;</span> + key, code, <span class="number">5L</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">// 把验证码的值合并到图片，设置宽度和高度 使用Base64编码。并返回base64编码的字符串</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(VerifyCodeUtils.verifyCode(<span class="number">115</span>, <span class="number">40</span>, code));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-生成图形验证码工具类"><a href="#6-生成图形验证码工具类" class="headerlink" title="6. 生成图形验证码工具类"></a>6. 生成图形验证码工具类</h4><p>①<code>VerifyCodeUtils</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.coderyeah.basic.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.AffineTransform;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyCodeUtils</span> &#123;</span><br><span class="line">    <span class="comment">//使用到Algerian字体，系统里没有的话需要安装字体，字体只显示大写，去掉了1,0,i,o几个容易混淆的字符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VERIFY_CODES</span> <span class="operator">=</span> <span class="string">&quot;23456789ABCDEFGHJKLMNPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用系统默认字符源生成验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize 验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateVerifyCode</span><span class="params">(<span class="type">int</span> verifySize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> generateVerifyCode(verifySize, VERIFY_CODES);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定源生成验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize 验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sources    验证码字符源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateVerifyCode</span><span class="params">(<span class="type">int</span> verifySize, String sources)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sources == <span class="literal">null</span> || sources.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            sources = VERIFY_CODES;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">codesLen</span> <span class="operator">=</span> sources.length();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(System.currentTimeMillis());</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">verifyCode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(verifySize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; verifySize; i++) &#123;</span><br><span class="line">            verifyCode.append(sources.charAt(rand.nextInt(codesLen - <span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> verifyCode.toString();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出指定验证码图片流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outputImage</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, OutputStream os, String code)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">verifySize</span> <span class="operator">=</span> code.length();</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(w, h, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">g2</span> <span class="operator">=</span> image.createGraphics();</span><br><span class="line">        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);</span><br><span class="line">        Color[] colors = <span class="keyword">new</span> <span class="title class_">Color</span>[<span class="number">5</span>];</span><br><span class="line">        Color[] colorSpaces = <span class="keyword">new</span> <span class="title class_">Color</span>[]&#123;Color.WHITE, Color.CYAN,</span><br><span class="line">                Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,</span><br><span class="line">                Color.PINK, Color.YELLOW&#125;;</span><br><span class="line">        <span class="type">float</span>[] fractions = <span class="keyword">new</span> <span class="title class_">float</span>[colors.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; colors.length; i++) &#123;</span><br><span class="line">            colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];</span><br><span class="line">            fractions[i] = rand.nextFloat();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(fractions);</span><br><span class="line"> </span><br><span class="line">        g2.setColor(Color.GRAY);<span class="comment">// 设置边框色</span></span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line"> </span><br><span class="line">        <span class="type">Color</span> <span class="variable">c</span> <span class="operator">=</span> getRandColor(<span class="number">200</span>, <span class="number">250</span>);</span><br><span class="line">        g2.setColor(c);<span class="comment">// 设置背景色</span></span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">2</span>, w, h - <span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//绘制干扰线</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        g2.setColor(getRandColor(<span class="number">160</span>, <span class="number">200</span>));<span class="comment">// 设置线条的颜色</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(w - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> random.nextInt(h - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">xl</span> <span class="operator">=</span> random.nextInt(<span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">yl</span> <span class="operator">=</span> random.nextInt(<span class="number">12</span>) + <span class="number">1</span>;</span><br><span class="line">            g2.drawLine(x, y, x + xl + <span class="number">40</span>, y + yl + <span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 添加噪点</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">yawpRate</span> <span class="operator">=</span> <span class="number">0.05f</span>;<span class="comment">// 噪声率</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> (<span class="type">int</span>) (yawpRate * w * h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; area; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(w);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> random.nextInt(h);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rgb</span> <span class="operator">=</span> getRandomIntColor();</span><br><span class="line">            image.setRGB(x, y, rgb);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        shear(g2, w, h, c);<span class="comment">// 使图片扭曲</span></span><br><span class="line"> </span><br><span class="line">        g2.setColor(getRandColor(<span class="number">100</span>, <span class="number">160</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">fontSize</span> <span class="operator">=</span> h - <span class="number">4</span>;</span><br><span class="line">        <span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;Algerian&quot;</span>, Font.ITALIC, fontSize);</span><br><span class="line">        g2.setFont(font);</span><br><span class="line">        <span class="type">char</span>[] chars = code.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; verifySize; i++) &#123;</span><br><span class="line">            <span class="type">AffineTransform</span> <span class="variable">affine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AffineTransform</span>();</span><br><span class="line">            affine.setToRotation(Math.PI / <span class="number">4</span> * rand.nextDouble() * (rand.nextBoolean() ? <span class="number">1</span> : -<span class="number">1</span>), (w / verifySize) * i + fontSize / <span class="number">2</span>, h / <span class="number">2</span>);</span><br><span class="line">            g2.setTransform(affine);</span><br><span class="line">            g2.drawChars(chars, i, <span class="number">1</span>, ((w - <span class="number">10</span>) / verifySize) * i + <span class="number">5</span>, h / <span class="number">2</span> + fontSize / <span class="number">2</span> - <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        g2.dispose();</span><br><span class="line">        ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, os);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Color <span class="title function_">getRandColor</span><span class="params">(<span class="type">int</span> fc, <span class="type">int</span> bc)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fc &gt; <span class="number">255</span>)</span><br><span class="line">            fc = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (bc &gt; <span class="number">255</span>)</span><br><span class="line">            bc = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="type">int</span> <span class="variable">g</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Color</span>(r, g, b);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRandomIntColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] rgb = getRandomRgb();</span><br><span class="line">        <span class="type">int</span> <span class="variable">color</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c : rgb) &#123;</span><br><span class="line">            color = color &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            color = color | c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] getRandomRgb() &#123;</span><br><span class="line">        <span class="type">int</span>[] rgb = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            rgb[i] = random.nextInt(<span class="number">255</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rgb;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shear</span><span class="params">(Graphics g, <span class="type">int</span> w1, <span class="type">int</span> h1, Color color)</span> &#123;</span><br><span class="line">        shearX(g, w1, h1, color);</span><br><span class="line">        shearY(g, w1, h1, color);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shearX</span><span class="params">(Graphics g, <span class="type">int</span> w1, <span class="type">int</span> h1, Color color)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> <span class="variable">period</span> <span class="operator">=</span> random.nextInt(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">borderGap</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">frames</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">phase</span> <span class="operator">=</span> random.nextInt(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; h1; i++) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="type">double</span>) i / (<span class="type">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862D</span> * (<span class="type">double</span>) phase)</span><br><span class="line">                    / (<span class="type">double</span>) frames);</span><br><span class="line">            g.copyArea(<span class="number">0</span>, i, w1, <span class="number">1</span>, (<span class="type">int</span>) d, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine((<span class="type">int</span>) d, i, <span class="number">0</span>, i);</span><br><span class="line">                g.drawLine((<span class="type">int</span>) d + w1, i, w1, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shearY</span><span class="params">(Graphics g, <span class="type">int</span> w1, <span class="type">int</span> h1, Color color)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> <span class="variable">period</span> <span class="operator">=</span> random.nextInt(<span class="number">40</span>) + <span class="number">10</span>; <span class="comment">// 50;</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">borderGap</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">frames</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">phase</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; w1; i++) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="type">double</span>) i / (<span class="type">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862D</span> * (<span class="type">double</span>) phase)</span><br><span class="line">                    / (<span class="type">double</span>) frames);</span><br><span class="line">            g.copyArea(i, <span class="number">0</span>, <span class="number">1</span>, h1, <span class="number">0</span>, (<span class="type">int</span>) d);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine(i, (<span class="type">int</span>) d, i, <span class="number">0</span>);</span><br><span class="line">                g.drawLine(i, (<span class="type">int</span>) d + h1, i, h1);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机验证码及其加密图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">verifyCode</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, String code)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//base64编码器</span></span><br><span class="line">            <span class="type">BASE64Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>();</span><br><span class="line">            <span class="comment">//准备输出流</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="comment">//使用code生成w宽 h高的图片，并将结果图片存入data流中</span></span><br><span class="line">            outputImage(w, h, data, code);</span><br><span class="line">            <span class="comment">//使用base64编码成String</span></span><br><span class="line">            <span class="keyword">return</span> encoder.encode(data.toByteArray());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;生成验证码失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        System.out.println(verifyCode(<span class="number">100</span>, <span class="number">30</span>, <span class="string">&quot;1234&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②<code>StrUtils</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把逗号分隔的字符串转换字符串数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] splitStr2StrArr(String str,String split) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; !str.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> str.split(split);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把逗号分隔字符串转换List的Long</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Long&gt; <span class="title function_">splitStr2LongArr</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        String[] strings = splitStr2StrArr(str,<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (strings == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;Long&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">            result.add(Long.parseLong(string));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把逗号分隔字符串转换List的Long</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Long&gt; <span class="title function_">splitStr2LongArr</span><span class="params">(String str,String split)</span> &#123;</span><br><span class="line">        String[] strings = splitStr2StrArr(str,split);</span><br><span class="line">        <span class="keyword">if</span> (strings == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Long&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">            result.add(Long.parseLong(string));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getRandomString</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;0123456789&quot;</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> random.nextInt(<span class="number">10</span>);</span><br><span class="line">            sb.append(str.charAt(number));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getComplexRandomString</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> random.nextInt(<span class="number">62</span>);</span><br><span class="line">            sb.append(str.charAt(number));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">convertPropertiesToHtml</span><span class="params">(String properties)</span>&#123;</span><br><span class="line">        <span class="comment">//1:容量:6:32GB_4:样式:12:塑料壳</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        String[] propArr = properties.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String props : propArr) &#123;</span><br><span class="line">            String[] valueArr = props.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            sBuilder.append(valueArr[<span class="number">1</span>]).append(<span class="string">&quot;:&quot;</span>).append(valueArr[<span class="number">3</span>]).append(<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三-数据库三范式"><a href="#三-数据库三范式" class="headerlink" title="三. 数据库三范式"></a>三. 数据库三范式</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span><span class="meta">FN</span>:</span><br><span class="line"><span class="number">1</span>. 第一范式：列唯一</span><br><span class="line">列不可再分，保持原子性，关系型数据库默认支持</span><br><span class="line"><span class="number">2</span>. 第二范式：行唯一</span><br><span class="line">每一行的数据要唯一区分。怎么区分呢？需要加一列作为惟一标识。这列被称为主键</span><br><span class="line">并且行中每一列数据都与主键相关</span><br><span class="line"><span class="number">3</span>. 第三范式：如果一张表的数据能够通过其他表推导出来，不应该单独设计，通过外键的方式关联查询出来</span><br><span class="line">减少数据冗余</span><br><span class="line"></span><br><span class="line">总结：三大范式只是一般设计数据库的基本理念，可以建立冗余较小、结构合理的数据库。如果有特殊情况，当然要特殊对待，数据库设计最重要的是看需求跟性能，需求&gt;性能&gt;表结构。所以不能一味的去追求范式建立数据库表</span><br><span class="line"></span><br><span class="line">反<span class="number">3</span><span class="meta">FN</span>：</span><br><span class="line">原则上是不能违反三范式的，但是有的时候我们为了增强查询效率【不用关联查询，直接单表查询】，会设计一些冗余字段，变多表查询为单表查询</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-关于js的启动服务&quot;&gt;&lt;a href=&quot;#一-关于js的启动服务&quot; class=&quot;headerlink&quot; title=&quot;一. 关于js的启动服务&quot;&gt;&lt;/a&gt;一. 关于js的启动服务&lt;/h3&gt;&lt;p&gt;传统导入js开发的模式没法直接服务器方式调试，需要安装live-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用vue的富文本编辑器操作</title>
    <link href="https://www.fomal.cc/posts/e714b79f.html"/>
    <id>https://www.fomal.cc/posts/e714b79f.html</id>
    <published>2025-05-20T08:38:30.633Z</published>
    <updated>2022-09-26T11:41:42.969Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-vue-quill-edit"><a href="#一-vue-quill-edit" class="headerlink" title="一. vue-quill-edit"></a>一. vue-quill-edit</h3><h4 id="1-安装vue的富文本"><a href="#1-安装vue的富文本" class="headerlink" title="1. 安装vue的富文本"></a>1. 安装vue的富文本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 当前的vue项目路径</span><br><span class="line">npm install quill --save</span><br><span class="line">npm install vue-quill-editor --save</span><br></pre></td></tr></table></figure><h4 id="2-在页面中引入vue的富文本"><a href="#2-在页面中引入vue的富文本" class="headerlink" title="2. 在页面中引入vue的富文本"></a>2. 在页面中引入vue的富文本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue的ueditor的资源</span></span><br><span class="line"><span class="keyword">import</span> &#123;quillEditor&#125; <span class="keyword">from</span> <span class="string">&quot;vue-quill-editor&quot;</span>; <span class="comment">//调用编辑器</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.core.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.snow.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.bubble.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> quillConfig <span class="keyword">from</span> <span class="string">&#x27;../../common/js/quill-config&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="3-添加组件"><a href="#3-添加组件" class="headerlink" title="3. 添加组件"></a>3. 添加组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        quillEditor</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//......</span></span><br></pre></td></tr></table></figure><h4 id="4-使用组件"><a href="#4-使用组件" class="headerlink" title="4. 使用组件"></a>4. 使用组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;简介&quot; prop=&quot;intro&quot;&gt;</span><br><span class="line">  &lt;!-- v-if=&quot;editForm.petDetail&quot; 修改v-model绑定对象报错问题，v-if对需要显示的数据判断下 --&gt;</span><br><span class="line">  &lt;quill-editor v-model=&quot;editForm.petDetail.intro&quot; v-if=&quot;editForm.petDetail&quot;</span><br><span class="line">                :options=&quot;quillOption&quot;&gt;&lt;/quill-editor&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line">&lt;el-form-item label=&quot;领养须知&quot; prop=&quot;orderNotice&quot;&gt;</span><br><span class="line">  &lt;quill-editor v-model=&quot;editForm.petDetail.adoptNotice&quot; v-if=&quot;editForm.petDetail&quot;</span><br><span class="line">                :options=&quot;quillOption&quot;&gt;&lt;/quill-editor&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure><h4 id="5-整个表单"><a href="#5-整个表单" class="headerlink" title="5. 整个表单"></a>5. 整个表单</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--编辑界面--&gt;</span><br><span class="line">&lt;el-dialog :title=&quot;title&quot; :visible.sync=&quot;editFormVisible&quot; :close-on-click-modal=&quot;false&quot; width=&quot;60%&quot; @close=&quot;cancel&quot;&gt;</span><br><span class="line">  &lt;el-form :model=&quot;editForm&quot; label-width=&quot;80px&quot; :rules=&quot;editFormRules&quot; ref=&quot;editForm&quot;&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;宠物名称&quot; prop=&quot;name&quot;&gt;</span><br><span class="line">      &lt;el-input prefix-icon=&quot;el-icon-tickets&quot; v-model=&quot;editForm.name&quot; auto-complete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;成本价&quot; prop=&quot;costprice&quot;&gt;</span><br><span class="line">      &lt;el-input-number :min=&quot;0&quot; oninput=&quot;if(value&lt;0)value=0&quot; v-model.trim=&quot;editForm.costprice&quot;</span><br><span class="line">                       auto-complete=&quot;off&quot;&gt;&lt;/el-input-number&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;销售价&quot; prop=&quot;saleprice&quot;&gt;</span><br><span class="line">      &lt;el-input-number :min=&quot;0&quot; oninput=&quot;if(value&lt;0)value=0&quot; v-model.trim=&quot;editForm.saleprice&quot;</span><br><span class="line">                       auto-complete=&quot;off&quot;&gt;&lt;/el-input-number&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;宠物类型&quot; prop=&quot;type&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">        &lt;el-cascader</span><br><span class="line">            v-model=&quot;editForm.typeId&quot;</span><br><span class="line">            :options=&quot;petTypeTree&quot;</span><br><span class="line">            :props=&quot;&#123; checkStrictly: true,value:&#x27;id&#x27;,label:&#x27;name&#x27; &#125;&quot;</span><br><span class="line">            clearable&gt;</span><br><span class="line">        &lt;/el-cascader&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;宠物图片&quot; prop=&quot;index&quot;&gt;</span><br><span class="line">      &lt;el-upload class=&quot;upload-demo&quot;</span><br><span class="line">                 action=&quot;http://localhost:8080/fastDfs/&quot;</span><br><span class="line">                 :on-preview=&quot;handlePreview&quot;</span><br><span class="line">                 :on-remove=&quot;handleRemove&quot;</span><br><span class="line">                 :on-success=&quot;handleSuccess&quot;</span><br><span class="line">                 :file-list=&quot;fileList&quot;</span><br><span class="line">                 list-type=&quot;picture&quot;&gt;</span><br><span class="line">        &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;点击上传&lt;/el-button&gt;</span><br><span class="line">        &lt;div slot=&quot;tip&quot; class=&quot;el-upload__tip&quot;&gt;只能上传jpg/png文件，且不超过500kb&lt;/div&gt;</span><br><span class="line">      &lt;/el-upload&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;状态&quot;&gt;</span><br><span class="line">      &lt;el-radio-group v-model=&quot;editForm.state&quot;&gt;</span><br><span class="line">        &lt;el-radio class=&quot;radio&quot; :label=&quot;1&quot;&gt;开启&lt;/el-radio&gt;</span><br><span class="line">        &lt;el-radio class=&quot;radio&quot; :label=&quot;0&quot;&gt;关闭&lt;/el-radio&gt;</span><br><span class="line">      &lt;/el-radio-group&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;上架时间&quot; prop=&quot;onsaletime&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">        &lt;el-date-picker</span><br><span class="line">            value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">            v-model=&quot;editForm.onsaletime&quot;</span><br><span class="line">            type=&quot;datetime&quot;</span><br><span class="line">            placeholder=&quot;选择日期时间&quot;</span><br><span class="line">            align=&quot;right&quot;</span><br><span class="line">            :picker-options=&quot;pickerOptions&quot;&gt;</span><br><span class="line">        &lt;/el-date-picker&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;下架时间&quot; prop=&quot;offsaletime&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">        &lt;el-date-picker</span><br><span class="line">            value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">            v-model=&quot;editForm.offsaletime&quot;</span><br><span class="line">            type=&quot;datetime&quot;</span><br><span class="line">            placeholder=&quot;选择日期时间&quot;</span><br><span class="line">            align=&quot;right&quot;</span><br><span class="line">            :picker-options=&quot;pickerOptions&quot;&gt;</span><br><span class="line">        &lt;/el-date-picker&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;所属店铺&quot; prop=&quot;shop&quot;&gt;</span><br><span class="line">      &lt;el-select v-model=&quot;editForm.shopId&quot; placeholder=&quot;请选择店铺&quot; clearable&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;item in shops&quot;</span><br><span class="line">            :key=&quot;item.id&quot;</span><br><span class="line">            :label=&quot;item.name&quot;</span><br><span class="line">            :value=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;领养人&quot;&gt;</span><br><span class="line">      &lt;el-select v-model=&quot;editForm.userId&quot; placeholder=&quot;请选择领养人&quot; clearable&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;item in users&quot;</span><br><span class="line">            :key=&quot;item.id&quot;</span><br><span class="line">            :label=&quot;item.username&quot;</span><br><span class="line">            :value=&quot;item.id&quot;&gt;</span><br><span class="line">          &lt;span style=&quot;float: left&quot;&gt;&#123;&#123; item.username &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;span style=&quot;float: right; color: #8492a6; font-size: 13px&quot;&gt;&#123;&#123; item.phone &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;简介&quot; prop=&quot;intro&quot;&gt;</span><br><span class="line">      &lt;!-- v-if=&quot;saveForm.petDetail&quot; 修改v-model绑定对象报错问题，v-if对需要显示的数据判断下 --&gt;</span><br><span class="line">      &lt;quill-editor v-model=&quot;editForm.petDetail.intro&quot; v-if=&quot;editForm.petDetail&quot;</span><br><span class="line">                    :options=&quot;quillOption&quot;&gt;&lt;/quill-editor&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;领养须知&quot; prop=&quot;orderNotice&quot;&gt;</span><br><span class="line">      &lt;quill-editor v-model=&quot;editForm.petDetail.adoptNotice&quot; v-if=&quot;editForm.petDetail&quot;</span><br><span class="line">                    :options=&quot;quillOption&quot;&gt;&lt;/quill-editor&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">  &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">    &lt;el-button @click.native=&quot;cancel&quot;&gt;取消&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click.native=&quot;editSubmit&quot; :loading=&quot;editLoading&quot;&gt;提交&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure><h3 id="二-富文本整合Fastdfs"><a href="#二-富文本整合Fastdfs" class="headerlink" title="二. 富文本整合Fastdfs"></a>二. 富文本整合Fastdfs</h3><p>图片上传到服务器保存</p><p>编辑富文本内容的时候，原生的富文本，会直接将图片以base64编码的方式存储在页面上。当点击保存时，会直接将base64的数据直接存储到数据库，数据库的字段直接存储不了，内容太大！所以需要将富文本编辑框集成FastDfs，将图片上传到FastDfs。只存储图片的FastDfs访问路径即可。</p><h4 id="1-quill-config-js"><a href="#1-quill-config-js" class="headerlink" title="1. quill-config.js"></a>1. quill-config.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*富文本编辑图片上传配置*/</span></span><br><span class="line"><span class="keyword">const</span> uploadConfig = &#123;</span><br><span class="line">    <span class="attr">fastDfsUrl</span>:<span class="string">&#x27;http://123.207.27.208&#x27;</span>,      <span class="comment">// 图片访问地址</span></span><br><span class="line">    <span class="attr">action</span>:  <span class="string">&#x27;http://localhost:8080/fastDfs&#x27;</span>, <span class="comment">// 必填参数 图片上传地址</span></span><br><span class="line">    <span class="attr">methods</span>: <span class="string">&#x27;POST&#x27;</span>,  <span class="comment">// 必填参数 图片上传方式</span></span><br><span class="line">    <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 可选参数 如果需要token验证，假设你的token有存放在sessionStorage</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;file&#x27;</span>,  <span class="comment">// 必填参数 文件的参数名</span></span><br><span class="line">    <span class="attr">size</span>: <span class="number">500</span>,  <span class="comment">// 可选参数   图片大小，单位为Kb, 1M = 1024Kb</span></span><br><span class="line">    <span class="attr">accept</span>: <span class="string">&#x27;image/png, image/gif, image/jpeg, image/bmp, image/x-icon&#x27;</span>  <span class="comment">// 可选 可上传的图片格式</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toolbar工具栏的工具选项（默认展示全部）</span></span><br><span class="line"><span class="keyword">const</span> toolOptions = [</span><br><span class="line">    [<span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27;italic&#x27;</span>, <span class="string">&#x27;underline&#x27;</span>, <span class="string">&#x27;strike&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;blockquote&#x27;</span>, <span class="string">&#x27;code-block&#x27;</span>],</span><br><span class="line">    [&#123;<span class="string">&#x27;header&#x27;</span>: <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;header&#x27;</span>: <span class="number">2</span>&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;list&#x27;</span>: <span class="string">&#x27;ordered&#x27;</span>&#125;, &#123;<span class="string">&#x27;list&#x27;</span>: <span class="string">&#x27;bullet&#x27;</span>&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;script&#x27;</span>: <span class="string">&#x27;sub&#x27;</span>&#125;, &#123;<span class="string">&#x27;script&#x27;</span>: <span class="string">&#x27;super&#x27;</span>&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;indent&#x27;</span>: <span class="string">&#x27;-1&#x27;</span>&#125;, &#123;<span class="string">&#x27;indent&#x27;</span>: <span class="string">&#x27;+1&#x27;</span>&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;direction&#x27;</span>: <span class="string">&#x27;rtl&#x27;</span>&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;size&#x27;</span>: [<span class="string">&#x27;small&#x27;</span>, <span class="literal">false</span>, <span class="string">&#x27;large&#x27;</span>, <span class="string">&#x27;huge&#x27;</span>]&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;header&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="literal">false</span>]&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;color&#x27;</span>: []&#125;, &#123;<span class="string">&#x27;background&#x27;</span>: []&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;font&#x27;</span>: []&#125;],</span><br><span class="line">    [&#123;<span class="string">&#x27;align&#x27;</span>: []&#125;],</span><br><span class="line">    [<span class="string">&#x27;clean&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;link&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="string">&#x27;video&#x27;</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> handlers = &#123;</span><br><span class="line">    <span class="attr">image</span>: <span class="keyword">function</span> <span class="title function_">image</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">var</span> fileInput = <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input.ql-image[type=file]&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (fileInput === <span class="literal">null</span>) &#123;</span><br><span class="line">            fileInput = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">            fileInput.<span class="title function_">setAttribute</span>(<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;file&#x27;</span>);</span><br><span class="line">            <span class="comment">// 设置图片参数名</span></span><br><span class="line">            <span class="keyword">if</span> (uploadConfig.<span class="property">name</span>) &#123;</span><br><span class="line">                fileInput.<span class="title function_">setAttribute</span>(<span class="string">&#x27;name&#x27;</span>, uploadConfig.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 可设置上传图片的格式</span></span><br><span class="line">            fileInput.<span class="title function_">setAttribute</span>(<span class="string">&#x27;accept&#x27;</span>, uploadConfig.<span class="property">accept</span>);</span><br><span class="line">            fileInput.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;ql-image&#x27;</span>);</span><br><span class="line">            <span class="comment">// 监听选择文件</span></span><br><span class="line">            fileInput.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 创建formData</span></span><br><span class="line">                <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">                formData.<span class="title function_">append</span>(uploadConfig.<span class="property">name</span>, fileInput.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">                formData.<span class="title function_">append</span>(<span class="string">&#x27;object&#x27;</span>,<span class="string">&#x27;product&#x27;</span>);</span><br><span class="line">                <span class="comment">// 如果需要token且存在token</span></span><br><span class="line">                <span class="keyword">if</span> (uploadConfig.<span class="property">token</span>) &#123;</span><br><span class="line">                    formData.<span class="title function_">append</span>(<span class="string">&#x27;token&#x27;</span>, uploadConfig.<span class="property">token</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 图片上传</span></span><br><span class="line">                <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">                xhr.<span class="title function_">open</span>(uploadConfig.<span class="property">methods</span>, uploadConfig.<span class="property">action</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 上传数据成功，会触发</span></span><br><span class="line">                xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">                        <span class="keyword">let</span> length = self.<span class="property">quill</span>.<span class="title function_">getSelection</span>(<span class="literal">true</span>).<span class="property">index</span>;</span><br><span class="line">                        <span class="comment">//这里很重要，你图片上传成功后，img的src需要在这里添加，res.path就是你服务器返回的图片链接。</span></span><br><span class="line">                        self.<span class="property">quill</span>.<span class="title function_">insertEmbed</span>(length, <span class="string">&#x27;image&#x27;</span>, uploadConfig.<span class="property">fastDfsUrl</span>+res.<span class="property">data</span>);</span><br><span class="line">                        self.<span class="property">quill</span>.<span class="title function_">setSelection</span>(length + <span class="number">1</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    fileInput.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// 开始上传数据</span></span><br><span class="line">                xhr.<span class="property">upload</span>.<span class="property">onloadstart</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                    fileInput.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// 当发生网络异常的时候会触发，如果上传数据的过程还未结束</span></span><br><span class="line">                xhr.<span class="property">upload</span>.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// 上传数据完成（成功或者失败）时会触发</span></span><br><span class="line">                xhr.<span class="property">upload</span>.<span class="property">onloadend</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                    <span class="comment">// console.log(&#x27;上传结束&#x27;)</span></span><br><span class="line">                &#125;;</span><br><span class="line">                xhr.<span class="title function_">send</span>(formData)</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">appendChild</span>(fileInput);</span><br><span class="line">        &#125;</span><br><span class="line">        fileInput.<span class="title function_">click</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">placeholder</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">theme</span>: <span class="string">&#x27;snow&#x27;</span>,  <span class="comment">// 主题</span></span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="attr">toolbar</span>: &#123;</span><br><span class="line">            <span class="attr">container</span>: toolOptions,  <span class="comment">// 工具栏选项</span></span><br><span class="line">            <span class="attr">handlers</span>: handlers  <span class="comment">// 事件重写</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>PS:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个js文件中以下3个地方需要修改</span></span><br><span class="line"><span class="attr">fastDfsUrl</span>:<span class="string">&#x27;http://123.207.27.208&#x27;</span>,      <span class="comment">// 图片访问地址</span></span><br><span class="line"><span class="attr">action</span>:  <span class="string">&#x27;http://localhost:8080/fastDfs&#x27;</span>, <span class="comment">// 必填参数 图片上传地址</span></span><br><span class="line">self.<span class="property">quill</span>.<span class="title function_">insertEmbed</span>(length, <span class="string">&#x27;image&#x27;</span>, uploadConfig.<span class="property">fastDfsUrl</span>+res.<span class="property">data</span>); <span class="comment">//data 服务器端图片的路径</span></span><br></pre></td></tr></table></figure><h4 id="2-导入并使用"><a href="#2-导入并使用" class="headerlink" title="2. 导入并使用"></a>2. 导入并使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> quillConfig <span class="keyword">from</span> <span class="string">&#x27;../../common/js/quill-config&#x27;</span>;</span><br><span class="line"><span class="attr">quillOption</span>: quillConfig,<span class="comment">// data数据模型中配置</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20220925232720.png" alt="image-20220925232720768"></p><h3 id="三-多图片上传"><a href="#三-多图片上传" class="headerlink" title="三. 多图片上传"></a>三. 多图片上传</h3><h4 id="1-数据库存储方式"><a href="#1-数据库存储方式" class="headerlink" title="1. 数据库存储方式"></a>1. 数据库存储方式</h4><p>例如t_pet中有个resources字段，专门用来保存宠物细节图片的，例如：</p><p><code>/group1/M00/00/0C/CgAIC2KrUU-ARA8EAAH2I5Y672k716.jpg,/group1/M00/00/0C/CgAIC2KrUYaAaR-6AADnxcxs4eA746.jpg,/group1/M00/00/0C/CgAIC2KrUYqAbjaZAAMbwtByyoU105.jpg,/group1/M00/00/0C/CgAIC2KrUY-AQcYWAAF5fdD2FCI302.jpg</code></p><p><strong>PS:采用逗号分隔多张图片路径</strong></p><h4 id="2-前端实现"><a href="#2-前端实现" class="headerlink" title="2. 前端实现"></a>2. 前端实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;宠物图片&quot; prop=&quot;index&quot;&gt;</span><br><span class="line">  &lt;el-upload class=&quot;upload-demo&quot;</span><br><span class="line">             action=&quot;http://localhost:8080/fastDfs/&quot;</span><br><span class="line">             :on-preview=&quot;handlePreview&quot;</span><br><span class="line">             :on-remove=&quot;handleRemove&quot;</span><br><span class="line">             :on-success=&quot;handleSuccess&quot;</span><br><span class="line">             :file-list=&quot;fileList&quot;</span><br><span class="line">             list-type=&quot;picture&quot;&gt;</span><br><span class="line">    &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;点击上传&lt;/el-button&gt;</span><br><span class="line">    &lt;div slot=&quot;tip&quot; class=&quot;el-upload__tip&quot;&gt;只能上传jpg/png文件，且不超过500kb&lt;/div&gt;</span><br><span class="line">  &lt;/el-upload&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure><h4 id="3-数据模型"><a href="#3-数据模型" class="headerlink" title="3. 数据模型"></a>3. 数据模型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编辑界面数据</span></span><br><span class="line"><span class="attr">editForm</span>: &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">typeId</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">resources</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">saleprice</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">costprice</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">onsaletime</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">offsaletime</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">shopId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">userId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">petDetail</span>: &#123;  <span class="comment">//与后端实体类一致</span></span><br><span class="line">    <span class="attr">id</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">intro</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">adoptNotice</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="4-逻辑代码实现"><a href="#4-逻辑代码实现" class="headerlink" title="4. 逻辑代码实现"></a>4. 逻辑代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件上传的业务逻辑</span></span><br><span class="line"><span class="title function_">handleSuccess</span>(<span class="params">response, file, fileList</span>) &#123;</span><br><span class="line">  <span class="comment">// 上传多张图片需要对resources进行处理,多张图片保存到数据库的resources字段用,隔开</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>) &#123;</span><br><span class="line">    <span class="comment">// 对已经存在的图片进行拼接</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span> = <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span> + <span class="string">&quot;,&quot;</span> + response.<span class="property">data</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span> = response.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>)</span><br><span class="line">  <span class="comment">// 对fileList进行处理，用以显示图片</span></span><br><span class="line">  <span class="comment">// 先清空 - 这个fileList做了绑定，以前是有值【先清空，再添加最新的数据】</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">fileList</span> = []</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>) &#123;</span><br><span class="line">    <span class="comment">// /group1/M00/00/0C/CgAIC2KrUU-ARA8EAAH2I5Y672k716.jpg,/group1/M00/00/0C/CgAIC2KrUYaAaR-6AADnxcxs4eA746.jpg 对其进行分割</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="comment">// 循环遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 从fastDfs文件系统获取资源</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fileList</span>.<span class="title function_">push</span>(&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://123.207.27.208&#x27;</span> + arr[i]&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件删除的业务逻辑</span></span><br><span class="line"><span class="title function_">handleRemove</span>(<span class="params">file, fileList</span>) &#123;</span><br><span class="line">  <span class="comment">// url:&quot;http://123.207.27.208/group1/M00/01/D0/CgAIC2MwX7eAWEwlAACO89rfJDY938.jpg&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(file);</span><br><span class="line">  <span class="keyword">const</span> filePath = file.<span class="property">url</span>.<span class="title function_">substring</span>(file.<span class="property">url</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;/group&#x27;</span>))<span class="comment">// /group1/M00/01/D0/CgAIC2MwX7eAWEwlAACO89rfJDY938.jpg</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">delete</span>(<span class="string">&quot;/fastDfs?path=&quot;</span> + filePath)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">success</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;删除成功&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;删除失败&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="comment">// 删除之后对resources做处理</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] == filePath) &#123;<span class="comment">//找到了删除的图片</span></span><br><span class="line">        arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);<span class="comment">//删除数组中指定的图片</span></span><br><span class="line">        <span class="comment">// 跳出循环</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对resources重新拼接</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span> = arr.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除后的resources:&quot;</span> + <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对fileList进行处理，用以显示图片</span></span><br><span class="line">  <span class="comment">// 先清空 - 这个fileList做了绑定，以前是有值【先清空，再添加最新的数据】</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">fileList</span> = []</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>) &#123;</span><br><span class="line">    <span class="comment">// /group1/M00/00/0C/CgAIC2KrUU-ARA8EAAH2I5Y672k716.jpg,/group1/M00/00/0C/CgAIC2KrUYaAaR-6AADnxcxs4eA746.jpg 对其进行分割</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="comment">// 循环遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 从fastDfs文件系统获取资源</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fileList</span>.<span class="title function_">push</span>(&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://123.207.27.208&#x27;</span> + arr[i]&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="5-数据回显"><a href="#5-数据回显" class="headerlink" title="5. 数据回显"></a>5. 数据回显</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示编辑界面</span></span><br><span class="line"><span class="attr">handleEdit</span>: <span class="keyword">function</span> (<span class="params">index, row</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;编辑&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">editForm</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, row);</span><br><span class="line">  <span class="comment">// 对fileList进行处理，用以显示图片</span></span><br><span class="line">  <span class="comment">// 先清空 - 这个fileList做了绑定，以前是有值【先清空，再添加最新的数据】</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">fileList</span> = []</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>) &#123;</span><br><span class="line">    <span class="comment">// /group1/M00/00/0C/CgAIC2KrUU-ARA8EAAH2I5Y672k716.jpg,/group1/M00/00/0C/CgAIC2KrUYaAaR-6AADnxcxs4eA746.jpg 对其进行分割</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="variable language_">this</span>.<span class="property">editForm</span>.<span class="property">resources</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="comment">// 循环遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 从fastDfs文件系统获取资源</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fileList</span>.<span class="title function_">push</span>(&#123;<span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://123.207.27.208&#x27;</span> + arr[i]&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">editFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">vue的富文本编辑器使用以及多图片文件上传与回显</summary>
    
    
    
    <category term="vue" scheme="https://www.fomal.cc/categories/vue/"/>
    
    
    <category term="vue" scheme="https://www.fomal.cc/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>使用SpringBoot的定时任务发布秒杀活动到redis</title>
    <link href="https://www.fomal.cc/posts/56884dd3.html"/>
    <id>https://www.fomal.cc/posts/56884dd3.html</id>
    <published>2025-05-20T08:38:30.630Z</published>
    <updated>2022-11-10T06:18:03.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-EnableScheduling注解开启定时任务"><a href="#一-EnableScheduling注解开启定时任务" class="headerlink" title="一. @EnableScheduling注解开启定时任务"></a>一. <code>@EnableScheduling</code>注解开启定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.ymcc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableScheduling</span><span class="comment">//开启定时任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KillServiceApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(KillServiceApp.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-Scheduled-cron-quot-0-0-0-quot-指定定时任务"><a href="#二-Scheduled-cron-quot-0-0-0-quot-指定定时任务" class="headerlink" title="二. @Scheduled(cron = &quot;0 0 0 * * ?&quot;)指定定时任务"></a>二. <code>@Scheduled(cron = &quot;0 0 0 * * ?&quot;)</code>指定定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.domain.KillActivity;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.service.IKillActivityService;</span><br><span class="line"><span class="keyword">import</span> io.coderyeah.ymcc.util.AssertUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublishKillCourse2Redis</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IKillActivityService activityService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时发布秒杀活动到redis  （0 0 1 * * ?）==&gt;&gt;每天凌晨一点执行一次</span></span><br><span class="line">    <span class="comment">// 每天凌晨0点执行一次  @Scheduled(cron = &quot;0 0 0 * * ?&quot;)</span></span><br><span class="line">    <span class="comment">// @Scheduled(cron = &quot;0 0/1 8-20 * * ?&quot;) // 每隔一分钟执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 0 * * ?&quot;)</span><span class="comment">// 每天凌晨0点执行一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 查询当天的数据sql:SELECT * FROM t_kill_activity WHERE TO_DAYS(start_time) =TO_DAYS(NOW())</span></span><br><span class="line">        <span class="comment">// 获取到当天待发布的活动</span></span><br><span class="line">        List&lt;KillActivity&gt; activities = activityService.getCurrentData();</span><br><span class="line">        AssertUtil.isNotNull(activities, <span class="string">&quot;今日暂无秒杀活动发布&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历每一个活动执行发布</span></span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;--任务准备发布到redis~~~&quot;</span>, DateUtil.now());</span><br><span class="line">        activities.forEach(killActivity -&gt; &#123;</span><br><span class="line">            <span class="comment">// 任务发布</span></span><br><span class="line">            activityService.publish(killActivity.getId());</span><br><span class="line">        &#125;);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;--已发布到redis~~~&quot;</span>, DateUtil.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-发布方法"><a href="#三-发布方法" class="headerlink" title="三. 发布方法"></a>三. 发布方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IKillCourseService courseService;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;Object, Object&gt; redisTemplate;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> KillActivityMapper activityMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// id:发布的活动id  根据id查询当前活动</span></span><br><span class="line">    <span class="type">KillActivity</span> <span class="variable">killActivity</span> <span class="operator">=</span> selectById(id);</span><br><span class="line">    AssertUtil.isNotNull(killActivity, <span class="string">&quot;秒杀活动不存在&quot;</span>);</span><br><span class="line">    <span class="comment">// 判断活动是否开启和过期</span></span><br><span class="line">    AssertUtil.isEqualsTrim(killActivity.getPublishStatus().toString(), KillActivity.KILL_WAIT_PUBLISH.toString(), <span class="string">&quot;活动已发布或已结束&quot;</span>);</span><br><span class="line">    AssertUtil.isFalse(killActivity.getStartTime().after(<span class="keyword">new</span> <span class="title class_">Date</span>()), <span class="string">&quot;活动未开启,请在规定时间发布&quot;</span>);</span><br><span class="line">    AssertUtil.isFalse(killActivity.getEndTime().before(<span class="keyword">new</span> <span class="title class_">Date</span>()), <span class="string">&quot;活动已经结束&quot;</span>);</span><br><span class="line">    <span class="comment">// 根据秒杀活动查询出所有秒杀课程</span></span><br><span class="line">    Wrapper&lt;KillCourse&gt; wrapper = <span class="keyword">new</span> <span class="title class_">EntityWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;activity_id&quot;</span>, id);</span><br><span class="line">    List&lt;KillCourse&gt; courses = courseService.selectList(wrapper);</span><br><span class="line">    <span class="comment">//更新秒杀活动状态</span></span><br><span class="line">    killActivity.setPublishTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    killActivity.setPublishStatus(KillActivity.KILL_OK_PUBLISH);</span><br><span class="line">    updateById(killActivity);</span><br><span class="line"></span><br><span class="line">    courses.forEach(course -&gt; &#123;</span><br><span class="line">        <span class="comment">// 使用hash存储秒杀课程</span></span><br><span class="line">        <span class="comment">// 课程没有库存 使用信号量来处理超卖超买问题</span></span><br><span class="line">        <span class="comment">// 获取信号量</span></span><br><span class="line">        <span class="type">RSemaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> redissonClient.getSemaphore(course.getId().toString());</span><br><span class="line">        <span class="comment">// 设置信号量 --课程秒杀的数量</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> semaphore.trySetPermits(course.getKillCount());</span><br><span class="line">        log.info(<span class="string">&quot;设置信号量：&#123;&#125;&quot;</span>, b);</span><br><span class="line">        AssertUtil.isTrue(b, <span class="string">&quot;获取信号量失败&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisConstants.KILL_ACTIVITY + id;</span><br><span class="line">        redisTemplate.opsForHash().put(key, course.getCourseId().toString(), course);</span><br><span class="line">        <span class="comment">// 更新秒杀课程状态 秒杀中</span></span><br><span class="line">        course.setPublishStatus(KillCourse.KILLING);</span><br><span class="line">        course.setPublishTime(<span class="keyword">new</span> <span class="title class_">Date</span>());<span class="comment">// 发布时间</span></span><br><span class="line">        courseService.updateById(course);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.redisson.Redisson;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建客户端</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>).setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-EnableScheduling注解开启定时任务&quot;&gt;&lt;a href=&quot;#一-EnableScheduling注解开启定时任务&quot; class=&quot;headerlink&quot; title=&quot;一. @EnableScheduling注解开启定时任务&quot;&gt;&lt;/a&gt;一. &lt;co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用Minio存储文件对象</title>
    <link href="https://www.fomal.cc/posts/f71a6512.html"/>
    <id>https://www.fomal.cc/posts/f71a6512.html</id>
    <published>2025-05-20T08:38:30.627Z</published>
    <updated>2022-11-18T02:32:41.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-Docker拉取镜像（确保自己的服务器已经安装Docker）"><a href="#一-Docker拉取镜像（确保自己的服务器已经安装Docker）" class="headerlink" title="一. Docker拉取镜像（确保自己的服务器已经安装Docker）"></a>一. Docker拉取镜像（确保自己的服务器已经安装Docker）</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure><h3 id="二-启动一个miniio容器"><a href="#二-启动一个miniio容器" class="headerlink" title="二. 启动一个miniio容器"></a>二. 启动一个miniio容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --name minio -p 9090:9000 -p 9999:9999 -d \</span><br><span class="line">--restart=always -e \</span><br><span class="line">&quot;MINIO_ROOT_USER=minio&quot; \</span><br><span class="line">-e &quot;MINIO_ROOT_PASSWORD=minio123&quot; \</span><br><span class="line">-v /home/minio/data:/data \</span><br><span class="line">-v /home/minio/config:/root/.minio minio/minio server /data --console-address &#x27;0.0.0.0:9999&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>账号是minio; 密码是minio123</strong></p><h3 id="三-访问minio管理界面"><a href="#三-访问minio管理界面" class="headerlink" title="三. 访问minio管理界面"></a>三. 访问minio管理界面</h3><p>端口<strong>9090</strong>或<strong>9999</strong>（确保在服务器放行相关端口即可访问）</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221118102023.png" alt="image-20221118102023717"></p><p>点击 create a Bucket 创建一个bucket(桶), 这里的Bucket 我们可以理解为文件存储的目录</p><p>输入 bucket name ,点击create bucket 。可以通过 upload 上传文件到bucket中。</p><h3 id="四-Java-上传文件到minio"><a href="#四-Java-上传文件到minio" class="headerlink" title="四. Java 上传文件到minio"></a>四. Java 上传文件到minio</h3><ol><li><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试类(需要输入自己的账号密码和IP)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.ObjectWriteResponse;</span><br><span class="line"><span class="keyword">import</span> io.minio.PutObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.MinioException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/18 9:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构建一个Minio客户端</span></span><br><span class="line">            <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> MinioClient.builder()</span><br><span class="line">                    <span class="comment">//创建容器时指定的账号</span></span><br><span class="line">                    .credentials(<span class="string">&quot;账号&quot;</span>, <span class="string">&quot;密码&quot;</span>)</span><br><span class="line">                    <span class="comment">//上传地址</span></span><br><span class="line">                    .endpoint(<span class="string">&quot;http://IP:9090&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\coderyeah\\Desktop\\welt.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .object(<span class="string">&quot;welt.jpg&quot;</span>)    <span class="comment">//文件名</span></span><br><span class="line">                    .contentType(<span class="string">&quot;image/jpeg&quot;</span>)    <span class="comment">//文件类型</span></span><br><span class="line">                    .bucket(<span class="string">&quot;bucket-test&quot;</span>)  <span class="comment">//存储目录名</span></span><br><span class="line">                    .stream(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file), file.length(), -<span class="number">1</span>).build(); <span class="comment">//文件流，以及大小，-1代表不分片</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行上传</span></span><br><span class="line">            <span class="type">ObjectWriteResponse</span> <span class="variable">objectWriteResponse</span> <span class="operator">=</span> minioClient.putObject(putObjectArgs);</span><br><span class="line">            System.out.println(<span class="string">&quot;上传结果 &quot;</span> + objectWriteResponse);</span><br><span class="line">            <span class="comment">//上传之后的文件地址是：</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;http://IP:9090/bucket-test/welt.jpg&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MinioException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error occurred: &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="五-配置权限"><a href="#五-配置权限" class="headerlink" title="五. 配置权限"></a>五. 配置权限</h3><p>如果我们需要我们上传的文件可以被匿名用户访问，那么需要添加访问权限：找到文件存储目录，点击manager</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221118103113.png" alt="image-20221118103113051"></p><p>然后找到access Rules添加访问规则如下：</p><p><img src="https://raw.githubusercontent.com/lqs-blog/picgo/main/img/20221118103150.png" alt="image-20221118103150617"></p><p>然后再访问路径：<a href="http://IP:9090/bucket-test/welt.jpg">http://IP:9090/bucket-test/welt.jpg</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-Docker拉取镜像（确保自己的服务器已经安装Docker）&quot;&gt;&lt;a href=&quot;#一-Docker拉取镜像（确保自己的服务器已经安装Docker）&quot; class=&quot;headerlink&quot; title=&quot;一. Docker拉取镜像（确保自己的服务器已经安装Do</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>生成订单编号的工具类</title>
    <link href="https://www.fomal.cc/posts/3f7f57de.html"/>
    <id>https://www.fomal.cc/posts/3f7f57de.html</id>
    <published>2025-05-20T08:38:30.623Z</published>
    <updated>2022-09-29T13:46:11.374Z</updated>
    
    <content type="html"><![CDATA[<hr color="red"/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerateUtils</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取商品编码</span></span><br><span class="line"><span class="comment">    * 商品编码规则：nanoTime(后5位)*5位随机数(10000~99999)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateProductCode</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">long</span> <span class="variable">nanoPart</span> <span class="operator">=</span> System.nanoTime() % <span class="number">100000L</span>;</span><br><span class="line">      <span class="keyword">if</span>(nanoPart&lt;<span class="number">10000L</span>)&#123;</span><br><span class="line">         nanoPart+=<span class="number">10000L</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">long</span> <span class="variable">randomPart</span> <span class="operator">=</span> (<span class="type">long</span>)(Math.random()*(<span class="number">90000</span>)+<span class="number">10000</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>+String.valueOf((<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(nanoPart).multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(randomPart))));</span><br><span class="line">      <span class="keyword">return</span> code.substring(code.length()-<span class="number">10</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id: 用户id</span></span><br><span class="line"><span class="comment">    * 生成订单编号</span></span><br><span class="line"><span class="comment">    * 订单编号规则：(10位)：(年末尾*月，取后2位)+（用户ID%3.33*日取整后2位）+(timestamp*10000以内随机数，取后6位)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateOrderSn</span><span class="params">(<span class="type">long</span> id)</span>&#123;</span><br><span class="line">      <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">      <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(Calendar.YEAR);</span><br><span class="line">      year = year % <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">if</span>(year == <span class="number">0</span>) year = <span class="number">10</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> calendar.get(Calendar.MONTH)+<span class="number">1</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">yearMonth</span>  <span class="operator">=</span>  year * month;</span><br><span class="line">      <span class="type">String</span> <span class="variable">yearMonthPart</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>+yearMonth;</span><br><span class="line">      yearMonthPart = yearMonthPart.substring(yearMonthPart.length() - <span class="number">2</span> );</span><br><span class="line">      </span><br><span class="line">      <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">      <span class="type">int</span> <span class="variable">dayNum</span> <span class="operator">=</span> (<span class="type">int</span>)((id % <span class="number">3.33</span>) * day);</span><br><span class="line">      <span class="type">String</span> <span class="variable">dayPart</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>+dayNum;</span><br><span class="line">      dayPart = dayPart.substring(dayPart.length() - <span class="number">2</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="type">String</span> <span class="variable">timestampPart</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>+(Math.random() * <span class="number">10000</span>) * (System.currentTimeMillis()/<span class="number">10000</span>);</span><br><span class="line">      timestampPart = timestampPart.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      timestampPart = timestampPart.substring(<span class="number">0</span>,<span class="number">6</span>);</span><br><span class="line">      <span class="keyword">return</span> yearMonthPart+dayPart+timestampPart;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 生成统一支付单号</span></span><br><span class="line"><span class="comment">    * 规则：年(2)月(2)日(2)时(2)分(2)+timestamp*5位随机整数取后5位</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateUnionPaySn</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">      <span class="type">SimpleDateFormat</span> <span class="variable">dateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddhhmm&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">dateTime</span> <span class="operator">=</span> dateFormat.format(calendar.getTime());</span><br><span class="line">      dateTime = dateTime.substring(<span class="number">2</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">timestampPart</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>+(Math.random() * <span class="number">10000</span>) * (System.currentTimeMillis()/<span class="number">10000</span>);</span><br><span class="line">      timestampPart = timestampPart.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      timestampPart = timestampPart.substring(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">      <span class="keyword">return</span> dateTime+timestampPart;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">long</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">//String timestampPart = &quot;&quot;+(Math.random() * 10000) * (System.currentTimeMillis()/10000);</span></span><br><span class="line">         <span class="comment">//System.out.println(timestampPart);</span></span><br><span class="line">         <span class="comment">//System.out.println(generateOrderSn(i));</span></span><br><span class="line">         System.out.println(generateUnionPaySn());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr color=&quot;red&quot;/&gt;

&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    
    <category term="java" scheme="https://www.fomal.cc/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计一个上下拖动分割窗口</title>
    <link href="https://www.fomal.cc/posts/d78d2689.html"/>
    <id>https://www.fomal.cc/posts/d78d2689.html</id>
    <published>2025-05-20T08:38:30.620Z</published>
    <updated>2023-03-01T02:12:44.864Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-效果展示"><a href="#一-效果展示" class="headerlink" title="一. 效果展示"></a>一. 效果展示</h3><p><img src="F:\blog\coderyeah\source\_posts\img\image-20230301100821417.png" alt="image-20230301100821417"></p><p><img src="F:\blog\coderyeah\source\_posts\img\image-20230301100901413.png" alt="image-20230301100901413"></p><h3 id="二-自定义组件split-spane"><a href="#二-自定义组件split-spane" class="headerlink" title="二.自定义组件split-spane"></a>二.自定义组件<code>split-spane</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;splitPane&quot; class=&quot;split-pane&quot; :class=&quot;direction&quot; :style=&quot;&#123; flexDirection: direction &#125;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;pane pane-one&quot; :style=&quot;lengthType + &#x27;:&#x27; + paneLengthValue&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;one&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div</span><br><span class="line">      style=&quot;z-index: 2&quot;</span><br><span class="line">      class=&quot;pane-trigger&quot;</span><br><span class="line">      :style=&quot;lengthType + &#x27;:&#x27; + triggerLengthValue&quot;</span><br><span class="line">      @mousedown=&quot;handleMouseDown&quot;</span><br><span class="line">    /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;pane pane-two&quot; style=&quot;z-index: 2;background-color: white&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;two&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    direction: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#x27;row&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    min: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 10</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    max: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 90</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    paneLengthPercent: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 50</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    triggerLength: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 10</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      triggerLeftOffset: 0 // 鼠标距滑动器左(顶)侧偏移量</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    lengthType() &#123;</span><br><span class="line">      return this.direction === &#x27;row&#x27; ? &#x27;width&#x27; : &#x27;height&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    paneLengthValue() &#123;</span><br><span class="line">      return `calc($&#123;this.paneLengthPercent&#125;% - $&#123;this.triggerLength / 2 + &#x27;px&#x27;&#125;)`</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    triggerLengthValue() &#123;</span><br><span class="line">      return this.triggerLength + &#x27;px&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 按下滑动器</span><br><span class="line">    handleMouseDown(e) &#123;</span><br><span class="line">      document.addEventListener(&#x27;mousemove&#x27;, this.handleMouseMove)</span><br><span class="line">      document.addEventListener(&#x27;mouseup&#x27;, this.handleMouseUp)</span><br><span class="line"></span><br><span class="line">      if (this.direction === &#x27;row&#x27;) &#123;</span><br><span class="line">        this.triggerLeftOffset = e.pageX - e.srcElement.getBoundingClientRect().left</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.triggerLeftOffset = e.pageY - e.srcElement.getBoundingClientRect().top</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 按下滑动器后移动鼠标</span><br><span class="line">    handleMouseMove(e) &#123;</span><br><span class="line">      const clientRect = this.$refs.splitPane.getBoundingClientRect()</span><br><span class="line">      let paneLengthPercent = 0</span><br><span class="line"></span><br><span class="line">      if (this.direction === &#x27;row&#x27;) &#123;</span><br><span class="line">        const offset = e.pageX - clientRect.left - this.triggerLeftOffset + this.triggerLength / 2</span><br><span class="line">        paneLengthPercent = (offset / clientRect.width) * 100</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        const offset = e.pageY - clientRect.top - this.triggerLeftOffset + this.triggerLength / 2</span><br><span class="line">        paneLengthPercent = (offset / clientRect.height) * 100</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (paneLengthPercent &lt; this.min) &#123;</span><br><span class="line">        paneLengthPercent = this.min</span><br><span class="line">      &#125;</span><br><span class="line">      if (paneLengthPercent &gt; this.max) &#123;</span><br><span class="line">        paneLengthPercent = this.max</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      this.$emit(&#x27;update:paneLengthPercent&#x27;, paneLengthPercent)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 松开滑动器</span><br><span class="line">    handleMouseUp() &#123;</span><br><span class="line">      document.removeEventListener(&#x27;mousemove&#x27;, this.handleMouseMove)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.split-pane &#123;</span><br><span class="line">  //background: palegreen;</span><br><span class="line">  height: 100%;</span><br><span class="line">  display: flex;</span><br><span class="line">  &amp;.row &#123;</span><br><span class="line">    .pane &#123;</span><br><span class="line">      height: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    .pane-trigger &#123;</span><br><span class="line">      height: 100%;</span><br><span class="line">      cursor: col-resize;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;.column &#123;</span><br><span class="line">    .pane &#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    .pane-trigger &#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">      cursor: row-resize;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .pane-one &#123;</span><br><span class="line">    //background: palevioletred;</span><br><span class="line">  &#125;</span><br><span class="line">  .pane-trigger &#123;</span><br><span class="line">    user-select: none;</span><br><span class="line">    background: rgba(241, 241, 241, 0.95);</span><br><span class="line">  &#125;</span><br><span class="line">  .pane-two &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    //background: turquoise;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三-使用示例"><a href="#三-使用示例" class="headerlink" title="三.使用示例"></a>三.使用示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;page&quot; style=&quot;height: 800px&quot;&gt;</span><br><span class="line">    &lt;SplitPane</span><br><span class="line">      direction=&quot;column&quot;</span><br><span class="line">      :min=&quot;20&quot;</span><br><span class="line">      :max=&quot;80&quot;</span><br><span class="line">      :triggerLength=&quot;20&quot;</span><br><span class="line">      :paneLengthPercent.sync=&quot;paneLengthPercent&quot;&gt;</span><br><span class="line">      &lt;template v-slot:one&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          区域一</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;template v-slot:two&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          区域二</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/SplitPane&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import SplitPane from &#x27;@/views/quality/split-pane&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Test&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    SplitPane</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      paneLengthPercent: 50</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.page &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  //background: #000;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="F:\blog\coderyeah\source\_posts\img\image-20230301101222525.png" alt="image-20230301101222525"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-效果展示&quot;&gt;&lt;a href=&quot;#一-效果展示&quot; class=&quot;headerlink&quot; title=&quot;一. 效果展示&quot;&gt;&lt;/a&gt;一. 效果展示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;F:&#92;blog&#92;coderyeah&#92;source&#92;_posts&#92;img&#92;image-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式之适配器模式</title>
    <link href="https://www.fomal.cc/posts/796a0e79.html"/>
    <id>https://www.fomal.cc/posts/796a0e79.html</id>
    <published>2025-05-20T08:38:30.616Z</published>
    <updated>2023-01-11T07:17:12.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-模式动机"><a href="#一-模式动机" class="headerlink" title="一.模式动机"></a>一.模式动机</h3><ul><li>在软件开发中采用类似于电源适配器的设计和编码技巧被称为适配器模式。</li><li>通常情况下，客户端可以通过目标类的接口访问它所提供的服务。有时，现有的类可以满足客户类的功能需要，但是它所提供的接口不一定是客户类所期望的，这可能是因为现有类中方法名与目标类中定义的方法名不一致等原因所导致的。</li><li>在这种情况下，现有的接口需要转化为客户类期望的接口，这样保证了对现有类的重用。如果不进行这样的转化，客户类就不能利用现有类所提供的功能，适配器模式可以完成这样的转化。</li><li>在适配器模式中可以定义一个包装类，包装不兼容接口的对象，这个包装类指的就是适配器(<code>Adapter</code>)，它所包装的对象就是适配者(<code>Adaptee</code>)，即被适配的类。</li><li>适配器提供客户类需要的接口，适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。也就是说：当客户类调用适配器的方法时，在适配器类的内部将调用适配者类的方法，而这个过程对客户类是透明的，客户类并不直接访问适配者类。因此，适配器可以使由于接口不兼容而不能交互的类可以一起工作。这就是适配器模式的模式动机。</li></ul><h3 id="二-模式定义"><a href="#二-模式定义" class="headerlink" title="二.模式定义"></a>二.模式定义</h3><p>适配器模式(<code>Adapter Pattern</code>) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p><h3 id="三-模式结构"><a href="#三-模式结构" class="headerlink" title="三.模式结构"></a>三.模式结构</h3><p>适配器模式包含如下角色：</p><ul><li><code>Target</code>：目标抽象类</li><li><code>Adapter</code>：适配器类</li><li><code>Adaptee</code>：适配者类</li><li><code>Client</code>：客户类</li></ul><p>适配器模式有对象适配器和类适配器两种实现：</p><p>对象适配器：</p><p><img src="F:\blog\coderyeah\source\_posts\img\image-20230111115432167.png" alt="image-20230111115432167"></p><p>类适配器：</p><p><img src="img/image-20230111115719568.png" alt="image-20230111115719568"></p><h3 id="四-代码示例"><a href="#四-代码示例" class="headerlink" title="四.代码示例"></a>四.代码示例</h3><h4 id="1-类适配器"><a href="#1-类适配器" class="headerlink" title="1.类适配器"></a>1.类适配器</h4><p>适配器与适配者之间是继承（或实现）关系</p><p>适配者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/11 14:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adaptee</span> <span class="keyword">implements</span> <span class="title class_">AdapteeInterface</span> &#123;<span class="comment">// 适配者类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;适配者类的表演时间...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;适配者类的dance...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/11 14:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AdapteeInterface</span> &#123; <span class="comment">// 适配者要实现的接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/11 14:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> &#123;<span class="comment">// 目标接口</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">capture</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">release</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/11 14:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adaptor</span> <span class="keyword">extends</span> <span class="title class_">Adaptee</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> &#123;<span class="comment">// 适配器--使接口不兼容的类协调工作</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">capture</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.dance();</span><br><span class="line">        System.out.println(<span class="string">&quot;target接口的获取方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;target接口的释放方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Adaptor</span> <span class="variable">adaptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adaptor</span>();</span><br><span class="line">        adaptor.release();</span><br><span class="line">        adaptor.capture();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="img/image-20230111145308227.png" alt="image-20230111145308227"></p><h4 id="2-对象适配器"><a href="#2-对象适配器" class="headerlink" title="2.对象适配器"></a>2.对象适配器</h4><p>适配器与适配者之间是关联关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/11 14:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectAdaptor</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AdapteeInterface anInterface;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ObjectAdaptor</span><span class="params">(AdapteeInterface anInterface)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.anInterface = anInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">capture</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象适配器俘获方法...&quot;</span>);</span><br><span class="line">        anInterface.dance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象适配器释放方法...&quot;</span>);</span><br><span class="line">        anInterface.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/11 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*Adaptor adaptor = new Adaptor();</span></span><br><span class="line"><span class="comment">        adaptor.release();</span></span><br><span class="line"><span class="comment">        adaptor.capture();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AdapteeInterface</span> <span class="variable">adapteeInterface</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adaptee</span>();</span><br><span class="line">        <span class="type">ObjectAdaptor</span> <span class="variable">objectAdaptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectAdaptor</span>(adapteeInterface);</span><br><span class="line">        objectAdaptor.release();</span><br><span class="line">        objectAdaptor.capture();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-优点"><a href="#五-优点" class="headerlink" title="五.优点"></a>五.优点</h3><ul><li>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。</li><li>增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。</li><li><p>灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。</p></li><li><p>类适配器模式还具有如下优点：</p><p>由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配器的灵活性更强。</p></li><li><p>对象适配器模式还具有如下优点：</p><p>一个对象适配器可以把多个不同的适配者适配到同一个目标，也就是说，同一个适配器可以把适配者类和它的子类都适配到目标接口。</p></li></ul><h3 id="六-缺点"><a href="#六-缺点" class="headerlink" title="六.缺点"></a>六.缺点</h3><ul><li><p>类适配器模式的缺点如下：</p><p>对于Java、C#等不支持多重继承的语言，一次最多只能适配一个适配者类，而且目标抽象类只能为抽象类，不能为具体类，其使用有一定的局限性，不能将一个适配者类和它的子类都适配到目标接口。</p></li><li><p>对象适配器模式的缺点如下：</p><p>与类适配器模式相比，要想置换适配者类的方法就不容易。如果一定要置换掉适配者类的一个或多个方法，就只好先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。</p></li></ul><h3 id="七-适用环境"><a href="#七-适用环境" class="headerlink" title="七.适用环境"></a>七.适用环境</h3><ul><li>系统需要使用现有的类，而这些类的接口不符合系统的需要。</li><li>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-模式动机&quot;&gt;&lt;a href=&quot;#一-模式动机&quot; class=&quot;headerlink&quot; title=&quot;一.模式动机&quot;&gt;&lt;/a&gt;一.模式动机&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在软件开发中采用类似于电源适配器的设计和编码技巧被称为适配器模式。&lt;/li&gt;
&lt;li&gt;通常情况下</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式之建造者模式</title>
    <link href="https://www.fomal.cc/posts/722e57af.html"/>
    <id>https://www.fomal.cc/posts/722e57af.html</id>
    <published>2025-05-20T08:38:30.613Z</published>
    <updated>2023-01-10T07:27:58.651Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-模式动机"><a href="#一-模式动机" class="headerlink" title="一.模式动机"></a>一.模式动机</h3><p>无论是在现实世界中还是在软件系统中，都存在一些复杂的对象，它们拥有多个组成部分，如汽车，它包括车轮、方向盘、发送机等各种部件。而对于大多数用户而言，无须知道这些部件的装配细节，也几乎不会使用单独某个部件，而是使用一辆完整的汽车，可以通过建造者模式对其进行设计与描述，建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</p><p>在软件开发中，也存在大量类似汽车一样的复杂对象，它们拥有一系列成员属性，这些成员属性中有些是引用类型的成员对象。而且在这些复杂对象中，还可能存在一些限制条件，如某些属性没有赋值则复杂对象不能作为一个完整的产品使用；有些属性的赋值必须按照某个顺序，一个属性没有赋值之前，另一个属性可能无法赋值等。</p><p>复杂对象相当于一辆有待建造的汽车，而对象的属性相当于汽车的部件，建造产品的过程就相当于组合部件的过程。由于组合部件的过程很复杂，因此，这些部件的组合过程往往被“外部化”到一个称作建造者的对象里，建造者返还给客户端的是一个已经建造完毕的完整产品对象，而用户无须关心该对象所包含的属性以及它们的组装方式，这就是建造者模式的模式动机。</p><h3 id="二-模式定义"><a href="#二-模式定义" class="headerlink" title="二.模式定义"></a>二.模式定义</h3><p>建造者模式(<code>Builder Pattern</code>)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的<strong>类型和内容</strong>就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。根据中文翻译的不同，建造者模式又可以称为<strong>生成器模式</strong>。</p><h3 id="三-建造者模式包含如下角色："><a href="#三-建造者模式包含如下角色：" class="headerlink" title="三.建造者模式包含如下角色："></a>三.建造者模式包含如下角色：</h3><ul><li><code>Builder</code>：抽象建造者</li><li><code>ConcreteBuilder</code>：具体建造者</li><li><code>Director</code>：指挥者</li><li><code>Product</code>：产品角色</li></ul><p><img src="F:\blog\coderyeah\source\_posts\img\image-20230110144152537.png" alt="image-20230110144152537"></p><h4 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h4><p><img src="F:\blog\coderyeah\source\_posts\img\image-20230110144311165.png" alt="image-20230110144311165"></p><h3 id="四-代码实例"><a href="#四-代码实例" class="headerlink" title="四.代码实例"></a>四.代码实例</h3><ol><li><p><code>Builder</code>：抽象建造者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="comment">// 创建部件 A 比如创建汽车车轮</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildPartA</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建部件 B 比如创建汽车方向盘</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildPartB</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建部件 C 比如创建汽车发动机</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildPartC</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最后组装成品结果 (返回最后装配好的汽车)</span></span><br><span class="line">    <span class="comment">// 成品的组装过程不在这里进行,而是转移到下面的 Director 类中进行.</span></span><br><span class="line">    <span class="comment">// 从而实现了解耦过程和部件</span></span><br><span class="line">    Product <span class="title function_">getResult</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ConcreteBuilder</code>：具体建造者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.builder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteBuilder</span> <span class="keyword">implements</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPartA</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setNo(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt() + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;创建部件A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPartB</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setBrand(<span class="string">&quot;华为制造&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;创建部件B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPartC</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setName(<span class="string">&quot;悠悠米&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;创建部件C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 返回最后组装成品结果</span></span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Product</code>：产品角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String no; <span class="comment">// 编号</span></span><br><span class="line">    <span class="keyword">private</span> String brand; <span class="comment">// 品牌</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(String no)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&#x27;&quot;</span> + no + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Director</code>：指挥者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;<span class="comment">// 用于组装部件</span></span><br><span class="line">    Builder builder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Director</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将部件 partA partB partC 最后组成复杂对象</span></span><br><span class="line">    <span class="comment">// 这里是将车轮 方向盘和发动机组装成汽车的过程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">        builder.buildPartA();</span><br><span class="line">        builder.buildPartB();</span><br><span class="line">        builder.buildPartC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123; <span class="comment">// builder模式的调用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConcreteBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteBuilder</span>();</span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(builder);</span><br><span class="line">        director.construct();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> builder.getResult();</span><br><span class="line">        System.out.println(product);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="img/image-20230110151816133.png" alt="image-20230110151816133"></p><h3 id="五-模式分析"><a href="#五-模式分析" class="headerlink" title="五.模式分析"></a>五.模式分析</h3><p>抽象建造者类中定义了产品的创建方法和返回方法;</p><p>建造者模式的结构中还引入了一个<strong>指挥者类Director</strong>，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象</p><p>在客户端代码中，无须关心产品对象的具体组装过程，只需确定具体建造者的类型即可，建造者模式将复杂对象的构建与对象的表现分离开来，这样使得同样的构建过程可以创建出不同的表现。</p><h3 id="六-优点"><a href="#六-优点" class="headerlink" title="六.优点"></a>六.优点</h3><ul><li>在建造者模式中， <strong>客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</strong></li><li>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者， <strong>用户使用不同的具体建造者即可得到不同的产品对象</strong> 。</li><li><strong>可以更加精细地控制产品的创建过程</strong> 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li><li><strong>增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。</strong></li></ul><h3 id="七-缺点"><a href="#七-缺点" class="headerlink" title="七.缺点"></a>七.缺点</h3><ul><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li></ul><h3 id="八-模式应用"><a href="#八-模式应用" class="headerlink" title="八.模式应用"></a>八.模式应用</h3><p>在很多游戏软件中，地图包括天空、地面、背景等组成部分，人物角色包括人体、服装、装备等组成部分，可以使用建造者模式对其进行设计，通过不同的具体建造者创建不同类型的地图或人物。</p><h3 id="九-模式扩展"><a href="#九-模式扩展" class="headerlink" title="九.模式扩展"></a>九.模式扩展</h3><p>建造者模式的简化:</p><ul><li>省略抽象建造者角色：如果系统中只需要一个具体建造者的话，可以省略掉抽象建造者。</li><li>省略指挥者角色：在具体建造者只有一个的情况下，如果抽象建造者角色已经被省略掉，那么还可以省略指挥者角色，让Builder角色扮演指挥者与建造者双重角色。</li></ul><h3 id="十-建造者模式与抽象工厂模式的比较"><a href="#十-建造者模式与抽象工厂模式的比较" class="headerlink" title="十.建造者模式与抽象工厂模式的比较"></a>十.建造者模式与抽象工厂模式的比较</h3><ul><li>与抽象工厂模式相比， <strong>建造者模式返回一个组装好的完整产品</strong> ，而 <strong>抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。</strong></li><li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。</li><li>如果将抽象工厂模式看成 <strong>汽车配件生产工厂</strong> ，生产一个产品族的产品，那么建造者模式就是一个 <strong>汽车组装工厂</strong> ，通过对部件的组装可以返回一辆完整的汽车。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-模式动机&quot;&gt;&lt;a href=&quot;#一-模式动机&quot; class=&quot;headerlink&quot; title=&quot;一.模式动机&quot;&gt;&lt;/a&gt;一.模式动机&lt;/h3&gt;&lt;p&gt;无论是在现实世界中还是在软件系统中，都存在一些复杂的对象，它们拥有多个组成部分，如汽车，它包括车轮、方向盘、</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式之简单工厂模式</title>
    <link href="https://www.fomal.cc/posts/eeb5bd44.html"/>
    <id>https://www.fomal.cc/posts/eeb5bd44.html</id>
    <published>2025-05-20T08:38:30.609Z</published>
    <updated>2023-01-16T05:54:47.972Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-模式动机"><a href="#一-模式动机" class="headerlink" title="一.模式动机"></a>一.模式动机</h3><p>考虑一个简单的软件应用场景，一个软件系统可以提供多个外观不同的<strong>按钮</strong>（如圆形按钮、矩形按钮、菱形按钮等）， 这些按钮都源自同一个基类，不过在继承基类后不同的子类修改了部分属性从而使得它们可以呈现不同的外观，如果我们希望在使用这些按钮时，不需要知道这些具体按钮类的名字，<strong>只需要知道表示该按钮类的一个参数</strong>，并提供一个调用方便的方法，把该参数传入方法即可返回一个相应的按钮对象，此时，就可以使用简单工厂模式。</p><h3 id="二-模式定义"><a href="#二-模式定义" class="headerlink" title="二.模式定义"></a>二.模式定义</h3><p><strong>简单工厂模式</strong>(Simple Factory Pattern)：又称为<strong>静态工厂方法</strong>(Static Factory  Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的<strong>实例</strong>通常都<strong>具有共同的父类</strong>。</p><h3 id="三-模式结构"><a href="#三-模式结构" class="headerlink" title="三.模式结构"></a>三.模式结构</h3><p>简单工厂模式包含如下角色：</p><ul><li><p><code>Factory</code>：工厂角色</p><p>工厂角色负责实现创建所有实例的内部逻辑</p></li><li><p><code>Product</code>：抽象产品角色</p><p>抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口</p></li><li><p><code>ConcreteProduct</code>：具体产品角色</p><p>具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</p></li></ul><p><img src="img/image-20230109161635485.png" alt="image-20230109161635485"></p><h3 id="四-实序图"><a href="#四-实序图" class="headerlink" title="四.实序图"></a>四.实序图</h3><p><img src="img/image-20230109161759963.png" alt="image-20230109161759963"></p><h3 id="五-代码实例"><a href="#五-代码实例" class="headerlink" title="五.代码实例"></a>五.代码实例</h3><ol><li><h4 id="产品角色"><a href="#产品角色" class="headerlink" title="产品角色"></a>产品角色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.design;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="具体产品角色"><a href="#具体产品角色" class="headerlink" title="具体产品角色"></a>具体产品角色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.design;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/9 16:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产产品A...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.design;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductB</span> <span class="keyword">implements</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产产品B...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>工厂角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.design;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123; <span class="comment">// 简单工厂</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title function_">createProduct</span><span class="params">(String arg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(arg, <span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(arg, <span class="string">&quot;B&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="六-模式分析"><a href="#六-模式分析" class="headerlink" title="六.模式分析"></a>六.模式分析</h3><ul><li>将对象的创建和对象本身业务处理分离可以<strong>降低系统的耦合度</strong>，使得两者修改起来都相对容易。</li><li>在调用工厂类的工厂方法时，由于工厂方法是静态方法，使用起来很方便，可通过类名直接调用，而且只需要传入一个简单的参数即可，在实际开发中，还可以在调用时将所传入的<strong>参数保存在XML等格式的配置文件</strong>中，修改参数时无须修改任何源代码。</li><li>简单工厂模式最大的问题在于工厂类的<strong>职责相对过重</strong>，增加新的产品需要修改工厂类的判断逻辑，这一点与开闭原则是相违背的。</li><li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li></ul><h3 id="七-简单工厂模式的优点"><a href="#七-简单工厂模式的优点" class="headerlink" title="七.简单工厂模式的优点"></a>七.简单工厂模式的优点</h3><ul><li>工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法实现了对责任的分割，它提供了专门的工厂类用于创建对象。</li><li>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。</li><li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上<strong>提高了系统的灵活</strong>性。</li></ul><h3 id="八-简单工厂模式的缺点"><a href="#八-简单工厂模式的缺点" class="headerlink" title="八.简单工厂模式的缺点"></a>八.简单工厂模式的缺点</h3><ul><li>由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。</li><li>使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。</li><li>系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。</li><li>简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。</li></ul><h3 id="九-适用环境"><a href="#九-适用环境" class="headerlink" title="九.适用环境"></a>九.适用环境</h3><ul><li>工厂类负责创建的对象比较少：由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。</li><li>客户端只知道传入工厂类的参数，对于如何创建对象不关心：客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数。</li></ul><h3 id="十-模式应用"><a href="#十-模式应用" class="headerlink" title="十.模式应用"></a>十.模式应用</h3><ol><li>JDK类库中广泛使用了简单工厂模式，如工具类java.text.DateFormat，它用于格式化一个本地日期或者时间。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> DateFormat <span class="title function_">getDateInstance</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> DateFormat <span class="title function_">getDateInstance</span><span class="params">(<span class="type">int</span> style)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> DateFormat <span class="title function_">getDateInstance</span><span class="params">(<span class="type">int</span> style,Locale locale)</span>;</span><br></pre></td></tr></table></figure><ol><li>Java加密技术</li></ol><p>获取不同加密算法的密钥生成器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">KeyGenerator</span> <span class="variable">keyGen</span> <span class="operator">=</span> KeyGenerator.getInstance(<span class="string">&quot;DESede&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li><p>创建密码器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cipher cp=Cipher.getInstance(<span class="string">&quot;DESede&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="十一-总结"><a href="#十一-总结" class="headerlink" title="十一.总结"></a>十一.总结</h3><ul><li>创建型模式对类的实例化过程进行了抽象，能够将对象的创建与对象的使用过程分离。</li><li>简单工厂模式又称为静态工厂方法模式，它属于<strong>类创建型模式</strong>。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</li><li>简单工厂模式包含三个角色：<strong>工厂角色</strong>负责实现创建所有实例的内部逻辑；<strong>抽象产品角色</strong>是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；<strong>具体产品角色</strong>是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li><li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li><li>简单工厂模式最大的优点在于实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责，但是其最大的缺点在于工厂类<strong>不够灵活</strong>，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂。</li><li>简单工厂模式适用情况包括：工厂类负责创建的对象比较少；客户端只知道传入工厂类的参数，对于如何创建对象不关心。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-模式动机&quot;&gt;&lt;a href=&quot;#一-模式动机&quot; class=&quot;headerlink&quot; title=&quot;一.模式动机&quot;&gt;&lt;/a&gt;一.模式动机&lt;/h3&gt;&lt;p&gt;考虑一个简单的软件应用场景，一个软件系统可以提供多个外观不同的&lt;strong&gt;按钮&lt;/strong&gt;（如圆形</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式之工厂方法模式</title>
    <link href="https://www.fomal.cc/posts/cdd7d3fd.html"/>
    <id>https://www.fomal.cc/posts/cdd7d3fd.html</id>
    <published>2025-05-20T08:38:30.606Z</published>
    <updated>2023-01-10T01:52:42.345Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-模式动机"><a href="#一-模式动机" class="headerlink" title="一.模式动机"></a>一.模式动机</h3><p>现在对该系统进行修改，不再设计一个按钮工厂类来统一负责所有产品的创建，而是将具体按钮的创建过程交给专门的<strong>工厂子类</strong>去完成，我们先定义一个抽象的按钮工厂类，再定义具体的工厂类来生成圆形按钮、矩形按钮、菱形按钮等，它们实现在抽象按钮工厂类中定义的方法。这种抽象化的结果使这种结构可以在不修改具体工厂类的情况下引进新的产品，如果出现新的按钮类型，只需要为这种新类型的按钮创建一个具体的工厂类就可以获得该新按钮的实例，这一特点无疑使得工厂方法模式具有超越简单工厂模式的优越性，更加符合<strong>“开闭原则(OCP: Open-Closed Principle）：一个软件的实体应当对扩展开放，对修改关闭)</strong>。</p><h3 id="二-模式定义"><a href="#二-模式定义" class="headerlink" title="二.模式定义"></a>二.模式定义</h3><p><strong>工厂方法模式</strong>(Factory Method Pattern)又称为工厂模式，也叫虚拟构造器(Virtual  Constructor)模式或者<strong>多态工厂</strong>(Polymorphic  Factory)模式，它属于<strong>类创建型模式</strong>。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p><h3 id="三-模式结构"><a href="#三-模式结构" class="headerlink" title="三.模式结构"></a>三.模式结构</h3><p>工厂方法模式包含如下角色：</p><ul><li><code>Product</code>：抽象产品</li><li><code>ConcreteProduct</code>：具体产品</li><li><code>Factory</code>：抽象工厂</li><li><code>ConcreteFactory</code>：具体工厂</li></ul><p><img src="img/image-20230109171501106.png" alt="image-20230109171501106"></p><h3 id="四-代码实例"><a href="#四-代码实例" class="headerlink" title="四.代码实例"></a>四.代码实例</h3><ol><li><p>抽象产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;制造ProductA...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽象工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Factory</span> &#123; <span class="comment">// 工厂方法</span></span><br><span class="line">    Product <span class="title function_">create</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 9:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryA</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="五-模式分析"><a href="#五-模式分析" class="headerlink" title="五.模式分析"></a>五.模式分析</h3><p>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，<strong>核心的工厂类不再负责所有产品的创建</strong>，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责哪一个产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。</p><h3 id="六-工厂方法模式优点"><a href="#六-工厂方法模式优点" class="headerlink" title="六.工厂方法模式优点"></a>六.工厂方法模式优点</h3><ul><li>在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品<strong>对应的工厂</strong>，无须关心创建细节，甚至无须知道具体产品类的类名。</li><li>基于<strong>工厂角色</strong>和<strong>产品角色</strong>的<strong>多态</strong>性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，是因为所有的具体工厂类都具有同一抽象父类。</li><li>使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要<strong>添加一个具体工厂和具体产品</strong>就可以了。这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</li></ul><h3 id="七-工厂方法模式的缺点"><a href="#七-工厂方法模式的缺点" class="headerlink" title="七.工厂方法模式的缺点"></a>七.工厂方法模式的缺点</h3><ul><li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，<strong>系统中类的个数将成对增加</strong>，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li></ul><h3 id="八-模式应用"><a href="#八-模式应用" class="headerlink" title="八.模式应用"></a>八.模式应用</h3><p>JDBC中的工厂方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=DB;user=sa;password=&quot;</span>);</span><br><span class="line">Statement statement=conn.createStatement();</span><br><span class="line">ResultSet rs=statement.executeQuery(<span class="string">&quot;select * from UserInfo&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="九-总结"><a href="#九-总结" class="headerlink" title="九.总结"></a>九.总结</h3><ul><li>工厂方法模式又称为<strong>工厂模式</strong>，它属于<strong>类创建型模式</strong>。在工厂方法模式中，<strong>工厂父类负责定义创建产品对象的公共接口</strong>，而<strong>工厂子类则负责生成具体的产品对象</strong>，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</li><li>工厂方法模式包含四个角色：抽象产品是定义产品的接口，是工厂方法模式所创建对象的超类型，即产品对象的共同父类或接口；具体产品实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，它们之间往往一一对应；抽象工厂中声明了工厂方法，用于返回一个产品，它是工厂方法模式的核心，任何在模式中创建对象的工厂类都必须实现该接口；具体工厂是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户调用，返回一个具体产品类的实例。</li><li>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，<strong>核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做</strong>。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。</li><li>工厂方法模式的主要优点是增加新的产品类时无须修改现有系统，并封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性；其缺点在于增加新产品的同时需要增加新的工厂，导致系统类的个数成对增加，在一定程度上增加了系统的复杂性。</li><li>工厂方法模式适用情况包括：一个类不知道它所需要的对象的类；一个类通过其子类来指定创建哪个对象；将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-模式动机&quot;&gt;&lt;a href=&quot;#一-模式动机&quot; class=&quot;headerlink&quot; title=&quot;一.模式动机&quot;&gt;&lt;/a&gt;一.模式动机&lt;/h3&gt;&lt;p&gt;现在对该系统进行修改，不再设计一个按钮工厂类来统一负责所有产品的创建，而是将具体按钮的创建过程交给专门的&lt;s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="https://www.fomal.cc/posts/1a4b62fe.html"/>
    <id>https://www.fomal.cc/posts/1a4b62fe.html</id>
    <published>2025-05-20T08:38:30.601Z</published>
    <updated>2023-01-10T08:17:24.480Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-模式动机"><a href="#一-模式动机" class="headerlink" title="一.模式动机"></a>一.模式动机</h3><p>对于系统中的某些类来说，<strong>只有一个实例</strong>很重要，例如，一个系统中可以存在多个打印任务，但是只能有一个正在工作的任务；一个系统只能有一个窗口管理器或文件系统；一个系统只能有一个计时工具或ID（序号）生成器。</p><p>如何保证一个类只有一个实例并且这个实例易于被访问呢？定义一个全局变量可以确保对象随时都可以被访问，但不能防止我们实例化多个对象。</p><p>一个更好的解决办法是让类自身负责保存它的唯一实例。这个类可以保证没有其他实例被创建，并且它可以提供一个访问该实例的方法。这就是单例模式的模式动机。</p><h3 id="二-模式定义"><a href="#二-模式定义" class="headerlink" title="二.模式定义"></a>二.模式定义</h3><p>单例模式(Singleton Pattern)：<strong>单例模式确保某一个类只有一个实例</strong>，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p><p>单例模式的要点有三个：<strong>一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例</strong>。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。</p><h3 id="三-模式结构"><a href="#三-模式结构" class="headerlink" title="三.模式结构"></a>三.模式结构</h3><p>单例模式包含如下角色：</p><ul><li>Singleton：单例</li></ul><p><img src="F:\blog\coderyeah\source\_posts\img\image-20230110153503088.png" alt="image-20230110153503088"></p><h3 id="四-代码示例"><a href="#四-代码示例" class="headerlink" title="四.代码示例"></a>四.代码示例</h3><ol><li><p>单例模式-饿汉模式</p><p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，不再改变，是<strong>线程安全</strong>的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;<span class="comment">// 单例设计模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单例模式-懒汉模式（线程不安全）</p><p>① 在<code>getInstance2</code>方法上加同步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;<span class="comment">// 懒加载单例模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton2</span> <span class="variable">singleton2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton2 <span class="title function_">getInstance2</span><span class="params">()</span> &#123;<span class="comment">// 防止高并发创建多个实例</span></span><br><span class="line">        <span class="keyword">if</span> (singleton2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            singleton2 = <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 双重锁鉴定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 15:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123; <span class="comment">//懒汉单例模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">SINGLETON</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 唯一实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">// 创建实例静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (SINGLETON == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (SINGLETON == <span class="literal">null</span>) &#123;</span><br><span class="line">                    SINGLETON = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SINGLETON;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ 静态内部类（在使用时才会被加载）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 16:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123; <span class="comment">// 静态内部类解决单例懒汉模式的线程安全问题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LazyLoad</span> &#123;</span><br><span class="line">        <span class="comment">// 唯一实例对象</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">SINGLETON</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 静态方法获取实例对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LazyLoad.SINGLETON;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="五-模式分析"><a href="#五-模式分析" class="headerlink" title="五.模式分析"></a>五.模式分析</h3><p>单例模式的目的是保证<strong>一个类仅有一个实例</strong>，并提供一个访问它的<strong>全局访问点</strong>。单例模式包含的角色只有一个，就是单例类——<strong>Singleton</strong>。单例类拥有一个<strong>私有构造函数</strong>，确保用户无法通过new关键字直接实例化它。除此之外，该模式中包含一个<strong>静态私有成员变量与静态公有的工厂方法</strong>，该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</p><p>在单例模式的实现过程中，需要注意如下三点：</p><ul><li>单例类的构造函数为私有；</li><li>提供一个自身的静态私有成员变量；</li><li>提供一个公有的静态工厂方法。</li></ul><h3 id="六-优点"><a href="#六-优点" class="headerlink" title="六.优点"></a>六.优点</h3><ul><li>提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了<strong>共享</strong>的概念。</li><li>由于在系统内存中只存在一个对象，因此可以<strong>节约系统资源</strong>，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。</li><li>允许可变数目的实例。我们可以基于单例模式进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例。</li></ul><h3 id="七-缺点"><a href="#七-缺点" class="headerlink" title="七.缺点"></a>七.缺点</h3><ul><li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。</li><li>单例类的职责过重，在一定程度上违背了“<strong>单一职责原则</strong>”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。</li><li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态的丢失。</li></ul><h3 id="八-适用环境"><a href="#八-适用环境" class="headerlink" title="八.适用环境"></a>八.适用环境</h3><p>在以下情况下可以使用单例模式：</p><ul><li>系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器，或者需要考虑资源消耗太大而只允许创建一个对象。</li><li>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。</li><li>在一个系统中要求一个类只有一个实例时才应当使用单例模式。反过来，如果一个类可以有几个实例共存，就需要对单例模式进行改进，使之成为多例模式。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-模式动机&quot;&gt;&lt;a href=&quot;#一-模式动机&quot; class=&quot;headerlink&quot; title=&quot;一.模式动机&quot;&gt;&lt;/a&gt;一.模式动机&lt;/h3&gt;&lt;p&gt;对于系统中的某些类来说，&lt;strong&gt;只有一个实例&lt;/strong&gt;很重要，例如，一个系统中可以存在多个打</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式之抽象工厂模式</title>
    <link href="https://www.fomal.cc/posts/1ef33906.html"/>
    <id>https://www.fomal.cc/posts/1ef33906.html</id>
    <published>2025-05-20T08:38:30.598Z</published>
    <updated>2023-01-30T09:32:36.143Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-模式动机"><a href="#一-模式动机" class="headerlink" title="一.模式动机"></a>一.模式动机</h3><ul><li><p>在工厂方法模式中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法也具有唯一性，一般情况下，一个具体工厂中只有一个工厂方法或者一组重载的工厂方法。但是有时候我们需要<strong>一个工厂可以提供多个产品对象</strong>，而不是单一的产品对象。</p><blockquote><p>为了更清晰地理解工厂方法模式，需要先引入两个概念：</p><ul><li><strong>产品等级结构</strong> ：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，<strong>抽象电视机是父类，而具体品牌的电视机是其子类</strong>。</li><li><strong>产品族</strong> ：在抽象工厂模式中，<strong>产品族是指由同一个工厂生产的</strong>，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</li></ul></blockquote></li><li><p>当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时需要使用抽象工厂模式。</p></li><li><p>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</p><ul><li>抽象工厂模式与工厂方法模式最大的区别在于，<strong>工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建</strong> 。当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、有效率。</li></ul></li></ul><h3 id="二-模式定义"><a href="#二-模式定义" class="headerlink" title="二.模式定义"></a>二.模式定义</h3><p>抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</p><h3 id="三-模式结构"><a href="#三-模式结构" class="headerlink" title="三.模式结构"></a>三.模式结构</h3><p>抽象工厂模式包含如下角色：</p><ul><li><code>AbstractFactory</code>：抽象工厂模式的核心，包含对多个产品等级结构的声明，任何工厂类都必须实现这个接口。</li><li><code>ConcreteFactory</code>：具体工厂类是抽象工厂的一个实现，负责实例化某个产品族中的产品对象。</li><li><code>AbstractProduct</code>：抽象模式所创建的所有对象的父类，或声明所有具体产品所共有的公共接口。</li><li><code>Product</code>：抽象工厂模式所创建的真正实例。</li></ul><p><img src="img/image-20230110101800602.png" alt="image-20230110101800602"></p><h3 id="四-实序图"><a href="#四-实序图" class="headerlink" title="四.实序图"></a>四.实序图</h3><p><img src="img/image-20230110102043096.png" alt="image-20230110102043096"></p><h3 id="五-代码实例"><a href="#五-代码实例" class="headerlink" title="五.代码实例"></a>五.代码实例</h3><h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><p><img src="img/image-20230110141525649.png" alt="image-20230110141525649"></p><ol><li><p><code>AbstractFactory</code>抽象工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 11:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductFactory</span> &#123; <span class="comment">// 生产产品的工厂 就是抽象工厂</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Phone实例的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Phone <span class="title function_">createPhone</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Computer实例的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Computer <span class="title function_">createComputer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ConcreteFactory</code>具体工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 11:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWeiFactory</span> <span class="keyword">implements</span> <span class="title class_">ProductFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">createPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaWeiPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">createComputer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaWeiComputer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Product</code>抽象工厂模式所创建的真正实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWeiComputer</span> <span class="keyword">implements</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is a HUAWEI Computer...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 11:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWeiPhone</span> <span class="keyword">implements</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is a HUAWEI Phone...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>AbstractProduct</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 11:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showPhone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 11:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showPhone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试(可以自建XiaoMiFactory类并实现工厂接口，创造出小米产品)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lqs.abstractFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lqs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/10 14:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ProductFactory</span> <span class="variable">huaWeiFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuaWeiFactory</span>(); <span class="comment">// 向上转型</span></span><br><span class="line">        huaWeiFactory.createPhone().showPhone();<span class="comment">// this is a HUAWEI Phone...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="六-优点"><a href="#六-优点" class="headerlink" title="六.优点"></a>六.优点</h3><ul><li>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。另外，应用抽象工厂模式可以实现<strong>高内聚低耦合</strong>的设计目的，因此抽象工厂模式得到了广泛的应用。</li><li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。这对一些需要根据当前环境来决定其行为的软件系统来说，是一种非常实用的设计模式。</li><li>增加新的具体工厂和产品 族很方便，无须修改已有系统，符合“开闭原则”。</li></ul><h3 id="七-缺点"><a href="#七-缺点" class="headerlink" title="七.缺点"></a>七.缺点</h3><ul><li>在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。</li><li>开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。</li></ul><h3 id="八-总结"><a href="#八-总结" class="headerlink" title="八.总结"></a>八.总结</h3><ul><li>抽象工厂模式提供一个<strong>创建一系列相关或相互依赖对象的接口</strong>，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</li><li>抽象工厂模式包含四个角色：<strong>抽象工厂</strong>用于声明生成抽象产品的方法；<strong>具体工厂</strong>实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个<strong>产品族</strong>，每一个产品都位于某个<strong>产品等级</strong>结构中；<strong>抽象产品</strong>为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；<strong>具体产品</strong>定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li><li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式与工厂方法模式最大的区别在于，<strong>工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</strong>。</li><li>抽象工厂模式的主要优点是隔离了具体类的生成，使得客户并不需要知道什么被创建，而且每次可以通过具体工厂类创建一个产品族中的多个对象，增加或者替换产品族比较方便，增加新的具体工厂和产品族很方便；主要缺点在于增加新的产品等级结构很复杂，需要修改抽象工厂和所有的具体工厂类，对“开闭原则”的支持呈现倾斜性。</li><li>抽象工厂模式适用情况包括：一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；系统中有多于一个的产品族，而每次只使用其中某一产品族；属于同一个产品族的产品将在一起使用；系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-模式动机&quot;&gt;&lt;a href=&quot;#一-模式动机&quot; class=&quot;headerlink&quot; title=&quot;一.模式动机&quot;&gt;&lt;/a&gt;一.模式动机&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在工厂方法模式中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法也具有</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何在项目中使用百度地图API进行地理位置选择？</title>
    <link href="https://www.fomal.cc/posts/5d0387a1.html"/>
    <id>https://www.fomal.cc/posts/5d0387a1.html</id>
    <published>2025-05-20T08:38:30.594Z</published>
    <updated>2022-09-28T11:52:23.655Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-项目需求（举例）"><a href="#一-项目需求（举例）" class="headerlink" title="一. 项目需求（举例）"></a>一. 项目需求（举例）</h3><p>寻主功能需要推送离用户最近的线下门店，系统需要将用户的输入的地址解析为经纬度。再通过经纬度计算哪一家店铺离用户地址最近。</p><p>实现地址输入提示，手动输入的地址不完整。</p><h3 id="二-百度地图开发平台"><a href="#二-百度地图开发平台" class="headerlink" title="二.  百度地图开发平台"></a>二.  百度地图开发平台</h3><p>百度地图提供了很多开发的api，方便开发者接入到自己应用中。我们根据用户注册的地址，在百度地图进行标注，方便系统管理员管理</p><p>主站地址：<a href="http://lbsyun.baidu.com/">http://lbsyun.baidu.com/</a></p><ul><li><p>注册成功申请成为开发者后，创建应用-申请AK</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">应用名称：项目名</span><br><span class="line">应用类型：浏览器端</span><br><span class="line">启用服务：全选，特别是逆地址</span><br><span class="line">白名单：* - 表示所有网址都可以访问</span><br></pre></td></tr></table></figure></li><li><p>测试地图功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1.0, user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>, <span class="selector-tag">html</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">font-family</span>:<span class="string">&quot;微软雅黑&quot;</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#l-map</span>&#123;<span class="attribute">height</span>:<span class="number">300px</span>;<span class="attribute">width</span>:<span class="number">100%</span>;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#r-result</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//api.map.baidu.com/api?v=2.0&amp;ak=LSNHTIDvIKtkv7UgAUKfStSz4QU74osS&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>关键字输入提示词条<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;l-map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;r-result&quot;</span>&gt;</span>请输入:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;suggestId&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百度&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;searchResultPanel&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:1px solid #C0C0C0;width:150px;height:auto; display:none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 百度地图API功能</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">G</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Map</span>(<span class="string">&quot;l-map&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// map.centerAndZoom(&quot;成都&quot;,12);     // 初始化地图,设置城市和地图级别。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ac = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Autocomplete</span>(    <span class="comment">//建立一个自动完成的对象</span></span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="string">&quot;input&quot;</span> : <span class="string">&quot;suggestId&quot;</span></span></span><br><span class="line"><span class="language-javascript">            ,<span class="string">&quot;location&quot;</span> : map</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    ac.<span class="title function_">addEventListener</span>(<span class="string">&quot;onhighlight&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;  <span class="comment">//鼠标放在下拉列表上的事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> _value = e.<span class="property">fromitem</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e.<span class="property">fromitem</span>.<span class="property">index</span> &gt; -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            value = _value.<span class="property">province</span> +  _value.<span class="property">city</span> +  _value.<span class="property">district</span> +  _value.<span class="property">street</span> +  _value.<span class="property">business</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        str = <span class="string">&quot;FromItem&lt;br /&gt;index = &quot;</span> + e.<span class="property">fromitem</span>.<span class="property">index</span> + <span class="string">&quot;&lt;br /&gt;value = &quot;</span> + value;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e.<span class="property">toitem</span>.<span class="property">index</span> &gt; -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            _value = e.<span class="property">toitem</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            value = _value.<span class="property">province</span> +  _value.<span class="property">city</span> +  _value.<span class="property">district</span> +  _value.<span class="property">street</span> +  _value.<span class="property">business</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        str += <span class="string">&quot;&lt;br /&gt;ToItem&lt;br /&gt;index = &quot;</span> + e.<span class="property">toitem</span>.<span class="property">index</span> + <span class="string">&quot;&lt;br /&gt;value = &quot;</span> + value;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">G</span>(<span class="string">&quot;searchResultPanel&quot;</span>).<span class="property">innerHTML</span> = str;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> myValue;</span></span><br><span class="line"><span class="language-javascript">    ac.<span class="title function_">addEventListener</span>(<span class="string">&quot;onconfirm&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;    <span class="comment">//鼠标点击下拉列表后的事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> _value = e.<span class="property">item</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        myValue = _value.<span class="property">province</span> +  _value.<span class="property">city</span> +  _value.<span class="property">district</span> +  _value.<span class="property">street</span> +  _value.<span class="property">business</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">G</span>(<span class="string">&quot;searchResultPanel&quot;</span>).<span class="property">innerHTML</span> =<span class="string">&quot;onconfirm&lt;br /&gt;index = &quot;</span> + e.<span class="property">item</span>.<span class="property">index</span> + <span class="string">&quot;&lt;br /&gt;myValue = &quot;</span> + myValue;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setPlace</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">setPlace</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        map.<span class="title function_">clearOverlays</span>();    <span class="comment">//清除地图上所有覆盖物</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">myFun</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> pp = local.<span class="title function_">getResults</span>().<span class="title function_">getPoi</span>(<span class="number">0</span>).<span class="property">point</span>;    <span class="comment">//获取第一个智能搜索的结果</span></span></span><br><span class="line"><span class="language-javascript">            map.<span class="title function_">centerAndZoom</span>(pp, <span class="number">18</span>);</span></span><br><span class="line"><span class="language-javascript">            map.<span class="title function_">addOverlay</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Marker</span>(pp));    <span class="comment">//添加标注</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> local = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">LocalSearch</span>(map, &#123; <span class="comment">//智能搜索</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">onSearchComplete</span>: myFun</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        local.<span class="title function_">search</span>(myValue);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="三-vue集成百度地图api"><a href="#三-vue集成百度地图api" class="headerlink" title="三. vue集成百度地图api"></a>三. vue集成百度地图api</h3><h4 id="1-安装百度地图-在当前项目路径下安装"><a href="#1-安装百度地图-在当前项目路径下安装" class="headerlink" title="1. 安装百度地图(在当前项目路径下安装)"></a>1. 安装百度地图(在当前项目路径下安装)</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install --save vue-baidu-map</span><br></pre></td></tr></table></figure><h4 id="2-全局引入百度地图"><a href="#2-全局引入百度地图" class="headerlink" title="2. 全局引入百度地图"></a>2. 全局引入百度地图</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在main.<span class="property">js</span>中引入：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BaiduMap</span> <span class="keyword">from</span> <span class="string">&#x27;vue-baidu-map&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">BaiduMap</span>, &#123;</span><br><span class="line">    <span class="comment">/* Visit http://lbsyun.baidu.com/apiconsole/key for details about app key. */</span></span><br><span class="line">    <span class="attr">ak</span>: <span class="string">&#x27;4RWmQlKQkGgdOUuDqaVbkjBg2IY3sjh0&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-地图展示框"><a href="#3-地图展示框" class="headerlink" title="3. 地图展示框"></a>3. 地图展示框</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      &lt;el-form-item prop=&quot;address&quot; label=&quot;店铺地址&quot;&gt;</span><br><span class="line">        &lt;el-input type=&quot;text&quot; v-model=&quot;shop.address&quot; auto-complete=&quot;off&quot; placeholder=&quot;请输入地址！&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;el-button size=&quot;small&quot; type=&quot;primary&quot; @click=&quot;selectAddress&quot;&gt;选择&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--百度地图--&gt;</span><br><span class="line">&lt;el-dialog</span><br><span class="line">    title=&quot;选择地址&quot;</span><br><span class="line">    :visible.sync=&quot;dialogVisable&quot;</span><br><span class="line">    width=&quot;30%&quot;&gt;</span><br><span class="line">  &lt;baidu-map :center=&quot;&#123;lng: 104.06, lat: 30.67&#125;&quot; :zoom=&quot;11&quot;&gt;</span><br><span class="line">    &lt;bm-view class=&quot;map&quot;&gt;&lt;/bm-view&gt;</span><br><span class="line">    &lt;bm-control :offset=&quot;&#123;width: &#x27;10px&#x27;, height: &#x27;10px&#x27;&#125;&quot;&gt;</span><br><span class="line">      &lt;bm-auto-complete v-model=&quot;keyword&quot; :sugStyle=&quot;&#123;zIndex: 2100&#125;&quot;&gt;</span><br><span class="line">        &lt;div style=&quot;margin-bottom:10px&quot;&gt;</span><br><span class="line">          &lt;input id=&quot;searchInput&quot; type=&quot;text&quot; placeholder=&quot;请输入关键字&quot; class=&quot;searchinput&quot;/&gt;</span><br><span class="line">          &lt;el-button type=&quot;success&quot; @click=&quot;selectAddressConfirm&quot;&gt;确定&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/bm-auto-complete&gt;</span><br><span class="line">    &lt;/bm-control&gt;</span><br><span class="line">    &lt;bm-local-search :keyword=&quot;keyword&quot; :auto-viewport=&quot;true&quot; &gt;&lt;/bm-local-search&gt;</span><br><span class="line">  &lt;/baidu-map&gt;</span><br><span class="line">  &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">    &lt;el-button @click=&quot;dialogVisable=false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;selectAddressConfirm&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure><h4 id="4-业务代码"><a href="#4-业务代码" class="headerlink" title="4. 业务代码"></a>4. 业务代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//百度地址的业务逻辑</span></span><br><span class="line"><span class="title function_">selectAddressConfirm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//获取值搜索框值,设置给地址</span></span><br><span class="line">  <span class="keyword">var</span> searchInputV = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;searchInput&quot;</span>).<span class="property">value</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">shop</span>.<span class="property">address</span> = searchInputV;</span><br><span class="line">  <span class="comment">//关闭对话框</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dialogVisable</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">selectAddress</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dialogVisable</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="四-HTML页面输入地址自动提示"><a href="#四-HTML页面输入地址自动提示" class="headerlink" title="四. HTML页面输入地址自动提示"></a>四. HTML页面输入地址自动提示</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入百度地图 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//api.map.baidu.com/api?v=2.0&amp;ak=LSNHTIDvIKtkv7UgAUKfStSz4QU74osS&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 引入vue和axios --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/plugins/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/plugins/axios/dist/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- axios全局配置 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/common.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>引入js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 百度地图API功能</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">G</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Map</span>(<span class="string">&quot;&quot;</span>); <span class="comment">//没有1-map就删除掉，但是必须传递一个值，空字符串都行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//map.centerAndZoom(&quot;北京&quot;,12);                   // 初始化地图,设置城市和地图级别。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ac = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Autocomplete</span>(    <span class="comment">//建立一个自动完成的对象</span></span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;input&quot;</span>: <span class="string">&quot;suggestId&quot;</span></span></span><br><span class="line"><span class="language-javascript">            , <span class="string">&quot;location&quot;</span>: map</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    ac.<span class="title function_">addEventListener</span>(<span class="string">&quot;onhighlight&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;  <span class="comment">//鼠标放在下拉列表上的事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> _value = e.<span class="property">fromitem</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e.<span class="property">fromitem</span>.<span class="property">index</span> &gt; -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            value = _value.<span class="property">province</span> + _value.<span class="property">city</span> + _value.<span class="property">district</span> + _value.<span class="property">street</span> + _value.<span class="property">business</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        str = <span class="string">&quot;FromItem&lt;br /&gt;index = &quot;</span> + e.<span class="property">fromitem</span>.<span class="property">index</span> + <span class="string">&quot;&lt;br /&gt;value = &quot;</span> + value;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e.<span class="property">toitem</span>.<span class="property">index</span> &gt; -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            _value = e.<span class="property">toitem</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            value = _value.<span class="property">province</span> + _value.<span class="property">city</span> + _value.<span class="property">district</span> + _value.<span class="property">street</span> + _value.<span class="property">business</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        str += <span class="string">&quot;&lt;br /&gt;ToItem&lt;br /&gt;index = &quot;</span> + e.<span class="property">toitem</span>.<span class="property">index</span> + <span class="string">&quot;&lt;br /&gt;value = &quot;</span> + value;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//G(&quot;searchResultPanel&quot;).innerHTML = str;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> myValue;</span></span><br><span class="line"><span class="language-javascript">    ac.<span class="title function_">addEventListener</span>(<span class="string">&quot;onconfirm&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;    <span class="comment">//鼠标点击下拉列表后的事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> _value = e.<span class="property">item</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        myValue = _value.<span class="property">province</span> + _value.<span class="property">city</span> + _value.<span class="property">district</span> + _value.<span class="property">street</span> + _value.<span class="property">business</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//G(&quot;searchResultPanel&quot;).innerHTML =&quot;onconfirm&lt;br /&gt;index = &quot; + e.item.index + &quot;&lt;br /&gt;myValue = &quot; + myValue;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//将百度地图的地址赋值给 数据模型</span></span></span><br><span class="line"><span class="language-javascript">        vue.<span class="property">searchMasterMsg</span>.<span class="property">address</span> = myValue;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setPlace</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">setPlace</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        map.<span class="title function_">clearOverlays</span>();    <span class="comment">//清除地图上所有覆盖物</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">myFun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> pp = local.<span class="title function_">getResults</span>().<span class="title function_">getPoi</span>(<span class="number">0</span>).<span class="property">point</span>;    <span class="comment">//获取第一个智能搜索的结果</span></span></span><br><span class="line"><span class="language-javascript">            map.<span class="title function_">centerAndZoom</span>(pp, <span class="number">18</span>);</span></span><br><span class="line"><span class="language-javascript">            map.<span class="title function_">addOverlay</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Marker</span>(pp));    <span class="comment">//添加标注</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> local = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">LocalSearch</span>(map, &#123; <span class="comment">//智能搜索</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">onSearchComplete</span>: myFun</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        local.<span class="title function_">search</span>(myValue);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输入框定义<code>suggestId</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;am-form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;suggestId&quot;</span> <span class="attr">class</span>=<span class="string">&quot;am-form-label&quot;</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;am-form-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;suggestId&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;searchMasterMsg.address&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入地址&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;am-btn am-btn-danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;publish&quot;</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">publish</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//string - boolean不行  那就string - int - boolean就可以了 1==true，0==false</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>.<span class="property">gender</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>.<span class="property">gender</span> = <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>.<span class="property">gender</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&quot;/searchMasterMsg/publish&quot;</span>, <span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//发布成功后就跳转到主页</span></span><br><span class="line">        result = result.<span class="property">data</span>;</span><br><span class="line">        <span class="keyword">if</span> (result.<span class="property">success</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;发布成功！&quot;</span>);</span><br><span class="line">            location.<span class="property">href</span> = <span class="string">&quot;/index.html&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(result.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;系统错误&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>addEventListener方法中添加一句代码，这样地址才能传递到后端</p><p><code>vue.searchMasterMsg.address = myValue;</code></p></li><li><p>要注释点G(“searchResultPanel”),这个是用来显示地图的，没有这个id属性</p></li></ul><p><strong>vue挂在实例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#myDiv&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">loginInfo</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">searchMasterMsg</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;小七&#x27;</span>,</span><br><span class="line">                <span class="attr">price</span>: <span class="number">10</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">gender</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">coatColor</span>: <span class="string">&#x27;黑色&#x27;</span>,</span><br><span class="line">                <span class="attr">resources</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">petType</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">address</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;二哈寻主&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">publish</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//string - boolean不行  那就string - int - boolean就可以了 1==true，0==false</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>.<span class="property">gender</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>.<span class="property">gender</span> = <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>.<span class="property">gender</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&quot;/searchMasterMsg/publish&quot;</span>, <span class="variable language_">this</span>.<span class="property">searchMasterMsg</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//发布成功后就跳转到主页</span></span><br><span class="line">                result = result.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">if</span> (result.<span class="property">success</span>) &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&quot;发布成功！&quot;</span>);</span><br><span class="line">                    location.<span class="property">href</span> = <span class="string">&quot;/index.html&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(result.<span class="property">msg</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;系统错误&quot;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> loginInfo = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;loginInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (loginInfo) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">loginInfo</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(loginInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="五-工具类"><a href="#五-工具类" class="headerlink" title="五.  工具类"></a>五.  工具类</h3><h4 id="1-解析地址经纬度"><a href="#1-解析地址经纬度" class="headerlink" title="1. 解析地址经纬度"></a>1. 解析地址经纬度</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存放经纬度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="comment">//经度</span></span><br><span class="line">    <span class="keyword">private</span> Double lng;</span><br><span class="line">    <span class="comment">//维度</span></span><br><span class="line">    <span class="keyword">private</span> Double lat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-位置工具类"><a href="#2-位置工具类" class="headerlink" title="2. 位置工具类"></a>2. 位置工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.coderyeah.org.domain.Shop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 位置相关工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistanceUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给一个地址 - 算出这个地址的经纬度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Point <span class="title function_">getPoint</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">Application_ID</span> <span class="operator">=</span> <span class="string">&quot;PQ9FAt6qg7taDWj6LLABYO7u6bSETXhD&quot;</span>;<span class="comment">//配置上自己的百度地图应用的AK</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sCurrentLine;</span><br><span class="line">            String sTotalString;</span><br><span class="line">            sCurrentLine = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            sTotalString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            InputStream l_urlStream;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">l_url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://api.map.baidu.com/geocoding/v3/?address=&quot;</span> + address + <span class="string">&quot;&amp;output=json&amp;ak=&quot;</span> + Application_ID + <span class="string">&quot;&amp;callback=showLocation&quot;</span>);</span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">l_connection</span> <span class="operator">=</span> (HttpURLConnection) l_url.openConnection();</span><br><span class="line">            l_connection.connect();</span><br><span class="line">            l_urlStream = l_connection.getInputStream();</span><br><span class="line">            java.io.<span class="type">BufferedReader</span> <span class="variable">l_reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(l_urlStream));</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> l_reader.readLine();</span><br><span class="line">            System.out.println(str);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用经度分割返回的网页代码</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;,&quot;</span> + <span class="string">&quot;\&quot;&quot;</span> + <span class="string">&quot;lat&quot;</span> + <span class="string">&quot;\&quot;&quot;</span> + <span class="string">&quot;:&quot;</span>;</span><br><span class="line">            String strs[] = str.split(s, <span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;\&quot;&quot;</span> + <span class="string">&quot;lng&quot;</span> + <span class="string">&quot;\&quot;&quot;</span> + <span class="string">&quot;:&quot;</span>;</span><br><span class="line">            String a[] = strs[<span class="number">0</span>].split(s1, <span class="number">2</span>);</span><br><span class="line">            s1 = <span class="string">&quot;&#125;&quot;</span> + <span class="string">&quot;,&quot;</span> + <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">            String a1[] = strs[<span class="number">1</span>].split(s1, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>();</span><br><span class="line">            point.setLng(Double.valueOf(a[<span class="number">1</span>]));</span><br><span class="line">            point.setLat(Double.valueOf(a1[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">return</span> point;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地球半径,进行经纬度运算需要用到的数据之一</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">EARTH_RADIUS</span> <span class="operator">=</span> <span class="number">6378137</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据坐标点获取弧度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">rad</span><span class="params">(<span class="type">double</span> d)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> d * Math.PI / <span class="number">180.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据两点间经纬度坐标（double值），计算两点间距离，单位为米</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point1 A点坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point2 B点坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">getDistance</span><span class="params">(Point point1, Point point2)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">radLat1</span> <span class="operator">=</span> rad(point1.getLat());</span><br><span class="line">        <span class="type">double</span> <span class="variable">radLat2</span> <span class="operator">=</span> rad(point2.getLat());</span><br><span class="line">        <span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> radLat1 - radLat2;</span><br><span class="line">        <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> rad(point1.getLng()) - rad(point2.getLng());</span><br><span class="line">        <span class="type">double</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">2</span> * Math.asin(Math.sqrt(Math.pow(Math.sin(a / <span class="number">2</span>), <span class="number">2</span>) +</span><br><span class="line">                Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / <span class="number">2</span>), <span class="number">2</span>)));</span><br><span class="line">        s = s * EARTH_RADIUS;</span><br><span class="line">        s = Math.round(s * <span class="number">10000</span>) / <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据两点间经纬度坐标（double值），计算两点间距离，单位为米</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point 用户指定的地址坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shops 商店</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Shop <span class="title function_">getNearestShop</span><span class="params">(Point point, List&lt;Shop&gt; shops)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果传过来的集合只有一家店铺,那么直接将这家店铺的信息返回就是最近的店铺了</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> shops.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//获取集合中第一家店铺到指定地点的距离</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">distance</span> <span class="operator">=</span> getDistance(point, getPoint(shops.get(<span class="number">0</span>).getAddress()));</span><br><span class="line">        <span class="type">double</span> <span class="variable">minDistance</span> <span class="operator">=</span> distance;</span><br><span class="line">        <span class="comment">//如果有多家店铺,那么就和第一家店铺到指定地点的距离做比较</span></span><br><span class="line">        <span class="keyword">if</span> (shops.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; shops.size(); i++) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">distanceTmp</span> <span class="operator">=</span> getDistance(point, getPoint(shops.get(i).getAddress()));</span><br><span class="line">                <span class="keyword">if</span> (distanceTmp &lt; minDistance) &#123;</span><br><span class="line">                    shop = shops.get(i);</span><br><span class="line">                    minDistance = distanceTmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minDistance &gt; <span class="number">50000</span>) &#123; <span class="comment">//大于50公里，没有合适的店铺</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(getPoint(<span class="string">&quot;成都市天府广场&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-业务代码（示例）"><a href="#3-业务代码（示例）" class="headerlink" title="3. 业务代码（示例）"></a>3. 业务代码（示例）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.coderyeah.search.service.impl;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coderyeah</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 针对表【t_search_master_msg】的数据库操作Service实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2022-09-28 10:43:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SearchMasterMsgServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SearchMasterMsgMapper, SearchMasterMsg&gt; <span class="keyword">implements</span> <span class="title class_">SearchMasterMsgService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper employeeMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SearchMasterMsgMapper searchMasterMsgMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BaiduAiAuditService baiduAiAuditService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SearchMasterMsgAuditLogMapper logMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ShopMapper shopMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span><span class="comment">// 开启事务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">publish</span><span class="params">(SearchMasterMsg searchMasterMsg, HttpServletRequest req)</span> &#123;</span><br><span class="line">        <span class="comment">// 参数校验</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(searchMasterMsg.getAddress()) || StrUtil.isBlank(searchMasterMsg.getName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;参数错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取当前寻主消息发布人</span></span><br><span class="line">        <span class="type">LoginInfo</span> <span class="variable">loginInfo</span> <span class="operator">=</span> LoginContext.getLoginInfo(req);</span><br><span class="line">        <span class="comment">// 找到当前loginInfo的user对象</span></span><br><span class="line">        <span class="keyword">assert</span> loginInfo != <span class="literal">null</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .eq(User::getLogininfoId, loginInfo.getId()));</span><br><span class="line">        <span class="comment">// 保存寻主消息</span></span><br><span class="line">        searchMasterMsg.setUserId(user.getId());</span><br><span class="line">        searchMasterMsgMapper.insert(searchMasterMsg);</span><br><span class="line">        <span class="comment">// 百度ai智能审核</span></span><br><span class="line">        <span class="comment">// 审核文本内容</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">bool1</span> <span class="operator">=</span> baiduAiAuditService.textAudit(searchMasterMsg.getName() + searchMasterMsg.getTitle() + searchMasterMsg.getCoatColor());</span><br><span class="line">        <span class="comment">// 审核图片</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">bool2</span> <span class="operator">=</span> baiduAiAuditService.imageAudit(searchMasterMsg.getResources());</span><br><span class="line">        <span class="comment">// 提交审核日志</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">SearchMasterMsgAuditLog</span> <span class="variable">log</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchMasterMsgAuditLog</span>();</span><br><span class="line">        log.setMsgId(searchMasterMsg.getId());</span><br><span class="line">        <span class="keyword">if</span> (bool1 &amp;&amp; bool2) &#123;</span><br><span class="line">            <span class="comment">// 发布消息审核成功 0-1</span></span><br><span class="line">            searchMasterMsg.setState(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 查询所有店铺</span></span><br><span class="line">            <span class="keyword">final</span> List&lt;Shop&gt; shops = shopMapper.selectList(<span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;());</span><br><span class="line">            <span class="comment">// 获取发布人位置的经纬度</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> DistanceUtils.getPoint(searchMasterMsg.getAddress());</span><br><span class="line">            <span class="comment">// 获取距离最近的店铺</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Shop</span> <span class="variable">nearestShop</span> <span class="operator">=</span> DistanceUtils.getNearestShop(point, shops);</span><br><span class="line">            <span class="keyword">if</span> (nearestShop != <span class="literal">null</span>) &#123;</span><br><span class="line">                searchMasterMsg.setState(<span class="number">2</span>);</span><br><span class="line">                searchMasterMsg.setShopId(nearestShop.getId());</span><br><span class="line">                <span class="comment">// 更新发布信息</span></span><br><span class="line">                searchMasterMsgMapper.updateById(searchMasterMsg);</span><br><span class="line">                <span class="comment">// 发送短信通知店铺管理员</span></span><br><span class="line">                <span class="comment">// 通过shopId查找店铺管理员</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;Employee&gt;().eq(Employee::getShopId, nearestShop.getId()));</span><br><span class="line"><span class="comment">//                SmsUtils.sendSms(employee.getPhone(), &quot;您有新的订单啦！请前往&quot; + searchMasterMsg.getAddress() + &quot;完成收购！&quot;);</span></span><br><span class="line">                System.out.println(<span class="string">&quot;您有新的订单啦！请前往&quot;</span> + searchMasterMsg.getAddress() + <span class="string">&quot;完成收购！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 放入寻主池</span></span><br><span class="line">                searchMasterMsg.setState(<span class="number">3</span>);</span><br><span class="line">                <span class="comment">// 更新发布信息</span></span><br><span class="line">                searchMasterMsgMapper.updateById(searchMasterMsg);</span><br><span class="line">            &#125;</span><br><span class="line">            log.setState(<span class="number">1</span>); <span class="comment">// 审核成功</span></span><br><span class="line">            log.setNote(<span class="string">&quot;AI审核通过&quot;</span>);</span><br><span class="line">            <span class="comment">// 保存审核日志</span></span><br><span class="line">            logMapper.insert(log);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 审核失败</span></span><br><span class="line">            log.setState(<span class="number">0</span>); <span class="comment">// 审核成功</span></span><br><span class="line">            log.setNote(<span class="string">&quot;AI审核未通过&quot;</span>);</span><br><span class="line">            logMapper.insert(log);</span><br><span class="line">              <span class="comment">// 删除寻主消息 避免多次添加</span></span><br><span class="line">            searchMasterMsgMapper.deleteById(searchMasterMsg.getId());</span><br><span class="line"><span class="comment">//            SmsUtils.sendSms(user.getPhone(),&quot;审核未通过,请重新编辑内容后上传！！！&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;发布失败,请修改信息后再次提交&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;发布成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-项目需求（举例）&quot;&gt;&lt;a href=&quot;#一-项目需求（举例）&quot; class=&quot;headerlink&quot; title=&quot;一. 项目需求（举例）&quot;&gt;&lt;/a&gt;一. 项目需求（举例）&lt;/h3&gt;&lt;p&gt;寻主功能需要推送离用户最近的线下门店，系统需要将用户的输入的地址解析为经</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何使用短信验证码完成注册功能</title>
    <link href="https://www.fomal.cc/posts/d57e0a92.html"/>
    <id>https://www.fomal.cc/posts/d57e0a92.html</id>
    <published>2025-05-20T08:38:30.590Z</published>
    <updated>2022-09-15T15:57:07.975Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-MD5加密工具类"><a href="#一-MD5加密工具类" class="headerlink" title="一. MD5加密工具类"></a>一. MD5加密工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码加密工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Md5Utils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypByMd5</span><span class="params">(String context)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            md.update(context.getBytes());<span class="comment">//update处理  </span></span><br><span class="line">            <span class="type">byte</span> [] encryContext = md.digest();<span class="comment">//调用该方法完成计算  </span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0</span>; offset &lt; encryContext.length; offset++) &#123;<span class="comment">//做相应的转化（十六进制）  </span></span><br><span class="line">                i = encryContext[offset];</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">0</span>) i += <span class="number">256</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">16</span>) buf.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                buf.append(Integer.toHexString(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> buf.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="二-短信服务"><a href="#二-短信服务" class="headerlink" title="二. 短信服务"></a>二. 短信服务</h3><p>短信验证，只有三大运营商具有短信发送的能力。要发送短信只有找三大运营，或者中间商。简单说就是要找第三方的短信平台。常见的有阿里云，京东智联云，乐讯通等等非常多。举例使用网建短信通：<a href="http://www.smschinese.cn/">http://www.smschinese.cn/</a></p><ol><li><p>操作流程</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">点击左上角首页 -&gt; API接口 -&gt; 网建SMS短信通API接口地址 -&gt; UTF<span class="number">-8</span>编码发送短信接口：</span><br><span class="line">http:<span class="comment">//utf8.api.smschinese.cn/?Uid=本站用户名&amp;Key=接口短信密钥&amp;smsMob=手机号码&amp;smsText=验证码:8888</span></span><br><span class="line">本站用户名Uid：注册时用户名</span><br><span class="line">接口安全密钥key：刚刚看到的密钥</span><br><span class="line">手机号码smsMob：手机号码</span><br><span class="line">短信内容smsText：随便写</span><br><span class="line">api接口中有发送短信的各个对应状态：发送了一条，就只剩下<span class="number">4</span>条了</span><br></pre></td></tr></table></figure></li><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主要用于后端发送http请求--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 后端发送http请求 - 一般用在调用三方接口时会用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>发送短信工具类（官网也有相应代码可参考）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.coderyeah.basic.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.methods.PostMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信发送工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UID</span> <span class="operator">=</span> <span class="string">&quot;codermyth&quot;</span>;</span><br><span class="line">    <span class="comment">//秘钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="string">&quot;29766C0677741B5DA2CE2203260365DB&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phones  手机们 a,b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 发送内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sendSms</span><span class="params">(String phones, String content)</span> &#123;</span><br><span class="line">        <span class="type">PostMethod</span> <span class="variable">post</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpClient</span>();</span><br><span class="line">            post = <span class="keyword">new</span> <span class="title class_">PostMethod</span>(<span class="string">&quot;http://utf8.api.smschinese.cn&quot;</span>);</span><br><span class="line">            post.addRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded;charset=utf8&quot;</span>);<span class="comment">//在头文件中设置转码</span></span><br><span class="line">            NameValuePair[] data = &#123;<span class="keyword">new</span> <span class="title class_">NameValuePair</span>(<span class="string">&quot;Uid&quot;</span>, SmsUtils.UID),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">NameValuePair</span>(<span class="string">&quot;Key&quot;</span>, SmsUtils.KEY),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">NameValuePair</span>(<span class="string">&quot;smsMob&quot;</span>, phones),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">NameValuePair</span>(<span class="string">&quot;smsText&quot;</span>, content)&#125;;</span><br><span class="line">            post.setRequestBody(data);</span><br><span class="line"></span><br><span class="line">            client.executeMethod(post);</span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> post.getStatusCode();</span><br><span class="line">            System.out.println(<span class="string">&quot;statusCode:&quot;</span> + statusCode); <span class="comment">//200 404 400</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(post.getResponseBodyAsString().getBytes(<span class="string">&quot;utf8&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (post != <span class="literal">null</span>) &#123;</span><br><span class="line">                post.releaseConnection();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(SmsUtils.sendSms(<span class="string">&quot;18365403510&quot;</span>, <span class="string">&quot;您的验证码为：【8848】,鉴于您优秀的能力表现,您被授予玛丽叶奥特曼称号,accept it, cutie!&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-前端获取验证码接口"><a href="#三-前端获取验证码接口" class="headerlink" title="三. 前端获取验证码接口"></a>三. 前端获取验证码接口</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;verification&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;code&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;am-icon-code-fork&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;code&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;phoneUserForm.phoneCode&quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dyMobileButton&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;sendMobileCode&quot;</span>&gt;</span>获取验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取短信验证码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送验证码</span></span><br><span class="line"><span class="title function_">sendMobileCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1.判断手机号不为空</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">phoneUserForm</span>.<span class="property">phone</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;手机号不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.判断图片验证码不为空</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">phoneUserForm</span>.<span class="property">imageCode</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;图片验证码不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.获取按钮，禁用按钮  发送时灰化不能使用，发送成功倒计时60才能使用，如果发送失败立即可以发送</span></span><br><span class="line">    <span class="keyword">let</span> sendBtn = $(event.<span class="property">target</span>);</span><br><span class="line">    sendBtn.<span class="title function_">attr</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> param = &#123;</span><br><span class="line">        <span class="attr">phone</span>: <span class="variable language_">this</span>.<span class="property">phoneUserForm</span>.<span class="property">phone</span>,</span><br><span class="line">        <span class="attr">imageCode</span>: <span class="variable language_">this</span>.<span class="property">phoneUserForm</span>.<span class="property">imageCode</span>,</span><br><span class="line">        <span class="attr">imageCodeKey</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;verifyCodeKey&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.发送ajax请求</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&quot;/verifyCode/smsCode&quot;</span>, param).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> ajaxResult = res.<span class="property">data</span>;</span><br><span class="line">        <span class="keyword">if</span> (ajaxResult.<span class="property">success</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;手机验证码已经发送到您的手机，请在3分钟内使用&quot;</span>);</span><br><span class="line">            <span class="comment">//4.1.发送成：倒计时</span></span><br><span class="line">            <span class="keyword">let</span> time = <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">let</span> interval = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">//每一条倒计时减一</span></span><br><span class="line">                time = time - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//把倒计时时间搞到按钮上</span></span><br><span class="line">                sendBtn.<span class="title function_">html</span>(time + <span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">                <span class="comment">//4.2.倒计时完成恢复按钮</span></span><br><span class="line">                <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    sendBtn.<span class="title function_">html</span>(<span class="string">&quot;重新发送&quot;</span>);</span><br><span class="line">                    sendBtn.<span class="title function_">attr</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="comment">//清除定时器</span></span><br><span class="line">                    <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(interval);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//4.3.发送失败：提示，恢复按钮</span></span><br><span class="line">            sendBtn.<span class="title function_">attr</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="title function_">alert</span>(ajaxResult.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手机注册功能</span></span><br><span class="line">            <span class="title function_">phoneRegister</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">agree</span>) &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&#x27;请勾选服务协议&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//前台一般做校验：空校验，格式校验，重复密码校验</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;/user/register/phone&#x27;</span>, <span class="variable language_">this</span>.<span class="property">phoneUserForm</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//注册成功跳转到登录页面</span></span><br><span class="line">                    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">success</span>) &#123;</span><br><span class="line">                        location.<span class="property">href</span> = <span class="string">&quot;login.html&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">alert</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&quot;系统错误!&quot;</span>)</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><h3 id="四-后端实现获取短信接口"><a href="#四-后端实现获取短信接口" class="headerlink" title="四. 后端实现获取短信接口"></a>四. 后端实现获取短信接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/smsCode&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;获取短信验证码&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">getPhoneCode</span><span class="params">(<span class="meta">@RequestBody</span> PhoneCodeDTO phoneCodeDTO)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> verifyCodeService.getPhoneCode(phoneCodeDTO);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (BusinessException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           <span class="keyword">return</span> Result.fail(e.getMessage());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;系统异常,请稍后重试!&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getPhoneCode</span><span class="params">(PhoneCodeDTO phoneCodeDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> phoneCodeDTO.getPhone();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">InputImageCode</span> <span class="operator">=</span> phoneCodeDTO.getImageCode();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">imageCodeKey</span> <span class="operator">=</span> phoneCodeDTO.getImageCodeKey();</span><br><span class="line">        <span class="comment">// 1.判断参数是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(phone)) &#123;</span><br><span class="line">            <span class="comment">// 抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;电话号码不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(InputImageCode)) &#123;</span><br><span class="line">            <span class="comment">// 抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;图形验证码不能为空不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.判断图形验证码是否过期 正确</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">imageCode</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;cache:code:image:&quot;</span> + imageCodeKey);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(imageCode)) &#123;</span><br><span class="line">            <span class="comment">// 过期了</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;图形验证码已过期,请重新输入！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否一致 忽略大小写</span></span><br><span class="line">        <span class="keyword">if</span> (!InputImageCode.equalsIgnoreCase(imageCode)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;图片验证码错误,请重新输入！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 通过号码判断用户是否已经注册</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().eq(User::getPhone, phone));</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 用户已经存在</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;该手机号码已被注册过,请您直接登录...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.从redis获取短信验证码</span></span><br><span class="line">        <span class="comment">// 用来存储短信验证码  redis中存储的值是 【短信验证码:时间戳】</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(Constants.USER_REGISTER_PHONE_PREFIX + phone);</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123; <span class="comment">// 没有过期</span></span><br><span class="line">            <span class="comment">// 判断时间是否过期</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">oldTime</span> <span class="operator">=</span> Long.parseLong(value.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 一分钟之内不允许频繁操作</span></span><br><span class="line">            <span class="keyword">if</span> ((System.currentTimeMillis() - oldTime) &lt;= <span class="number">1000</span> * <span class="number">60</span>) &#123;<span class="comment">// 没过重发时间</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;操作频繁,请稍后再试!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                code = value.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 过期了</span></span><br><span class="line">            <span class="comment">// 生成验证码</span></span><br><span class="line">            code = String.valueOf(RandomUtil.randomNumbers(<span class="number">6</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存入redis 有效期3分钟</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:register:&quot;</span> + phone, code + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis(), <span class="number">3L</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">// 发送验证码短信</span></span><br><span class="line"><span class="comment">//        SmsUtils.sendSms(phone, &quot;您的验证码是&quot; + code + &quot;,请及时使用有限期为3分钟&quot;);</span></span><br><span class="line">        log.info(<span class="string">&quot;=========您的验证码是:&#123;&#125;=========&quot;</span>, code);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;获取验证码成功【&quot;</span> + code + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-MD5加密工具类&quot;&gt;&lt;a href=&quot;#一-MD5加密工具类&quot; class=&quot;headerlink&quot; title=&quot;一. MD5加密工具类&quot;&gt;&lt;/a&gt;一. MD5加密工具类&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
